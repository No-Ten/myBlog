<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringBoot-2.4.9初始化工程</title>
    <url>/myBlog/SpringBoot-2.4.9%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="SpringBoot-2-4-9初始化工程"><a href="#SpringBoot-2-4-9初始化工程" class="headerlink" title="SpringBoot-2.4.9初始化工程"></a>SpringBoot-2.4.9初始化工程</h1><p>该springboot工程一整合mysql，mybatisPlus，mybatis-plus-generator，lombok，swagger</p>
<p>仓库地址：<a href="https://github.com/No-Ten/springboot-demo">https://github.com/No-Ten/springboot-demo</a></p>
<p>通过git clone</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@github.com:No-Ten/springboot-demo.git<br></code></pre></td></tr></table></figure>



<h2 id="版本依赖"><a href="#版本依赖" class="headerlink" title="版本依赖"></a>版本依赖</h2><p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 代码自动生成器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- freemarker 模块引擎 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="mybatis-plus代码生成器"><a href="#mybatis-plus代码生成器" class="headerlink" title="mybatis-plus代码生成器"></a>mybatis-plus代码生成器</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Mybatis-Plus 自动生成代码类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generator</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 获取当前文件夹</span><br>        String currentFile = System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>);<br>        <span class="hljs-comment">// 包名</span><br>        String packageName = <span class="hljs-string">&quot;com.db&quot;</span>;<br><br>        <span class="hljs-comment">// 生成</span><br>        FastAutoGenerator.create(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/dbdemo&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>)<br>                .globalConfig(builder -&gt; &#123;<br>                    builder.author(<span class="hljs-string">&quot;xxx&quot;</span>)<br>                            <span class="hljs-comment">// 开启swagger</span><br>                            .enableSwagger()<br>                            <span class="hljs-comment">// 覆盖已生成的文件</span><br>                            .fileOverride()<br>                            <span class="hljs-comment">// 禁止打开输出目录，默认值为：true</span><br>                            .disableOpenDir()<br>                            <span class="hljs-comment">// 默认值：DateType.TIME_PACK</span><br>                            .dateType(DateType.TIME_PACK)<br>                            .outputDir(currentFile + <span class="hljs-string">&quot;/src/test/java&quot;</span>);<br>                &#125;)<br>                .packageConfig(builder -&gt; &#123;<br>                    <span class="hljs-comment">// 设置父包名</span><br>                    builder.parent(packageName)<br>                            <span class="hljs-comment">// 设置父包模块名</span><br>                            .moduleName(<span class="hljs-string">&quot;gsdb&quot;</span>)<br>                            <span class="hljs-comment">// Entity</span><br>                            .entity(<span class="hljs-string">&quot;entity&quot;</span>)<br>                            <span class="hljs-comment">// 设置dto包名</span><br>                            .other(<span class="hljs-string">&quot;dto&quot;</span>)<br>                            .mapper(<span class="hljs-string">&quot;mapper&quot;</span>)<br>                            .service(<span class="hljs-string">&quot;service&quot;</span>)<br>                            .serviceImpl(<span class="hljs-string">&quot;service/serviceImpl&quot;</span>)<br>                            .controller(<span class="hljs-string">&quot;controller&quot;</span>)<br>                            <span class="hljs-comment">// 设置mapperXml生成路径</span><br>                            .pathInfo(Collections.singletonMap(OutputFile.mapperXml,currentFile + <span class="hljs-string">&quot;/src/test/resources/&quot;</span> + packageName));<br><span class="hljs-comment">//                            .pathInfo(Collections.singletonMap(OutputFile.mapperXml,currentFile + &quot;/src/test/java/&quot; + packageName + &quot;/gsdb/mapper/mapping&quot;));</span><br>                &#125;)<br>                .strategyConfig(builder -&gt; &#123;<br>                    <span class="hljs-comment">// 设置需要生成的表名</span><br>                    builder.addInclude(<span class="hljs-string">&quot;student&quot;</span>)<br>                            <span class="hljs-comment">// 设置过滤表前缀</span><br>                            .addTablePrefix(<span class="hljs-string">&quot;t_&quot;</span>,<span class="hljs-string">&quot;c_&quot;</span>)<br>                            <span class="hljs-comment">// Entity策略配置</span><br>                            .entityBuilder()<br>                            <span class="hljs-comment">// 开启Lombok</span><br>                            .enableLombok()<br>                            <span class="hljs-comment">// 开启生成实体时生成字段注释</span><br>                            .enableTableFieldAnnotation()<br>                            <span class="hljs-comment">// Mapper策略配置</span><br>                            .mapperBuilder()<br>                            <span class="hljs-comment">// 开启@Mapper注解</span><br>                            .enableMapperAnnotation()<br>                            <span class="hljs-comment">// 启用BaseColumnList</span><br>                            <span class="hljs-comment">//.enableBaseColumnList()</span><br>                            <span class="hljs-comment">// 启用BaseResultMap生成</span><br>                            <span class="hljs-comment">//.enableBaseResultMap()</span><br>                            .serviceBuilder()<br>                            <span class="hljs-comment">// &quot;%sService&quot; 去掉Service接口的首字母I</span><br>                            .formatServiceFileName(<span class="hljs-string">&quot;%sService&quot;</span>)<br>                            <span class="hljs-comment">// controller策略配置</span><br>                            .controllerBuilder()<br>                            <span class="hljs-comment">// 开启生成@RestController控制器</span><br>                            .enableRestStyle()<br>                            .enableHyphenStyle();<br>                &#125;)<br>                <span class="hljs-comment">// 使用Freemarker引擎模块，默认的是Velocity引擎模板</span><br>                .templateEngine(<span class="hljs-keyword">new</span> FreemarkerTemplateEngine())<br>                .execute();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>springboo初始化工程</category>
      </categories>
      <tags>
        <tag>springboo初始化工程</tag>
      </tags>
  </entry>
  <entry>
    <title>day01-MybatisPlus入门</title>
    <url>/myBlog/day01-MybatisPlus%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="day01-MybatisPlus入门"><a href="#day01-MybatisPlus入门" class="headerlink" title="day01 MybatisPlus入门"></a>day01 MybatisPlus入门</h1><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>官网：<a href="http://mp.baomidou.com/">http://mp.baomidou.com/</a></p>
<p>参考教程：<a href="http://mp.baomidou.com/guide/">http://mp.baomidou.com/guide/</a></p>
<p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
<h1 id="二、特性"><a href="#二、特性" class="headerlink" title="二、特性"></a>二、特性</h1><ul>
<li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li>
<li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li>
<li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li>
<li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li>
<li><strong>支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer2005、SQLServer 等多种数据库</li>
<li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li>
<li><strong>支持 XML 热加载</strong>：Mapper 对应的 XML 支持热加载，对于简单的 CRUD 操作，甚至可以无 XML 启动</li>
<li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li>
<li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li>
<li><strong>支持关键词自动转义</strong>：支持数据库关键词（order、key……）自动转义，还可自定义关键词</li>
<li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li>
<li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li>
<li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li>
<li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li>
<li><strong>内置 Sql 注入剥离器</strong>：支持 Sql 注入剥离，有效预防 Sql 注入攻击</li>
</ul>
]]></content>
      <categories>
        <category>项目|谷粒学院|笔记</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>day03-项目的前端基本知识一</title>
    <url>/myBlog/day03-%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%89%8D%E7%AB%AF%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%B8%80/</url>
    <content><![CDATA[<h1 id="day03-项目的前端基本知识一"><a href="#day03-项目的前端基本知识一" class="headerlink" title="day03-项目的前端基本知识一"></a>day03-项目的前端基本知识一</h1><h1 id="es6简单使用"><a href="#es6简单使用" class="headerlink" title="es6简单使用"></a>es6简单使用</h1><h2 id="let变量作用范围"><a href="#let变量作用范围" class="headerlink" title="let变量作用范围"></a>let变量作用范围</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// es6如何定义变量 </span></span><br><span class="javascript">    <span class="hljs-comment">// js定义： var a = 1;  没有局部</span></span><br><span class="javascript">    <span class="hljs-comment">// es6定义let：有局部</span></span><br><span class="javascript">    &#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> b = <span class="hljs-number">20</span>;</span><br><span class="javascript"></span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-comment">// 2.在代码块外面输入</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(a);</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(b);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="let定义变量特点"><a href="#let定义变量特点" class="headerlink" title="let定义变量特点"></a>let定义变量特点</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> b = <span class="hljs-number">3</span>;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> b = <span class="hljs-number">4</span>; <span class="hljs-comment">//Identifier &#x27;b&#x27; has already been declared</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="const声明常量"><a href="#const声明常量" class="headerlink" title="const声明常量"></a>const声明常量</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">     <span class="hljs-comment">// 定义常量</span></span><br><span class="javascript">     <span class="hljs-keyword">const</span> PI = <span class="hljs-string">&quot;3.1415&quot;</span>;</span><br><span class="javascript">     <span class="hljs-comment">// 常量一旦定义，不能改变</span></span><br><span class="javascript">     <span class="hljs-comment">//PI = 3;    // Assignment to constant variable.</span></span><br><span class="javascript">     <span class="hljs-comment">// 定义常量必须初始化</span></span><br><span class="javascript">     <span class="hljs-comment">//const AA;  // Missing initializer in const declaration</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 传统写法</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>,b = <span class="hljs-number">2</span>, c = <span class="hljs-number">3</span>;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(a,b,c);</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// es6写法</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> [x,y,z]= [<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>];</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(x,y,z)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 定义对象</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> user = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;lucy&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>&#125;;</span><br><span class="javascript">    </span><br><span class="javascript">    <span class="hljs-comment">// 传统的取值</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> name1 = user.name;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> age1 = user.age;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(name1 + <span class="hljs-string">&quot;==&quot;</span> + age1);</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// es6获取值</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> &#123;name,age&#125; = user;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(name + <span class="hljs-string">&quot;--&quot;</span> + age);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 1使用`实现换行</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> str1 = <span class="hljs-string">`hey,</span></span><br><span class="hljs-string"><span class="javascript">    es6 demo up!`</span>;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(str1);</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 2.在符号`里面使用表达式取变量值</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> name = <span class="hljs-string">&quot;Make&quot;</span>;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> age = <span class="hljs-number">20</span>;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">let</span> str2 = <span class="hljs-string">`hello , <span class="hljs-subst">$&#123;name&#125;</span>, age is <span class="hljs-subst">$&#123;age&#125;</span>`</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(str2);</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 3.在`符号中调用方法</span></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello f1&quot;</span>;</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">let</span> str3 = <span class="hljs-string">`demo, <span class="hljs-subst">$&#123;f1()&#125;</span>`</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(str3)</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="声明对象"><a href="#声明对象" class="headerlink" title="声明对象"></a>声明对象</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">const</span> age = <span class="hljs-number">12</span>;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> name = <span class="hljs-string">&quot;lucy&quot;</span>;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 传统方式定义对象</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> p1 = &#123;<span class="hljs-attr">name</span>:name,<span class="hljs-attr">age</span>:age&#125;;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(p1);</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// es6定义变量</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> p2 = &#123;name,age&#125;;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(p2);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="定义方法简写方式"><a href="#定义方法简写方式" class="headerlink" title="定义方法简写方式"></a>定义方法简写方式</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 传统的定义方式</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> person1  = &#123;</span><br><span class="javascript">        <span class="hljs-attr">sayHi</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Hi&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    person1.sayHi();</span><br><span class="javascript">    <span class="hljs-comment">// es6</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> person2 = &#123;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Hello&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    person2.sayHi();</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="对象拓展运算符"><a href="#对象拓展运算符" class="headerlink" title="对象拓展运算符"></a>对象拓展运算符</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 1.对象复制</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> person1 = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;lucy&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">19</span>&#125;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> person2 = &#123;...person1&#125;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(person2)</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 2.对象合并</span></span><br><span class="javascript">    <span class="hljs-keyword">let</span> name = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;mary&quot;</span>&#125;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> age = &#123;<span class="hljs-attr">age</span>:<span class="hljs-number">11111</span>&#125;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> p3 = &#123;...name,...age&#125;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(p3)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 1.传统的方式创建方法</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> f1 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">m</span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> m</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-comment">//console.log(f1(1))</span></span><br><span class="javascript">    </span><br><span class="javascript">    <span class="hljs-comment">// 2.使用箭头函数</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> f2 = <span class="hljs-function"><span class="hljs-params">a</span> =&gt;</span> a</span><br><span class="javascript">    <span class="hljs-comment">//console.log(f2(2))</span></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 3.复杂一点的</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> f3 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> a + b;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(f3(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 使用箭头函数简化</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> f4 = <span class="hljs-function">(<span class="hljs-params">a,b</span>) =&gt;</span> a + b;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(f4(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>));</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h1 id="Vue入门案例"><a href="#Vue入门案例" class="headerlink" title="Vue入门案例"></a>Vue入门案例</h1><p>先将vue.js导入，编写一个HTML页面，导入vue.js文件，定义一个div显示数据，在script中new 一个Vue对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=&lt;device-width&gt;, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>      <br>        &#123;&#123; message &#125;&#125;           <span class="hljs-comment">&lt;!-- 定义一个div显示数据 --&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">new</span> Vue (&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,     <span class="hljs-comment">// 判定vue作用的范围</span></span><br><span class="javascript">            <span class="hljs-attr">data</span>:&#123;          <span class="hljs-comment">// 定义vue页面中显示的内容</span></span><br><span class="javascript">                <span class="hljs-attr">message</span>:<span class="hljs-string">&quot;Hello Vue!!&quot;</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h1 id="抽取代码块片段"><a href="#抽取代码块片段" class="headerlink" title="抽取代码块片段"></a>抽取代码块片段</h1><p>在vs code中创建代码片段：<br>文件 =&gt;  首选项 =&gt; 用户代码片段 =&gt; 新建全局代码片段/或文件夹代码片段：vue-html.code-snippets</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">&#123;<br>    &quot;vue htm&quot;: &#123;<br>        &quot;scope&quot;: &quot;html&quot;,<br>        &quot;prefix&quot;: &quot;vuehtml&quot;,<br>        &quot;body&quot;: [<br>            &quot;<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span>&quot;,<br>            &quot;<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">\</span>&quot;<span class="hljs-attr">en</span>\&quot;&gt;</span>&quot;,<br>            &quot;&quot;,<br>            &quot;<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>&quot;,<br>            &quot;    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">\</span>&quot;<span class="hljs-attr">UTF-8</span>\&quot;&gt;</span>&quot;,<br>            &quot;    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">\</span>&quot;<span class="hljs-attr">viewport</span>\&quot; <span class="hljs-attr">content</span>=<span class="hljs-string">\</span>&quot;<span class="hljs-attr">width</span>=<span class="hljs-string">device-width,</span> <span class="hljs-attr">initial-scale</span>=<span class="hljs-string">1.0\</span>&quot;&gt;</span>&quot;,<br>            &quot;    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">\</span>&quot;<span class="hljs-attr">X-UA-Compatible</span>\&quot; <span class="hljs-attr">content</span>=<span class="hljs-string">\</span>&quot;<span class="hljs-attr">ie</span>=<span class="hljs-string">edge\</span>&quot;&gt;</span>&quot;,<br>            &quot;    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>&quot;,<br>            &quot;<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>&quot;,<br>            &quot;&quot;,<br>            &quot;<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>&quot;,<br>            &quot;    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">\</span>&quot;<span class="hljs-attr">app</span>\&quot;&gt;</span>&quot;,<br>            &quot;&quot;,<br>            &quot;    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&quot;,<br>            &quot;    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">\</span>&quot;<span class="hljs-attr">vue.min.js</span>\&quot;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&quot;,<br>            &quot;    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>&quot;,<br>            &quot;        new Vue(&#123;&quot;,<br>            &quot;            el: &#x27;#app&#x27;,&quot;,<br>            &quot;            data: &#123;&quot;,<br>            &quot;                $1&quot;,<br>            &quot;            &#125;&quot;,<br>            &quot;        &#125;)&quot;,<br>            &quot;    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&quot;,<br>            &quot;<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>&quot;,<br>            &quot;&quot;,<br>            &quot;<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>&quot;,<br>        ],<br>        &quot;description&quot;: &quot;my vue template in html&quot;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="v-bind指令"><a href="#v-bind指令" class="headerlink" title="v-bind指令"></a>v-bind指令</h1><p>单项绑定，取到属性中的值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>        &#123;&#123;message&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  <br>    <span class="hljs-comment">&lt;!-- 单向绑定 --&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">:title</span> = <span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>        &#123;&#123;message&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>     <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">content</span>:<span class="hljs-string">&quot;我是标题&quot;</span>,</span><br><span class="javascript">            <span class="hljs-attr">message</span>:<span class="hljs-string">&quot;hello&quot;</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><br></code></pre></td></tr></table></figure>



<h1 id="v-model-指令"><a href="#v-model-指令" class="headerlink" title="v-model 指令"></a>v-model 指令</h1><p>双向绑定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--单向判定，如果值发生改变，只要绑定的变化--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-bind:value</span>=<span class="hljs-string">&quot;searchMap.keyWord&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--双向判定 ，如果值发生改变，所有的都会发生改变--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;searchMap.keyWord&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;searchMap.keyWord&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">searchMap</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">keyWord</span>: <span class="hljs-string">&#x27;尚硅谷&#x27;</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h1 id="v-on指令"><a href="#v-on指令" class="headerlink" title="v-on指令"></a>v-on指令</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--绑定事件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;search()&quot;</span>&gt;</span>查询<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--绑定事件简写--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;search()&quot;</span>&gt;</span>查询1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">searchMap</span>:&#123;</span><br><span class="javascript">                <span class="hljs-attr">keyWord</span>:<span class="hljs-string">&#x27;我是keyWord&#x27;</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">            <span class="hljs-comment">// 可以定义多个方法</span></span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">search</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;search...&#x27;</span>)</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">f1</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;f1...&#x27;</span>)</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h1 id="Vue修饰符"><a href="#Vue修饰符" class="headerlink" title="Vue修饰符"></a>Vue修饰符</h1><p>阻止原始的条件发生，指定提交事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;save&quot;</span> <span class="hljs-attr">v-on:submit.prevent</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;user.username&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>保存<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">            <span class="hljs-attr">user</span>:&#123;&#125;</span><br><span class="javascript">        &#125;,</span><br><span class="javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">onSubmit</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.user.username)&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;提交表单&#x27;</span>)</span><br><span class="javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                    alert(<span class="hljs-string">&#x27;请输入用户名&#x27;</span>)</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h1 id="vue指令v-if"><a href="#vue指令v-if" class="headerlink" title="vue指令v-if"></a>vue指令v-if</h1><p>条件指令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;ok&quot;</span>/&gt;</span> 是否同意<br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;ok&quot;</span>&gt;</span>尚硅谷<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-else</span>&gt;</span>谷粒学院<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">ok</span>:<span class="hljs-literal">false</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h1 id="vue指令v-for"><a href="#vue指令v-for" class="headerlink" title="vue指令v-for"></a>vue指令v-for</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;n in 10&quot;</span>&gt;</span>&#123;&#123;n&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(n,index) in 10&quot;</span>&gt;</span>&#123;&#123;n&#125;&#125;--&#123;&#123;index&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--遍历列表--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in userList&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.username&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">userList</span>:[</span><br><span class="javascript">                    &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">username</span>:<span class="hljs-string">&#x27;halen&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">10</span>&#125;,</span><br><span class="javascript">                    &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">username</span>:<span class="hljs-string">&#x27;halen&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">10</span>&#125;,</span><br><span class="javascript">                    &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">3</span>,<span class="hljs-attr">username</span>:<span class="hljs-string">&#x27;halen&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">10</span>&#125;</span><br><span class="javascript">                ]</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h1 id="vue组件"><a href="#vue组件" class="headerlink" title="vue组件"></a>vue组件</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Navbar</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span><br><span class="xml"><span class="handlebars">        new Vue(&#123;</span></span><br><span class="xml"><span class="handlebars">            el: &#x27;#app&#x27;,</span></span><br><span class="xml"><span class="handlebars">            // 定义局部组件，可以定义多个主键</span></span><br><span class="xml"><span class="handlebars">            components:&#123;</span></span><br><span class="xml"><span class="handlebars">                    &#x27;Navbar&#x27;:&#123;</span></span><br><span class="xml"><span class="handlebars">                        template:&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>学员管理<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>&#x27;</span></span><br><span class="xml"><span class="handlebars">                    &#125;</span></span><br><span class="xml"><span class="handlebars">                &#125;</span></span><br><span class="xml"><span class="handlebars">        &#125;)</span></span><br><span class="xml"><span class="handlebars">    </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>&lt;/body<br></code></pre></td></tr></table></figure>



<h1 id="vue全局组件"><a href="#vue全局组件" class="headerlink" title="vue全局组件"></a>vue全局组件</h1><p>创建一个components文件，里面再创建一个Navbar.js</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">// 定义全局组件<br>Vue.component(&#x27;Navbar&#x27;, &#123;<br>    template: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>学员管理<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>讲师管理<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>&#x27;<br>&#125;)<br></code></pre></td></tr></table></figure>

<p>在需要用的地方直接引用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Navbar</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Navbar</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;components/Navbar.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">                </span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h1 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h1><p><img src="/myBlog/day03-%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%89%8D%E7%AB%AF%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%B8%80/image-20211222125545310.png" alt="image-20211222125545310"></p>
<p>主要用到created和mounted两个方法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        hello<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">                </span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">debugger</span></span><br><span class="javascript">                <span class="hljs-comment">// 在渲染之前执行</span></span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;created...&#x27;</span>);</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">debugger</span></span><br><span class="javascript">                <span class="hljs-comment">// 在渲染之后执行</span></span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;mounted...&#x27;</span>);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br></code></pre></td></tr></table></figure>



<h1 id="vue路由"><a href="#vue路由" class="headerlink" title="vue路由"></a>vue路由</h1><p>将vue-router.min.js文件引入，编写路由</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello App!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span><br>                <span class="hljs-comment">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span><br>                <span class="hljs-comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/student&quot;</span>&gt;</span>会员管理<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/teacher&quot;</span>&gt;</span>讲师管理<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 路由出口 --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue-router.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">// 1. 定义（路由）组件。</span></span><br><span class="javascript">        <span class="hljs-comment">// 可以从其他文件 import 进来</span></span><br><span class="javascript">        <span class="hljs-keyword">const</span> Welcome = &#123; <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;欢迎&lt;/div&gt;&#x27;</span> &#125;</span><br><span class="javascript">        <span class="hljs-keyword">const</span> Student = &#123; <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;student list&lt;/div&gt;&#x27;</span> &#125;</span><br><span class="javascript">        <span class="hljs-keyword">const</span> Teacher = &#123; <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;teacher list&lt;/div&gt;&#x27;</span> &#125;</span><br><span class="javascript">        <span class="hljs-comment">// 2. 定义路由</span></span><br><span class="javascript">        <span class="hljs-comment">// 每个路由应该映射一个组件。</span></span><br><span class="javascript">        <span class="hljs-keyword">const</span> routes = [</span><br><span class="javascript">            &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/welcome&#x27;</span> &#125;, <span class="hljs-comment">//设置默认指向的路径</span></span><br><span class="javascript">            &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/welcome&#x27;</span>, <span class="hljs-attr">component</span>: Welcome &#125;,</span><br><span class="javascript">            &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/student&#x27;</span>, <span class="hljs-attr">component</span>: Student &#125;,</span><br><span class="javascript">            &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/teacher&#x27;</span>, <span class="hljs-attr">component</span>: Teacher &#125;</span><br><span class="javascript">        ]</span><br><span class="javascript">        <span class="hljs-comment">// 3. 创建 router 实例，然后传 `routes` 配置</span></span><br><span class="javascript">        <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;</span><br><span class="javascript">            routes <span class="hljs-comment">// （缩写）相当于 routes: routes</span></span><br><span class="javascript">        &#125;)</span><br><span class="javascript">        <span class="hljs-comment">// 4. 创建和挂载根实例。</span></span><br><span class="javascript">        <span class="hljs-comment">// 从而让整个应用都有路由功能</span></span><br><span class="javascript">        <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">            router</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">        <span class="hljs-comment">// 现在，应用已经启动了！</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>项目|谷粒学院|笔记</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>day04-项目的前端基本知识二</title>
    <url>/myBlog/day04-%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%89%8D%E7%AB%AF%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="day04-项目的前端基本知识二"><a href="#day04-项目的前端基本知识二" class="headerlink" title="day04-项目的前端基本知识二"></a>day04-项目的前端基本知识二</h1><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><p>axios是独立于vue的一个项目，基于promise用于浏览器和node.js的http客户端</p>
<ul>
<li>在浏览器中可以帮助我们完成 ajax请求的发送</li>
<li>在node.js中可以向远程接口发送请求</li>
</ul>
<ol>
<li>导入axios.min.js文件</li>
<li>编写一个json数据，模拟接口</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;success&quot;</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">&quot;code&quot;</span>:<span class="hljs-number">20000</span>,<br>    <span class="hljs-attr">&quot;message&quot;</span>:<span class="hljs-string">&quot;成功&quot;</span>,<br>    <span class="hljs-attr">&quot;data&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;items&quot;</span>:[<br>            &#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;lucy&quot;</span>,<span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-string">&quot;10&quot;</span>&#125;,<br>            &#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;mary&quot;</span>,<span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-string">&quot;20&quot;</span>&#125;,<br>            &#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-string">&quot;30&quot;</span>&#125;<br>        ]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<ol start="4">
<li>编写代码</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--如何显示数据--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;user in userList&quot;</span>&gt;</span><br>            &#123;&#123;user.name&#125;&#125; -- &#123;&#123;user.age&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="javascript">                <span class="hljs-comment">// 定义一个空数组</span></span><br><span class="javascript">                <span class="hljs-attr">userList</span>:[]</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            created ()&#123;     <span class="hljs-comment">// 页面渲染之前执行</span></span><br><span class="javascript">                <span class="hljs-comment">// 调用方法</span></span><br><span class="javascript">                <span class="hljs-built_in">this</span>.getUserList()</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">methods</span>:&#123;       <span class="hljs-comment">// 编写具体方法</span></span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-comment">// 创建方法，查询所有用户</span></span><br><span class="javascript">                <span class="hljs-function"><span class="hljs-title">getUserList</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-comment">// 使用axios的ajax请求</span></span><br><span class="javascript">                    <span class="hljs-comment">// axios.提交方式(&quot;请求接口地址&quot;).then().catch()</span></span><br><span class="javascript">                    axios.get(<span class="hljs-string">&quot;data.json&quot;</span>)</span><br><span class="javascript">                        .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span>&#123;      <span class="hljs-comment">// 请求成功执行then</span></span><br><span class="javascript">                            <span class="hljs-comment">// response就是请求放回的数据</span></span><br><span class="javascript">                            <span class="hljs-comment">//console.log(response);</span></span><br><span class="javascript">                            <span class="hljs-comment">// 通过response获取具体的值，赋值给定义空数组</span></span><br><span class="javascript">                            <span class="hljs-built_in">this</span>.userList = response.data.data.items</span><br><span class="javascript">                            <span class="hljs-comment">//console.log(this.userList);</span></span><br><span class="javascript">                        &#125;)     </span><br><span class="javascript">                        .catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span>&#123;    <span class="hljs-comment">//  请求失败执行catch</span></span><br><span class="javascript"></span><br><span class="javascript">                        &#125;)    </span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>测试</p>
<h1 id="element-ui"><a href="#element-ui" class="headerlink" title="element-ui"></a>element-ui</h1><p>官网： <a href="http://element-cn.eleme.io/#/zh-CN">http://element-cn.eleme.io/#/zh-CN</a></p>
<h1 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h1><p>可以模拟服务器，执行JavaScript代码。</p>
<p>简单使用</p>
<p>创建一个js文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello nodejs&#x27;</span>);<br></code></pre></td></tr></table></figure>

<p>用cmd进入js文件所在的位置，执行命令node 01.js，即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">E:\VSCode\workplace\axiosdemo&gt;node 01.js<br>hello nodejs<br></code></pre></td></tr></table></figure>



<p>在vscode中使用，右键选中文件，在终端中打开，输入启动命令和需要启动的文件即可。</p>
<p><img src="/myBlog/day04-%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%89%8D%E7%AB%AF%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%BA%8C/image-20211222162543838.png" alt="image-20211222162543838"></p>
<h1 id="npm包管理器"><a href="#npm包管理器" class="headerlink" title="npm包管理器"></a>npm包管理器</h1><p>node package manager，类似后端的maven，maven管理jar包，npm管理js库，如jQuery等</p>
<h2 id="使用npm项目初始化操作"><a href="#使用npm项目初始化操作" class="headerlink" title="使用npm项目初始化操作"></a>使用npm项目初始化操作</h2><p>npm init</p>
<p>npm init -y；都默认按照</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">PS E:\VSCode\workplace\npmdemo&gt; npm init<br>This utility will walk you through creating a package.json file.<br>It only covers the most common items, and tries to guess sensible defaults.<br><br>See `npm <span class="hljs-built_in">help</span> init` <span class="hljs-keyword">for</span> definitive documentation on these fields<br>and exactly what they <span class="hljs-keyword">do</span>.<br><br>Use `npm install &lt;pkg&gt;` afterwards to install a package and<br>save it as a dependency <span class="hljs-keyword">in</span> the package.json file.<br><br>Press ^C at any time to quit.<br>package name: (npmdemo)<br>version: (1.0.0)<br>description:<br>entry point: (index.js)<br><span class="hljs-built_in">test</span> <span class="hljs-built_in">command</span>:<br>git repository:<br>keywords:<br>author:<br>license: (ISC)<br>About to write to E:\VSCode\workplace\npmdemo\package.json:<br><br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;npmdemo&quot;</span>,<br>  <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;main&quot;</span>: <span class="hljs-string">&quot;index.js&quot;</span>,<br>  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;author&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;license&quot;</span>: <span class="hljs-string">&quot;ISC&quot;</span><br>&#125;<br><br><br>Is this OK? (yes) yes<br>PS E:\VSCode\workplace\npmdemo&gt; <br></code></pre></td></tr></table></figure>



<p>生成package.json文件，类似后端的pom.xml文件</p>
<h2 id="npm-下载依赖"><a href="#npm-下载依赖" class="headerlink" title="npm 下载依赖"></a>npm 下载依赖</h2><p>npm install 依赖名称</p>
<p>如下载jQuery ,</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 会下载最新版本</span><br>install jquery <br></code></pre></td></tr></table></figure>

<p>如果想指定版本，则用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm install jquery@2.1.x<br></code></pre></td></tr></table></figure>



<p>下载完成之后，会出现node_modules文件夹里面会有jQuery的文件和一个package-lock.json文件，package-lock.json文件是锁定当前版本的jQuery版本。</p>
<p>package.json文件中的dependencies是依赖的版本</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>  <span class="hljs-attr">&quot;jquery&quot;</span>: <span class="hljs-string">&quot;^3.6.0&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="通过package-json下载依赖"><a href="#通过package-json下载依赖" class="headerlink" title="通过package.json下载依赖"></a>通过package.json下载依赖</h2><p>先把原有的node_modules文件删除，接着执行下面的命令（需要再项目根目录）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure>



<h1 id="babel转码器"><a href="#babel转码器" class="headerlink" title="babel转码器"></a>babel转码器</h1><p>将es6代码转成es5代码，目的：有些浏览器不兼容es6代码，为了提高兼容性</p>
<p>新创建一个文件，初始化项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm init -y<br></code></pre></td></tr></table></figure>



<p>安装babel工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm install --global babel-cli<br></code></pre></td></tr></table></figure>

<p>查看版本号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">babel --version<br></code></pre></td></tr></table></figure>

<p>创建es6文件夹，创建js文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 转码前</span><br><span class="hljs-comment">// 定义数据类型</span><br><span class="hljs-keyword">let</span> input = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-comment">// 将数组元素的每一个元素+1</span><br>input = input.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item+<span class="hljs-number">1</span>)<br><span class="hljs-built_in">console</span>.log(input);<br></code></pre></td></tr></table></figure>

<p>在项目根目录创建.babelrc配置文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;presets&quot;</span>:[<span class="hljs-string">&quot;es2015&quot;</span>],<br>    <span class="hljs-attr">&quot;plugins&quot;</span>: []<br>&#125;<br></code></pre></td></tr></table></figure>

<p>安装es2015转码器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm install --save-dev babel-preset-es2015<br></code></pre></td></tr></table></figure>

<p><strong>根据文件转码</strong></p>
<p>es6/01.js:源文件</p>
<p>dist/001.js：生成的文件路径以及文件名字</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">babel es6/01.js -o dist/001.js<br></code></pre></td></tr></table></figure>

<p><strong>根据文件夹转换</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">babel es6 -d dist<br></code></pre></td></tr></table></figure>



<p>生成的es5文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><br><span class="hljs-comment">// 转码前</span><br><span class="hljs-comment">// 定义数据类型</span><br><span class="hljs-keyword">var</span> input = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-comment">// 将数组元素的每一个元素+1</span><br>input = input.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> item + <span class="hljs-number">1</span>;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(input);<br><br></code></pre></td></tr></table></figure>



<p>==<strong>注意：转码的时候需要在项目的根目录下才可以转码，否则会报文件不存在的错误</strong>==</p>
<h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><p>开发后端接口时候，开发controller service mapper，controller注入service，service注入mapper，在后端中，类与类之间的调用成为后端模块化操作</p>
<p>前端模块化，在前端中，js与js之间调用成为前端模块化操作</p>
<h2 id="es5实现模块化操作"><a href="#es5实现模块化操作" class="headerlink" title="es5实现模块化操作"></a>es5实现模块化操作</h2><p>创建1.js文件，提供方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.创能方法</span><br><span class="hljs-keyword">const</span> sum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseInt</span>(a) + <span class="hljs-built_in">parseInt</span>(b)<br>&#125;<br><span class="hljs-keyword">const</span> substract = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseInt</span>(a) - <span class="hljs-built_in">parseInt</span>(b)<br>&#125;<br><br><span class="hljs-built_in">module</span>.exports =&#123;<br>    sum,<br>    substract<br>&#125;<br></code></pre></td></tr></table></figure>

<p>创建2.js文件，调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 调用1.js的方法</span><br><span class="hljs-comment">// 1.引入js文件</span><br><span class="hljs-keyword">const</span> m = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./1.js&#x27;</span>)<br><br><span class="hljs-comment">// 调用方法</span><br><span class="hljs-built_in">console</span>.log(m.sum(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>));<br><span class="hljs-built_in">console</span>.log(m.substract(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure>

<p>在终端测试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">PS E:\VSCode\workplace\moduledemo\es5moduledemo&gt; node 2.js<br>2<br>2<br>PS E:\VSCode\workplace\moduledemo\es5moduledemo&gt; <br></code></pre></td></tr></table></figure>



<h2 id="es6模块化"><a href="#es6模块化" class="headerlink" title="es6模块化"></a>es6模块化</h2><h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><p> 创建1.js文件，提供方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义方法</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getList</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;getList....&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">save</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;save....&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>创建2.js文件，调用方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 调用1.js的方法</span><br><span class="hljs-keyword">import</span> &#123; getList,save &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./1&quot;</span>;<br>getList()<br>save()<br></code></pre></td></tr></table></figure>

<p>由于es6不能直接在nodejs环境下运行，所以先用babel转成es5代码再进行测试</p>
<h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><p>创建1.js文件，提供方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义方法</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">getList</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;getList.....&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">save</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;save.....&#x27;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>创建2.js文件，调用方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 调用1.js的方法</span><br><span class="hljs-keyword">import</span> m <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./1&#x27;</span><br>m.getList()<br>m.save()<br></code></pre></td></tr></table></figure>

<p>测试</p>
<h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><h2 id="webpack是什么"><a href="#webpack是什么" class="headerlink" title="webpack是什么"></a>webpack是什么</h2><p>Webpack 是一个前端<strong>资源加载/打包</strong>工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。</p>
<p>从图中我们可以看出，Webpack 可以<strong>将多种静态资源</strong> js、css、less 转<strong>换成一个静态文件</strong>，<strong>减少了页面的请求</strong>。 </p>
<p><img src="/myBlog/day04-%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%89%8D%E7%AB%AF%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%BA%8C/image-20211222203948729.png" alt="image-20211222203948729"></p>
<h2 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm install -g webpack webpack-cli<br></code></pre></td></tr></table></figure>

<p>查看版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">webpack -v<br></code></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">PS E:\VSCode\workplace\webpackdemo&gt; npm install -g webpack webpack-cli<br><br>added 3 packages, removed 4 packages, and changed 117 packages <span class="hljs-keyword">in</span> 9s<br><br>3 packages are looking <span class="hljs-keyword">for</span> funding<br>  run `npm fund` <span class="hljs-keyword">for</span> details<br>PS E:\VSCode\workplace\webpackdemo&gt; webpack -v<br>webpack: 5.65.0<br>webpack-cli: 4.9.1<br>webpack-dev-server not installed<br>PS E:\VSCode\workplace\webpackdemo&gt; <br></code></pre></td></tr></table></figure>



<h2 id="创建src文件"><a href="#创建src文件" class="headerlink" title="创建src文件"></a>创建src文件</h2><p>src下创建common.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">exports</span>.info = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-built_in">document</span>.write(str);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>src下创建utils.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">exports</span>.add = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>src下创建main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> common = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./common&#x27;</span>);<br><span class="hljs-keyword">const</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./utils&#x27;</span>);<br><br>common.info(<span class="hljs-string">&#x27;Hello world!&#x27;</span> + utils.add(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>));<br></code></pre></td></tr></table></figure>



<h2 id="打包js"><a href="#打包js" class="headerlink" title="打包js"></a>打包js</h2><h3 id="webpack目录下创建配置文件webpack-config-js"><a href="#webpack目录下创建配置文件webpack-config-js" class="headerlink" title="webpack目录下创建配置文件webpack.config.js"></a><strong>webpack目录下创建配置文件</strong>webpack.config.js</h3><p>以下配置的意思是：读取当前项目目录下src文件夹中的main.js（入口文件）内容，分析资源依赖，把相关的js文件打包，打包后的文件放入当前目录的dist文件夹下，打包后的js文件名为bundle.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>); <span class="hljs-comment">//Node.js内置模块</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/main.js&#x27;</span>, <span class="hljs-comment">//配置入口文件</span><br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">path</span>: path.resolve(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>), <span class="hljs-comment">//输出路径，__dirname：当前文件所在路径</span><br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span> <span class="hljs-comment">//输出文件</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>打包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">webpack		<span class="hljs-comment"># 有黄色警告</span><br>webpack --mode==development	 <span class="hljs-comment"># 没有警告</span><br></code></pre></td></tr></table></figure>

<p>警告信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">PS E:\VSCode\workplace\webpackdemo&gt; webpack<br>asset bundle.js 308 bytes [emitted] [minimized] (name: main)<br>./src/main.js 124 bytes [built] [code generated]<br>./src/common.js 60 bytes [built] [code generated]<br>./src/utils.js 57 bytes [built] [code generated]<br><br>WARNING <span class="hljs-keyword">in</span> configuration<br>The <span class="hljs-string">&#x27;mode&#x27;</span> option has not been <span class="hljs-built_in">set</span>, webpack will fallback to <span class="hljs-string">&#x27;production&#x27;</span> <span class="hljs-keyword">for</span> this value.<br>Set <span class="hljs-string">&#x27;mode&#x27;</span> option to <span class="hljs-string">&#x27;development&#x27;</span> or <span class="hljs-string">&#x27;production&#x27;</span> to <span class="hljs-built_in">enable</span> defaults <span class="hljs-keyword">for</span> each environment.<br>You can also <span class="hljs-built_in">set</span> it to <span class="hljs-string">&#x27;none&#x27;</span> to <span class="hljs-built_in">disable</span> any default behavior. Learn more: https://webpack.js.org/configuration/mode/<br><br>webpack 5.65.0 compiled with 1 warning <span class="hljs-keyword">in</span> 279 ms<br>PS E:\VSCode\workplace\webpackdemo&gt;<br></code></pre></td></tr></table></figure>



<p>测试</p>
<p>在webpack目录下创建1.html，引用bundle.js，打开浏览器访问即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;dist/bundle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>







<h2 id="打包css"><a href="#打包css" class="headerlink" title="打包css"></a>打包css</h2><h3 id="安装style-loader和-css-loader"><a href="#安装style-loader和-css-loader" class="headerlink" title="安装style-loader和 css-loader"></a><strong>安装style-loader和 css-loader</strong></h3><p>首先我们需要安装相关Loader插件，css-loader 是将 css 装载到 javascript；style-loader 是让 javascript 认识css</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm install --save-dev style-loader css-loader <br></code></pre></td></tr></table></figure>

<p>创建一个style.css文件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>在main.js中引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> common = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./common&#x27;</span>);<br><span class="hljs-keyword">const</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./utils&#x27;</span>);<br><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./style.css&#x27;</span>);<br><br>common.info(<span class="hljs-string">&#x27;Hello world!&#x27;</span> + utils.add(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>));<br></code></pre></td></tr></table></figure>

<p>在webpack.config.js中加入下面的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>); <span class="hljs-comment">//Node.js内置模块</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/main.js&#x27;</span>, <span class="hljs-comment">//配置入口文件</span><br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">path</span>: path.resolve(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>), <span class="hljs-comment">//输出路径，__dirname：当前文件所在路径</span><br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span> <span class="hljs-comment">//输出文件</span><br>    &#125;,<br>    <span class="hljs-attr">module</span>: &#123;<br>        <span class="hljs-attr">rules</span>: [  <br>            &#123;  <br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,    <span class="hljs-comment">//打包规则应用到以css结尾的文件上</span><br>                use: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>            &#125;  <br>        ]  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>重新打包，最后访问1.html测试。</p>
<h1 id="搭建项目前端页面"><a href="#搭建项目前端页面" class="headerlink" title="搭建项目前端页面"></a>搭建项目前端页面</h1><h2 id="vue-admin-template"><a href="#vue-admin-template" class="headerlink" title="vue-admin-template"></a>vue-admin-template</h2><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>vueAdmin-template是基于vue-element-admin的一套后台管理系统基础模板（最少精简版），可作为模板进行二次开发。</p>
<p><strong>GitHub地址：</strong><a href="https://github.com/PanJiaChen/vue-admin-template">https://github.com/PanJiaChen/vue-admin-template</a></p>
<p><strong>建议：</strong>你可以在 <code>vue-admin-template</code> 的基础上进行二次开发，把 <code>vue-element-admin</code>当做工具箱，想要什么功能或者组件就去 <code>vue-element-admin</code> 那里复制过来。</p>
<p>在根目录下执行npm install命令下载依赖，如果下载失败（报一个ERESOLVE unable to resolve dependency tree），可以使用cnpm install下载。如果下载失败，按照提示删除node_modules文件夹，再次下载。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">Install fail! RunScriptError: post install error, please remove node_modules before retry!ru<br></code></pre></td></tr></table></figure>



<p>如果报错node-sass不支持当前版本，可以重新卸载，再安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm uninstall --save node-sass<br><br>cnpm install node-sass -D<br></code></pre></td></tr></table></figure>

<p>如果上面还不行就更换nodejs的版本，降低版本，可能是本地的nodejs版本过高导致的，我的由16.13.0降到14.18.2就行了</p>
<p>下载成功后，利用命令启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm run dev<br></code></pre></td></tr></table></figure>

<p><img src="/myBlog/day04-%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%89%8D%E7%AB%AF%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%BA%8C/image-20211222232247732.png" alt="image-20211222232247732"></p>
<p>看到这个页面说明成功</p>
<h1 id="项目前端框架介绍"><a href="#项目前端框架介绍" class="headerlink" title="项目前端框架介绍"></a>项目前端框架介绍</h1><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">. <br>├── build <span class="hljs-regexp">//</span> 构建脚本<br>├── config <span class="hljs-regexp">//</span> 全局配置 <br>├── node_modules <span class="hljs-regexp">//</span> 项目依赖模块<br>├── src <span class="hljs-regexp">//</span>项目源代码<br>├── static <span class="hljs-regexp">//</span> 静态资源<br>└── package.jspon <span class="hljs-regexp">//</span> 项目信息和依赖配置<br></code></pre></td></tr></table></figure>



<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">src <br>├── api <span class="hljs-regexp">//</span> 各种接口 <br>├── assets <span class="hljs-regexp">//</span> 图片等资源 <br>├── components <span class="hljs-regexp">//</span> 各种公共组件，非公共组件在各自view下维护 <br>├── icons <span class="hljs-regexp">//</span>svg icon <br>├── router <span class="hljs-regexp">//</span> 路由表 <br>├── store <span class="hljs-regexp">//</span> 存储 <br>├── styles <span class="hljs-regexp">//</span> 各种样式 <br>├── utils <span class="hljs-regexp">//</span> 公共工具，非公共工具，在各自view下维护 <br>├── views <span class="hljs-regexp">//</span> 各种layout<br>├── App.vue <span class="hljs-regexp">//</span>***项目顶层组件*** <br>├── main.js <span class="hljs-regexp">//</span>***项目入口文件***<br>└── permission.js <span class="hljs-regexp">//</span>认证入口<br></code></pre></td></tr></table></figure>



<p><img src="/myBlog/day04-%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%89%8D%E7%AB%AF%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E4%BA%8C/12-%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E6%A1%86%E6%9E%B6%E7%BB%93%E6%9E%84%E8%AF%B4%E6%98%8E.png" alt="12-前端页面框架结构说明"></p>
]]></content>
      <categories>
        <category>项目|谷粒学院|笔记</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>day07-课程发布-添加课程信息</title>
    <url>/myBlog/day07-%E8%AF%BE%E7%A8%8B%E5%8F%91%E5%B8%83-%E6%B7%BB%E5%8A%A0%E8%AF%BE%E7%A8%8B%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h1 id="day07-课程发布-添加课程信息"><a href="#day07-课程发布-添加课程信息" class="headerlink" title="day07-课程发布-添加课程信息"></a>day07-课程发布-添加课程信息</h1><h1 id="课程管理-添加课程信息接口"><a href="#课程管理-添加课程信息接口" class="headerlink" title="课程管理-添加课程信息接口"></a>课程管理-添加课程信息接口</h1><p>课程相关表的关系</p>
<p><img src="/myBlog/day07-%E8%AF%BE%E7%A8%8B%E5%8F%91%E5%B8%83-%E6%B7%BB%E5%8A%A0%E8%AF%BE%E7%A8%8B%E4%BF%A1%E6%81%AF/05-%E8%AF%BE%E7%A8%8B%E7%9B%B8%E5%85%B3%E8%A1%A8%E5%85%B3%E7%B3%BB.png" alt="05-课程相关表关系"></p>
<p>课程发布流程</p>
<p><img src="/myBlog/day07-%E8%AF%BE%E7%A8%8B%E5%8F%91%E5%B8%83-%E6%B7%BB%E5%8A%A0%E8%AF%BE%E7%A8%8B%E4%BF%A1%E6%81%AF/04-%E8%AF%BE%E7%A8%8B%E5%8F%91%E5%B8%83%E6%B5%81%E7%A8%8B%E7%9A%84%E8%AF%B4%E6%98%8E.png" alt="04-课程发布流程的说明"></p>
<p>执行代码生成器，将这四个表”edu_course”,”edu_course_description”,”edu_chapter”,”edu_video”的相关代码生成</p>
<h2 id="编写CourseInfoVo"><a href="#编写CourseInfoVo" class="headerlink" title="编写CourseInfoVo"></a>编写CourseInfoVo</h2><p>用于接收传进来的信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiModel(value = &quot;课程基本信息&quot;, description = &quot;编辑课程基本信息的表单对象&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CourseInfoVo</span> </span>&#123;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;课程ID&quot;)</span><br>    <span class="hljs-keyword">private</span> String id;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;课程讲师ID&quot;)</span><br>    <span class="hljs-keyword">private</span> String teacherId;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;课程专业ID&quot;)</span><br>    <span class="hljs-keyword">private</span> String subjectId;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;课程专业父级ID&quot;)</span><br>    <span class="hljs-keyword">private</span> String subjectParentId;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;课程标题&quot;)</span><br>    <span class="hljs-keyword">private</span> String title;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;课程销售价格，设置为0则可免费观看&quot;)</span><br>    <span class="hljs-comment">// 0.01</span><br>    <span class="hljs-keyword">private</span> BigDecimal price;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;总课时&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer lessonNum;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;课程封面图片路径&quot;)</span><br>    <span class="hljs-keyword">private</span> String cover;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;课程简介&quot;)</span><br>    <span class="hljs-keyword">private</span> String description;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="编写EduCourseController"><a href="#编写EduCourseController" class="headerlink" title="编写EduCourseController"></a>编写EduCourseController</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(description=&quot;课程管理&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/eduservice/course&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EduCourseController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EduCourseService eduCourseService;<br><br>    <span class="hljs-comment">// 添加课程信息</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;新增课程&quot;)</span><br>    <span class="hljs-meta">@PostMapping(&quot;addCourseInfo&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">addCourseInfo</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@ApiParam(name = &quot;CourseInfoForm&quot;, value = &quot;课程基本信息&quot;, required = true)</span></span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@RequestBody</span> CourseInfoVo courseInfoVo)</span></span>&#123;<br>        eduCourseService.saveCourseInfo(courseInfoVo);<br>        <span class="hljs-keyword">return</span> R.ok();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="EduCourseService接口"><a href="#EduCourseService接口" class="headerlink" title="EduCourseService接口"></a>EduCourseService接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EduCourseService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">IService</span>&lt;<span class="hljs-title">EduCourse</span>&gt; </span>&#123;<br>    <span class="hljs-comment">// 添加课程信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">saveCourseInfo</span><span class="hljs-params">(CourseInfoVo courseInfoVo)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="EduCourseServiceImpl实现类"><a href="#EduCourseServiceImpl实现类" class="headerlink" title="EduCourseServiceImpl实现类"></a>EduCourseServiceImpl实现类</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EduCourseServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceImpl</span>&lt;<span class="hljs-title">EduCourseMapper</span>, <span class="hljs-title">EduCourse</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">EduCourseService</span> </span>&#123;<br><br>    <span class="hljs-comment">// 为了添加课程描述信息到数据库</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EduCourseDescriptionService eduCourseDescriptionService;<br><br>    <span class="hljs-comment">// 添加课程信息</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveCourseInfo</span><span class="hljs-params">(CourseInfoVo courseInfoVo)</span> </span>&#123;<br>        <span class="hljs-comment">// 添加课程基本信息</span><br>        <span class="hljs-comment">// 由于添加到数据库需要的是EduCourse，所以先创建一个EduCourse对象</span><br>        EduCourse eduCourse = <span class="hljs-keyword">new</span> EduCourse();<br>        <span class="hljs-comment">// 将传进来的vo对象赋值给新建的EduCourse对象</span><br>        BeanUtils.copyProperties(courseInfoVo,eduCourse);<br>        <span class="hljs-comment">// 保存到数据库</span><br>        <span class="hljs-keyword">int</span> insert = baseMapper.insert(eduCourse);<br><br>        <span class="hljs-keyword">if</span> (insert == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GuliException(<span class="hljs-number">20001</span>,<span class="hljs-string">&quot;课程信息保存失败&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 获取课程信息的id</span><br>        String cid = eduCourse.getId();<br><br>        <span class="hljs-comment">// 添加课程描述信息</span><br>        EduCourseDescription eduCourseDescription = <span class="hljs-keyword">new</span> EduCourseDescription();<br>        eduCourseDescription.setDescription(courseInfoVo.getDescription());<br>        eduCourseDescription.setId(cid);<br><br>        eduCourseDescriptionService.save(eduCourseDescription);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="修改EduCourseDescription的主键生成策略"><a href="#修改EduCourseDescription的主键生成策略" class="headerlink" title="修改EduCourseDescription的主键生成策略"></a>修改EduCourseDescription的主键生成策略</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiModelProperty(value = &quot;创建时间&quot;)</span><br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br><span class="hljs-keyword">private</span> Date gmtCreate;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;更新时间&quot;)</span><br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br><span class="hljs-keyword">private</span> Date gmtModified;<br></code></pre></td></tr></table></figure>



<h1 id="课程管理-添加课程信息前端"><a href="#课程管理-添加课程信息前端" class="headerlink" title="课程管理-添加课程信息前端"></a>课程管理-添加课程信息前端</h1><h2 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/course&#x27;</span>,<br>    <span class="hljs-attr">component</span>: Layout,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/course/list&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Course&#x27;</span>,<br>    <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;课程管理&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;form&#x27;</span> &#125;,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;list&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;EduCourseList&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/edu/course/list&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;课程列表&#x27;</span> &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;info&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;EduCourseInfo&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/edu/course/info&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;发布课程&#x27;</span> &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;info/:id&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;EduCourseInfoEdit&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/edu/course/info&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;编辑课程基本信息&#x27;</span>, <span class="hljs-attr">noCache</span>: <span class="hljs-literal">true</span> &#125;,<br>        <span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;chapter/:id&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;EduCourseChapterEdit&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/edu/course/chapter&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;编辑课程大纲&#x27;</span>, <span class="hljs-attr">noCache</span>: <span class="hljs-literal">true</span> &#125;,<br>        <span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;publish/:id&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;EduCoursePublishEdit&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/edu/course/publish&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;发布课程&#x27;</span>, <span class="hljs-attr">noCache</span>: <span class="hljs-literal">true</span> &#125;,<br>        <span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span><br>      &#125;<br>    ]<br>  &#125;,<br></code></pre></td></tr></table></figure>

<h2 id="添加vue组件"><a href="#添加vue组件" class="headerlink" title="添加vue组件"></a>添加vue组件</h2><p>chapter.vue,info,vue,list.vue,publish.vue</p>
<h2 id="课程信息页面"><a href="#课程信息页面" class="headerlink" title="课程信息页面"></a>课程信息页面</h2><p>info.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>   &lt;div class=&quot;app-container&quot;&gt;<br>     &lt;h2 style=&quot;text-align: center;&quot;&gt;发布新课程&lt;/h2&gt;<br>     &lt;el-steps :active=&quot;1&quot; process-status=&quot;wait&quot; align-center style=&quot;margin-bottom: 40px;&quot;&gt;<br>       &lt;el-step title=&quot;填写课程基本信息&quot;/&gt;<br>       &lt;el-step title=&quot;创建课程大纲&quot;/&gt;<br>       &lt;el-step title=&quot;课程发布&quot;/&gt;<br>     &lt;/el-steps&gt;<br>     &lt;el-form label-width=&quot;120px&quot;&gt;<br>       &lt;el-form-item&gt;<br>         &lt;el-button :disabled=&quot;saveBtnDisabled&quot; type=&quot;primary&quot; @click=&quot;next&quot;&gt;保存并下一步&lt;/el-button&gt;<br>       &lt;/el-form-item&gt;<br>     &lt;/el-form&gt;<br>   &lt;/div&gt;<br> &lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>    data()&#123;<br>        return&#123;<br>            saveBtnDisabled:false    // 保存按钮是否禁用<br>        &#125;<br>    &#125;,<br>    created()&#123;<br><br>    &#125;,<br>    methods:&#123;<br>        next()&#123;<br>            this.$router.push(&#123; path: &#x27;/course/chapter/1&#x27; &#125;)<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="课程大纲页面"><a href="#课程大纲页面" class="headerlink" title="课程大纲页面"></a>课程大纲页面</h2><p>chapter.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>   &lt;div class=&quot;app-container&quot;&gt;<br>     &lt;h2 style=&quot;text-align: center;&quot;&gt;发布新课程&lt;/h2&gt;<br>     &lt;el-steps :active=&quot;2&quot; process-status=&quot;wait&quot; align-center style=&quot;margin-bottom: 40px;&quot;&gt;<br>       &lt;el-step title=&quot;填写课程基本信息&quot;/&gt;<br>       &lt;el-step title=&quot;创建课程大纲&quot;/&gt;<br>       &lt;el-step title=&quot;最终发布&quot;/&gt;<br>     &lt;/el-steps&gt;<br>     &lt;el-form label-width=&quot;120px&quot;&gt;<br>       &lt;el-form-item&gt;<br>         &lt;el-button @click=&quot;previous&quot;&gt;上一步&lt;/el-button&gt;<br>         &lt;el-button :disabled=&quot;saveBtnDisabled&quot; type=&quot;primary&quot; @click=&quot;next&quot;&gt;下一步&lt;/el-button&gt;<br>       &lt;/el-form-item&gt;<br>     &lt;/el-form&gt;<br>   &lt;/div&gt;<br> &lt;/template&gt;<br> &lt;script&gt;<br> export default &#123;<br>   data() &#123;<br>     return &#123;<br>       saveBtnDisabled: false // 保存按钮是否禁用<br>     &#125;<br>   &#125;,<br>   created() &#123;<br>     console.log(&#x27;chapter created&#x27;)<br>   &#125;,<br>   methods: &#123;<br>     previous() &#123;<br>       this.$router.push(&#123; path: &#x27;/course/info/1&#x27; &#125;)<br>     &#125;,<br>     next() &#123;<br>       console.log(&#x27;next&#x27;)<br>       this.$router.push(&#123; path: &#x27;/course/publish/1&#x27; &#125;)<br>     &#125;<br>   &#125;<br> &#125;<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="课程发布页面"><a href="#课程发布页面" class="headerlink" title="课程发布页面"></a>课程发布页面</h2><p>publish.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>   &lt;div class=&quot;app-container&quot;&gt;<br>     &lt;h2 style=&quot;text-align: center;&quot;&gt;发布新课程&lt;/h2&gt;<br>     &lt;el-steps :active=&quot;3&quot; process-status=&quot;wait&quot; align-center style=&quot;margin-bottom: 40px;&quot;&gt;<br>       &lt;el-step title=&quot;填写课程基本信息&quot;/&gt;<br>       &lt;el-step title=&quot;创建课程大纲&quot;/&gt;<br>       &lt;el-step title=&quot;最终发布&quot;/&gt;<br>     &lt;/el-steps&gt;<br>     &lt;el-form label-width=&quot;120px&quot;&gt;<br>       &lt;el-form-item&gt;<br>         &lt;el-button @click=&quot;previous&quot;&gt;返回修改&lt;/el-button&gt;<br>         &lt;el-button :disabled=&quot;saveBtnDisabled&quot; type=&quot;primary&quot; @click=&quot;publish&quot;&gt;发布课程&lt;/el-button&gt;<br>       &lt;/el-form-item&gt;<br>     &lt;/el-form&gt;<br>   &lt;/div&gt;<br> &lt;/template&gt;<br> &lt;script&gt;<br> export default &#123;<br>   data() &#123;<br>     return &#123;<br>       saveBtnDisabled: false // 保存按钮是否禁用<br>     &#125;<br>   &#125;,<br>   created() &#123;<br>   &#125;,<br>   methods: &#123;<br>     previous() &#123;<br>       this.$router.push(&#123; path: &#x27;/course/chapter/1&#x27; &#125;)<br>     &#125;,<br>     publish() &#123;<br>       this.$router.push(&#123; path: &#x27;/course/list&#x27; &#125;)<br>     &#125;<br>   &#125;<br> &#125;<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>



<h2 id="讲师下拉列表显示"><a href="#讲师下拉列表显示" class="headerlink" title="讲师下拉列表显示"></a>讲师下拉列表显示</h2><h3 id="组件模板"><a href="#组件模板" class="headerlink" title="组件模板"></a>组件模板</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;!-- 课程讲师 TODO --&gt;<br>        &lt;el-form-item label=&quot;课程讲师&quot;&gt;<br>        &lt;el-select<br>            v-model=&quot;courseInfo.teacherId&quot;<br>            placeholder=&quot;请选择&quot;&gt;<br>            &lt;el-option<br>            v-for=&quot;teacher in teacherList&quot;<br>            :key=&quot;teacher.id&quot;<br>            :label=&quot;teacher.name&quot;<br>            :value=&quot;teacher.id&quot;/&gt;<br>        &lt;/el-select&gt;<br>        &lt;/el-form-item&gt;<br></code></pre></td></tr></table></figure>

<h3 id="定义api"><a href="#定义api" class="headerlink" title="定义api"></a>定义api</h3><p>vue-admin-template-master\src\api\edu\course.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 查询所有讲师，下拉列表</span><br><span class="hljs-function"><span class="hljs-title">getListTeacher</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/teacher/findAll`</span>,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>      &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="组件脚本"><a href="#组件脚本" class="headerlink" title="组件脚本"></a>组件脚本</h3><p>定义data</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">teacherList: [] // 讲师列表<br></code></pre></td></tr></table></figure>

<p>表单初始化时获取讲师列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">created()&#123;<br>    this.findTeacherList()<br>&#125;,<br>methods:&#123;<br>    // 下拉列表查询所有讲师<br>    findTeacherList()&#123;<br>        course.getListTeacher()<br>        .then(response =&gt;&#123;<br>            this.teacherList  = response.data.items<br>        &#125;)<br>    &#125;,<br></code></pre></td></tr></table></figure>



<h2 id="显示课程分类-多级联动"><a href="#显示课程分类-多级联动" class="headerlink" title="显示课程分类(多级联动)"></a>显示课程分类(多级联动)</h2><p><img src="/myBlog/day07-%E8%AF%BE%E7%A8%8B%E5%8F%91%E5%B8%83-%E6%B7%BB%E5%8A%A0%E8%AF%BE%E7%A8%8B%E4%BF%A1%E6%81%AF/image-20211225171651508.png" alt="image-20211225171651508"></p>
<h3 id="获取一级分类"><a href="#获取一级分类" class="headerlink" title="获取一级分类"></a>获取一级分类</h3><h4 id="组件数据定义"><a href="#组件数据定义" class="headerlink" title="组件数据定义"></a>组件数据定义</h4><p>定义在data中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">subjectOneList:[],  // 一级分类<br>subjectTwoList:[]   // 二级分类<br></code></pre></td></tr></table></figure>

<h4 id="组件模板-1"><a href="#组件模板-1" class="headerlink" title="组件模板"></a>组件模板</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;!-- 所属分类：级联下拉列表 --&gt;<br>         &lt;!-- 一级分类 --&gt;<br>         &lt;el-form-item label=&quot;课程类别&quot;&gt;<br>         &lt;el-select<br>             v-model=&quot;courseInfo.subjectParentId&quot;<br>             placeholder=&quot;一级分类&quot;<br>             @change=&quot;subjectLevelOneChanged&quot;&gt;<br>             &lt;el-option<br>             v-for=&quot;subject in subjectOneList&quot;<br>             :key=&quot;subject.id&quot;<br>             :label=&quot;subject.title&quot;<br>             :value=&quot;subject.id&quot;/&gt;<br>         &lt;/el-select&gt;<br></code></pre></td></tr></table></figure>

<h4 id="组件脚本-1"><a href="#组件脚本-1" class="headerlink" title="组件脚本"></a>组件脚本</h4><p>表单初始化时获取一级分类嵌套列表，引入subject api</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">import subject from &#x27;@/api/edu/subject&#x27;<br></code></pre></td></tr></table></figure>

<p>定义方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">created()&#123;<br>    ...<br>    // 初始化一级分类<br>    this.getOneSubjectList()<br>&#125;,<br>methods:&#123;<br>    // 查询一级分类<br>    getOneSubjectList()&#123;<br>        subject.getSubjectList()<br>        .then(response =&gt;&#123;<br>            this.subjectOneList = response.data.list<br>        &#125;)<br>    &#125;,<br><br></code></pre></td></tr></table></figure>

<h3 id="级联显示二级分类"><a href="#级联显示二级分类" class="headerlink" title="级联显示二级分类"></a>级联显示二级分类</h3><h4 id="组件模板-2"><a href="#组件模板-2" class="headerlink" title="组件模板"></a>组件模板</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;!-- 二级分类 --&gt;<br>         &lt;el-select v-model=&quot;courseInfo.subjectId&quot; placeholder=&quot;二级分类&quot;&gt;<br>             &lt;el-option<br>             v-for=&quot;subject in subjectTwoList&quot;<br>             :key=&quot;subject.id&quot;<br>             :label=&quot;subject.title&quot;<br>             :value=&quot;subject.id&quot;/&gt;<br>         &lt;/el-select&gt;<br></code></pre></td></tr></table></figure>

<h4 id="注册change事件"><a href="#注册change事件" class="headerlink" title="注册change事件"></a>注册change事件</h4><p>在一级分类的<el-select>组件中注册change事件</el-select></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;el-select @change=&quot;subjectLevelOneChanged&quot; ......<br></code></pre></td></tr></table></figure>

<h4 id="定义change事件方法"><a href="#定义change事件方法" class="headerlink" title="定义change事件方法"></a>定义change事件方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">// 显示二级分类，当选择一级分类时，显示二级分类<br>      subjectLevelOneChanged(value)&#123;<br>          // 遍历一级分类的集合<br>          for(var i = 0; this.subjectOneList.length; i++)&#123;<br>              // 每一个一级分类<br>              var oneSubject = this.subjectOneList[i]<br><br>              // 判断一级分类的id是否和传进来的id一样<br>              if(value === oneSubject.id)&#123;<br>                  // 从一级分类中获取二级分类<br>                  this.subjectTwoList = oneSubject.children<br>                  this.courseInfo.subjectId = &#x27;&#x27;<br>              &#125;<br>          &#125;<br>      &#125;,<br></code></pre></td></tr></table></figure>

<h2 id="封面上传"><a href="#封面上传" class="headerlink" title="封面上传"></a>封面上传</h2><h3 id="组件模板-3"><a href="#组件模板-3" class="headerlink" title="组件模板"></a>组件模板</h3><p>在info.vue中添加上传组件模板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;!-- 课程封面--&gt;<br>      &lt;el-form-item label=&quot;课程封面&quot;&gt;<br>      &lt;el-upload<br>          :show-file-list=&quot;false&quot;<br>          :on-success=&quot;handleAvatarSuccess&quot;<br>          :before-upload=&quot;beforeAvatarUpload&quot;<br>          :action=&quot;BASE_API+&#x27;/eduoss/fileoss&#x27;&quot;<br>          class=&quot;avatar-uploader&quot;&gt;<br>          &lt;img :src=&quot;courseInfo.cover&quot;&gt;<br>      &lt;/el-upload&gt;<br>      &lt;/el-form-item&gt;<br></code></pre></td></tr></table></figure>

<h3 id="结果回调"><a href="#结果回调" class="headerlink" title="结果回调"></a>结果回调</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">methods:&#123;<br>        // 上传成功<br>        handleAvatarSuccess(res, file) &#123;<br>            console.log(res)// 上传响应<br>            console.log(URL.createObjectURL(file.raw))// base64编码<br>            this.courseInfo.cover = res.data.url<br>        &#125;,<br>        // 上传之前<br>        beforeAvatarUpload(file) &#123;<br>            const isJPG = file.type === &#x27;image/jpeg&#x27;<br>            const isLt2M = file.size / 1024 / 1024 &lt; 2<br>            if (!isJPG) &#123;<br>                this.$message.error(&#x27;上传头像图片只能是 JPG 格式!&#x27;)<br>            &#125;<br>            if (!isLt2M) &#123;<br>                this.$message.error(&#x27;上传头像图片大小不能超过 2MB!&#x27;)<br>            &#125;<br>            return isJPG &amp;&amp; isLt2M<br>        &#125;,<br></code></pre></td></tr></table></figure>



<h1 id="Tinymce可视化编辑器"><a href="#Tinymce可视化编辑器" class="headerlink" title="Tinymce可视化编辑器"></a>Tinymce可视化编辑器</h1><h2 id="组件初始化"><a href="#组件初始化" class="headerlink" title="组件初始化"></a>组件初始化</h2><p>Tinymce是一个传统javascript插件，默认不能用于Vue.js因此需要做一些特殊的整合步骤</p>
<h3 id="复制脚本库"><a href="#复制脚本库" class="headerlink" title="复制脚本库"></a>复制脚本库</h3><p>将脚本库复制到项目的static目录下（在vue-element-admin-master的static路径下）</p>
<h3 id="配置html变量"><a href="#配置html变量" class="headerlink" title="配置html变量"></a>配置html变量</h3><p>在 guli-admin/build/webpack.dev.conf.js 中添加配置</p>
<p>使在html页面中可是使用这里定义的BASE_URL变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;<br>    ......<br>    <span class="hljs-attr">templateParameters</span>: &#123;<br>        <span class="hljs-attr">BASE_URL</span>: config.dev.assetsPublicPath + config.dev.assetsSubDirectory<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>

<h3 id="引入js脚本"><a href="#引入js脚本" class="headerlink" title="引入js脚本"></a>引入js脚本</h3><p>在guli-admin/index.html 中引入js脚本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;script src=&lt;%= BASE_URL %&gt;<span class="hljs-regexp">/tinymce4.7.5/</span>tinymce.min.js&gt;&lt;/script&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=&lt;%= <span class="hljs-string">BASE_URL</span> %&gt;</span>/tinymce4.7.5/langs/zh_CN.js&gt;</span>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="组件引入"><a href="#组件引入" class="headerlink" title="组件引入"></a>组件引入</h2><p>为了让Tinymce能用于Vue.js项目，vue-element-admin-master对Tinymce进行了封装，下面我们将它引入到我们的课程信息页面</p>
<h3 id="复制组件"><a href="#复制组件" class="headerlink" title="复制组件"></a>复制组件</h3><p>src/components/Tinymce</p>
<h3 id="引入组件"><a href="#引入组件" class="headerlink" title="引入组件"></a>引入组件</h3><p>课程信息组件中引入 Tinymce</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">import Tinymce from &#x27;@/components/Tinymce&#x27;<br><br>export default &#123;<br>    // 初始化文本编辑器<br>    components: &#123; Tinymce &#125;,<br>    data()&#123;<br></code></pre></td></tr></table></figure>

<h3 id="组件模板-4"><a href="#组件模板-4" class="headerlink" title="组件模板"></a>组件模板</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;!-- 课程简介--&gt;<br>&lt;el-form-item label=&quot;课程简介&quot;&gt;<br>    &lt;tinymce :height=&quot;300&quot; v-model=&quot;courseInfo.description&quot;/&gt;<br>&lt;/el-form-item&gt;<br></code></pre></td></tr></table></figure>

<h3 id="组件样式"><a href="#组件样式" class="headerlink" title="组件样式"></a>组件样式</h3><p>在info.vue文件的最后添加如下代码，调整上传图片按钮的高度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;style scoped&gt;<br>.tinymce-container &#123;<br>  line-height: 29px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<p>Tinymce中的图片上传功能直接存储的是图片的base64编码，因此无需图片服务器</p>
]]></content>
      <categories>
        <category>项目|谷粒学院|笔记</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>day-10-课程管理</title>
    <url>/myBlog/day10-%E8%AF%BE%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="day10"><a href="#day10" class="headerlink" title="day10"></a>day10</h1><h1 id="课程管理-删除视屏接口"><a href="#课程管理-删除视屏接口" class="headerlink" title="课程管理-删除视屏接口"></a>课程管理-删除视屏接口</h1><p>创建InitVodUtils工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InitVodClient</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DefaultAcsClient <span class="hljs-title">initVodClient</span><span class="hljs-params">(String accessKeyId, String accessKeySecret)</span> <span class="hljs-keyword">throws</span> ClientException </span>&#123;<br><br>        String regionId = <span class="hljs-string">&quot;cn-shanghai&quot;</span>;  <span class="hljs-comment">// 点播服务接入区域</span><br><br>        DefaultProfile profile = DefaultProfile.getProfile(regionId, accessKeyId, accessKeySecret);<br><br>        DefaultAcsClient client = <span class="hljs-keyword">new</span> DefaultAcsClient(profile);<br><br>        <span class="hljs-keyword">return</span> client;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>在VodController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 删除阿里云的视频</span><br><span class="hljs-meta">@DeleteMapping(&quot;deleteAlyVideo/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">deleteAlyVideo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 初始化对象</span><br>        DefaultAcsClient client = InitVodClient.initVodClient(ConstantVodUtils.ACCESS_KEY_ID, ConstantVodUtils.ACCESS_KEY_SECRET);<br>        <span class="hljs-comment">// 创建删除的request请求</span><br>        DeleteVideoRequest request = <span class="hljs-keyword">new</span> DeleteVideoRequest();<br>        <span class="hljs-comment">// 设置视频id</span><br>        request.setVideoIds(id);<br>        <span class="hljs-comment">// 调用初始化方法进行删除</span><br>        client.getAcsResponse(request);<br>        <span class="hljs-keyword">return</span> R.ok();<br>    &#125; <span class="hljs-keyword">catch</span> (ClientException e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GuliException(<span class="hljs-number">20001</span>,<span class="hljs-string">&quot;删除视频失败&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="课程管理-删除视屏前端"><a href="#课程管理-删除视屏前端" class="headerlink" title="课程管理-删除视屏前端"></a>课程管理-删除视屏前端</h1><p>Api</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">// 删除小节视频<br> deleteAlyVideo(id)&#123;<br>     return request(&#123;<br>         url: `/eduvod/video/deleteAlyVideo/$&#123;id&#125;`,<br>         method: &#x27;delete&#x27;<br>       &#125;)<br> &#125;<br><br></code></pre></td></tr></table></figure>

<p>Video.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">methods: &#123;<br>     // 点击确认的时候删除<br>     handleVodRemove()&#123;<br>        video.deleteAlyVideo(this.video.videoSourceId)<br>          .then(response =&gt;&#123;<br>             // 提示信息<br>              this.$message(&#123;<br>                  type: &#x27;success&#x27;,<br>                  message: &#x27;删除视频成功!&#x27;<br>              &#125;);<br>              fileList: []  // 清空上传列表<br>              this.video.videoSourceId = &#x27;&#x27;<br>              this.video.videoOriginalName = &#x27;&#x27;<br>          &#125;)<br>     &#125;,<br>     // 点击x的时候弹框<br>     beforeVodRemove(file, fileList)&#123;<br>      return this.$confirm(`确定移除 $&#123; file.name &#125;？`);<br>     &#125;,<br><br></code></pre></td></tr></table></figure>



<h1 id="技术点-微服务SpringCloud"><a href="#技术点-微服务SpringCloud" class="headerlink" title="技术点-微服务SpringCloud"></a>技术点-微服务SpringCloud</h1><h2 id="SpringCloud和SpringBoot的关系："><a href="#SpringCloud和SpringBoot的关系：" class="headerlink" title="SpringCloud和SpringBoot的关系："></a>SpringCloud和SpringBoot的关系：</h2><p>SpringBoot是Spring的一套快速配置脚手架，可以基于SpringBoot快速开发单个微服务。SpringCloud是一系列框架的总称。要使用SpringCloud的话必须要基于SpringBoot，而SpringBoot可以单独使用。</p>
<h1 id="Nacos下载安装"><a href="#Nacos下载安装" class="headerlink" title="Nacos下载安装"></a>Nacos下载安装</h1><p><strong>下载地址和版本</strong></p>
<p>下载地址：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p>
<p>下载版本：nacos-server-1.1.4.tar.gz或nacos-server-1.1.4.zip，解压任意目录即可</p>
<p>- Windows</p>
<p>启动命令：cmd startup.cmd 或者双击startup.cmd运行文件。</p>
<p>访问：<a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a></p>
<p>用户名密码：nacos/nacos</p>
<h1 id="服务注册（service-edu为例）"><a href="#服务注册（service-edu为例）" class="headerlink" title="服务注册（service_edu为例）"></a>服务注册（service_edu为例）</h1><h2 id="在service模块配置pom"><a href="#在service模块配置pom" class="headerlink" title="在service模块配置pom"></a>在service模块配置pom</h2><p>配置Nacos客户端的pom依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--服务注册--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure>

<h2 id="添加服务配置信息"><a href="#添加服务配置信息" class="headerlink" title="添加服务配置信息"></a>添加服务配置信息</h2><p>配置application.properties，在客户端微服务中添加注册Nacos服务的配置信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># nacos服务地址</span><br><span class="hljs-meta">spring.cloud.nacos.discovery.server-addr</span>=<span class="hljs-string">127.0.0.1:8848</span><br></code></pre></td></tr></table></figure>

<h2 id="添加Nacos客户端注解"><a href="#添加Nacos客户端注解" class="headerlink" title="添加Nacos客户端注解"></a>添加Nacos客户端注解</h2><p>在客户端微服务启动类中添加注解@EnableDiscoveryClient</p>
<h2 id="启动客户端微服务"><a href="#启动客户端微服务" class="headerlink" title="启动客户端微服务"></a>启动客户端微服务</h2><p>启动注册中心     </p>
<p>启动已注册的微服务，可以在Nacos服务列表中看到被注册的微服务</p>
<h1 id="课程管理-删除小节删除视频Feign"><a href="#课程管理-删除小节删除视频Feign" class="headerlink" title="课程管理-删除小节删除视频Feign"></a>课程管理-删除小节删除视频Feign</h1><h2 id="在service模块添加pom依赖"><a href="#在service模块添加pom依赖" class="headerlink" title="在service模块添加pom依赖"></a>在service模块添加pom依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 服务调用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="在调用端的启动类添加注解"><a href="#在调用端的启动类添加注解" class="headerlink" title="在调用端的启动类添加注解"></a>在调用端的启动类添加注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients</span> <span class="hljs-comment">// 开启远程调用</span><br></code></pre></td></tr></table></figure>

<h2 id="创建包和接口"><a href="#创建包和接口" class="headerlink" title="创建包和接口"></a>创建包和接口</h2><p>创建client包</p>
<p>@FeignClient注解用于指定从哪个服务中调用功能 ，名称与被调用的服务名保持一致。</p>
<p>@GetMapping注解用于对被调用的微服务进行地址映射。</p>
<p>@PathVariable注解一定要指定参数名称，否则出错</p>
<p>@Component注解防止，在其他位置注入CodClient时idea报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@FeignClient(&quot;service-vod&quot;)</span>     <span class="hljs-comment">// 远程调用服务名称</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">VodClient</span> </span>&#123;<br><br>    <span class="hljs-comment">// 删除阿里云的视频</span><br>    <span class="hljs-comment">// 路径为全路径</span><br>    <span class="hljs-comment">// @PathVariable(&quot;id&quot;)需要指名参数名字，否则会报错</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/eduvod/video/deleteAlyVideo/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">deleteAlyVideo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="调用微服务"><a href="#调用微服务" class="headerlink" title="调用微服务"></a>调用微服务</h2><p>在调用端的VideoServiceImpl中调用client中的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 删除小节 顺便删除视频</span><br><span class="hljs-meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">deleteVideo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>    <span class="hljs-comment">// 根据小节id查询出视频id</span><br>    EduVideo eduVideo = eduVideoService.getById(id);<br>    String videoSourceId = eduVideo.getVideoSourceId();<br><br>    <span class="hljs-comment">// 先判断得到的视频id是否为空</span><br>    <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(videoSourceId))&#123;<br>        <span class="hljs-comment">// 根据视频id删除阿里云的视频</span><br>        vodClient.deleteAlyVideo(videoSourceId);<br>    &#125;<br><br>    eduVideoService.removeById(id);<br>    <span class="hljs-keyword">return</span> R.ok();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>测试</p>
<h1 id="课程管理-删除课程删除视频后端"><a href="#课程管理-删除课程删除视频后端" class="headerlink" title="课程管理-删除课程删除视频后端"></a>课程管理-删除课程删除视频后端</h1><p>com.atguigu.vod.controller.VodController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 删除多个阿里云视频</span><br><span class="hljs-meta">@RequestMapping(&quot;delete-batch&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">deleteBatch</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;videoIddList&quot;)</span> List&lt;String&gt; videoIddList)</span></span>&#123;<br>    vodService.removeMoreVideo(videoIddList);<br>    <span class="hljs-keyword">return</span> R.ok();<br>&#125;<br></code></pre></td></tr></table></figure>



<p>VodService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 删除多个阿里云视频</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">removeMoreVideo</span><span class="hljs-params">(List&lt;String&gt; videoIddList)</span></span>;<br></code></pre></td></tr></table></figure>



<p>VodServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 删除多个阿里云视频</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeMoreVideo</span><span class="hljs-params">(List&lt;String&gt; videoIddList)</span> </span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 初始化对象</span><br>        DefaultAcsClient client = InitVodClient.initVodClient(ConstantVodUtils.ACCESS_KEY_ID, ConstantVodUtils.ACCESS_KEY_SECRET);<br>        <span class="hljs-comment">// 创建删除的request请求</span><br>        DeleteVideoRequest request = <span class="hljs-keyword">new</span> DeleteVideoRequest();<br><br>        <span class="hljs-comment">// 将videoIds集合遍历出来，做成1,2,3这样的形式</span><br>        String videoIds = StringUtils.join(videoIddList.toArray(), <span class="hljs-string">&quot;,&quot;</span>);<br><br>        <span class="hljs-comment">// 设置视频id</span><br>        request.setVideoIds(videoIds);<br><br>        <span class="hljs-comment">// 调用初始化方法进行删除</span><br>        client.getAcsResponse(request);<br>    &#125; <span class="hljs-keyword">catch</span> (ClientException e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GuliException(<span class="hljs-number">20001</span>,<span class="hljs-string">&quot;删除视频失败&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="课程管理-删除课程删除视频远程调用"><a href="#课程管理-删除课程删除视频远程调用" class="headerlink" title="课程管理-删除课程删除视频远程调用"></a>课程管理-删除课程删除视频远程调用</h1><p>com.atguigu.eduservice.client.VodClient</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 删除多个阿里云视频</span><br><span class="hljs-meta">@RequestMapping(&quot;/eduvod/video/delete-batch&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">deleteBatch</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;videoIddList&quot;)</span> List&lt;String&gt; videoIddList)</span></span>;<br></code></pre></td></tr></table></figure>

<p>com.atguigu.eduservice.service.impl.EduVideoServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EduVideoServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceImpl</span>&lt;<span class="hljs-title">EduVideoMapper</span>, <span class="hljs-title">EduVideo</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">EduVideoService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> VodClient vodClient;<br><br>    <span class="hljs-comment">// 根据课程id删除小节</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeVideoByCourseId</span><span class="hljs-params">(String courseId)</span> </span>&#123;<br>        <span class="hljs-comment">// 根据课程id查询课程所有的视频id</span><br>        QueryWrapper&lt;EduVideo&gt; wrapperVideo = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        wrapperVideo.eq(<span class="hljs-string">&quot;course_id&quot;</span>,courseId);<br>        <span class="hljs-comment">// 只需要这一个字段</span><br>        wrapperVideo.select(<span class="hljs-string">&quot;video_source_id&quot;</span>);<br><br>        List&lt;EduVideo&gt; eduVideoList = baseMapper.selectList(wrapperVideo);<br><br>        <span class="hljs-comment">// 需要将List&lt;EduVideo&gt;变成List&lt;String&gt;这样</span><br>        List&lt;String&gt; videoIds = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-comment">// 遍历eduVideoList，拿到里面的每一个id值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; eduVideoList.size(); i++) &#123;<br>            EduVideo eduVideo = eduVideoList.get(i);<br>            String videoSourceId = eduVideo.getVideoSourceId();<br>            <span class="hljs-comment">// 判断videoSourceId是否为空</span><br>            <span class="hljs-keyword">if</span> (StringUtils.isEmpty(videoSourceId))&#123;<br>                <span class="hljs-comment">// 不为空，将id加入集合</span><br>                videoIds.add(videoSourceId);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 判断集合videoIds是否为空</span><br>        <span class="hljs-keyword">if</span> (videoIds.size() &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">// 调用远程方法，根据多少id进行删除视频</span><br>            vodClient.deleteBatch(videoIds);<br>        &#125;<br><br><br>        QueryWrapper&lt;EduVideo&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        wrapper.eq(<span class="hljs-string">&quot;course_id&quot;</span>,courseId);<br>        baseMapper.delete(wrapper);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="技术点-SpringCloud调用接口流程"><a href="#技术点-SpringCloud调用接口流程" class="headerlink" title="技术点-SpringCloud调用接口流程"></a>技术点-SpringCloud调用接口流程</h1><p>Feign-&gt;Hystrix-&gt;Ribbon-&gt;Http Client</p>
<p><img src="/myBlog/day10-%E8%AF%BE%E7%A8%8B%E7%AE%A1%E7%90%86/image-20220106234453087.png" alt="image-20220106234453087"></p>
<h1 id="课程管理-项目中整合熔断器"><a href="#课程管理-项目中整合熔断器" class="headerlink" title="课程管理-项目中整合熔断器"></a>课程管理-项目中整合熔断器</h1><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--hystrix依赖，主要是用  @HystrixCommand --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>配置文件开启熔断器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs pro">#开启熔断机制<br>feign.hystrix.enabled=true<br># 设置hystrix超时时间，默认1000ms<br># hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=6000<br></code></pre></td></tr></table></figure>

<p>编写调用远程方法接口的实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VodFileDegradeFeignClient</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">VodClient</span> </span>&#123;<br><br>    <span class="hljs-comment">// 熔断器，服务发送错误时调用次方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">deleteAlyVideo</span><span class="hljs-params">(String id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> R.error().message(<span class="hljs-string">&quot;删除视频失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">deleteBatch</span><span class="hljs-params">(List&lt;String&gt; videoIddList)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> R.error().message(<span class="hljs-string">&quot;删除多个视频失败&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>在接口的Feign加入fallback属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@FeignClient(name = &quot;service-vod&quot;,fallback = VodFileDegradeFeignClient.class)</span>     <span class="hljs-comment">// 远程调用服务名称</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">VodClient</span> </span>&#123;<br></code></pre></td></tr></table></figure>

<p>修改删除小节的方法，Debug测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">deleteVideo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>    <span class="hljs-comment">// 根据小节id查询出视频id</span><br>    EduVideo eduVideo = eduVideoService.getById(id);<br>    String videoSourceId = eduVideo.getVideoSourceId();<br><br>    <span class="hljs-comment">// 先判断得到的视频id是否为空</span><br>    <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(videoSourceId))&#123;<br>        <span class="hljs-comment">// 根据视频id删除阿里云的视频</span><br>        R result = vodClient.deleteAlyVideo(videoSourceId);<br>        <span class="hljs-keyword">if</span> (result.getCode() == <span class="hljs-number">20001</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GuliException(<span class="hljs-number">20001</span>,<span class="hljs-string">&quot;删除视频失败，熔断器...&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    eduVideoService.removeById(id);<br>    <span class="hljs-keyword">return</span> R.ok();<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>项目|谷粒学院|笔记</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>postgresql笔记</title>
    <url>/myBlog/postgresql%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="postgresql笔记"><a href="#postgresql笔记" class="headerlink" title="postgresql笔记"></a>postgresql笔记</h1><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><p>postgresql数据库的主要特点如下：</p>
<ul>
<li>免费</li>
<li>速度快</li>
<li>平台可移植行</li>
<li>丰富的接口</li>
<li>面向对象特性</li>
<li>安全性</li>
<li>配合的开源软件很多</li>
</ul>
<h1 id="window安装"><a href="#window安装" class="headerlink" title="window安装"></a>window安装</h1><h1 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h1><p>.run包，直接运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ps aux | grep postgresql<br><br>./pg_ctl stop -D /PostgreSQL/9.3/data		<span class="hljs-comment"># 关闭服务</span><br>./pg_ctl start -D /PostgreSQL/9.3/data -l /PostgreSQL/9.3/data/server.log	<span class="hljs-comment"># 启动服务</span><br></code></pre></td></tr></table></figure>



<h1 id="pgAdmin客户端工具使用"><a href="#pgAdmin客户端工具使用" class="headerlink" title="pgAdmin客户端工具使用"></a>pgAdmin客户端工具使用</h1><h1 id="使用pgAdmin工具操作数据库对象"><a href="#使用pgAdmin工具操作数据库对象" class="headerlink" title="使用pgAdmin工具操作数据库对象"></a>使用pgAdmin工具操作数据库对象</h1><p>略</p>
<h1 id="利用sql语言操作数据库对象"><a href="#利用sql语言操作数据库对象" class="headerlink" title="利用sql语言操作数据库对象"></a>利用sql语言操作数据库对象</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database db_pg;<br><br><span class="hljs-keyword">create</span> database db_pg1;<br><br><span class="hljs-keyword">alter</span> database db_pg rename <span class="hljs-keyword">to</span> db_pg2;<br><br><span class="hljs-keyword">alter</span> database db_pg2 connection limit <span class="hljs-number">20</span>;<br><br><span class="hljs-keyword">drop</span> database db_pg1;<br><br><span class="hljs-keyword">drop</span> database db_pg2;<br></code></pre></td></tr></table></figure>

<p>报错，先断开连接，再修改或者删除</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">ERROR:  </span>database &quot;db_pg&quot; is being accessed by other users<br>DETAIL:  There are 2 other sessions using the database.<br>SQL 状态: 55006<br></code></pre></td></tr></table></figure>



<h1 id="利用sql语言操作数据表对象"><a href="#利用sql语言操作数据表对象" class="headerlink" title="利用sql语言操作数据表对象"></a>利用sql语言操作数据表对象</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>	id <span class="hljs-type">int</span>,<br>	name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<br>	birthday <span class="hljs-type">date</span>,<br>	score <span class="hljs-type">numeric</span>(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>)<br>);<br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student rename <span class="hljs-keyword">to</span> student1;<br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student1 rename id <span class="hljs-keyword">to</span> bh;<br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student1 <span class="hljs-keyword">alter</span> <span class="hljs-keyword">column</span> name type <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>);<br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student1 <span class="hljs-keyword">drop</span> <span class="hljs-keyword">column</span> birthday;<br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student1 <span class="hljs-keyword">add</span> <span class="hljs-keyword">column</span> address <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>);<br><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> student1;<br><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> student1;<br></code></pre></td></tr></table></figure>



<h1 id="postgresql常用数据类型"><a href="#postgresql常用数据类型" class="headerlink" title="postgresql常用数据类型"></a>postgresql常用数据类型</h1><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><p>整数类型：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">SMALLINT 	// 小范围整数，取值范围：-32768~32767<br>INT(INTEGER) 	// 普通大小整数-2147483648~2147483647<br></code></pre></td></tr></table></figure>

<p>任意精度浮点数类型</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">REAL	// 6位十进制数字精度<br>NUMERIC(m,n) // 任意精度类型 m表示字段长度，n表示精度，假如m为5的时候，1000.00会报错，而100.00不会，但是100.888没事，结果显示的是100.89<br></code></pre></td></tr></table></figure>



<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> temp(<br>	x <span class="hljs-type">smallint</span>,<br>	y <span class="hljs-type">int</span>,<br>	z <span class="hljs-type">real</span>,<br>	n <span class="hljs-type">numeric</span>(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>)<br>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> temp <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4.11</span>,<span class="hljs-number">100.00</span>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> temp <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4.11</span>,<span class="hljs-number">1000.00</span>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> temp <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4.11</span>,<span class="hljs-number">100.888</span>);<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> temp;<br></code></pre></td></tr></table></figure>



<p>ERROR:  numeric field overflow DETAIL:  A field with precision 5, scale 2 must round to an absolute value less than 10^3. SQL 状态: 22003</p>
<h2 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h2><p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522215639687.png" alt="image-20220522215639687"></p>
<h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522215916892.png" alt="image-20220522215916892"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> concat( <span class="hljs-string">&#x27;(&#x27;</span>, ch, <span class="hljs-string">&#x27;)&#x27;</span>),<br>	concat( <span class="hljs-string">&#x27;(&#x27;</span>, vch, <span class="hljs-string">&#x27;)&#x27;</span>),<br>	concat( <span class="hljs-string">&#x27;(&#x27;</span>, t, <span class="hljs-string">&#x27;)&#x27;</span>),<br><span class="hljs-keyword">from</span> temp3;<br></code></pre></td></tr></table></figure>

<p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522220245838.png" alt="image-20220522220245838"></p>
<h2 id="选择正确的数据类型"><a href="#选择正确的数据类型" class="headerlink" title="选择正确的数据类型"></a>选择正确的数据类型</h2><p>主要目的：优化存储区，提高数据库性能</p>
<ul>
<li>正确使用整数类型和浮点数类型</li>
<li>日期与时间类型</li>
<li>CHAR与VARCHAR之间的特点与选择</li>
</ul>
<p>char：固定长度，不足的后面会以空格补齐，检索效率高</p>
<p>varchar：变长字符串，有长度限制，不足的不会以空格填充。</p>
<h1 id="postgresql运算符"><a href="#postgresql运算符" class="headerlink" title="postgresql运算符"></a>postgresql运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522221142841.png" alt="image-20220522221142841"></p>
<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522221052364.png" alt="image-20220522221052364"></p>
<p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522221350085.png" alt="image-20220522221350085"></p>
<p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522221538254.png" alt="image-20220522221538254"></p>
<p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522221812632.png" alt="image-20220522221812632"></p>
<p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522221923167.png" alt="image-20220522221923167"></p>
<p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522222214222.png" alt="image-20220522222214222"></p>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p><strong>NOT 逻辑非</strong></p>
<p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522222445688.png" alt="image-20220522222445688"></p>
<p>1：真，y：真，0：假，n：假</p>
<p><strong>AND 逻辑与</strong></p>
<p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522222631388.png" alt="image-20220522222631388"></p>
<p><strong>OR 逻辑或</strong></p>
<p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522222820019.png" alt="image-20220522222820019"></p>
<h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522222926120.png" alt="image-20220522222926120"></p>
<h1 id="postgresql常用函数"><a href="#postgresql常用函数" class="headerlink" title="postgresql常用函数"></a>postgresql常用函数</h1><h2 id="函数的作用"><a href="#函数的作用" class="headerlink" title="函数的作用"></a>函数的作用</h2><h2 id="常用数值函数"><a href="#常用数值函数" class="headerlink" title="常用数值函数"></a>常用数值函数</h2><p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522223548170.png" alt="image-20220522223548170"></p>
<h2 id="常用的字符串函数"><a href="#常用的字符串函数" class="headerlink" title="常用的字符串函数"></a>常用的字符串函数</h2><p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522223746421.png" alt="image-20220522223746421"></p>
<h2 id="常用的日期和时间函数"><a href="#常用的日期和时间函数" class="headerlink" title="常用的日期和时间函数"></a>常用的日期和时间函数</h2><p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522223939888.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> e_no,e_name,e_hireDate,<span class="hljs-built_in">extract</span>(<span class="hljs-keyword">year</span> <span class="hljs-keyword">from</span> e_hireDate), <span class="hljs-built_in">extract</span>(<span class="hljs-keyword">month</span> <span class="hljs-keyword">from</span> e_hireDate),<span class="hljs-built_in">extract</span>(<span class="hljs-keyword">day</span> <span class="hljs-keyword">from</span> e_hireDate) <span class="hljs-keyword">from</span> employee;<br></code></pre></td></tr></table></figure>



<h1 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>基本语法格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span>				<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 声明创建函数<br>	<span class="hljs-keyword">add</span>(<span class="hljs-type">integer</span>,<span class="hljs-type">integer</span>)	<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 定义函数名称，参数类型<br><span class="hljs-keyword">returns</span> <span class="hljs-type">integer</span> 			<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 定义函数返回值<br>	<span class="hljs-keyword">AS</span> <span class="hljs-string">&#x27;select $1 + $2&#x27;</span>		<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 定义函数体<br><span class="hljs-keyword">language</span> <span class="hljs-keyword">sql</span>				<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 用以实现函数的语言的名字<br><span class="hljs-keyword">returns</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">null</span> input;	<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 定义参数为<span class="hljs-keyword">null</span>时处理情况<br></code></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">add</span>(<span class="hljs-type">integer</span>,<span class="hljs-type">integer</span>)<br><span class="hljs-keyword">returns</span> <span class="hljs-type">integer</span> <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;select $1 + $2;&#x27;</span><br><span class="hljs-keyword">language</span> <span class="hljs-keyword">sql</span><br><span class="hljs-keyword">returns</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">null</span> input;<br><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">add</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure>



<p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522225552973.png" alt="image-20220522225552973"></p>
<p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522225744971.png" alt="image-20220522225744971"></p>
<p>删除一个函数</p>
<p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522225853772.png" alt="image-20220522225853772"></p>
<h1 id="postgresql数据库索引"><a href="#postgresql数据库索引" class="headerlink" title="postgresql数据库索引"></a>postgresql数据库索引</h1><h2 id="索引的作用"><a href="#索引的作用" class="headerlink" title="索引的作用"></a>索引的作用</h2><p>提高检索的速度，相当于一本书的目录，可以根据目录快速找到想要找的内容。</p>
<h2 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h2><p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522230229558.png" alt="image-20220522230229558"></p>
<h2 id="索引的创建和删除"><a href="#索引的创建和删除" class="headerlink" title="索引的创建和删除"></a>索引的创建和删除</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> index emp_name_index <span class="hljs-keyword">on</span> employee(e_name); 		<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 默认btree索引<br><br><span class="hljs-keyword">drop</span> index emp_name_index;<br></code></pre></td></tr></table></figure>



<h2 id="使用索引的优点和缺点"><a href="#使用索引的优点和缺点" class="headerlink" title="使用索引的优点和缺点"></a>使用索引的优点和缺点</h2><p>优点：</p>
<ul>
<li>提高数据的查询速度</li>
<li>加速表与表之间的连接</li>
</ul>
<p>缺点：</p>
<ul>
<li>创建和维护索引需要耗费时间</li>
<li>需要占用磁盘空间</li>
</ul>
<h1 id="postgresql数据库视图"><a href="#postgresql数据库视图" class="headerlink" title="postgresql数据库视图"></a>postgresql数据库视图</h1><h2 id="视图的含义"><a href="#视图的含义" class="headerlink" title="视图的含义"></a>视图的含义</h2><p>避免每次多表查询的时候都要编写复杂的SQL语句，可以直接创建视图，下次需要用到的时候直接用创建好的视图即可，不用关注底层的细节。</p>
<h2 id="视图的创建"><a href="#视图的创建" class="headerlink" title="视图的创建"></a>视图的创建</h2><p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522231404341.png" alt="image-20220522231404341"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">view</span> v_emp_dev <span class="hljs-keyword">as</span> <span class="hljs-keyword">select</span> e_no, e_name,e_salary,e_hireDate <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> dept_no <span class="hljs-operator">=</span> <span class="hljs-number">10</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> e_salary <span class="hljs-keyword">desc</span>;		<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 创建视图<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> v_emp_dev;	<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 查看视图<br><br><br></code></pre></td></tr></table></figure>



<h2 id="视图的删除"><a href="#视图的删除" class="headerlink" title="视图的删除"></a>视图的删除</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> v_emp_dev;		<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 删除视图<br></code></pre></td></tr></table></figure>



<h2 id="视图的作用"><a href="#视图的作用" class="headerlink" title="视图的作用"></a>视图的作用</h2><ul>
<li>简单化</li>
<li>安全化</li>
<li>逻辑数据独立性</li>
</ul>
<p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522232009234.png" alt="image-20220522232009234"></p>
<h1 id="简单数据插入操作"><a href="#简单数据插入操作" class="headerlink" title="简单数据插入操作"></a>简单数据插入操作</h1><p>向单表中插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> temp(<br>	x <span class="hljs-type">smallint</span>,<br>	y <span class="hljs-type">int</span>,<br>	z <span class="hljs-type">real</span>,<br>	n <span class="hljs-type">numeric</span>(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>)<br>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> temp <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4.11</span>,<span class="hljs-number">100.00</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> temp (x,y,z) <span class="hljs-keyword">values</span> (<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5.01</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> temp;<br></code></pre></td></tr></table></figure>



<h1 id="数据批量插入操作"><a href="#数据批量插入操作" class="headerlink" title="数据批量插入操作"></a>数据批量插入操作</h1><p>利用insert批量插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> temp <span class="hljs-keyword">values</span><br>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4.11</span>,<span class="hljs-number">100.00</span>),<br>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4.11</span>,<span class="hljs-number">100.00</span>),<br>(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4.11</span>,<span class="hljs-number">100.00</span>); <br></code></pre></td></tr></table></figure>

<p>利用select批量插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student_new <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;		<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 向student_new的表格插入从student表查询出来的所有的内容<br></code></pre></td></tr></table></figure>

<p>利用select批量插入指定的属性</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student_new (id,name) <span class="hljs-keyword">select</span> id,name <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure>

<p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522233340471.png" alt="image-20220522233340471"></p>
<h1 id="数据更新操作"><a href="#数据更新操作" class="headerlink" title="数据更新操作"></a>数据更新操作</h1><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"># 指定条件更新数据<br>update student <span class="hljs-keyword">set</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;zhangsan&#x27;</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br># 批量更新数据<br>update student <span class="hljs-keyword">set</span> score <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;	<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 将该表的score都改为<span class="hljs-number">0</span><br><br># 将指定结果更新到对应的字段<br>update student <span class="hljs-keyword">set</span> score <span class="hljs-operator">=</span> <span class="hljs-number">1.5</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-keyword">where</span> id  <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span>;<br></code></pre></td></tr></table></figure>



<h1 id="数据删除操作"><a href="#数据删除操作" class="headerlink" title="数据删除操作"></a>数据删除操作</h1> <figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-keyword">between</span> <span class="hljs-string">&#x27;1999-01-01&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;1999-02-01&#x27;</span>;<br><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> student;<br><br><span class="hljs-keyword">truncate</span> <span class="hljs-keyword">table</span> student_new;		<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 清空这个表所有的数据 <br></code></pre></td></tr></table></figure>



<p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220522234426234.png" alt="image-20220522234426234"></p>
<h1 id="postgresql数据表主键和外键"><a href="#postgresql数据表主键和外键" class="headerlink" title="postgresql数据表主键和外键"></a>postgresql数据表主键和外键</h1><h2 id="如何定义主键约束"><a href="#如何定义主键约束" class="headerlink" title="如何定义主键约束"></a>如何定义主键约束</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> temp(<br>	id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key,		<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 列级约束<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<br>    salary <span class="hljs-type">numeric</span>(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>)<br>);<br></code></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> temp2(<br>	id <span class="hljs-type">int</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<br>    salary <span class="hljs-type">numeric</span>(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>),<br>    <span class="hljs-keyword">constraint</span> pk_temp <span class="hljs-keyword">primary</span> key(id)		<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 表级约束<br>);<br></code></pre></td></tr></table></figure>



<h2 id="如何定义外键约束"><a href="#如何定义外键约束" class="headerlink" title="如何定义外键约束"></a>如何定义外键约束</h2><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> temp2(<br>	id <span class="hljs-type">int</span>,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<br>    salary <span class="hljs-type">numeric</span>(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>),<br>    tempId <span class="hljs-type">int</span>,<br>    <span class="hljs-keyword">constraint</span> pk_temp <span class="hljs-keyword">foreign</span> key(tempId) <span class="hljs-keyword">references</span> temp(id)<br>);<br></code></pre></td></tr></table></figure>



<h2 id="主键约束和外键约束的作用"><a href="#主键约束和外键约束的作用" class="headerlink" title="主键约束和外键约束的作用"></a>主键约束和外键约束的作用</h2><p>主键约束作用：</p>
<ul>
<li>唯一标识一条记录</li>
<li>提高数据的检索效率</li>
</ul>
<p>外键约束作用：</p>
<ul>
<li>保证数据的完整性</li>
<li>提高数据的检索效率</li>
</ul>
<h1 id="postgresql数据表非空约束、唯一约束、默认值约束介绍"><a href="#postgresql数据表非空约束、唯一约束、默认值约束介绍" class="headerlink" title="postgresql数据表非空约束、唯一约束、默认值约束介绍"></a>postgresql数据表非空约束、唯一约束、默认值约束介绍</h1><p>非空约束：not null</p>
<p>唯一约束：unique</p>
<p>默认约束：default</p>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul>
<li>维护数据的完整性</li>
<li>在业务面保证数据正确性</li>
</ul>
<h1 id="简单数据查询操作"><a href="#简单数据查询操作" class="headerlink" title="简单数据查询操作"></a>简单数据查询操作</h1><p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220523213256497.png" alt="image-20220523213256497"></p>
<h1 id="单表指定条件查询"><a href="#单表指定条件查询" class="headerlink" title="单表指定条件查询"></a>单表指定条件查询</h1><p>in</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> t_no <span class="hljs-keyword">in</span> (<span class="hljs-number">20</span>,<span class="hljs-number">30</span>);<br></code></pre></td></tr></table></figure>

<p>between and </p>
<p>like</p>
<h1 id="单表指定条件复杂查询操作"><a href="#单表指定条件复杂查询操作" class="headerlink" title="单表指定条件复杂查询操作"></a>单表指定条件复杂查询操作</h1><p>查询空值内容</p>
<p>and、or多条件查询</p>
<p>查询结果集排序</p>
<p>limit关键字查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t limit <span class="hljs-number">5</span> <span class="hljs-keyword">offset</span> <span class="hljs-number">5</span>;	# 显示前<span class="hljs-number">5</span>条，忽略<span class="hljs-number">5</span>条，即忽略前<span class="hljs-number">5</span>条，从第<span class="hljs-number">6</span>条开始显示<span class="hljs-number">5</span>条。<br></code></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t limit <span class="hljs-number">5</span> <span class="hljs-keyword">offset</span> ((页码 <span class="hljs-number">-1</span>) <span class="hljs-operator">*</span> <span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure>



<h1 id="多表复杂查询操作"><a href="#多表复杂查询操作" class="headerlink" title="多表复杂查询操作"></a>多表复杂查询操作</h1><p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220523221203068.png" alt="image-20220523221203068"></p>
<h1 id="子查询操作"><a href="#子查询操作" class="headerlink" title="子查询操作"></a>子查询操作</h1><p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220523222107785.png" alt="image-20220523222107785"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span> (<span class="hljs-keyword">select</span> d_no <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> id_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;开发部&#x27;</span>);	# 如果<span class="hljs-keyword">exists</span>后面的查询为真，则将结果为真传到前面的查询中，返回所有的结果。<br></code></pre></td></tr></table></figure>

<p>|| 拼接</p>
<p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220523222007019.png" alt="image-20220523222007019"></p>
<h1 id="查询结果集合并操作"><a href="#查询结果集合并操作" class="headerlink" title="查询结果集合并操作"></a>查询结果集合并操作</h1><p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220523222220155.png" alt="image-20220523222220155"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> e <span class="hljs-keyword">where</span> dept_no <span class="hljs-keyword">in</span> (<span class="hljs-number">10</span>,<span class="hljs-number">20</span>)<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> e <span class="hljs-keyword">where</span> e_salary <span class="hljs-operator">&gt;</span> <span class="hljs-number">5000</span>;<br></code></pre></td></tr></table></figure>

<p>上面有重复的值，因为有数据是满足两个查询语句的。</p>
<p>如何避免？使用union即可。上下两个列需要一致，如果不存在可以用null占位。</p>
<p><img src="/myBlog/postgresql%E7%AC%94%E8%AE%B0/image-20220523222802433.png" alt="image-20220523222802433"></p>
]]></content>
      <categories>
        <category>postgresql笔记</category>
      </categories>
      <tags>
        <tag>postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title>快速搭建个人电子书Gitbook并部署到GitHub Pages和Nginx</title>
    <url>/myBlog/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%94%B5%E5%AD%90%E4%B9%A6Gitbook%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0GitHubPages%E5%92%8CNginx/</url>
    <content><![CDATA[<h1 id="快速搭建个人电子书Gitbook并部署到GitHub-Pages和Nginx"><a href="#快速搭建个人电子书Gitbook并部署到GitHub-Pages和Nginx" class="headerlink" title="快速搭建个人电子书Gitbook并部署到GitHub Pages和Nginx"></a>快速搭建个人电子书Gitbook并部署到GitHub Pages和Nginx</h1><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><ul>
<li><a href="https://nodejs.org/en/">nodejs</a></li>
<li><a href="https://git-scm.com/">git</a></li>
<li><a href="https://github.com/">GitHub账号</a></li>
<li>Markdown编辑器，这里推荐<a href="https://www.typora.net/">Typora</a></li>
</ul>
<p>以上准备好之后就可以开始搭建了。</p>
<h1 id="本地搭建"><a href="#本地搭建" class="headerlink" title="本地搭建"></a>本地搭建</h1><h2 id="全局安装gitbook-cli工具"><a href="#全局安装gitbook-cli工具" class="headerlink" title="全局安装gitbook-cli工具"></a>全局安装gitbook-cli工具</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm install gitbook-cli -g<br></code></pre></td></tr></table></figure>

<p>检查版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">gitbook --version<br></code></pre></td></tr></table></figure>

<p>如果出现版本号，说明安装成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">CLI version: 2.3.2<br>GitBook version: 3.2.3<br></code></pre></td></tr></table></figure>

<p>如果有报类型找不到的错误，可能是nodejs的版本过高导致的，可以将版本，我这里用的是nodejs 12+的。</p>
<h2 id="本地初始化一本电子书"><a href="#本地初始化一本电子书" class="headerlink" title="本地初始化一本电子书"></a>本地初始化一本电子书</h2><p>创建目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">mkdir gitbook<br><span class="hljs-built_in">cd</span> gitbook<br></code></pre></td></tr></table></figure>

<p>初始化电子书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">gitbook init<br></code></pre></td></tr></table></figure>

<p>成功之后会如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">E:\temp\gitbook&gt;gitbook init<br>warn: no summary file <span class="hljs-keyword">in</span> this book<br>info: create README.md<br>info: create SUMMARY.md<br>info: initialization is finished<br><br>E:\temp\gitbook&gt;<br></code></pre></td></tr></table></figure>

<p>README.md为简介文档，SUMMARY.md为所要创建的电子书的目录文档，自动生成。</p>
<h2 id="SUMMARY-md文件的格式"><a href="#SUMMARY-md文件的格式" class="headerlink" title="SUMMARY.md文件的格式"></a>SUMMARY.md文件的格式</h2><p>目录的Markdown语法格式如下</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">* [第一章](doc<span class="hljs-regexp">/第一章/</span>第一章.md)<br>  * [第一节](doc<span class="hljs-regexp">/第一章/</span>第一节.md)<br>  * [第二节](doc<span class="hljs-regexp">/第一章/</span>第二节.md)<br>* [第二章](doc<span class="hljs-regexp">/第二章/</span>第二章.md)<br>  * [第一节](doc<span class="hljs-regexp">/第二章/</span>第一节.md)<br>    * [第一节的小节](doc<span class="hljs-regexp">/第二章/</span>第一节/第一节的小节.md)<br>  * [第二节](doc<span class="hljs-regexp">/第二章/</span>第二节.md)<br></code></pre></td></tr></table></figure>

<p>效果如下</p>
<p><img src="/myBlog/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%94%B5%E5%AD%90%E4%B9%A6Gitbook%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0GitHubPages%E5%92%8CNginx/image-20220717161114018.png" alt="目录结构"></p>
<h2 id="生成电子书"><a href="#生成电子书" class="headerlink" title="生成电子书"></a>生成电子书</h2><p>由于上面我们自定义了电子书的目录，所以现在需要重新初始化一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">gitbook init<br></code></pre></td></tr></table></figure>

<p>如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">E:\temp\gitbook&gt;gitbook init<br>info: create doc/第一章/第一章.md<br>info: create doc/第一章/第一节.md<br>info: create doc/第一章/第二节.md<br>info: create doc/第二章/第二章.md<br>info: create doc/第二章/第一节.md<br>info: create doc/第二章/第一节/第一节的小节.md<br>info: create doc/第二章/第二节.md<br>info: create SUMMARY.md<br>info: initialization is finished<br><br>E:\temp\gitbook&gt;<br></code></pre></td></tr></table></figure>

<p>启动电子书，在本地测试。访问<a href="http://localhost:4000进行测试，如果你想指定端口可以执行">http://localhost:4000进行测试，如果你想指定端口可以执行</a> gitbook serve –port 8888</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">gitbook serve<br></code></pre></td></tr></table></figure>

<p>效果如下，到这里一本电子书已经搭建完毕了，剩下的就是尽情挥洒你的文笔了。</p>
<p><img src="/myBlog/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%94%B5%E5%AD%90%E4%B9%A6Gitbook%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0GitHubPages%E5%92%8CNginx/image-20220717161552070.png" alt="本地运行效果图"></p>
<h2 id="文档打包"><a href="#文档打包" class="headerlink" title="文档打包"></a>文档打包</h2><p>可以使用gitbook build打包你的项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">E:\temp\gitbook&gt;gitbook build<br>info: 7 plugins are installed<br>info: 6 explicitly listed<br>info: loading plugin <span class="hljs-string">&quot;highlight&quot;</span>... OK<br>info: loading plugin <span class="hljs-string">&quot;search&quot;</span>... OK<br>info: loading plugin <span class="hljs-string">&quot;lunr&quot;</span>... OK<br>info: loading plugin <span class="hljs-string">&quot;sharing&quot;</span>... OK<br>info: loading plugin <span class="hljs-string">&quot;fontsettings&quot;</span>... OK<br>info: loading plugin <span class="hljs-string">&quot;theme-default&quot;</span>... OK<br>info: found 8 pages<br>info: found 7 asset files<br>info: &gt;&gt; generation finished with success <span class="hljs-keyword">in</span> 1.1s !<br><br>E:\temp\gitbook&gt;<br></code></pre></td></tr></table></figure>

<p>这时会生成一个_book的文件，这个文件就是生成的静态网页，如果是部署到自己的云服务器，直接拿这个文件去部署即可，入口为index.html。</p>
<h1 id="部署到GitHub-Pages"><a href="#部署到GitHub-Pages" class="headerlink" title="部署到GitHub Pages"></a>部署到GitHub Pages</h1><h2 id="在GitHub上面创建一个repository"><a href="#在GitHub上面创建一个repository" class="headerlink" title="在GitHub上面创建一个repository"></a>在GitHub上面创建一个repository</h2><p>这个仓库主要是存储你的项目和部署项目用到。</p>
<h2 id="将本地项目推到GitHub"><a href="#将本地项目推到GitHub" class="headerlink" title="将本地项目推到GitHub"></a>将本地项目推到GitHub</h2><p>编写一个.gitignore文件，忽略_book文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 忽略gitbook生成的项目目录</span><br>_book<br></code></pre></td></tr></table></figure>

<p>依次执行下面的代码，将项目推到GitHub</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git init<br>git add .<br>git commit -m <span class="hljs-string">&quot;first commit&quot;</span><br>git remote add origin https:你自己的仓库地址<br>git push -u origin master<br><br><br>git init<br>git add .<br>git commit -m <span class="hljs-string">&quot;first commit&quot;</span><br>git remote add origin git@github.com:No-Ten/testGitBook.git<br>git push -u origin master<br></code></pre></td></tr></table></figure>

<p>执行完上面的命令之后，你的项目就会在GitHub上面啦</p>
<h2 id="生成项目并推到GitHub的pages分支上"><a href="#生成项目并推到GitHub的pages分支上" class="headerlink" title="生成项目并推到GitHub的pages分支上"></a>生成项目并推到GitHub的pages分支上</h2><p>这里为了便捷，直接编写了一个脚本deploy.sh执行，也可以手动输入。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;执行命令：gitbook build .&#x27;</span><br>gitbook build .<br><br><span class="hljs-comment"># 进入_book文件</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;执行命令：cd ./_book\n&quot;</span><br><span class="hljs-built_in">cd</span> ./_book<br><br><span class="hljs-comment"># 将_book初始化为git的仓库，方便推送到GitHub上面</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;执行命令：git init&quot;</span><br>git init<br><br><span class="hljs-comment"># 保存所有的修改</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;执行命令：git add .&quot;</span><br>git add .<br><br><span class="hljs-comment"># 把修改的文件提交</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;执行命令：git commit -m &#x27;deploy&#x27;&quot;</span><br>git commit -m <span class="hljs-string">&quot;deploy&quot;</span><br><br><span class="hljs-comment"># 发布</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;执行命令：git push -f 自己的仓库地址 master:gh-pages&quot;</span><br>git push -f https://github.com/xxxx/xxx.git master:gh-pages<br><br><span class="hljs-comment"># 返回上一级目录</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;回到刚才工作目录&quot;</span><br><span class="hljs-built_in">cd</span> -<br></code></pre></td></tr></table></figure>

<p>文件保存之后，在终端下面执行，需要再git bash下面执行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">bash deploy.sh<br></code></pre></td></tr></table></figure>

<p>执行成功之后，如果在GitHub上面看到有index.html说明已经成功了。</p>
<h2 id="设置GitHub-pages访问路径"><a href="#设置GitHub-pages访问路径" class="headerlink" title="设置GitHub pages访问路径"></a>设置GitHub pages访问路径</h2><p>在github网站上的仓库里面点击<code>Settings</code> -&gt; <code>GitHub Pages</code>选项中 -&gt; <code>Source</code>里面选择<code>gh-pages branch</code> 然后点击<code>Save</code>按钮，然后在<code>GitHub Pages</code>下面就会看见一个网址，这个网址就是最终的网站。<br>最终效果如下图所示：</p>
<p><img src="/myBlog/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%94%B5%E5%AD%90%E4%B9%A6Gitbook%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0GitHubPages%E5%92%8CNginx/image-20220717165337372.png" alt="image-20220717165337372"></p>
<p>我这里了的GitHub pages的路径是自动设置好了，所以直接访问即可。到这里属于自己的电子书就搭建完成了，尽情享受吧！！！</p>
<h1 id="gitbook的一些实用插件"><a href="#gitbook的一些实用插件" class="headerlink" title="gitbook的一些实用插件"></a>gitbook的一些实用插件</h1><p>这里不多说，直接上链接。</p>
<p><a href="https://segmentfault.com/a/1190000019806829">https://segmentfault.com/a/1190000019806829</a></p>
<h1 id="利用Nginx部署到本地或者远程服务器"><a href="#利用Nginx部署到本地或者远程服务器" class="headerlink" title="利用Nginx部署到本地或者远程服务器"></a>利用Nginx部署到本地或者远程服务器</h1><p>下载<a href="http://nginx.org/">Nginx</a></p>
<p>下载好后再Nginx的conf文件夹里面找到nginx.conf文件，在server 添加一个监听</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">server&#123;<br>	listen       4000;<br>	server_name  localhost;<br>	<br>	location  /gitbook &#123;<br>		<span class="hljs-built_in">alias</span>  E:/temp/gitbook/_book;<br>		index index.html index.html;<br>		autoindex on;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>启动nginx ，双击nginx会闪退，可以在Nginx当前目录打开终端，执行下面的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">nginx.exe<br></code></pre></td></tr></table></figure>

<p>停止Nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">nginx -s stop<br></code></pre></td></tr></table></figure>



<p>访问测试，一般的Nginx都是80端口，可以直接访问localhost就可以看到nginx的页面了</p>
<p><img src="/myBlog/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%94%B5%E5%AD%90%E4%B9%A6Gitbook%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0GitHubPages%E5%92%8CNginx/image-20220717170420677.png" alt="image-20220717170420677"></p>
<p>加上我们gitbook的路径localhost:4000/gitbook</p>
<p><img src="/myBlog/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%94%B5%E5%AD%90%E4%B9%A6Gitbook%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0GitHubPages%E5%92%8CNginx/image-20220717170530050.png" alt="image-20220717170530050"></p>
<p>到这里，利用Nginx部署就完成了，远程的一样，稍微修改一下即可。</p>
]]></content>
      <categories>
        <category>快速搭建个人电子书</category>
      </categories>
      <tags>
        <tag>快速搭建个人电子书</tag>
      </tags>
  </entry>
  <entry>
    <title>找不到该项目，位置不可</title>
    <url>/myBlog/%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%A5%E9%A1%B9%E7%9B%AE%EF%BC%8C%E4%BD%8D%E7%BD%AE%E4%B8%8D%E5%8F%AF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="找不到该项目，位置不可"><a href="#找不到该项目，位置不可" class="headerlink" title="找不到该项目，位置不可"></a>找不到该项目，位置不可</h1><p>最近遇到了一个问题，那就是删除文件的时候，文件删不掉，说找不到该项目，位置不可用。</p>
<p><img src="/myBlog/%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%A5%E9%A1%B9%E7%9B%AE%EF%BC%8C%E4%BD%8D%E7%BD%AE%E4%B8%8D%E5%8F%AF%E7%94%A8/image-20211115113810158.png"></p>
<p><img src="/myBlog/%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%A5%E9%A1%B9%E7%9B%AE%EF%BC%8C%E4%BD%8D%E7%BD%AE%E4%B8%8D%E5%8F%AF%E7%94%A8/image-20211115113906078-1636947547530.png"></p>
<p>我找了很多资料，分别是下面几种。第一个是，写一个.bat的删除文件，第二个是用360的粉碎文件，第三个是进去安全模式，第四个是用U盘启动盘删除。<strong>注意：如果前面三个都试过了，建议直接跳到第四个，亲测有效！！</strong></p>
<p><strong>第一种：编写.bat文件</strong></p>
<ol>
<li> 在电脑桌面，新建一个文本文件，把下面的代码复制进去</li>
</ol>
<p>DEL /F /A /Q \?%1<br>RD /S /Q \?%1</p>
<ol start="2">
<li><p>点击另存为，选择所有文件，随便起个名字，把后缀改为.bat，确定保存即可</p>
<p><img src="/myBlog/%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%A5%E9%A1%B9%E7%9B%AE%EF%BC%8C%E4%BD%8D%E7%BD%AE%E4%B8%8D%E5%8F%AF%E7%94%A8/image-20211115114942178.png"></p>
</li>
<li><p>接着把需要删除的文件拖到这个.bat文件上面就可以删除了。</p>
</li>
</ol>
<p><img src="/myBlog/%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%A5%E9%A1%B9%E7%9B%AE%EF%BC%8C%E4%BD%8D%E7%BD%AE%E4%B8%8D%E5%8F%AF%E7%94%A8/image-20211115115259240.png"></p>
<p>但是对于我的这个文件没用。</p>
<p><strong>第二种：用360粉碎文件</strong></p>
<ol>
<li><p>打开360，搜索文件粉碎机</p>
<p><img src="/myBlog/%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%A5%E9%A1%B9%E7%9B%AE%EF%BC%8C%E4%BD%8D%E7%BD%AE%E4%B8%8D%E5%8F%AF%E7%94%A8/image-20211115115452714.png"></p>
</li>
<li><p>把要删除的文件拖进来，点击粉碎文件</p>
<p><img src="/myBlog/%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%A5%E9%A1%B9%E7%9B%AE%EF%BC%8C%E4%BD%8D%E7%BD%AE%E4%B8%8D%E5%8F%AF%E7%94%A8/image-20211115115555774.png"></p>
<p>但是这个方法，对我来说，还是不管用。</p>
</li>
</ol>
<p><strong>第三种方法：进去安全模式</strong></p>
<ol>
<li><p>win+R，输入MSConfig，回车</p>
<p><img src="/myBlog/%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%A5%E9%A1%B9%E7%9B%AE%EF%BC%8C%E4%BD%8D%E7%BD%AE%E4%B8%8D%E5%8F%AF%E7%94%A8/image-20211115115819049.png"></p>
</li>
<li><p>选择引导，在引导选项中勾上安全引导，点击确定。（也可以在开机的时候按快捷键进去安全模式，不同牌子的电脑有些区别，可自行去了解）</p>
<p><img src="/myBlog/%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%A5%E9%A1%B9%E7%9B%AE%EF%BC%8C%E4%BD%8D%E7%BD%AE%E4%B8%8D%E5%8F%AF%E7%94%A8/image-20211115115933827.png"></p>
</li>
<li><p>确定之后会询问你是否重新启动，确保电脑已经保存所有文件，避免重启时丢失，选择重启启动即可。</p>
<p><img src="/myBlog/%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%A5%E9%A1%B9%E7%9B%AE%EF%BC%8C%E4%BD%8D%E7%BD%AE%E4%B8%8D%E5%8F%AF%E7%94%A8/image-20211115120140977.png"></p>
</li>
<li><p>重启之后电脑会进入一个比较原始的画面，不用管他，直接找到删不掉文件的所在位置，和常规操作一样，右键删除，看看是否成功。</p>
</li>
<li><p>如果没有成功，先把所有窗口都关闭回到桌面，把开机自动进去安全模式的功能给关了，win+r，输入MSConfig，引导，把安全引导的勾勾给去掉，确定，重新启动即可。</p>
</li>
</ol>
<p>如果用了上面几个方法都没用，请不要放弃，因为我也试过了，都没生效，下面是第四个方法，亲测有效！！！！。</p>
<p><strong>第四个方法：U盘启动盘删除</strong></p>
<p>前提：要有U盘启动盘。</p>
<p>我这里用的是大白菜，如果没有可以去大白菜官网参考教程制作<a href="http://www.winbaicai.com/">http://www.winbaicai.com/</a></p>
<p>提示一点：制作U盘启动盘的时候最好用空的U盘，以免重要文件丢失。</p>
<ol>
<li><p>有了U盘启动盘之后，在大白菜官网查询如何通过U盘启动系统的快捷键，根据自身电脑选择即可。</p>
<p><img src="/myBlog/%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AF%A5%E9%A1%B9%E7%9B%AE%EF%BC%8C%E4%BD%8D%E7%BD%AE%E4%B8%8D%E5%8F%AF%E7%94%A8/image-20211115121724694.png"></p>
</li>
<li><p>准备好工具之后，把电脑关机，插入U盘启动盘，开机的时候，按对应的快捷键（如果怕进入不了，可以多按几次）</p>
</li>
<li><p>进入之后，有好几个选项，选择通过USB启动。</p>
</li>
<li><p>进去到大白菜的界面之后，观察首页有没有启动pe系统选项，如果没有就选择其他，进入其他里面就有了，选择pe启动，确定即可。</p>
</li>
<li><p>进入pe系统之后，这又有两个方法。</p>
</li>
<li><p>4.1就是打开我的电脑，找到文件所在位置，点击删除，看看能否成功，如果成功就可以了，不成功的话，接着下面的方法。</p>
</li>
<li><p>4.2返回pe系统的桌面，找到分区工具，打开电脑所有的文件都可以在里面找到</p>
</li>
<li><p>找到要删除的文件，右键，选择强制删除就可以了（<strong>注意：要确保你要删除的不是系统文件，否则会导致系统文件受损，电脑开不了机！！</strong>）</p>
</li>
</ol>
<p>OK，到这里文件就删除了，我的成功。</p>
<p>分析一下产生删不掉文件的原因：</p>
<p>经过测试，我之所以会产生这删不掉的文件，是因为我用的md文件编辑软件的图片存储路径弄错了。正常情况下是<code>./$&#123;filename&#125;</code>这样的，而我手误，把./中的.写成了,才导致的。把他改成正确的路径就没事了。</p>
]]></content>
      <categories>
        <category>Q&amp;A</category>
      </categories>
      <tags>
        <tag>Q&amp;A</tag>
      </tags>
  </entry>
  <entry>
    <title>校外如何访问知网</title>
    <url>/myBlog/%E6%A0%A1%E5%A4%96%E8%AE%BF%E9%97%AE%E7%9F%A5%E7%BD%91/</url>
    <content><![CDATA[<h1 id="校外如何访问知网"><a href="#校外如何访问知网" class="headerlink" title="校外如何访问知网"></a>校外如何访问知网</h1><span id="more"></span>

<h1 id="如何引用文献"><a href="#如何引用文献" class="headerlink" title="如何引用文献"></a>如何引用文献</h1><p>打开中国官网<a href="https://www.cnki.net/">https://www.cnki.net/</a></p>
<p><img src="/myBlog/%E6%A0%A1%E5%A4%96%E8%AE%BF%E9%97%AE%E7%9F%A5%E7%BD%91/image-20211215222009413.png" alt="image-20211215222009413"></p>
<p>如果想更换其他格式，可以点击更多格式</p>
<p><img src="/myBlog/%E6%A0%A1%E5%A4%96%E8%AE%BF%E9%97%AE%E7%9F%A5%E7%BD%91/image-20211215222105527.png" alt="image-20211215222105527"></p>
<p>按照格式复制即可</p>
<p><img src="/myBlog/%E6%A0%A1%E5%A4%96%E8%AE%BF%E9%97%AE%E7%9F%A5%E7%BD%91/image-20211215222123559.png" alt="image-20211215222123559"></p>
<h1 id="如何阅读"><a href="#如何阅读" class="headerlink" title="如何阅读"></a>如何阅读</h1><p><img src="/myBlog/%E6%A0%A1%E5%A4%96%E8%AE%BF%E9%97%AE%E7%9F%A5%E7%BD%91/image-20211215222402410.png" alt="image-20211215222402410"></p>
<h2 id="在线阅读"><a href="#在线阅读" class="headerlink" title="在线阅读"></a>在线阅读</h2><p>如果没有登录，只可以查看前面几页。登录了之后会发现需要购买。</p>
<h2 id="HTML阅读"><a href="#HTML阅读" class="headerlink" title="HTML阅读"></a>HTML阅读</h2><p>没有预览，直接购买。</p>
<h1 id="如何免费上知网"><a href="#如何免费上知网" class="headerlink" title="如何免费上知网"></a>如何免费上知网</h1><p>先了解一下知网可以通过账号登录，也看通过IP地址登录的</p>
<p><img src="/myBlog/%E6%A0%A1%E5%A4%96%E8%AE%BF%E9%97%AE%E7%9F%A5%E7%BD%91/image-20211215222907031.png" alt="image-20211215222907031"></p>
<h2 id="校内访问"><a href="#校内访问" class="headerlink" title="校内访问"></a>校内访问</h2><p>连接校园网，通过IP登录</p>
<h2 id="校外访问"><a href="#校外访问" class="headerlink" title="校外访问"></a>校外访问</h2><ol>
<li><p>通过学校的提供的VPN（这个需要学校购买知网数据库才有，我们学校有购买，可能仅限校内，没有VPN，校外无法访问）</p>
</li>
<li><p>通过一些有购买知网数据库的图书馆账号登录。这个是具体操作<a href="https://zhuanlan.zhihu.com/p/344063925">https://zhuanlan.zhihu.com/p/344063925</a></p>
<p>（我还没试过）<strong>推荐用浙江省图书馆的</strong></p>
</li>
</ol>
<p>如果嫌弃上面这个链接太多不想看的话，我直接挑出来给大家。</p>
<p><img src="/myBlog/%E6%A0%A1%E5%A4%96%E8%AE%BF%E9%97%AE%E7%9F%A5%E7%BD%91/image-20211215223735256.png" alt="image-20211215223735256"></p>
<p><img src="/myBlog/%E6%A0%A1%E5%A4%96%E8%AE%BF%E9%97%AE%E7%9F%A5%E7%BD%91/image-20211215223746725.png" alt="image-20211215223746725"></p>
<p>这是浙江省图书馆地址：<a href="https://www.zjlib.cn/">https://www.zjlib.cn/</a></p>
<p>拖到网站底部，找到中国知网</p>
<p><img src="/myBlog/%E6%A0%A1%E5%A4%96%E8%AE%BF%E9%97%AE%E7%9F%A5%E7%BD%91/image-20211215223916863.png" alt="image-20211215223916863"></p>
<p>登录上去之后该怎么操作就怎么操作，看论文，引文献等等。</p>
<p><img src="/myBlog/%E6%A0%A1%E5%A4%96%E8%AE%BF%E9%97%AE%E7%9F%A5%E7%BD%91/image-20211215223945938.png" alt="image-20211215223945938"></p>
<p>如果这个不行就在上面操作的链接中更换其他省的图书馆即可。</p>
<h1 id="看论文网站"><a href="#看论文网站" class="headerlink" title="看论文网站"></a>看论文网站</h1><p>中国知网：<a href="https://www.cnki.net/">https://www.cnki.net/</a></p>
<p>维普：<a href="http://www.cqvip.com/">http://www.cqvip.com/</a></p>
<p>万方：<a href="https://www.wanfangdata.com.cn/index.html">https://www.wanfangdata.com.cn/index.html</a></p>
<p>上面三个是官方的，下面几个是仿的，不过也可以试着找找，看看有没有找到</p>
<p>ReadPaper：<a href="https://readpaper.com/">https://readpaper.com/</a></p>
<p>iData：<a href="https://www.cn-ki.net/">https://www.cn-ki.net/</a></p>
<p>（据说iData这个每天可以免费下载5篇，不知道真假，不过他的注册需要手机号，且不支持QQ邮箱）</p>
<p>如果担心隐私泄露，建议选择官方的。</p>
]]></content>
      <categories>
        <category>Q&amp;A</category>
      </categories>
      <tags>
        <tag>Q&amp;A</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/myBlog/Linux/</url>
    <content><![CDATA[<h1 id="Linux笔记"><a href="#Linux笔记" class="headerlink" title="Linux笔记"></a>Linux笔记</h1><p>Linux操作系统是基于UNIX操作系统发展而来的一种克隆系统。</p>
<span id="more"></span>

<h1 id="目录结构："><a href="#目录结构：" class="headerlink" title="目录结构："></a>目录结构：</h1><p><img src="/myBlog/Linux/image-20211102201829355.png" alt="image-20211102201829355"></p>
<ul>
<li><p>/：根目录，所有目录最顶层的目录</p>
</li>
<li><p>**~**：当前用户的主目录，如果是root用户就是/root/目录，如果是其他用户就是/home/下用户名的用户，如/home/admin</p>
</li>
<li><p>==<strong>/bin</strong>：bin是Binary的缩写, 这个目录存放着最经常使用的命令。==</p>
</li>
<li><p><strong>/boot：</strong> 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</p>
</li>
<li><p><strong>/dev ：</strong> dev是Device(设备)的缩写, 存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</p>
</li>
<li><p>==<strong>/etc：</strong> 这个目录用来存放所有的系统管理所需要的配置文件和子目录。==</p>
</li>
<li><p><strong>/home</strong>：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</p>
</li>
<li><p><strong>/lib</strong>：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。</p>
</li>
<li><p><strong>/lost+found</strong>：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p>
</li>
<li><p><strong>/media</strong>：linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</p>
</li>
<li><p><strong>/mnt</strong>：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</p>
</li>
<li><p>==<strong>/opt</strong>：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。==</p>
</li>
<li><p><strong>/proc</strong>：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</p>
</li>
<li><p><strong>/root</strong>：该目录为系统管理员，也称作超级权限者的用户主目录。</p>
</li>
<li><p><strong>/sbin</strong>：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</p>
</li>
<li><p><strong>/srv</strong>：该目录存放一些服务启动之后需要提取的数据。</p>
</li>
<li><p><strong>/sys</strong>：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。</p>
</li>
<li><p><strong>/tmp</strong>：这个目录是用来存放一些临时文件的。</p>
</li>
<li><p>==<strong>/usr</strong>：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。==</p>
</li>
<li><p><strong>/usr/bin：</strong> 系统用户使用的应用程序。</p>
</li>
<li><p><strong>/usr/sbin：</strong> 超级用户使用的比较高级的管理程序和系统守护程序。</p>
</li>
<li><p><strong>/usr/src：</strong> 内核源代码默认的放置目录。</p>
</li>
<li><p><strong>/var</strong>：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p>
</li>
<li><p><strong>/run</strong>：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。</p>
</li>
</ul>
<h1 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h1><p>sudo -i用不了</p>
<p>进入vim /etc/sudoers，按照root账户形式，在下面添加一行</p>
<p>admin ALL =(ALL) ALL</p>
<h2 id="关机命令："><a href="#关机命令：" class="headerlink" title="关机命令："></a>关机命令：</h2><ul>
<li><p>sync：将数据保存到硬盘中</p>
</li>
<li><p>shutdown -r now：马上重启</p>
</li>
<li><p>shutdown -h now：马上关机</p>
</li>
<li><p>shutdown：关机</p>
</li>
<li><p>init 0：关机</p>
</li>
<li><p>reboot：重启 </p>
</li>
<li><p>halt：关闭系统，等同于shutdown - h now 和poweroff</p>
</li>
</ul>
<h2 id="目录管理："><a href="#目录管理：" class="headerlink" title="目录管理："></a>目录管理：</h2><ul>
<li>cd：切换目录</li>
<li>./：当前目录</li>
<li>cd.. ：返回上一级目录</li>
</ul>
<h3 id="ls：列出目录"><a href="#ls：列出目录" class="headerlink" title="ls：列出目录"></a>ls：列出目录</h3><ul>
<li>ls -a：all，查看全部的文件，包含隐藏文件</li>
<li>ls -l： 列出所有的文件，包含文件的属性和权限，没有隐藏文件</li>
</ul>
<h3 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h3><p>cd ../usr：相对路径进入usr文件</p>
<p>cd /home/admin: 绝对路径进去admin文件夹</p>
<p>cd ~：回到当前用户目录下</p>
<h3 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h3><ul>
<li>显示当前用户所在的目录</li>
</ul>
<h3 id="mkdir创建目录"><a href="#mkdir创建目录" class="headerlink" title="mkdir创建目录"></a>mkdir创建目录</h3><ul>
<li><p>mkdir test：创建目录</p>
</li>
<li><p>mkdir -p test/test1/test2/test3：递归创建多级目录</p>
</li>
</ul>
<h3 id="rmdir-删除目录"><a href="#rmdir-删除目录" class="headerlink" title="rmdir 删除目录"></a>rmdir 删除目录</h3><ul>
<li><p>rmdir test3：删除一个空的目录</p>
</li>
<li><p>rmdir -p test/test1/test2: 递归删除多个目录</p>
</li>
</ul>
<h3 id="cp-复制文件或者目录"><a href="#cp-复制文件或者目录" class="headerlink" title="cp:复制文件或者目录"></a>cp:复制文件或者目录</h3><ul>
<li><p>cp 原来的地方 新的地方：cp 1.txt test</p>
</li>
<li><p>如果当前还有其他目录，需要用到-r进行递归，如：cp -r 1.txt test</p>
</li>
</ul>
<h3 id="rm：异常文件或者目录"><a href="#rm：异常文件或者目录" class="headerlink" title="rm：异常文件或者目录"></a>rm：异常文件或者目录</h3><ul>
<li><p>rm -f：忽略不存在的文件，不会出现警告，强制删除</p>
</li>
<li><p>rm -r：递归删除目录，需要确定是否删除</p>
</li>
<li><p>rm -i :互动，询问是否删除</p>
</li>
<li><p>rm -rf /*：直接删除系统中所有文件，没有警告，非常危险！！！不建议执行！！！！否则你将会这样</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 此处省略N行。。。</span><br>rm: cannot remove ‘/proc/697/task/713/mem’: Permission denied<br>rm: cannot remove ‘/proc/697/task/713/cwd’: Permission denied<br>rm: cannot remove ‘/proc/697/task/713/root’: Permission denied<br>rm: cannot remove ‘/proc/697/task/713/exe’: Permission denied<br>rm: cannot remove ‘/proc/697/task/713/mounts’: Permission denied<br>rm: cannot remove ‘/proc/697/task/713/mountinfo’^C<br>[root@localhost <span class="hljs-built_in">test</span>]<span class="hljs-comment"># rm: cannot remove ‘test2’: Is a directory</span><br>-bash: /usr/libexec/pk-command-not-found: /lib64/ld-linux-x86-64.so.2: bad ELF interpreter: No such file or directory<br>[root@localhost <span class="hljs-built_in">test</span>]<span class="hljs-comment"># rm: cannot remove ‘test2’: Is a directory</span><br>-bash: /usr/libexec/pk-command-not-found: /lib64/ld-linux-x86-64.so.2: bad ELF interpreter: No such file or directory<br>[root@localhost <span class="hljs-built_in">test</span>]<span class="hljs-comment"># ls</span><br>-bash: /bin/ls: No such file or directory<br>[root@localhost <span class="hljs-built_in">test</span>]<span class="hljs-comment"># cd ../</span><br><span class="hljs-built_in">cd</span>: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory<br>[root@localhost ]<span class="hljs-comment"># pwd</span><br>/home/admin/<span class="hljs-built_in">test</span>/../<br>[root@localhost ]<span class="hljs-comment"># cd /home</span><br>[root@localhost home]<span class="hljs-comment"># ls</span><br>-bash: /bin/ls: No such file or directory<br>[root@localhost home]<span class="hljs-comment"># cd ~</span><br>[root@localhost ~]<span class="hljs-comment"># ls</span><br>-bash: /bin/ls: No such file or directory<br>[root@localhost ~]<span class="hljs-comment"># ls -al</span><br>-bash: /bin/ls: No such file or directory<br>[root@localhost ~]<span class="hljs-comment"># dir</span><br>-bash: /bin/dir: No such file or directory<br>[root@localhost ~]<span class="hljs-comment"># </span><br><br></code></pre></td></tr></table></figure>

<p><img src="/myBlog/Linux/image-20211102165244390.png" alt="image-20211102165244390"></p>
<h3 id="mv：移动文件或者目录，重命名"><a href="#mv：移动文件或者目录，重命名" class="headerlink" title="mv：移动文件或者目录，重命名"></a>mv：移动文件或者目录，重命名</h3><ul>
<li>mv -f：强制移动</li>
<li>mv -u：只替换已经更新过的文件</li>
<li>mv test test2：将test改名为test2</li>
<li>mv：移动文件，如将a.txt文件移动到b文件夹下，mv a.txt b</li>
</ul>
<ul>
<li>zxvf：解压文件</li>
</ul>
<h2 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h2><p><img src="/myBlog/Linux/image-20211102203952548.png" alt="image-20211102203952548"></p>
<p>实例中，boot文件的第一个属性用”d”表示。”d”在Linux中代表该文件是一个目录文件。</p>
<p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等：</p>
<ul>
<li>当为[ <strong>d</strong> ]则是目录</li>
<li>当为[ <strong>-</strong> ]则是文件；</li>
<li>若是[ <strong>l</strong> ]则表示为链接文档 ( link file )；</li>
<li>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )；</li>
<li>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )。</li>
</ul>
<p>接下来的字符中，以三个为一组，且均为【rwx】 的三个参数的组合。</p>
<ul>
<li>[ r ]代表可读(read)</li>
<li>[ w ]代表可写(write)</li>
<li>[ x ]代表可执行(execute)</li>
</ul>
<p>要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</p>
<p><img src="/myBlog/Linux/image-20211102204306150.png" alt="image-20211102204306150"></p>
<p>从左至右用0-9这些数字来表示。</p>
<p>第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p>
<p>1、4、7：读</p>
<p>2、5、8：写</p>
<p>3、6、9：操作</p>
<p><img src="/myBlog/Linux/image-20211102204619828.png" alt="image-20211102204619828"></p>
<h2 id="更改文件属性"><a href="#更改文件属性" class="headerlink" title="更改文件属性"></a>更改文件属性</h2><h3 id="chgrp：更改文件的属组"><a href="#chgrp：更改文件的属组" class="headerlink" title="chgrp：更改文件的属组"></a>chgrp：更改文件的属组</h3><ul>
<li>chgrp -R 属组 文件名：如chgrp -R root test，test原本所属组为admin，现在改为root</li>
<li>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@localhost Ten]<span class="hljs-comment"># ls -l</span><br>total 0<br>drwxrwxr-x. 2 admin admin 6 Nov  2 20:09 <span class="hljs-built_in">test</span><br>drwxrwxr-x. 2 admin admin 6 Nov  2 20:11 test2<br>[root@localhost Ten]<span class="hljs-comment"># chgrp -R root test</span><br>[root@localhost Ten]<span class="hljs-comment"># ls -l</span><br>total 0<br>drwxrwxr-x. 2 admin root  6 Nov  2 20:09 <span class="hljs-built_in">test</span><br>drwxrwxr-x. 2 admin admin 6 Nov  2 20:11 test2<br>[root@localhost Ten]<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure>

<p><img src="/myBlog/Linux/image-20211102205944102.png" alt="image-20211102205944102"></p>
<h3 id="chown：更改文件的属主"><a href="#chown：更改文件的属主" class="headerlink" title="chown：更改文件的属主"></a>chown：更改文件的属主</h3><ul>
<li>chown -R 属主名 文件名：如chown -R root test，将test的属主改为root</li>
<li>chown -R 属主名:属组名 文件名：如chown -R admin:admin test，将test的所属主名和属组名都改名admin</li>
</ul>
<h3 id="chmod：更改文件9个属性"><a href="#chmod：更改文件9个属性" class="headerlink" title="chmod：更改文件9个属性"></a>chmod：更改文件9个属性</h3><ul>
<li>chmod -R xyz 文件或者目录：如，chmod -R 777 test，将test文件的三个权限都更改rwx。</li>
</ul>
<p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p>
<p>Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">r</span>:<span class="hljs-number">4</span>     w:<span class="hljs-number">2</span>         x:<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>

<p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是：</p>
<ul>
<li>owner = rwx = 4+2+1 = 7</li>
<li>group = rwx = 4+2+1 = 7</li>
<li>others= — = 0+0+0 = 0</li>
</ul>
<h2 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h2><ul>
<li><p>ifconfig：查看网络配置</p>
</li>
<li><p>==cat：由第一行开始显示文件内容==</p>
</li>
<li><p>tac：从最后一行开始显示文件内容，cat和tac是倒过来写的</p>
</li>
<li><p>==nl：显示文章行号==</p>
</li>
</ul>
<p><img src="/myBlog/Linux/image-20211102231332124.png" alt="image-20211102231332124"></p>
<ul>
<li>==more：一页一页的显示文件内容，空格翻页，enter代表向下一行，:f 查看当前行号，按B可以往上翻==</li>
<li>==less：与more类似，可以往前翻页，空格翻页，上下键代表翻动页面，q表示退出，查询字符串/要查询的字符串（向下查询），向上查询使用?要查询的字符串，如果还想继续查询可以用n向上查询，N向下==</li>
<li>head：只看头几行，如head -n 20 csh.login ，查看csh.login文件的前20行</li>
<li>tail：之后尾几行，如tail -n 20 csh.login，查看csh.login文件的后20行</li>
</ul>
<h2 id="拓展：Linux链接的概念（了解即可）"><a href="#拓展：Linux链接的概念（了解即可）" class="headerlink" title="拓展：Linux链接的概念（了解即可）"></a>拓展：Linux链接的概念（了解即可）</h2><p>Linux的链接分为两种：硬链接、软链接</p>
<p><strong>硬链接：</strong>硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能，如，B是A的硬链接，当A被删除时，B依旧可以访问，反之亦然。只有当所有的硬链接都删除后，才可以彻底删除文件。</p>
<p><strong>软链接：</strong>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于 Windows 的快捷方式。它实际上是一个特殊的文件。比如，给A创建一个软链接B，当A被删除时，B就无法访问了。也可以理解为A为源文件，B为快捷键，源文件被删除了，该文件的快捷键当然也是访问不了的。</p>
<ul>
<li>touch：创建文件，如touch f1，创建f1文件</li>
<li>echo：输入字符串，也可以输入到文件中，如echo “Hello” &gt;&gt; f1，往f1中添加”Hello“</li>
<li>ln：创建一个硬链接，如ln f1 f2，创建一个硬链接，从f1指向f2</li>
<li>ln -s ：创建一个软链接，如ln -s f1 f3，创建一个软链接，从f1指向f3</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[admin@localhost Ten]$ touch f1				<span class="hljs-comment"># 创建f1</span><br>[admin@localhost Ten]$ ls<br>f1  <span class="hljs-built_in">test</span>  test2<br>[admin@localhost Ten]$ ln f1 f2				<span class="hljs-comment"># 创建从f1指向f2的硬链接</span><br>[admin@localhost Ten]$ ls<br>f1  f2  <span class="hljs-built_in">test</span>  test2<br>[admin@localhost Ten]$ ln -s f1 f3			<span class="hljs-comment"># 创建从f1指向f3的软链接（符号链接）</span><br>[admin@localhost Ten]$ ls<br>f1  f2  f3  <span class="hljs-built_in">test</span>  test2<br>[admin@localhost Ten]$ ls -l<br>total 0<br>-rw-rw-r--. 2 admin admin 0 Nov  3 11:37 f1<br>-rw-rw-r--. 2 admin admin 0 Nov  3 11:37 f2<br>lrwxrwxrwx. 1 admin admin 2 Nov  3 11:37 f3 -&gt; f1<br>drwxrwxr-x. 2 admin admin 6 Nov  2 20:09 <span class="hljs-built_in">test</span><br>drwxrwxr-x. 2 admin admin 6 Nov  2 20:11 test2<br>[admin@localhost Ten]$ <br>[admin@localhost Ten]$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello&quot;</span> &gt;&gt; <span class="hljs-string">&quot;f1&quot;</span>	<span class="hljs-comment"># 往f1中写入内容</span><br>[admin@localhost Ten]$ cat f1				<span class="hljs-comment"># f1正常读</span><br>Hello<br>[admin@localhost Ten]$ cat f2				<span class="hljs-comment"># f2正常读</span><br>Hello<br>[admin@localhost Ten]$ cat f3				<span class="hljs-comment"># f3正常读</span><br>Hello<br>[admin@localhost Ten]$ <br></code></pre></td></tr></table></figure>



<p>删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[admin@localhost Ten]$ ls<br>f1  f2  f3  <span class="hljs-built_in">test</span>  test2<br>[admin@localhost Ten]$ rm -rf f1		<span class="hljs-comment"># 删除f1</span><br>[admin@localhost Ten]$ ls <br>f2  f3  <span class="hljs-built_in">test</span>  test2<br>[admin@localhost Ten]$ cat f2			<span class="hljs-comment"># f2是硬链接，没有影响，依旧可以访问</span><br>I am Ten<br>[admin@localhost Ten]$ cat f3			<span class="hljs-comment"># f3是软链接，已经失效</span><br>cat: f3: No such file or directory<br>[admin@localhost Ten]$ ^C<br></code></pre></td></tr></table></figure>

<ul>
<li>ls -li：显示索引节点号（Inode Index）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[admin@localhost Ten]$ ls -li<br>total 8<br> 5194981 -rw-rw-r--. 2 admin admin 6 Nov  3 11:38 f1<br> 5194981 -rw-rw-r--. 2 admin admin 6 Nov  3 11:38 f2<br> 5195004 lrwxrwxrwx. 1 admin admin 2 Nov  3 11:37 f3 -&gt; f1<br>13209000 drwxrwxr-x. 2 admin admin 6 Nov  2 20:09 <span class="hljs-built_in">test</span><br>   77723 drwxrwxr-x. 2 admin admin 6 Nov  2 20:11 test2<br>[admin@localhost Ten]$ <br><br></code></pre></td></tr></table></figure>



<h2 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h2><p>基本上 vi/vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。这三种模式的作用分别是：</p>
<ul>
<li>Vim Study：创建或编辑一个Study的文件，如果存入Study就编辑，如果不存在就会新建</li>
</ul>
<p><strong>命令模式：</strong></p>
<ul>
<li><strong>i</strong> 切换到输入模式，以输入字符。</li>
<li><strong>x</strong> 删除当前光标所在处的字符。</li>
<li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。</li>
</ul>
<p><strong>输入模式：</strong></p>
<ul>
<li><strong>字符按键以及Shift组合</strong>，输入字符</li>
<li><strong>ENTER</strong>，回车键，换行</li>
<li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li>
<li><strong>DEL</strong>，删除键，删除光标后一个字符</li>
<li><strong>方向键</strong>，在文本中移动光标</li>
<li><strong>HOME</strong>/<strong>END</strong>，移动光标到行首/行尾</li>
<li><strong>Page Up</strong>/<strong>Page Down</strong>，上/下翻页</li>
<li><strong>Insert</strong>，切换光标为输入/替换模式，光标将变成竖线/下划线</li>
<li><strong>ESC</strong>，退出输入模式，切换到命令模式</li>
</ul>
<p><strong>底线命令模式</strong></p>
<ul>
<li>:q，退出程序</li>
<li>:w，保存文件</li>
</ul>
<p><img src="/myBlog/Linux/image-20211103165822413.png" alt="image-20211103165822413"></p>
<p><strong>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</strong></p>
<table>
<thead>
<tr>
<th align="left">移动光标的方法</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">h 或 向左箭头键(←)</td>
<td>光标向左移动一个字符</td>
</tr>
<tr>
<td align="left">j 或 向下箭头键(↓)</td>
<td>光标向下移动一个字符</td>
</tr>
<tr>
<td align="left">k 或 向上箭头键(↑)</td>
<td>光标向上移动一个字符</td>
</tr>
<tr>
<td align="left">l 或 向右箭头键(→)</td>
<td>光标向右移动一个字符</td>
</tr>
<tr>
<td align="left">[Ctrl] + [f]</td>
<td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td>
</tr>
<tr>
<td align="left">[Ctrl] + [b]</td>
<td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td>
</tr>
<tr>
<td align="left">[Ctrl] + [d]</td>
<td>屏幕『向下』移动半页</td>
</tr>
<tr>
<td align="left">[Ctrl] + [u]</td>
<td>屏幕『向上』移动半页</td>
</tr>
<tr>
<td align="left">+</td>
<td>光标移动到非空格符的下一行</td>
</tr>
<tr>
<td align="left">-</td>
<td>光标移动到非空格符的上一行</td>
</tr>
<tr>
<td align="left">==n&lt; space&gt;==</td>
<td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。</td>
</tr>
<tr>
<td align="left">0 或功能键[Home]</td>
<td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td>
</tr>
<tr>
<td align="left">$ 或功能键[End]</td>
<td>移动到这一行的最后面字符处(常用)</td>
</tr>
<tr>
<td align="left">H</td>
<td>光标移动到这个屏幕的最上方那一行的第一个字符</td>
</tr>
<tr>
<td align="left">M</td>
<td>光标移动到这个屏幕的中央那一行的第一个字符</td>
</tr>
<tr>
<td align="left">L</td>
<td>光标移动到这个屏幕的最下方那一行的第一个字符</td>
</tr>
<tr>
<td align="left">G</td>
<td>移动到这个档案的最后一行(常用)</td>
</tr>
<tr>
<td align="left">nG</td>
<td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td>
</tr>
<tr>
<td align="left">gg</td>
<td>移动到这个档案的第一行，相当于 1G 啊！(常用)</td>
</tr>
<tr>
<td align="left">n&lt; Enter&gt;</td>
<td>n 为数字。光标向下移动 n 行(常用)</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">搜索替换</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">==/word==</td>
<td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！(常用)</td>
</tr>
<tr>
<td align="left">?word</td>
<td>向光标之上寻找一个字符串名称为 word 的字符串。</td>
</tr>
<tr>
<td align="left">==n==</td>
<td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td>
</tr>
<tr>
<td align="left">==N==</td>
<td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">删除、复制与粘贴</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">x, X</td>
<td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td>
</tr>
<tr>
<td align="left">nx</td>
<td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td>
</tr>
<tr>
<td align="left">dd</td>
<td>删除游标所在的那一整行(常用)</td>
</tr>
<tr>
<td align="left">ndd</td>
<td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td>
</tr>
<tr>
<td align="left">d1G</td>
<td>删除光标所在到第一行的所有数据</td>
</tr>
<tr>
<td align="left">dG</td>
<td>删除光标所在到最后一行的所有数据</td>
</tr>
<tr>
<td align="left">d$</td>
<td>删除游标所在处，到该行的最后一个字符</td>
</tr>
<tr>
<td align="left">d0</td>
<td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td>
</tr>
<tr>
<td align="left">yy</td>
<td>复制游标所在的那一行(常用)</td>
</tr>
<tr>
<td align="left">nyy</td>
<td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td>
</tr>
<tr>
<td align="left">y1G</td>
<td>复制游标所在行到第一行的所有数据</td>
</tr>
<tr>
<td align="left">yG</td>
<td>复制游标所在行到最后一行的所有数据</td>
</tr>
<tr>
<td align="left">y0</td>
<td>复制光标所在的那个字符到该行行首的所有数据</td>
</tr>
<tr>
<td align="left">y$</td>
<td>复制光标所在的那个字符到该行行尾的所有数据</td>
</tr>
<tr>
<td align="left">p, P</td>
<td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？那么原本的第 20 行会被推到变成 30 行。(常用)</td>
</tr>
<tr>
<td align="left">J</td>
<td>将光标所在行与下一行的数据结合成同一行</td>
</tr>
<tr>
<td align="left">c</td>
<td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td>
</tr>
<tr>
<td align="left">u</td>
<td>复原前一个动作。(常用)</td>
</tr>
<tr>
<td align="left">[Ctrl]+r</td>
<td>重做上一个动作。(常用)</td>
</tr>
</tbody></table>
<p><strong>第二部分：一般模式切换到编辑模式的可用的按钮说明</strong></p>
<table>
<thead>
<tr>
<th align="left">进入输入或取代的编辑模式</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">==i, I==</td>
<td>进入输入模式(Insert mode)：i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。(常用)</td>
</tr>
<tr>
<td align="left">a, A</td>
<td>进入输入模式(Insert mode)：a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td>
</tr>
<tr>
<td align="left">o, O</td>
<td>进入输入模式(Insert mode)：这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』；O 为在目前光标所在处的上一行输入新的一行！(常用)</td>
</tr>
<tr>
<td align="left">r, R</td>
<td>进入取代模式(Replace mode)：r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td>
</tr>
<tr>
<td align="left">[Esc]</td>
<td>退出编辑模式，回到一般模式中(常用)</td>
</tr>
</tbody></table>
<p><strong>第三部分：一般模式切换到指令行模式的可用的按钮说明</strong></p>
<table>
<thead>
<tr>
<th align="left">指令行的储存、离开等指令</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">:w</td>
<td>将编辑的数据写入硬盘档案中(常用)</td>
</tr>
<tr>
<td align="left">:w!</td>
<td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td>
</tr>
<tr>
<td align="left">:q</td>
<td>离开 vi (常用)</td>
</tr>
<tr>
<td align="left">:q!</td>
<td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td>
</tr>
<tr>
<td align="left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td>
<td></td>
</tr>
<tr>
<td align="left">==:wq==</td>
<td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td>
</tr>
<tr>
<td align="left">ZZ</td>
<td>这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td>
</tr>
<tr>
<td align="left">:w [filename]</td>
<td>将编辑的数据储存成另一个档案（类似另存新档）</td>
</tr>
<tr>
<td align="left">:r [filename]</td>
<td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td>
</tr>
<tr>
<td align="left">:n1,n2 w [filename]</td>
<td>将 n1 到 n2 的内容储存成 filename 这个档案。</td>
</tr>
<tr>
<td align="left">:! command</td>
<td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中看 /home 底下以 ls 输出的档案信息！</td>
</tr>
<tr>
<td align="left">==:set nu==</td>
<td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td>
</tr>
<tr>
<td align="left">:set nonu</td>
<td>与 set nu 相反，为取消行号！</td>
</tr>
</tbody></table>
<h2 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h2><p><strong>添加用户，useradd命令</strong></p>
<ul>
<li><p>useradd -m  用户名：自动创建这个用户的目录/home/Test，如useradd -m Test,创建一个名为Test的用户</p>
</li>
<li><p>cat /etc/passwd，就可以看到刚刚被创建的用户</p>
</li>
<li><p>useradd -G 用户名：分配组</p>
</li>
</ul>
<p><strong>删除用户 userdel</strong></p>
<ul>
<li>userdel - r Test，将刚刚创建的Test用户的目录一并删掉</li>
</ul>
<p><strong>修改用户</strong> usermod</p>
<ul>
<li>usermod 对应修改的内容 修改的用户，如usermod  -d /home/233 Test，将Test用户的主目录修改为233，修改完查看配置文件即可</li>
</ul>
<p><strong>切换用户</strong></p>
<ul>
<li>su 用户名，如su Test，或者su - root</li>
<li>#：超级管理员，$：普通用户</li>
</ul>
<p><img src="/myBlog/Linux/image-20211103174249440.png" alt="image-20211103174249440"></p>
<ul>
<li>hostname 名字:修改主机名，如hostname Test，将主机名改为Test，改完之后重新连接。</li>
</ul>
<p><strong>修改用户的密码</strong></p>
<p>root下：</p>
<ul>
<li>passwd 用户名，如passwd Test，修改</li>
</ul>
<p>用户下：</p>
<ul>
<li>直接passwd就可以输入了</li>
</ul>
<p><strong>锁定用户</strong></p>
<ul>
<li>passwd -l 用户名，如passwd -l Test，锁定Test用户，用户就不能登录了</li>
<li>passwd -d 用户名，没有密码也不能登录</li>
<li>passwd -u 用户名， 将锁定的用户解锁</li>
</ul>
<h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p>属主、属组</p>
<p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对/etc/group文件的更新。</p>
<p><strong>groupadd：创建一个用户组</strong></p>
<ul>
<li>groupadd Test：创建一个Test的用户组</li>
<li>groupadd -g 111 Test1，创建一个端口号为111的Test1组，如果不设置用户组id，他会自增。</li>
<li>cat /etc/group：查看用户组的情况</li>
</ul>
<p><strong>groupdel：删除用户组</strong></p>
<ul>
<li>groupdel Test：删除Test的用户组</li>
</ul>
<p><strong>groupmod：修改</strong></p>
<ul>
<li>groupmod -g 666 -n newTest Test：将Test的用户组的用户组id改为666，并将名字改为newTest</li>
</ul>
<p><strong>切换用户组</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 登录当前用户 Test</span><br>$ newgrp root<br></code></pre></td></tr></table></figure>



<p><strong>拓展：文件的查看</strong>（了解）</p>
<p>Linux系统中的每个用户都在/etc/passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。</p>
<ul>
<li>/etc/passwd:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">root:x:0:<br>bin:x:1:<br>daemon:x:2:<br>sys:x:3:<br>adm:x:4:<br>tty:x:5:<br>...<br>ntp:x:38:38::/etc/ntp:/sbin/nologin<br>tcpdump:x:72:72::/:/sbin/nologin<br>admin:x:1000:1000:admin:/home/admin:/bin/bash<br>Test:x:1001:666::/home/Test:/bin/bash<br></code></pre></td></tr></table></figure>



<figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile">用户名:口令（登录密码，不可见）:用户标识号:组标识号:注释性描述:主目录:登录<span class="hljs-keyword">Shell</span><br></code></pre></td></tr></table></figure>

<ul>
<li>/etc/shadow</li>
</ul>
<p>登录口令：把真正的加密后的用户口令字存放到/etc/shadow文件中，而在/etc/passwd文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。</p>
<ul>
<li>/etc/group</li>
</ul>
<p>用户组的所有信息都存放在/etc/group文件中。</p>
<h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><p>df（列出文件系统整体的磁盘使用）  du（检查磁盘空间使用量）</p>
<ul>
<li>df -h:列出多少M</li>
<li>du -a:查看所有文件使用情况，可以看到子文件</li>
<li>du -sm /* :检查根目录下，每个目录所占用的容量</li>
</ul>
<p><strong>Mac或者想要Linux挂载我们的一些本地磁盘或者文件</strong></p>
<p>挂载</p>
<ul>
<li>mount /dev/Test /mnt/Test：将外部设备Test的U盘挂载到模mnt下面</li>
</ul>
<p>卸载：umount -f 挂载位置 ：强制卸载</p>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>==Linux中一切皆文件（文件：读写执行（查看、创建、删除、移动、复制、编辑 ），权限（用户、用户组）。系统：（磁盘、进程））==</p>
<p><strong>基本概念</strong></p>
<ol>
<li>在Linux中，每一个程序都有自己的一个进程，每一个进程都有一个id号</li>
<li>每一个进程，都有一个父进程！ </li>
<li>进程可以有两种存在方式：前台！后台运行！</li>
<li>一般的话服务都是后天运行的，基本的程序都是前天运行</li>
</ol>
<p><strong>命令</strong></p>
<ul>
<li>ps：查看当前系统中正在执行的各种进程的信息</li>
<li>ps -a:显示当前终端运行的所有的进程信息</li>
<li>ps -u:以用户的信息显示信息</li>
<li>ps -x:显示后台运行进程的参数</li>
<li>ps -aux:查看所有的进程</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ps -aux | grep mysql		<span class="hljs-comment"># 过滤出与mysql相关的进程</span><br><span class="hljs-comment"># | 在Linux中这个叫做管道符		A|B，将A的输出结果作为B的输出条件</span><br><span class="hljs-comment"># grep 查找文件中符合条件的字符串！</span><br></code></pre></td></tr></table></figure>

<p><strong>ps -ef:可以查看到父进程的信息</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ps -ef | grep mysql		<span class="hljs-comment"># 看父进程一般通过目录树结构来查看</span><br><br><br>pstree -pu<br>pstree -p				<span class="hljs-comment"># 显示父id</span><br>pstree -u				<span class="hljs-comment"># 显示当前用户组</span><br></code></pre></td></tr></table></figure>

<p><img src="/myBlog/Linux/image-20211103222647990.png" alt="image-20211103222647990"></p>
<p>结束进程：杀掉进程，等价于window结束任务</p>
<ul>
<li>kill -9 进程的id：强制结束该进程</li>
</ul>
<h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><h2 id="JDK安装-rpm"><a href="#JDK安装-rpm" class="headerlink" title="JDK安装(rpm)"></a>JDK安装(rpm)</h2><p>rpm安装jdk不用配置环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 检查当前系统是否存在java环境	java -version</span><br><span class="hljs-comment"># 如果存在就卸载</span><br><span class="hljs-comment"># rpm -qa|grep jdk		# 检测JDK版本信息</span><br><span class="hljs-comment"># rpm -e --nodeps jdk_	# 强制卸载 </span><br><br><span class="hljs-comment"># 卸载完后再重新安装</span><br><span class="hljs-comment"># rpm -ivh rpm包</span><br><br><span class="hljs-comment"># 配置环境变量</span><br></code></pre></td></tr></table></figure>

<p>配置环境变量：/etc/profile</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/java/jdk1.8.0_121<br><span class="hljs-built_in">export</span> JRE_HOME=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/jre<br><span class="hljs-built_in">export</span> CLASSPATH=.:<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="hljs-variable">$&#123;JRE_HOME&#125;</span>/lib:<span class="hljs-variable">$CLASSPATH</span><br><span class="hljs-built_in">export</span> JAVA_PATH=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="hljs-variable">$&#123;JRE_HOME&#125;</span>/bin<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$&#123;JAVA_PATH&#125;</span><br><br></code></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/java/java1.8...<br><span class="hljs-built_in">export</span> JRE_HOME=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/jre<br><span class="hljs-built_in">export</span> CLASSPATH=.:<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="hljs-variable">$&#123;JRE_HOME&#125;</span>/lib:<span class="hljs-variable">$&#123;CLASSPATH&#125;</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PAHT</span>:<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="hljs-variable">$&#123;JRE_HOME&#125;</span>/bin<br></code></pre></td></tr></table></figure>



<p>让这个配置文件生效：source /etc/profi</p>
<p>查看端口：</p>
<p>firewall-cmd –list-ports</p>
<p>开启防火墙端口：</p>
<p>firewall-cmd –zone=pulic –add-port=9000/tcp –p ermanent</p>
<p>重启防火墙：</p>
<p>systemctl restart firewalld.service</p>
<p>检查当前的网卡文件：</p>
<p>ip addr</p>
<h2 id="Tomcat安装（tar-gz）"><a href="#Tomcat安装（tar-gz）" class="headerlink" title="Tomcat安装（tar.gz）"></a>Tomcat安装（tar.gz）</h2><ol>
<li>解压</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">unzip 文件名 		<span class="hljs-comment"># 如果是压缩包是zip格式的，使用</span><br>tar -zvxf 包名<br></code></pre></td></tr></table></figure>

<ol start="2">
<li>启动Tomcat测试，./xxx.sh脚本即可运行</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 执行 ./startup.sh</span><br><span class="hljs-comment"># 停止 ./shutdown.sh</span><br></code></pre></td></tr></table></figure>

<ol start="3">
<li>查看防火墙，并开启8080端口</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看firewall服务状态</span><br>systemctl status firewalld<br><br><span class="hljs-comment"># 开启、重启、关闭、firewalld.service服务</span><br><span class="hljs-comment"># 开启</span><br>service firewalld start<br><span class="hljs-comment"># 重启</span><br>service firewalld restart<br><span class="hljs-comment"># 关闭</span><br>service firewalld stop<br><br><span class="hljs-comment"># 查看防火墙规则</span><br>firewall-cmd --list-all    <span class="hljs-comment"># 查看全部信息</span><br>firewall-cmd --list-ports  <span class="hljs-comment"># 只看端口信息</span><br><br><span class="hljs-comment"># 开启端口</span><br>开端口命令：firewall-cmd --zone=public --add-port=80/tcp --permanent<br>重启防火墙：systemctl restart firewalld.service<br><br>命令含义：<br>--zone <span class="hljs-comment">#作用域</span><br>--add-port=80/tcp  <span class="hljs-comment">#添加端口，格式为：端口/通讯协议</span><br>--permanent   <span class="hljs-comment">#永久生效，没有此参数重启后失效</span><br></code></pre></td></tr></table></figure>

<ol start="4">
<li>测试。访问192.168.242.3:8080。出现页面，表示安装成功。</li>
</ol>
<h2 id="安装Docker（yum）"><a href="#安装Docker（yum）" class="headerlink" title="安装Docker（yum）"></a>安装Docker（yum）</h2><ol>
<li><p>查看系统版本信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@localhost bin]<span class="hljs-comment"># cat /etc/redhat-release </span><br>CentOS Linux release 7.8.2003 (Core)<br></code></pre></td></tr></table></figure></li>
<li><p>安装我们的准备环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yum -y install 包名		<span class="hljs-comment"># yum install 安装命令 	-y	所有的提示都为y</span><br>yum -y install gcc<br>yum -y install gcc-c++<br></code></pre></td></tr></table></figure></li>
<li><p>或者用宝塔面板安装 </p>
</li>
</ol>
<h1 id="VMare使用"><a href="#VMare使用" class="headerlink" title="VMare使用"></a>VMare使用</h1><h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><p>保留当前系统的信息为快照，随时可以恢复，以防未来系统被损坏，就好比游戏中的归档</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="使用xftp上传文件时，状态显示错误"><a href="#使用xftp上传文件时，状态显示错误" class="headerlink" title="使用xftp上传文件时，状态显示错误"></a>使用xftp上传文件时，状态显示错误</h2><p><img src="/myBlog/Linux/image-20211104114435498.png" alt="image-20211104114435498"></p>
<p>原因可能是：内存不够、权限不够（切换root）、或者是目录权限不够，如果是目录权限不够可以用以下命令设置权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">chmod 777 目录名<br></code></pre></td></tr></table></figure>



<p>使用tar.gz包</p>
<p>安装到/home/admin/java</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">tar -zxvf jdk包名<br></code></pre></td></tr></table></figure>

<p>配置环境变量</p>
<p>vim /etc/profile</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> JAVA_HOME=/home/admin/java/jdk1.8.0_121<br><span class="hljs-built_in">export</span> JRE_HOME=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/jre<br><span class="hljs-built_in">export</span> CLASSPATH=.:<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="hljs-variable">$&#123;JRE_HOME&#125;</span>/lib<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="hljs-variable">$PATH</span><br><br></code></pre></td></tr></table></figure>

<p>刷新配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure>

<p>最后java -version检查是否配置成功</p>
<p>这个笔记是在学习狂神说Linux做的笔记，如需原版，请前往b站。地址：<a href="https://www.bilibili.com/video/BV187411y7hF?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV187411y7hF?spm_id_from=333.999.0.0</a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MybatisPlus</title>
    <url>/myBlog/MybatisPlus/</url>
    <content><![CDATA[<h1 id="MybatisPlus"><a href="#MybatisPlus" class="headerlink" title="MybatisPlus"></a>MybatisPlus</h1><p>需要的基础：Mybatis、Spring、SpringMVC</p>
<p>为什么要学习这个？MybatisPlus可以节省我们大量工作时间，所有的CRUD代码它都可以自动化完成！</p>
<p>JPA,tk-mapper.MybatisPlusl</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>什么是MybatisPlus？MyBatis-Plus （简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
<p>官网：<a href="https://mp.baomidou.com/">https://mp.baomidou.com/</a></p>
<p><img src="/myBlog/MybatisPlus/image-20211116093411885.png" alt="image-20211116093411885"></p>
<p><img src="/myBlog/MybatisPlus/image-20211116093453821.png" alt="image-20211116093453821"></p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li>
<li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li>
<li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li>
<li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li>
<li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li>
<li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li>
<li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li>
<li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li>
<li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li>
<li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li>
<li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li>
<li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li>
</ul>
<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><p>地址：<a href="https://mp.baomidou.com/guide/quick-start.html#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B7%A5%E7%A8%8B">https://mp.baomidou.com/guide/quick-start.html#初始化工程</a></p>
<p>使用第三方组件：</p>
<ol>
<li>导入对应的依赖</li>
<li>研究依赖如何配置</li>
<li>代码如何编写</li>
<li>提高扩展技术能力</li>
</ol>
<p><strong>步骤</strong>：</p>
<ol>
<li>创建数据库</li>
<li>创建用户表</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">CREATE DATABASE mybaits_plus;<br><br>CREATE TABLE USER<br>(<br>	id BIGINT(20) NOT NULL COMMENT &#x27;主键ID&#x27;,<br>	NAME VARCHAR(30) NULL DEFAULT NULL COMMENT &#x27;姓名&#x27;,<br>	age INT(11) NULL DEFAULT NULL COMMENT &#x27;年龄&#x27;,<br>	email VARCHAR(50) NULL DEFAULT NULL COMMENT &#x27;邮箱&#x27;,<br>	PRIMARY KEY (id)<br>);<br><br>INSERT INTO USER (id, NAME, age, email) VALUES<br>(1, &#x27;Jone&#x27;, 18, &#x27;test1@baomidou.com&#x27;),<br>(2, &#x27;Jack&#x27;, 20, &#x27;test2@baomidou.com&#x27;),<br>(3, &#x27;Tom&#x27;, 28, &#x27;test3@baomidou.com&#x27;),<br>(4, &#x27;Sandy&#x27;, 21, &#x27;test4@baomidou.com&#x27;),<br>(5, &#x27;Billie&#x27;, 24, &#x27;test5@baomidou.com&#x27;);<br>-- 真实开发中，version（乐观锁），deleted（逻辑删除）、gmt_create、gmt_modified<br></code></pre></td></tr></table></figure>

<ol start="3">
<li><p>编写项目，初始化项目！使用SringBoot初始化</p>
</li>
<li><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><br><span class="hljs-comment">&lt;!-- mysql驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Lombok --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- mybatis-plus --&gt;</span><br><span class="hljs-comment">&lt;!-- mybatis-plus 是自己开发的，并非官方 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure>

<p>说明：我们使用mybatis-plus可以节省我们大量的代码，尽量不要同时导入mybatis和mybatis-plus！版本的差异！</p>
</li>
<li><p>连接数据库，这一步和mybatis相同。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># mysql 5 驱动不同 com.mysql.jdbc.Driver</span><br><span class="hljs-comment"># mysql 8 驱动不同com.mysql.cj.jdbc.Driver 需要增加时区的配置 serverTimezone=GMT%2B8</span><br><br><span class="hljs-meta">spring.datasource.name</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306?mybatis_plus?useSSL=false&amp;useUnicode=true&amp;charecterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span><br><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><br><br></code></pre></td></tr></table></figure>

<p>传统方式pojo-dao(连接mybatis，配置mapper.xml文件)-server-controller</p>
</li>
<li><p>使用mybatis-plus之后</p>
<ul>
<li><p>pojo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String email;<br><br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>mapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在对应的Mapper上面继承基本的接口BaseMapper</span><br><span class="hljs-comment">// 代表持久层</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">User</span>&gt; </span>&#123;<br><br>    <span class="hljs-comment">// 所有的CRUD操作都已经编写完成了</span><br>    <br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>注意点：我们需要在启动类上去扫描mapper包下的所有接口。<code>@MapperScan(&quot;com.kuang.mapper&quot;)</code></p>
</li>
<li><p>测试类中的测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisPlusApplicationTests</span> </span>&#123;<br><br>    <span class="hljs-comment">// 继承了BaseMapper，所有的方法都来继承父类</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">// 参数是一个Wrapper，条件构造器，这里我们先不用 ，null</span><br>        <span class="hljs-comment">// 查询全部用户</span><br>        List&lt;User&gt; userList = userMapper.selectList(<span class="hljs-keyword">null</span>);<br><br>        userList.forEach(System.out::println);<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li>
<li><p>结果</p>
<p><img src="/myBlog/MybatisPlus/image-20211116113454027.png" alt="image-20211116113454027"></p>
</li>
</ul>
</li>
</ol>
<h1 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h1><figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 配置日志输入</span><br><span class="hljs-meta">mybatis-plus.configuration.log-impl</span>=<span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure>



<p><img src="/myBlog/MybatisPlus/image-20211116151253635.png" alt="image-20211116151253635"></p>
<h1 id="CRUD扩展"><a href="#CRUD扩展" class="headerlink" title="CRUD扩展"></a>CRUD扩展</h1><h2 id="insert插入"><a href="#insert插入" class="headerlink" title="insert插入"></a>insert插入</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试insert</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsert</span><span class="hljs-params">()</span></span>&#123;<br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setName(<span class="hljs-string">&quot;狂神说Java&quot;</span>);<br>    user.setAge(<span class="hljs-number">3</span>);<br>    user.setEmail(<span class="hljs-string">&quot;123456789@qq.com&quot;</span>);<br><br>    <span class="hljs-comment">// 自动生成id</span><br>    <span class="hljs-keyword">int</span> result = userMapper.insert(user);<br>    System.out.println(result);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="/myBlog/MybatisPlus/image-20211116152120783.png" alt="image-20211116152120783"></p>
<p>数据库插入的id的默认值为：全局的唯一id</p>
<h2 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h2><p><strong>默认ID_WORKER全局唯一id</strong></p>
<p>分布式系统唯一id生成：<a href="https://www.cnblogs.com/haoxinyue/p/5208136.html">https://www.cnblogs.com/haoxinyue/p/5208136.html</a></p>
<p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。具体实现的代码可以参看<a href="https://github.com/twitter/snowflake%E3%80%82%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95%E6%94%AF%E6%8C%81%E7%9A%84TPS%E5%8F%AF%E4%BB%A5%E8%BE%BE%E5%88%B0419%E4%B8%87%E5%B7%A6%E5%8F%B3%EF%BC%882^22*1000%EF%BC%89%E3%80%82">https://github.com/twitter/snowflake。雪花算法支持的TPS可以达到419万左右（2^22*1000）。</a></p>
<p><strong>主键自增</strong></p>
<p>我们需要配置主键自增：</p>
<ol>
<li>实体类字段上<code>@TableId(type = IdType.AUTO)</code></li>
<li>数据库字段一定是自增。</li>
</ol>
<p><img src="/myBlog/MybatisPlus/image-20211116153637048.png" alt="image-20211116153637048"></p>
<p><strong>其他的源码解析</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">IdType</span> </span>&#123;<br>    AUTO(<span class="hljs-number">0</span>),				<span class="hljs-comment">// 数据库id自增</span><br>    NONE(<span class="hljs-number">1</span>),				<span class="hljs-comment">// 未设置主键</span><br>    INPUT(<span class="hljs-number">2</span>),				<span class="hljs-comment">// 手动输入</span><br>    ID_WORKER(<span class="hljs-number">3</span>),			<span class="hljs-comment">// 默认的全局唯一id</span><br>    UUID(<span class="hljs-number">4</span>),				<span class="hljs-comment">// 全局唯一id UUID</span><br>    ID_WORKER_STR(<span class="hljs-number">5</span>);		<span class="hljs-comment">// ID_WORKER 字符串表示法</span><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">// 测试更新</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate</span><span class="hljs-params">()</span></span>&#123;<br>    User user = <span class="hljs-keyword">new</span> User();<br><br>    <span class="hljs-comment">// 通过条件自动拼接动态SQL</span><br>    user.setId(<span class="hljs-number">6L</span>);<br>    user.setAge(<span class="hljs-number">18</span>);<br><br>    <span class="hljs-comment">// updateById 参数是对象</span><br>    <span class="hljs-keyword">int</span> i = userMapper.updateById(user);<br>    System.out.println(i);<br><br>&#125;<br></code></pre></td></tr></table></figure>





<p><img src="/myBlog/MybatisPlus/image-20211116155519891.png" alt="image-20211116155519891"></p>
<p>所有的SQL都是自动帮你动态配置的！</p>
<h2 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h2><p>创建时间、修改时间！这些操作都是自动化完成的，我们不需要手动更新！</p>
<p>阿里巴巴开发手册：所有的数据库表：gmt_create、gmt_modified几乎所有的表都要配置上！而且需要自动化。</p>
<h3 id="方式一：数据库级别（工作中不允许修改数据库）"><a href="#方式一：数据库级别（工作中不允许修改数据库）" class="headerlink" title="方式一：数据库级别（工作中不允许修改数据库）"></a>方式一：数据库级别（工作中不允许修改数据库）</h3><ol>
<li>在表中新增create_time，update_time</li>
</ol>
<p>datatime在mysql5.6之后的版本才支持根据时间戳更新 可以用timestamp</p>
<p><img src="/myBlog/MybatisPlus/image-20211116161102176.png" alt="image-20211116161102176"></p>
<ol start="2">
<li><p>再次测试插入方法，我们需要先把实体类同步。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Date createTime;<br><span class="hljs-keyword">private</span> Date updateTime;<br></code></pre></td></tr></table></figure></li>
<li><p>查看结果</p>
<p><img src="/myBlog/MybatisPlus/image-20211116162826518.png" alt="image-20211116162826518"></p>
</li>
</ol>
<h3 id="方式二：代码级别："><a href="#方式二：代码级别：" class="headerlink" title="方式二：代码级别："></a>方式二：代码级别：</h3><ol>
<li>删除数据库的默认值、更新操作！</li>
</ol>
<p><img src="/myBlog/MybatisPlus/image-20211116163035023.png" alt="image-20211116163035023"></p>
<ol start="2">
<li><p>实体类字段属性上需要增加注解 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 字段添加填充内容</span><br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br><span class="hljs-keyword">private</span> Date createTime;<br><br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br><span class="hljs-keyword">private</span> Date updateTime;<br></code></pre></td></tr></table></figure></li>
<li><p>编写处理器来处理这个注解即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.handler;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.ibatis.reflection.MetaObject;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-comment">// 加入到IOC容器中</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMetaObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MetaObjectHandler</span> </span>&#123;<br><br>    <span class="hljs-comment">// 插入时的填充策略</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;<br><br>        log.info(<span class="hljs-string">&quot;start insert fill...&quot;</span>);<br><br>        <span class="hljs-comment">// default MetaObjectHandler setFieldValByName(</span><br>        <span class="hljs-comment">// String fieldName, Object fieldVal, MetaObject metaObject)</span><br>        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">&quot;creatTime&quot;</span>,<span class="hljs-keyword">new</span> Date(),metaObject);<br>        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">&quot;updateTime&quot;</span>,<span class="hljs-keyword">new</span> Date(),metaObject);<br><br>    &#125;<br><br>    <span class="hljs-comment">// 更新时的填充策略</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;<br>        log.info(<span class="hljs-string">&quot;start update fill...&quot;</span>);<br>        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">&quot;updateTime&quot;</span>,<span class="hljs-keyword">new</span> Date(),metaObject);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>测试插入，创建时间和更新时间都会变化</p>
<p><img src="/myBlog/MybatisPlus/image-20211116165429457.png" alt="image-20211116165429457"></p>
</li>
<li><p>测试更新，只有更新时间发送变化</p>
<p><img src="/myBlog/MybatisPlus/image-20211116165520617.png" alt="image-20211116165520617"></p>
</li>
</ol>
<h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p><strong>乐观锁：</strong>顾名思义十分乐观，它总是认为不会出现问题，无论干么都不去上锁！如果出现问题了，再次更新值测试</p>
<p><strong>悲观锁：</strong>十分悲观，认为什么事情都会出现问题，无论干什么都会上锁，再去操作。</p>
<p>当要更新一条记录的时候，希望这条记录没有被别人更新<br>乐观锁实现方式：</p>
<ul>
<li>取出记录时，获取当前version</li>
<li>更新时，带上这个version</li>
<li>执行更新时， set version = newVersion where version = oldVersion</li>
<li>如果version不对，就更新失败 </li>
</ul>
<h3 id="测试一下MP的乐观锁插件"><a href="#测试一下MP的乐观锁插件" class="headerlink" title="测试一下MP的乐观锁插件"></a>测试一下MP的乐观锁插件</h3><ol>
<li><p>给数据库中增加version字段</p>
<p><img src="/myBlog/MybatisPlus/image-20211116192030948.png" alt="image-20211116192030948"></p>
</li>
<li><p>实体类加对应的字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 乐观锁注解</span><br><span class="hljs-meta">@Version</span><br><span class="hljs-keyword">private</span> Integer version;<br></code></pre></td></tr></table></figure></li>
<li><p>注册组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 扫描Mapper文件夹</span><br><span class="hljs-meta">@MapperScan(&quot;com.kuang.mapper&quot;)</span><br><span class="hljs-meta">@EnableTransactionManagement</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisPlusConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">// 注册乐观锁插件</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 旧版</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> OptimisticLockerInterceptor <span class="hljs-title">optimisticLockerInterceptor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OptimisticLockerInterceptor();<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新版，需要更换较新的MybatisPlus的版本</span><br><span class="hljs-comment">     */</span><span class="hljs-comment">/*</span><br><span class="hljs-comment">    @Bean</span><br><span class="hljs-comment">    public MybatisPlusInterceptor mybatisPlusInterceptor() &#123;</span><br><span class="hljs-comment">        MybatisPlusInterceptor mybatisPlusInterceptor = new MybatisPlusInterceptor();</span><br><span class="hljs-comment">        mybatisPlusInterceptor.addInnerInterceptor(new OptimisticLockerInnerInterceptor());</span><br><span class="hljs-comment">        return mybatisPlusInterceptor;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">*/</span><br>&#125;<br><br></code></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试乐观锁成功</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testOptimisticLocker</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-comment">// 1.查询用户信息</span><br>    User user = userMapper.selectById(<span class="hljs-number">1L</span>);<br><br>    <span class="hljs-comment">// 2.修改用户信息</span><br>    user.setName(<span class="hljs-string">&quot;kuangshen&quot;</span>);<br>    user.setEmail(<span class="hljs-string">&quot;11111111111@qq.com&quot;</span>);<br><br>    <span class="hljs-comment">// 3.执行操作</span><br>    userMapper.updateById(user);<br><br>&#125;<br><br><span class="hljs-comment">// 测试乐观锁失败，多线程下</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testOptimisticLocker1</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-comment">//  线程1</span><br>    User user = userMapper.selectById(<span class="hljs-number">1L</span>);<br>    user.setName(<span class="hljs-string">&quot;kuangshen111&quot;</span>);<br>    user.setEmail(<span class="hljs-string">&quot;11111111111@qq.com&quot;</span>);<br><br>    <span class="hljs-comment">// 模拟多线性插队操作</span><br>    User user1 = userMapper.selectById(<span class="hljs-number">1L</span>);<br>    user1.setName(<span class="hljs-string">&quot;kuangshen222222&quot;</span>);<br>    user1.setEmail(<span class="hljs-string">&quot;11111111111@qq.com&quot;</span>);<br>    userMapper.updateById(user1);<br><br>    <span class="hljs-comment">// 插入失败，因为加了乐观锁，version与查询时不一样。</span><br>    userMapper.updateById(user);	<br><br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<h2 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试查询</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectById</span><span class="hljs-params">()</span></span>&#123;<br>    User user = userMapper.selectById(<span class="hljs-number">1L</span>);<br>    System.out.println(user);<br>&#125;<br><br><span class="hljs-comment">// 测试批量查询</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectByBatchId</span><span class="hljs-params">()</span></span>&#123;<br>    List&lt;User&gt; userList = userMapper.selectBatchIds(Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br>    userList.forEach(System.out::println);<br>&#125;<br><br><span class="hljs-comment">// 按条件查询之一 map操作</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectByBatchIds</span><span class="hljs-params">()</span></span>&#123;<br><br>    HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>    map.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;狂神说Java&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">3</span>);<br><br>    userMapper.selectByMap(map);<br><br>&#125;<br><br></code></pre></td></tr></table></figure>



<h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><p>分页在网站使用的十分多。</p>
<ol>
<li>原始的limit进行分页</li>
<li>PageHelper第三方插件</li>
<li>MP其实也内置了分页插件！</li>
</ol>
<p><strong>使用</strong></p>
<ol>
<li><p>配置拦截器组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 旧版</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> PaginationInterceptor <span class="hljs-title">paginationInterceptor</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">/*PaginationInterceptor paginationInterceptor = new PaginationInterceptor();</span><br><span class="hljs-comment">        // 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false</span><br><span class="hljs-comment">        // paginationInterceptor.setOverflow(false);</span><br><span class="hljs-comment">        // 设置最大单页限制数量，默认 500 条，-1 不受限制</span><br><span class="hljs-comment">        // paginationInterceptor.setLimit(500);</span><br><span class="hljs-comment">        // 开启 count 的 join 优化,只针对部分 left join</span><br><span class="hljs-comment">        paginationInterceptor.setCountSqlParser(new JsqlParserCountOptimize(true));</span><br><span class="hljs-comment">        return paginationInterceptor;*/</span><br>    <span class="hljs-comment">// 修改之后</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PaginationInterceptor();<br>&#125;<br><br><span class="hljs-comment">// 最新版</span><br><span class="hljs-comment">/* @Bean</span><br><span class="hljs-comment">    public MybatisPlusInterceptor mybatisPlusInterceptor() &#123;</span><br><span class="hljs-comment">        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();</span><br><span class="hljs-comment">        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.H2));</span><br><span class="hljs-comment">        return interceptor;</span><br><span class="hljs-comment">    &#125;*/</span><br></code></pre></td></tr></table></figure></li>
<li><p>直接使用page对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testPage</span><span class="hljs-params">()</span></span>&#123;<br><br>    <span class="hljs-comment">// 第一个参数：当前页数</span><br>    <span class="hljs-comment">// 第二个参数：一页的个数</span><br>    <span class="hljs-comment">// 使用了分页插件之后，所有的页面操作也变得简单了</span><br>    Page&lt;User&gt; page = <span class="hljs-keyword">new</span> Page&lt;User&gt;(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>);<br><br>    userMapper.selectPage(page,<span class="hljs-keyword">null</span>);<br><br>    page.getRecords().forEach(System.out::println);<br><br><br>    <span class="hljs-comment">// getSize：当前页面有多少条数据</span><br>    System.out.println(<span class="hljs-string">&quot;getSize=&quot;</span>+page.getSize());<br><br>    <span class="hljs-comment">// getCurrent：当前是第几页</span><br>    System.out.println(<span class="hljs-string">&quot;getCurrent=&quot;</span>+page.getCurrent());<br><br>    <span class="hljs-comment">// getTotal：一共有多少条数据</span><br>    System.out.println(<span class="hljs-string">&quot;getTotal=&quot;</span>+page.getTotal());<br><br>    <span class="hljs-comment">// getPages：一共有多少页</span><br>    System.out.println(<span class="hljs-string">&quot;getPages=&quot;</span>+page.getPages());<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><p>基本的删除操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试删除</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteById</span><span class="hljs-params">()</span></span>&#123;<br>    userMapper.deleteById(<span class="hljs-number">1460507717588463621L</span>);<br>&#125;<br><br><span class="hljs-comment">// 通过id批量删除</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteByBatchId</span><span class="hljs-params">()</span></span>&#123;<br>    userMapper.deleteBatchIds(Arrays.asList(<span class="hljs-number">1460507717588463620L</span>,<span class="hljs-number">1460507717588463619L</span>));<br>&#125;<br><br><span class="hljs-comment">// 通过map删除</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteByMap</span><span class="hljs-params">()</span></span>&#123;<br><br>    HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>    map.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;狂神说Java&quot;</span>);<br><br>    userMapper.deleteByMap(map);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>工作当中会遇到的一些问题：逻辑删除！</p>
<h2 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h2><p><strong>物理删除：</strong>从数据库中直接移除</p>
<p><strong>逻辑删除：</strong>在数据库中没有移除，而是通过一个变量来让他失效！deleted = 0 =&gt; deteled 1</p>
<p>管理员可以查看被删除的记录！防止数据的丢失！类似回收站。</p>
<ol>
<li><p>在数据库表中增加一个deleted字段</p>
<p><img src="/myBlog/MybatisPlus/image-20211117092038968.png" alt="image-20211117092038968"></p>
</li>
<li><p>在实体类中增加属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 逻辑删除</span><br><span class="hljs-meta">@TableLogic</span><br><span class="hljs-keyword">private</span> Integer deleted;<br></code></pre></td></tr></table></figure></li>
<li><p>配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 逻辑删除组件(新版本已经没有了。)</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ISqlInjector <span class="hljs-title">sqlInjector</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> LogicSqlInjector();<br>&#125;<br></code></pre></td></tr></table></figure>



<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 配置逻辑删除</span><br><span class="hljs-meta">mybatis-plus.global-config.db-config.logic-delete-value</span>=<span class="hljs-string">1</span><br><span class="hljs-meta">mybatis-plus.global-config.db-config.logic-not-delete-value</span>=<span class="hljs-string">0</span><br></code></pre></td></tr></table></figure></li>
<li><p>测试</p>
<p><img src="/myBlog/MybatisPlus/image-20211117093253788.png" alt="image-20211117093253788"></p>
<p>记录依旧在数据库，但是值已经变了。</p>
<p><img src="/myBlog/MybatisPlus/image-20211117093314667.png" alt="image-20211117093314667"></p>
<p>查询的时候，会自动过滤已经被逻辑删除的字段。</p>
<p><img src="/myBlog/MybatisPlus/image-20211117093559727.png" alt="image-20211117093559727"></p>
</li>
</ol>
<p>以上所有的CRUD操作以及其扩展操作，我们都必须精通掌握，会大大提升工作和写项目的效率。</p>
<h2 id="性能分析插件"><a href="#性能分析插件" class="headerlink" title="性能分析插件"></a>性能分析插件</h2><p>我们在平时的开发中，会遇到一些慢sql。测试！druid…</p>
<p>作用：性能分析烂机器，用于输出每条SQL语句以及其执行时间。</p>
<p>MP也提供了性能分析插件，如果超过这个时间即就停止运行。</p>
<ol>
<li><p>导入插件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*sql执行效率</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@Profile(&#123;&quot;dev&quot;,&quot;test&quot;&#125;)</span>    <span class="hljs-comment">// 设置dev test 环境开启，保证我们的效率</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> PerformanceInterceptor <span class="hljs-title">performanceInterceptor</span><span class="hljs-params">()</span></span>&#123;<br>    PerformanceInterceptor performanceInterceptor = <span class="hljs-keyword">new</span> PerformanceInterceptor();<br><br>    <span class="hljs-comment">// ms 设置SQL执行的最大时间，如果超过这个时间就不会执行了。</span><br>    performanceInterceptor.setMaxTime(<span class="hljs-number">100</span>);<br>    performanceInterceptor.setFormat(<span class="hljs-keyword">true</span>);<br>    <span class="hljs-keyword">return</span> performanceInterceptor;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>记得，要在springboot中配置环境为dev或者test环境</p>
</li>
<li><p>测试使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-comment">// 参数是一个Wrapper，条件构造器，这里我们先不用 ，null</span><br>    <span class="hljs-comment">// 查询全部用户</span><br>    List&lt;User&gt; userList = userMapper.selectList(<span class="hljs-keyword">null</span>);<br><br>    userList.forEach(System.out::println);<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>超过了规定时间就会抛出异常。</p>
<p><img src="/myBlog/MybatisPlus/image-20211117100238696.png" alt="image-20211117100238696"></p>
</li>
</ol>
<p>使用性能分析插件，可以帮助我们提高效率！</p>
<h2 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h2><p>十分重要：Wrapper</p>
<p>我们写一些复杂的SQL就可以使用它来替代！</p>
<ol>
<li><p>测试一</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-comment">// 查询name不为空的用户，并且邮箱不为控的用户，年龄大于等于12岁</span><br>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br><br>    wrapper<br>        .isNotNull(<span class="hljs-string">&quot;name&quot;</span>)<br>        .isNotNull(<span class="hljs-string">&quot;email&quot;</span>)<br>        .ge(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">12</span>);<br><br>    userMapper.selectList(wrapper).forEach(System.out::println);<br><br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>测试二</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    wrapper.eq(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;狂神说111111111111111&quot;</span>);<br><br>    <span class="hljs-comment">// 查询一个数据，出现多个结果使用list或者map</span><br>    User user = userMapper.selectOne(wrapper);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>测试三</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">// 查询年龄在20~30岁之间的用户</span><br>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br><br>    <span class="hljs-comment">// 区间</span><br>    wrapper.between(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>);<br><br>    <span class="hljs-comment">// 查询结果数</span><br>    Integer count = userMapper.selectCount(wrapper);<br>    System.out.println(count);<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>测试四</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 模糊查询</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span></span>&#123;<br><br>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    <span class="hljs-comment">// 左和右 t%:右</span><br>    wrapper<br>        .notLike(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>)<br>        .likeRight(<span class="hljs-string">&quot;email&quot;</span>,<span class="hljs-string">&quot;t&quot;</span>);<br><br><br>    List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(wrapper);<br>    maps.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>测试五</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 模糊查询</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span></span>&#123;<br><br>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    <span class="hljs-comment">// id 在子查询中查出来</span><br>    wrapper.inSql(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-string">&quot;select id from user where id&lt;3&quot;</span>);<br><br>    List&lt;Object&gt; objects = userMapper.selectObjs(wrapper);<br>    objects.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>测试六</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span></span>&#123;<br><br>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    <span class="hljs-comment">// 通过id降序</span><br>    wrapper.orderByDesc(<span class="hljs-string">&quot;id&quot;</span>);<br><br>    List&lt;User&gt; userList = userMapper.selectList(wrapper);<br>    userList.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<h2 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h2><p>根据实际情况，结合官网修改。</p>
]]></content>
      <categories>
        <category>MybatisPlus</category>
      </categories>
      <tags>
        <tag>MybatisPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity笔记</title>
    <url>/myBlog/SpringSecurity%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="SpringSecurity笔记"><a href="#SpringSecurity笔记" class="headerlink" title="SpringSecurity笔记"></a>SpringSecurity笔记</h1><h1 id="1-SpringSecurity介绍"><a href="#1-SpringSecurity介绍" class="headerlink" title="1 SpringSecurity介绍"></a>1 SpringSecurity介绍</h1><h2 id="1-1-概要"><a href="#1-1-概要" class="headerlink" title="1.1 概要"></a>1.1 概要</h2><p>用户认证（authentication）和用户授权（authorization）</p>
<p>用户认证指：登录</p>
<p>用户授权指：是否有权限做某些事件</p>
<h2 id="1-2-同款产品对比"><a href="#1-2-同款产品对比" class="headerlink" title="1.2 同款产品对比"></a>1.2 同款产品对比</h2><h3 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a><strong>SpringSecurity</strong></h3><ul>
<li>SpringSecurity 特点：</li>
<li>和 Spring 无缝整合。 </li>
<li>全面的权限控制。</li>
<li>专门为 Web 开发而设计。<ul>
<li>旧版本不能脱离 Web 环境使用。 </li>
<li>新版本对整个框架进行了分层抽取，分成了核心模块和 Web 模块。单独 引入核心模块就可以脱离 Web 环境。 </li>
</ul>
</li>
<li>重量级。</li>
</ul>
<h3 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a><strong>Shiro</strong></h3><p>特点： </p>
<ul>
<li>轻量级。Shiro 主张的理念是把复杂的事情变简单。针对对性能有更高要求 的互联网应用有更好表现。 </li>
<li>通用性。 <ul>
<li>好处：不局限于 Web 环境，可以脱离 Web 环境使用。</li>
<li>缺陷：在 Web 环境下一些特定的需求需要手动编写代码定制。</li>
</ul>
</li>
</ul>
<h1 id="2-入门案例"><a href="#2-入门案例" class="headerlink" title="2 入门案例"></a>2 入门案例</h1><p>创建一个springboot工程，导入依赖，编写一个controller，访问端口号，看到登录页面，账号为user,密码为控制台输出的一串，输入完成后，就可以看到controller返回的内容了。</p>
<h1 id="SpringSecurity-基本原理"><a href="#SpringSecurity-基本原理" class="headerlink" title="SpringSecurity 基本原理"></a>SpringSecurity 基本原理</h1><h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><p>SpringSecurity 本质是一个<strong>过滤器链</strong>：</p>
<p>代码底层流程：重点看三个过滤器：</p>
<p> <strong>FilterSecurityInterceptor</strong>：是一个<strong>方法级的</strong>权限过滤器, 基本位于过滤链的最底部</p>
<p><img src="/myBlog/SpringSecurity%E7%AC%94%E8%AE%B0/image-20220126112446542.png" alt="image-20220126112446542"></p>
<p>super.beforeInvocation(fi) 表示查看之前的 filter 是否通过。</p>
<p> fi.getChain().doFilter(fi.getRequest(), fi.getResponse());表示真正的调用后台的服务。</p>
<p><strong>ExceptionTranslationFilter</strong>：是个<strong>异常过滤器</strong>，用来处理在认证授权过程中抛出的异常</p>
<p><img src="/myBlog/SpringSecurity%E7%AC%94%E8%AE%B0/image-20220126112801964.png" alt="image-20220126112801964"></p>
<p><strong>UsernamePasswordAuthenticationFilter</strong> ：对**/login 的 POST 请求做拦截**，校验表单中用户 名，密码。</p>
<p><img src="/myBlog/SpringSecurity%E7%AC%94%E8%AE%B0/image-20220126112941523.png" alt="image-20220126112941523"></p>
<h2 id="过滤器加载过程"><a href="#过滤器加载过程" class="headerlink" title="过滤器加载过程"></a>过滤器加载过程</h2><h3 id="使用SpringSecurity配置过滤器"><a href="#使用SpringSecurity配置过滤器" class="headerlink" title="使用SpringSecurity配置过滤器"></a>使用SpringSecurity配置过滤器</h3><p>DelegatingFilterProxy</p>
<p>找到doFilter方法，里面有一个初始化initDelegate方法</p>
<p><img src="/myBlog/SpringSecurity%E7%AC%94%E8%AE%B0/image-20220126114809938.png" alt="image-20220126114809938"></p>
<p>点进去，重点在getBean这里，这里就是加载了过滤链，FilterChainProxy</p>
<p><img src="/myBlog/SpringSecurity%E7%AC%94%E8%AE%B0/image-20220126114842962.png" alt="image-20220126114842962"></p>
<p>打开FilterChainProxy类，找到doFilter方法，发现不管怎么样，都调用了doFilterInternal这个方法</p>
<p><img src="/myBlog/SpringSecurity%E7%AC%94%E8%AE%B0/image-20220126115128395.png" alt="image-20220126115128395"></p>
<p>打开doFilterInternal方法，发现这个是List集合的过滤链</p>
<p><img src="/myBlog/SpringSecurity%E7%AC%94%E8%AE%B0/image-20220126115238904.png" alt="image-20220126115238904"></p>
<p>继续进去getFilters，发现这个是迭代器，里面实现了拦截器的获取，并返回</p>
<p><img src="/myBlog/SpringSecurity%E7%AC%94%E8%AE%B0/image-20220126115314168.png" alt="image-20220126115314168"></p>
<h2 id="两个重要接口"><a href="#两个重要接口" class="headerlink" title="两个重要接口"></a>两个重要接口</h2><h3 id="UserDetailsService接口"><a href="#UserDetailsService接口" class="headerlink" title="UserDetailsService接口"></a>UserDetailsService接口</h3><p>查询数据库用户名和密码过程</p>
<p>创建类继承<code>UsernamePasswordAuthenticationFilter</code>，重写三个方法<code>attemptAuthentication</code>,<code>successfulAuthentication</code>,</p>
<p><code>unsuccessfulAuthentication</code>，验证用户名和密码，如果成功就调用成功的方法，失败就调用失败的。后面两个方法在父类<code>AbstractAuthenticationProcessingFilter</code>.</p>
<p>创建类实现<code>UserDetailsService</code>接口，编写查询数据库的过程，返回User对象，这个User对象是安全框架提供的。</p>
<h3 id="PasswordEncoder接口"><a href="#PasswordEncoder接口" class="headerlink" title="PasswordEncoder接口"></a>PasswordEncoder接口</h3><p>数据加密接口，用于返回User对象里面密码加密</p>
<h1 id="web权限方案-用户认证"><a href="#web权限方案-用户认证" class="headerlink" title="web权限方案-用户认证"></a>web权限方案-用户认证</h1><h2 id="方法一：在配置文件添加用户信息"><a href="#方法一：在配置文件添加用户信息" class="headerlink" title="方法一：在配置文件添加用户信息"></a>方法一：在配置文件添加用户信息</h2><figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">server.port</span>=<span class="hljs-string">8111</span><br><span class="hljs-meta">spring.security.user.name</span>=<span class="hljs-string">atguigu</span><br><span class="hljs-meta">spring.security.user.password</span>=<span class="hljs-string">atguigu</span><br></code></pre></td></tr></table></figure>



<h2 id="方法二：编写配置类"><a href="#方法二：编写配置类" class="headerlink" title="方法二：编写配置类"></a>方法二：编写配置类</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        auth.inMemoryAuthentication().withUser(<span class="hljs-string">&quot;lucy&quot;</span>).password(<span class="hljs-string">&quot;123&quot;</span>).roles(<span class="hljs-string">&quot;admin&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>启动的时候，发现报错</p>
<p>java.lang.IllegalArgumentException: There is no PasswordEncoder mapped for the id “null”</p>
<p>加密的时候，需要用到一个接口，否则无法加密</p>
<p><strong>解决：</strong></p>
<p>注入一个Bean，<code>PasswordEncoder</code>，返回密码对象</p>
<p>完整代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        BCryptPasswordEncoder passwordEncoder = <span class="hljs-keyword">new</span> BCryptPasswordEncoder();<br>        String password = passwordEncoder.encode(<span class="hljs-string">&quot;123&quot;</span>);<br>        auth.inMemoryAuthentication().withUser(<span class="hljs-string">&quot;lucy&quot;</span>).password(password).roles(<span class="hljs-string">&quot;admin&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function">PasswordEncoder <span class="hljs-title">passwordEncoder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BCryptPasswordEncoder();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="方法三：自定义配置类"><a href="#方法三：自定义配置类" class="headerlink" title="方法三：自定义配置类"></a>方法三：自定义配置类</h2><p>第一步：编写一个配置类，设置使用哪个UserDetailsService实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfigTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDetailsService userDetailsService;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function">PasswordEncoder <span class="hljs-title">passwordEncoder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BCryptPasswordEncoder();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>第二步：创建一个实现类，返回User对象，User对象有用户名密码和操作权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service(&quot;userDetailsService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyUserDetailsService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetailsService</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException </span>&#123;<br>        List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="hljs-string">&quot;role&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;mary&quot;</span>,<span class="hljs-keyword">new</span> BCryptPasswordEncoder().encode(<span class="hljs-string">&quot;123&quot;</span>),auths);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="实现数据库认证来完成用户登录"><a href="#实现数据库认证来完成用户登录" class="headerlink" title="实现数据库认证来完成用户登录"></a>实现数据库认证来完成用户登录</h2><p>创建数据库和对应的表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">USE demo;<br><br>CREATE TABLE users(<br> id BIGINT PRIMARY KEY AUTO_INCREMENT,<br>username VARCHAR(20) UNIQUE NOT NULL,<br>PASSWORD VARCHAR(100)<br>);<br><br>INSERT INTO users VALUES(1,&#x27;张<br>san&#x27;,&#x27;$2a$10$2R/M6iU3mCZt3ByG7kwYTeeW0w7/UqdeXrb27zkBIizBvAven0/na&#x27;);<br>-- 密码 atguigu<br>INSERT INTO users VALUES(2,&#x27;李<br>si&#x27;,&#x27;$2a$10$2R/M6iU3mCZt3ByG7kwYTeeW0w7/UqdeXrb27zkBIizBvAven0/na&#x27;);<br></code></pre></td></tr></table></figure>



<p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--mybatis-plus--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mysql--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--lombok 用来简化实体类--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>



<p>在配置文件中添加数据库配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 数据库配置</span><br><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/demo?serverTimezone=GMT%2B8</span><br><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">root</span><br></code></pre></td></tr></table></figure>

<p>编写实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Users</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>编写mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UsersMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">Users</span>&gt; </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>编写service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service(&quot;userDetailsService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyUserDetailsService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetailsService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UsersMapper usersMapper;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException </span>&#123;<br>        <span class="hljs-comment">// 根据用户名查询数据库</span><br>        QueryWrapper&lt;Users&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        wrapper.eq(<span class="hljs-string">&quot;username&quot;</span>,username);<br>        Users users = usersMapper.selectOne(wrapper);<br>        <span class="hljs-keyword">if</span> (users == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 如果user为空，直接抛出异常</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UsernameNotFoundException(<span class="hljs-string">&quot;用户为空&quot;</span>);<br>        &#125;<br><br>        List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="hljs-string">&quot;role&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User(users.getUsername(),<span class="hljs-keyword">new</span> BCryptPasswordEncoder().encode(users.getPassword()),auths);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>debug测试</p>
<h2 id="自定义完成登录页面"><a href="#自定义完成登录页面" class="headerlink" title="自定义完成登录页面"></a>自定义完成登录页面</h2><p>在配置类中重写configure方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfigTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDetailsService userDetailsService;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function">PasswordEncoder <span class="hljs-title">passwordEncoder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BCryptPasswordEncoder();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        http.formLogin()    <span class="hljs-comment">// 自定义编写的登录页面</span><br>                .loginPage(<span class="hljs-string">&quot;/login.html&quot;</span>)       <span class="hljs-comment">// 登录页面设置</span><br>                .loginProcessingUrl(<span class="hljs-string">&quot;/user/login&quot;</span>)  <span class="hljs-comment">// 登录页面访问路径</span><br>                .defaultSuccessUrl(<span class="hljs-string">&quot;/text/index&quot;</span>).permitAll()   <span class="hljs-comment">// 登录成功跳转到的页面</span><br>                .and().authorizeRequests()<br>                    .antMatchers(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;/test/hello&quot;</span>,<span class="hljs-string">&quot;/user/login&quot;</span>).permitAll()      <span class="hljs-comment">// 哪些请求可以放行</span><br>                .anyRequest().authenticated()<br>                .and().csrf().disable();        <span class="hljs-comment">// 关闭csrf防护</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>编写登录页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/user/login&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>        密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;login&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>新增controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testController</span> </span>&#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello security&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@GetMapping(&quot;index&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello index&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>测试，先访问/test/hello,再访问/test/index</p>
<h1 id="web权限方案-用户授权"><a href="#web权限方案-用户授权" class="headerlink" title="web权限方案-用户授权"></a>web权限方案-用户授权</h1><h2 id="基于权限访问控制"><a href="#基于权限访问控制" class="headerlink" title="基于权限访问控制"></a>基于权限访问控制</h2><h3 id="hasAuthority方法和hasAnyAuthority方法"><a href="#hasAuthority方法和hasAnyAuthority方法" class="headerlink" title="hasAuthority方法和hasAnyAuthority方法"></a>hasAuthority方法和hasAnyAuthority方法</h3><p>(type=Forbidden, status=403).没有权限</p>
<p>在实现类添加权限List<GrantedAuthority> auths = AuthorityUtils.commaSeparatedStringToAuthorityList(“admins”);</GrantedAuthority></p>
<p>在配置类添加下面的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    http.formLogin()    <span class="hljs-comment">// 自定义编写的登录页面</span><br>            .loginPage(<span class="hljs-string">&quot;/login.html&quot;</span>)       <span class="hljs-comment">// 登录页面设置</span><br>            .loginProcessingUrl(<span class="hljs-string">&quot;/user/login&quot;</span>)  <span class="hljs-comment">// 登录页面访问路径</span><br>            .defaultSuccessUrl(<span class="hljs-string">&quot;/text/index&quot;</span>).permitAll()   <span class="hljs-comment">// 登录成功跳转到的页面</span><br>            .and().authorizeRequests()<br>                .antMatchers(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;/test/hello&quot;</span>,<span class="hljs-string">&quot;/user/login&quot;</span>).permitAll()      <span class="hljs-comment">// 哪些请求可以放行</span><br>            <span class="hljs-comment">// 当前用户登录，只有只有admins权限才可以访问这个路径</span><br>            <span class="hljs-comment">// hasAuthority方法，只能一个</span><br>            <span class="hljs-comment">//.antMatchers(&quot;/test/index&quot;).hasAuthority(&quot;admins&quot;)</span><br><br>            <span class="hljs-comment">// hasAnyAuthority方法，可以多个</span><br>            .antMatchers(<span class="hljs-string">&quot;/test/index&quot;</span>).hasAnyAuthority(<span class="hljs-string">&quot;admins,role&quot;</span>)<br>            .anyRequest().authenticated()<br>            .and().csrf().disable();        <span class="hljs-comment">// 关闭csrf防护</span><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="基于角色访问控制"><a href="#基于角色访问控制" class="headerlink" title="基于角色访问控制"></a>基于角色访问控制</h2><h2 id="hasRole和hasAnyRole"><a href="#hasRole和hasAnyRole" class="headerlink" title="hasRole和hasAnyRole"></a>hasRole和hasAnyRole</h2><p>在实现类中添加role的时候要注意格式，需要加上ROLE_前缀，可以通过查看源码发现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="hljs-string">&quot;admins,ROLE_sale&quot;</span>);<br></code></pre></td></tr></table></figure>

<p>配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 3.hasRole</span><br>.antMatchers(<span class="hljs-string">&quot;/test/index&quot;</span>).hasRole(<span class="hljs-string">&quot;sale&quot;</span>)<br></code></pre></td></tr></table></figure>

<p>hasAnyRole和上面的类型，多个角色用逗号隔开就行。</p>
<h2 id="自定义403页面"><a href="#自定义403页面" class="headerlink" title="自定义403页面"></a>自定义403页面</h2><p><img src="/myBlog/SpringSecurity%E7%AC%94%E8%AE%B0/image-20220126151935413.png" alt="image-20220126151935413"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-comment">// 配置没有权限跳转的页面</span><br>    http.exceptionHandling().accessDeniedPage(<span class="hljs-string">&quot;/unauth.html&quot;</span>);<br></code></pre></td></tr></table></figure>

<p>页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>没有访问权限！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="/myBlog/SpringSecurity%E7%AC%94%E8%AE%B0/image-20220126152035554.png" alt="image-20220126152035554"></p>
<h2 id="注解使用"><a href="#注解使用" class="headerlink" title="注解使用"></a>注解使用</h2><p> 使用注解先要开启注解功能！ @EnableGlobalMethodSecurity(securedEnabled=true)</p>
<h3 id="Secured"><a href="#Secured" class="headerlink" title="@Secured"></a>@Secured</h3><p>需要具有某些角色才可以访问</p>
<p>判断是否具有角色，另外需要注意的是这里匹配的字符串需要添加前缀“ROLE_“。 使用注解先要开启注解功能！ @EnableGlobalMethodSecurity(securedEnabled=true)</p>
<h3 id="PreAuthoriz"><a href="#PreAuthoriz" class="headerlink" title="@PreAuthoriz"></a>@PreAuthoriz</h3><p>在方法执行前进行验证权限</p>
<p>开启注解，@EnableGlobalMethodSecurity(prePostEnabled = true)</p>
<h3 id="PostAuthorize"><a href="#PostAuthorize" class="headerlink" title="@PostAuthorize"></a>@PostAuthorize</h3><p>方法执行之后再进行权限验证，适合用在有返回值的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;update&quot;)</span><br><span class="hljs-comment">//@Secured(&#123;&quot;normal&quot;,&quot;ROLE_sale&quot;&#125;)   // 需要拥有这些角色才可以访问</span><br><span class="hljs-comment">//@PreAuthorize(&quot;hasAnyAuthority(&#x27;admins&#x27;)&quot;) // 需要拥有这个权限才可以访问,PreAuthorize注解适合进入方法前的权限验证</span><br><span class="hljs-comment">//@PostAuthorize(&quot;hasAnyAuthority(&#x27;admins1&#x27;)&quot;)    // 执行方法后再进行权限认证，适合验证带返回值的</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">update</span><span class="hljs-params">()</span></span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;update...&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello update&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="PostFilter"><a href="#PostFilter" class="headerlink" title="@PostFilter"></a>@PostFilter</h3><p>权限验证之后对数据进行过滤 留下用户名是 admin1 的数据</p>
<p>表达式中的 filterObject 引用的是方法返回值 List 中的某一个元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;getAll&quot;)</span><br><span class="hljs-meta">@PostAuthorize(&quot;hasAnyAuthority(&#x27;admins1&#x27;)&quot;)</span><br><span class="hljs-meta">@PostFilter(&quot;filterObject.username == &#x27;admin1&#x27;&quot;)</span>        <span class="hljs-comment">// 对数据进行过滤，只留下admin1的</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Users&gt; <span class="hljs-title">getAllUser</span><span class="hljs-params">()</span></span>&#123;<br>    ArrayList&lt;Users&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    list.add(<span class="hljs-keyword">new</span> Users(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;admin1&quot;</span>,<span class="hljs-string">&quot;6666&quot;</span>));<br>    list.add(<span class="hljs-keyword">new</span> Users(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;admin2&quot;</span>,<span class="hljs-string">&quot;888&quot;</span>));<br>    System.out.println(list);<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="PreFilter"><a href="#PreFilter" class="headerlink" title="@PreFilter"></a>@PreFilter</h3><p> @PreFilter: 进入控制器之前对数据进行过滤，和上面这个注解类似</p>
<h1 id="web权限方案-用户注销"><a href="#web权限方案-用户注销" class="headerlink" title="web权限方案-用户注销"></a>web权限方案-用户注销</h1><p>编写登录成功的页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>登录成功<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/logout&quot;</span>&gt;</span>退出<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>在配置类添加配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-comment">// 配置退出登录</span><br>    http.logout().logoutUrl(<span class="hljs-string">&quot;/logout&quot;</span>).logoutSuccessUrl(<span class="hljs-string">&quot;/test/index&quot;</span>).permitAll();<br></code></pre></td></tr></table></figure>

<p>修改登录成功的页面到上面的页面</p>
<p><strong>测试</strong></p>
<p>访问登录页面，登录成功后跳转到成功的页面，再打开一个窗口，访问需要权限的方法，在登录成功的页面退出登录，回到需要权限的方法刷新，看看是否生效。</p>
<h1 id="web权限方案-自动登录"><a href="#web权限方案-自动登录" class="headerlink" title="web权限方案-自动登录"></a>web权限方案-自动登录</h1><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p><img src="/myBlog/SpringSecurity%E7%AC%94%E8%AE%B0/11-web%E6%9D%83%E9%99%90%E6%96%B9%E6%A1%88-%E8%AE%B0%E4%BD%8F%E7%94%A8%E6%88%B7%E6%B5%81%E7%A8%8B.png" alt="11-web权限方案-记住用户流程"></p>
<h2 id="查看源码："><a href="#查看源码：" class="headerlink" title="查看源码："></a><strong>查看源码：</strong></h2><p><strong>上图的1,2,3,4详细流程</strong></p>
<p><img src="/myBlog/SpringSecurity%E7%AC%94%E8%AE%B0/image-20220126174510489.png" alt="image-20220126174510489"></p>
<p><strong>11,12,13,14详细流程</strong></p>
<p><img src="/myBlog/SpringSecurity%E7%AC%94%E8%AE%B0/image-20220126175934833.png" alt="image-20220126175934833"></p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>在配置类中添加数据源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> DataSource dataSource;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function">PersistentTokenRepository <span class="hljs-title">persistentTokenRepository</span><span class="hljs-params">()</span></span>&#123;<br>    JdbcTokenRepositoryImpl jdbcTokenRepository = <span class="hljs-keyword">new</span> JdbcTokenRepositoryImpl();<br>    <span class="hljs-comment">// 赋值数据源</span><br>    jdbcTokenRepository.setDataSource(dataSource);<br>    <span class="hljs-comment">// 自动创建表,第一次执行会创建，以后要执行就要删除掉！</span><br>    <span class="hljs-comment">//jdbcTokenRepository.setCreateTableOnStartup(true);</span><br>    <span class="hljs-keyword">return</span> jdbcTokenRepository;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>在configure中开启记住我功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 开启记住我</span><br>.and().rememberMe().tokenRepository(persistentTokenRepository())<br>.tokenValiditySeconds(<span class="hljs-number">60</span>)<br>.userDetailsService(userDetailsService)<br>.and().csrf().disable();        <span class="hljs-comment">// 关闭csrf防护</span><br></code></pre></td></tr></table></figure>

<p>在页面添加复选框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">记住我<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remember-me&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h1 id="web权限方案-CSRF功能"><a href="#web权限方案-CSRF功能" class="headerlink" title="web权限方案-CSRF功能"></a>web权限方案-CSRF功能</h1><ol>
<li><p>生成 csrfToken 保存到 HttpSession 或者 Cookie 中</p>
</li>
<li><p>请求到来时，从请求中提取 csrfToken，和保存的 csrfToken 做比较，进而判断当 前请求是否合法。主要通过 CsrfFilter 过滤器来完成。</p>
</li>
</ol>
<h1 id="微服务权限方案-认证授权过程分析"><a href="#微服务权限方案-认证授权过程分析" class="headerlink" title="微服务权限方案-认证授权过程分析"></a>微服务权限方案-认证授权过程分析</h1><p><img src="/myBlog/SpringSecurity%E7%AC%94%E8%AE%B0/13-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90%E6%96%B9%E6%A1%88-%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90.png" alt="13-微服务权限方案-实现过程分析"></p>
<h1 id="微服务权限方案-数据模型介绍"><a href="#微服务权限方案-数据模型介绍" class="headerlink" title="微服务权限方案-数据模型介绍"></a>微服务权限方案-数据模型介绍</h1><p><img src="/myBlog/SpringSecurity%E7%AC%94%E8%AE%B0/14-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9D%83%E9%99%90%E6%96%B9%E6%A1%88-%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B.png" alt="14-微服务权限方案-数据模型"></p>
<h1 id="微服务权限方案-搭建项目工程"><a href="#微服务权限方案-搭建项目工程" class="headerlink" title="微服务权限方案-搭建项目工程"></a>微服务权限方案-搭建项目工程</h1><p>参照谷粒学院的</p>
<h1 id="微服务权限方案-编写security工具类"><a href="#微服务权限方案-编写security工具类" class="headerlink" title="微服务权限方案-编写security工具类"></a>微服务权限方案-编写security工具类</h1><h2 id="密码处理"><a href="#密码处理" class="headerlink" title="密码处理"></a>密码处理</h2><p>DefaultPasswordEncoder</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.atguigu.utils.MD5;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 密码处理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefaultPasswordEncoder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PasswordEncoder</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DefaultPasswordEncoder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(-<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">// 有参构造</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DefaultPasswordEncoder</span><span class="hljs-params">(<span class="hljs-keyword">int</span> strength)</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-comment">// MD5工具处理密码</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">encode</span><span class="hljs-params">(CharSequence rawPassword)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> MD5.encrypt(rawPassword.toString());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断密码是否匹配</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rawPassword 输入的密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> encodedPassword 已经处理过的密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 两个比较，如果相同，返回true，否则false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">matches</span><span class="hljs-params">(CharSequence rawPassword, String encodedPassword)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> encodedPassword.equals(MD5.encrypt(rawPassword.toString()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="token事务"><a href="#token事务" class="headerlink" title="token事务"></a>token事务</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TokenManager</span> </span>&#123;<br>    <span class="hljs-comment">// token 过期时间</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> tokenExpiration = <span class="hljs-number">1000</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>;   <span class="hljs-comment">// 一天</span><br>    <span class="hljs-comment">// 密钥</span><br>    <span class="hljs-keyword">private</span> String tokenSignKey = <span class="hljs-string">&quot;123456&quot;</span>;<br><br>    <span class="hljs-comment">// 生成token</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">createToken</span><span class="hljs-params">(String username)</span></span>&#123;<br>        String token = Jwts.builder().setSubject(username)     <span class="hljs-comment">// 设置用户名</span><br>                .setExpiration(<span class="hljs-keyword">new</span> Date(System.currentTimeMillis() + tokenExpiration))        <span class="hljs-comment">// 设置过期时间</span><br>                .signWith(SignatureAlgorithm.HS512, tokenSignKey).compressWith(CompressionCodecs.GZIP).compact();<span class="hljs-comment">// 设置密码</span><br>        <span class="hljs-comment">// 返回token</span><br>        <span class="hljs-keyword">return</span> token;<br>    &#125;<br><br>    <span class="hljs-comment">// 根据token获取用户信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUserInfoFromToken</span><span class="hljs-params">(String token)</span></span>&#123;<br>        String user = Jwts.parser().setSigningKey(tokenSignKey).parseClaimsJws(token).getBody().getSubject();<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除token</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeToken</span><span class="hljs-params">(String token)</span></span>&#123;<br>        <span class="hljs-comment">// jwttoken无需删除，客户端扔掉即可。</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="退出登录处理器"><a href="#退出登录处理器" class="headerlink" title="退出登录处理器"></a>退出登录处理器</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 退出登录处理器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TokenLogoutHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">LogoutHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> TokenManager tokenManager;<br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-comment">// 有参构成</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TokenLogoutHandler</span><span class="hljs-params">(TokenManager tokenManager,RedisTemplate redisTemplate)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.tokenManager = tokenManager;<br>        <span class="hljs-keyword">this</span>.redisTemplate = redisTemplate;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">logout</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> </span>&#123;<br>        <span class="hljs-comment">// 删除token，根据token获取用户名，根据用户名从redis中删除相关信息</span><br>        <span class="hljs-comment">// 获取token</span><br>        String token = request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-keyword">if</span> (token != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 删除token</span><br>            tokenManager.removeToken(token);<br><br>            <span class="hljs-comment">// 清空当前用户缓存中的权限数据</span><br>            String username = tokenManager.getUserInfoFromToken(token);<br>            redisTemplate.delete(username);<br>        &#125;<br>        <span class="hljs-comment">// 退出</span><br>        ResponseUtil.out(response, R.ok());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="微服务权限方案-编写security认证过滤器"><a href="#微服务权限方案-编写security认证过滤器" class="headerlink" title="微服务权限方案-编写security认证过滤器"></a>微服务权限方案-编写security认证过滤器</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 认证的过滤器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TokenLoginFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">UsernamePasswordAuthenticationFilter</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> TokenManager tokenManager;<br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br>    <span class="hljs-keyword">private</span> AuthenticationManager authenticationManager;<br><br>    <span class="hljs-comment">// 有参构造</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TokenLoginFilter</span><span class="hljs-params">(AuthenticationManager authenticationManager, TokenManager tokenManager, RedisTemplate redisTemplate)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.authenticationManager = authenticationManager;<br>        <span class="hljs-keyword">this</span>.tokenManager = tokenManager;<br>        <span class="hljs-keyword">this</span>.redisTemplate = redisTemplate;<br>        <span class="hljs-keyword">this</span>.setPostOnly(<span class="hljs-keyword">false</span>);<br>        <span class="hljs-keyword">this</span>.setRequiresAuthenticationRequestMatcher(<span class="hljs-keyword">new</span> AntPathRequestMatcher(<span class="hljs-string">&quot;/admin/acl/login&quot;</span>,<span class="hljs-string">&quot;POST&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">// 认证用户名和密码,获取表单提交用户名和密码</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Authentication <span class="hljs-title">attemptAuthentication</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;<br>        <span class="hljs-comment">// 获取表单提交数据</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            User user = <span class="hljs-keyword">new</span> ObjectMapper().readValue(request.getInputStream(), User.class);<br>            <span class="hljs-keyword">return</span> authenticationManager.authenticate(<span class="hljs-keyword">new</span> UsernamePasswordAuthenticationToken(user.getUsername(),user.getPassword(),<br>                    <span class="hljs-keyword">new</span> ArrayList&lt;&gt;()));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 认证成功执行</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">successfulAuthentication</span><span class="hljs-params">(HttpServletRequest request,</span></span><br><span class="hljs-params"><span class="hljs-function">                                            HttpServletResponse response, FilterChain chain, Authentication authResult)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        <span class="hljs-comment">// 得到用户认证成功后的信息</span><br>        SecurityUser user = (SecurityUser) authResult.getPrincipal();<br>        <span class="hljs-comment">// 生成token信息</span><br>        String token = tokenManager.createToken(user.getCurrentUserInfo().getUsername());<br>        <span class="hljs-comment">// 存到redis，k为用户名，value为权限值</span><br>        redisTemplate.opsForValue().set(user.getCurrentUserInfo().getUsername(),user.getPermissionValueList());<br><br>        ResponseUtil.out(response, R.ok().data(<span class="hljs-string">&quot;token&quot;</span>,token));<br>    &#125;<br><br>    <span class="hljs-comment">// 认证失败执行</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unsuccessfulAuthentication</span><span class="hljs-params">(HttpServletRequest request,</span></span><br><span class="hljs-params"><span class="hljs-function">                                              HttpServletResponse response, AuthenticationException failed)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        ResponseUtil.out(response,R.error());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="微服务权限方案-security授权过滤器"><a href="#微服务权限方案-security授权过滤器" class="headerlink" title="微服务权限方案-security授权过滤器"></a>微服务权限方案-security授权过滤器</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 授权过滤器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TokenAuthenticationFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BasicAuthenticationFilter</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> TokenManager tokenManager;<br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TokenAuthenticationFilter</span><span class="hljs-params">(AuthenticationManager authenticationManager)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(authenticationManager);<br>        <span class="hljs-keyword">this</span>.tokenManager = tokenManager;<br>        <span class="hljs-keyword">this</span>.redisTemplate = redisTemplate;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        <span class="hljs-comment">// 获取当前认证成功的用户信息</span><br>        UsernamePasswordAuthenticationToken authRequest = getAuthentication(request);<br>        <span class="hljs-comment">// 判断如果有权限值，就放到权限上下文中</span><br>        <span class="hljs-keyword">if</span> (authRequest != <span class="hljs-keyword">null</span>)&#123;<br>            SecurityContextHolder.getContext().setAuthentication(authRequest);<br>        &#125;<br>        <br>        chain.doFilter(request,response);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> UsernamePasswordAuthenticationToken <span class="hljs-title">getAuthentication</span><span class="hljs-params">(HttpServletRequest request)</span></span>&#123;<br>        <span class="hljs-comment">// 从header中获取token信息</span><br>        String token = request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-keyword">if</span> (token != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 根据token信息获取用户信息</span><br>            String username = tokenManager.getUserInfoFromToken(token);<br>            <span class="hljs-comment">// 从redis中查询对应的权限列表</span><br>            List&lt;String&gt; permissionValueList = (List&lt;String&gt;) redisTemplate.opsForValue().get(username);<br>            <span class="hljs-comment">// 将权限列表的类型转换为GrantedAuthority</span><br>            Collection&lt;GrantedAuthority&gt; authorities = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>            <span class="hljs-keyword">for</span> (String permission : permissionValueList) &#123;<br>                SimpleGrantedAuthority auth = <span class="hljs-keyword">new</span> SimpleGrantedAuthority(permission);<br>                authorities.add(auth);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UsernamePasswordAuthenticationToken(username,token,authorities);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="微服务权限方案-核心配置类"><a href="#微服务权限方案-核心配置类" class="headerlink" title="微服务权限方案-核心配置类"></a>微服务权限方案-核心配置类</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 核心配置类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TokenWebSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> TokenManager tokenManager;<br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br>    <span class="hljs-keyword">private</span> UserDetailsService userDetailsService;<br>    <span class="hljs-keyword">private</span> DefaultPasswordEncoder defaultPasswordEncoder;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TokenWebSecurityConfig</span><span class="hljs-params">(UserDetailsService userDetailsService, DefaultPasswordEncoder defaultPasswordEncoder,</span></span><br><span class="hljs-params"><span class="hljs-function">                                  TokenManager tokenManager, RedisTemplate redisTemplate)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userDetailsService = userDetailsService;<br>        <span class="hljs-keyword">this</span>.defaultPasswordEncoder = defaultPasswordEncoder;<br>        <span class="hljs-keyword">this</span>.tokenManager = tokenManager;<br>        <span class="hljs-keyword">this</span>.redisTemplate = redisTemplate;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> http</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        http.exceptionHandling()<br>                .authenticationEntryPoint(<span class="hljs-keyword">new</span> UnauthEntryPoint())       <span class="hljs-comment">// 没有权限访问</span><br>                .and().csrf().disable()<br>                .authorizeRequests()<br>                .anyRequest().authenticated()<br>                .and().logout().logoutUrl(<span class="hljs-string">&quot;/admin/acl/index/logout&quot;</span>)    <span class="hljs-comment">// 设置退出路径</span><br>                .addLogoutHandler(<span class="hljs-keyword">new</span> TokenLogoutHandler(tokenManager,redisTemplate)).and()<br>                .addFilter(<span class="hljs-keyword">new</span> TokenLoginFilter(authenticationManager(), tokenManager, redisTemplate))<br>                .addFilter(<span class="hljs-keyword">new</span> TokenAuthenticationFilter(authenticationManager(), tokenManager, redisTemplate)).httpBasic();<br>    &#125;<br><br>    <span class="hljs-comment">// 调用userDetailsService和密码处理</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        auth.userDetailsService(userDetailsService).passwordEncoder(defaultPasswordEncoder);<br>    &#125;<br><br>    <span class="hljs-comment">// 不进行认证的路径，可以直接访问</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(WebSecurity web)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        web.ignoring().antMatchers(<span class="hljs-string">&quot;/api/**&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="微服务权限方案-UserDetailsService实现类"><a href="#微服务权限方案-UserDetailsService实现类" class="headerlink" title="微服务权限方案-UserDetailsService实现类"></a>微服务权限方案-UserDetailsService实现类</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * security的UserDetailsService实现类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service(&quot;userDetailsService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDetailsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetailsService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> PermissionService permissionService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException </span>&#123;<br>        <span class="hljs-comment">// 根据用户名查询数据</span><br>        User user = userService.selectByUsername(username);<br>        <span class="hljs-comment">// 判断</span><br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UsernameNotFoundException(<span class="hljs-string">&quot;用户不存在&quot;</span>);<br>        &#125;<br>        com.atguigu.entity.User curUser = <span class="hljs-keyword">new</span> com.atguigu.entity.User();<br>        BeanUtils.copyProperties(user,curUser);<br><br>        <span class="hljs-comment">// 根据用户id查询权限列表</span><br>        List&lt;String&gt; permissionValueList = permissionService.selectPermissionValueByUserId(user.getId());<br>        SecurityUser securityUser = <span class="hljs-keyword">new</span> SecurityUser();<br>        securityUser.setPermissionValueList(permissionValueList);<br>        <span class="hljs-keyword">return</span> securityUser;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="微服务权限-整合网关和权限"><a href="#微服务权限-整合网关和权限" class="headerlink" title="微服务权限-整合网关和权限"></a>微服务权限-整合网关和权限</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解决跨域</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CorsConfig</span> </span>&#123;<br>    <span class="hljs-comment">// 方法，请求头，跨域都可以访问</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CorsWebFilter <span class="hljs-title">corsWebFilter</span><span class="hljs-params">()</span> </span>&#123;<br>        CorsConfiguration config = <span class="hljs-keyword">new</span> CorsConfiguration();<br>        config.addAllowedMethod(<span class="hljs-string">&quot;*&quot;</span>);<br>        config.addAllowedOrigin(<span class="hljs-string">&quot;*&quot;</span>);<br>        config.addAllowedHeader(<span class="hljs-string">&quot;*&quot;</span>);<br><br>        UrlBasedCorsConfigurationSource source = <span class="hljs-keyword">new</span> UrlBasedCorsConfigurationSource(<span class="hljs-keyword">new</span> PathPatternParser());<br>        source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, config);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CorsWebFilter(source);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<p>配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 服务端口</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8222</span><br><span class="hljs-comment"># 服务名</span><br><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">service-gateway</span><br><span class="hljs-comment"># nacos服务地址</span><br><span class="hljs-meta">spring.cloud.nacos.discovery.server-addr</span>=<span class="hljs-string">127.0.0.1:8848</span><br><span class="hljs-comment">#使用路由发现</span><br><span class="hljs-meta">spring.cloud.gateway.discovery.locator.enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#设置路由id</span><br><span class="hljs-meta">spring.cloud.gateway.routes[0].id</span>=<span class="hljs-string">service-acl</span><br><span class="hljs-comment">#设置路由的uri   lb://nacos注册服务名称</span><br><span class="hljs-meta">spring.cloud.gateway.routes[0].uri</span>=<span class="hljs-string">lb://service-acl</span><br><span class="hljs-comment">#设置路由断言,代理servicerId为auth-service的/auth/路径</span><br><span class="hljs-meta">spring.cloud.gateway.routes[0].predicates</span>= <span class="hljs-string">Path=/*/acl/**</span><br></code></pre></td></tr></table></figure>



<h1 id="SpringSecurity原理总结"><a href="#SpringSecurity原理总结" class="headerlink" title="SpringSecurity原理总结"></a>SpringSecurity原理总结</h1><p>源码：</p>
]]></content>
      <categories>
        <category>framework</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>day02-项目环境搭建</title>
    <url>/myBlog/day02-%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="day02-项目环境搭建"><a href="#day02-项目环境搭建" class="headerlink" title="day02-项目环境搭建"></a>day02-项目环境搭建</h1><h1 id="逻辑删除讲师功能"><a href="#逻辑删除讲师功能" class="headerlink" title="逻辑删除讲师功能"></a>逻辑删除讲师功能</h1><h2 id="1、在EduConfig中配置逻辑删除插件"><a href="#1、在EduConfig中配置逻辑删除插件" class="headerlink" title="1、在EduConfig中配置逻辑删除插件"></a>1、在EduConfig中配置逻辑删除插件</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 逻辑删除插件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ISqlInjector <span class="hljs-title">sqlInjector</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> LogicSqlInjector();<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="2、在实体类添加注解"><a href="#2、在实体类添加注解" class="headerlink" title="2、在实体类添加注解"></a>2、在实体类添加注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiModelProperty(value = &quot;逻辑删除 1（true）已删除， 0（false）未删除&quot;)</span><br><span class="hljs-meta">@TableLogic</span><br><span class="hljs-keyword">private</span> Boolean isDeleted;<br></code></pre></td></tr></table></figure>



<h2 id="3、在EduTeacherController添加删除方法"><a href="#3、在EduTeacherController添加删除方法" class="headerlink" title="3、在EduTeacherController添加删除方法"></a>3、在EduTeacherController添加删除方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2.逻辑删除讲师</span><br><span class="hljs-meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">removeTeacher</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>    <span class="hljs-keyword">boolean</span> flag = teacherService.removeById(id);<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="整合Swagger2"><a href="#整合Swagger2" class="headerlink" title="整合Swagger2"></a>整合Swagger2</h1><p>在guli_parent中创建maven项目，名common模块</p>
<p>在common模块中的pom文件导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>guli_parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>servicebase<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided <span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--mybatis-plus--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided <span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--lombok用来简化实体类：需要安装lombok插件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided <span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--swagger--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided <span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided <span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- redis --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- spring2.X集成redis所需common-pool2</span><br><span class="hljs-comment">        &lt;dependency&gt;</span><br><span class="hljs-comment">            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="hljs-comment">            &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span><br><span class="hljs-comment">            &lt;version&gt;2.6.0&lt;/version&gt;</span><br><span class="hljs-comment">        &lt;/dependency&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure>



<p>在common模块中创建servicebase模块，在servicebase模块中创建swagger配置类</p>
<p>创建包com.atguigu.servicebase，创建类SwaggerConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerConfig</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">webApiConfig</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)<br>                .groupName(<span class="hljs-string">&quot;webApi&quot;</span>)<br>                .apiInfo(webApiInfo())<br>                .select()<br>                .paths(Predicates.not(PathSelectors.regex(<span class="hljs-string">&quot;/admin/.*&quot;</span>)))<br>                .paths(Predicates.not(PathSelectors.regex(<span class="hljs-string">&quot;/error.*&quot;</span>)))<br>                .build();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">webApiInfo</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfoBuilder()<br>                .title(<span class="hljs-string">&quot;网站-课程中心API文档&quot;</span>)<br>                .description(<span class="hljs-string">&quot;本文档描述了课程中心微服务接口定义&quot;</span>)<br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .contact(<span class="hljs-keyword">new</span> Contact(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;http://11111.com&quot;</span>, <span class="hljs-string">&quot;11111@qq.com&quot;</span>))<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<p>在service模块中的pom文件引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>service_base<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>在service_edu模块的启动类加上注解@ComponentScan(basePackages = {“com.atguigu”})，在启动的时候扫描包</p>
<p><strong>定义接口说明和参数说明</strong></p>
<p>定义在类上：@Api</p>
<p>定义在方法上：@ApiOperation</p>
<p>定义在参数上：@ApiParam</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(description = &quot;讲师管理&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/eduservice/teacher&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EduTeacherController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EduTeacherService teacherService;<br><br>    <span class="hljs-comment">// 1.查询所有的数据</span><br>    <span class="hljs-comment">// rest风格</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;所有讲师列表&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;findAll&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;EduTeacher&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 调用service的方法查询所有数据</span><br>        List&lt;EduTeacher&gt; list = teacherService.list(<span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-comment">// 2.逻辑删除讲师</span><br>    <span class="hljs-meta">@ApiOperation(&quot;根据ID进行逻辑删除讲师&quot;)</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">removeById</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@ApiParam(name = &quot;id&quot;,value = &quot;讲师ID&quot;,required = true)</span></span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>        <span class="hljs-keyword">boolean</span> flag = teacherService.removeById(id);<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<p><strong>测试</strong></p>
<p>启动启动类，在浏览器中访问<a href="http://localhost:8001/swagger-ui.html">http://localhost:8001/swagger-ui.html</a></p>
<p><img src="/myBlog/day02-%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/image-20211221120726821.png" alt="image-20211221120726821"></p>
<h1 id="统一返回结果"><a href="#统一返回结果" class="headerlink" title="统一返回结果"></a>统一返回结果</h1><p>在common模块中创建commonutils子模块，创建包com.atguigu.commonutils，</p>
<p>创建ResultCode接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ResultCode</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer SUCCESS = <span class="hljs-number">20000</span>;  <span class="hljs-comment">// 成功</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer ERROR = <span class="hljs-number">20001</span>;  <span class="hljs-comment">// 失败</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>创建R类，统一返回结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">R</span> </span>&#123;<br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;是否成功&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean success;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;返回码&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer code;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;返回消息&quot;)</span><br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;返回数据&quot;)</span><br><br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; data = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br><br>    <span class="hljs-comment">// 构造私有化，链式编程R.ok().success().</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">R</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R <span class="hljs-title">ok</span><span class="hljs-params">()</span></span>&#123;<br>        R r = <span class="hljs-keyword">new</span> R();<br>        r.setSuccess(<span class="hljs-keyword">true</span>);<br>        r.setCode(ResultCode.SUCCESS);<br>        r.setMessage(<span class="hljs-string">&quot;成功&quot;</span>);<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R <span class="hljs-title">error</span><span class="hljs-params">()</span></span>&#123;<br>        R r = <span class="hljs-keyword">new</span> R();<br>        r.setSuccess(<span class="hljs-keyword">false</span>);<br>        r.setCode(ResultCode.ERROR);<br>        r.setMessage(<span class="hljs-string">&quot;失败&quot;</span>);<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">success</span><span class="hljs-params">(Boolean success)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.setSuccess(success);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">message</span><span class="hljs-params">(String message)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.setMessage(message);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">code</span><span class="hljs-params">(Integer code)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.setCode(code);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">data</span><span class="hljs-params">(String key, Object value)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.data.put(key, value);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">data</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.setData(map);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<p>在service模块中引用依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common_utils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>



<p>在controller中使用返回R类型（不要引错包）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api(description = &quot;讲师管理&quot;)</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/eduservice/teacher&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EduTeacherController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EduTeacherService teacherService;<br><br>    <span class="hljs-comment">// 1.查询所有的数据</span><br>    <span class="hljs-comment">// rest风格</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;所有讲师列表&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;findAll&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 调用service的方法查询所有数据</span><br>        List&lt;EduTeacher&gt; list = teacherService.list(<span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;items&quot;</span>,list);<br>    &#125;<br><br>    <span class="hljs-comment">// 2.逻辑删除讲师</span><br>    <span class="hljs-meta">@ApiOperation(&quot;根据ID进行逻辑删除讲师&quot;)</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">removeById</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@ApiParam(name = &quot;id&quot;,value = &quot;讲师ID&quot;,required = true)</span></span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>        <span class="hljs-keyword">boolean</span> flag = teacherService.removeById(id);<br><br>        <span class="hljs-keyword">if</span> (flag)&#123;<br>            <span class="hljs-keyword">return</span> R.ok();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> R.error();<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="讲师分页查询"><a href="#讲师分页查询" class="headerlink" title="讲师分页查询"></a>讲师分页查询</h1><p>在EduConfig类中添加分页插件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 分页插件</span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> PaginationInterceptor <span class="hljs-title">paginationInterceptor</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PaginationInterceptor();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>在EduTeacherController类添加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 3.分页查询讲师</span><br><span class="hljs-meta">@ApiOperation(&quot;分页查询讲师&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;pageTeacher/&#123;current&#125;/&#123;limit&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">pageTeacher</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function"></span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-meta">@ApiParam(name = &quot;current&quot;, value = &quot;当前页数&quot;,required = true)</span></span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-meta">@PathVariable</span> Long current,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-meta">@ApiParam(name = &quot;limit&quot;, value = &quot;条数&quot;,required = true)</span></span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-meta">@PathVariable</span> Long limit)</span></span>&#123;<br><br>    <span class="hljs-comment">// 创建分页对象</span><br>    Page&lt;EduTeacher&gt; teacherPage = <span class="hljs-keyword">new</span> Page&lt;&gt;(current,limit);<br><br>    <span class="hljs-comment">// 查询数据库</span><br>    teacherService.page(teacherPage,<span class="hljs-keyword">null</span>);<br><br>    <span class="hljs-keyword">long</span> total = teacherPage.getTotal();    <span class="hljs-comment">// 总记录数</span><br>    List&lt;EduTeacher&gt; records = teacherPage.getRecords();    <span class="hljs-comment">// 所有的讲师list</span><br><br>    <span class="hljs-comment">// 或者使用map</span><br>    <span class="hljs-comment">/* Map map = new HashMap();</span><br><span class="hljs-comment">        map.put(&quot;total&quot;,total);</span><br><span class="hljs-comment">        map.put(&quot;rows&quot;,records);</span><br><span class="hljs-comment">        return R.ok().data(map);*/</span><br><br>    <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;total&quot;</span>,total).data(<span class="hljs-string">&quot;rows&quot;</span>,records);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>在swagger中测试接口正确性</p>
<h1 id="讲师条件查询带分页"><a href="#讲师条件查询带分页" class="headerlink" title="讲师条件查询带分页"></a>讲师条件查询带分页</h1><p>思路：（暂时写在controller，后面所有的业务都写在serviceImpl）</p>
<ol>
<li>创建分页对象</li>
<li>创建wrapper对象<ul>
<li>填充条件</li>
</ul>
</li>
<li>查询数据库</li>
<li>获取数据</li>
<li>返回</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 条件查询带分页</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;条件查询讲师列表带分页&quot;)</span><br>    <span class="hljs-meta">@PostMapping(&quot;pageTeacherCondition/&#123;current&#125;/&#123;limit&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">pageTeacherCondition</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@ApiParam(name = &quot;current&quot;, value = &quot;当前页数&quot;,required = true)</span></span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@PathVariable</span> Long current,</span></span><br><span class="hljs-params"><span class="hljs-function"></span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@ApiParam(name = &quot;limit&quot;, value = &quot;条数&quot;,required = true)</span></span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@PathVariable</span> Long limit,</span></span><br><span class="hljs-params"><span class="hljs-function"></span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@ApiParam(name = &quot;teacherQuery&quot;, value = &quot;查询对象&quot;,required = false)</span></span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@RequestBody(required = false)</span> TeacherQuery teacherQuery)</span></span>&#123;<br><br>        <span class="hljs-comment">// 创建page分页对象</span><br>        Page&lt;EduTeacher&gt; teacherPage = <span class="hljs-keyword">new</span> Page&lt;&gt;(current,limit);<br><br>        <span class="hljs-comment">// 创建wrapper对象</span><br>        QueryWrapper&lt;EduTeacher&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br><br>        String name = teacherQuery.getName();<br>        Integer level = teacherQuery.getLevel();<br>        String begin = teacherQuery.getBegin();<br>        String end = teacherQuery.getEnd();<br>        <span class="hljs-comment">// 条件查询</span><br>        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(name))&#123;<br>            <span class="hljs-comment">// 模糊查询名字</span><br>            wrapper.like(<span class="hljs-string">&quot;name&quot;</span>,name);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(level))&#123;<br>            <span class="hljs-comment">// 级别</span><br>            wrapper.eq(<span class="hljs-string">&quot;level&quot;</span>,level);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(begin))&#123;<br>            <span class="hljs-comment">// 开始时间&gt;=</span><br>            wrapper.ge(<span class="hljs-string">&quot;gmt_create&quot;</span>,begin);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(end))&#123;<br>            <span class="hljs-comment">// 结束时间 &lt;=</span><br>            wrapper.le(<span class="hljs-string">&quot;gmt_modified&quot;</span>,end);<br>        &#125;<br><br><br>        <span class="hljs-comment">// 查询</span><br>        teacherService.page(teacherPage,wrapper);<br><br>        <span class="hljs-keyword">long</span> total = teacherPage.getTotal();    <span class="hljs-comment">// 总记录数</span><br>        List&lt;EduTeacher&gt; records = teacherPage.getRecords();    <span class="hljs-comment">// 所有的讲师list</span><br>        <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;total&quot;</span>,total).data(<span class="hljs-string">&quot;rows&quot;</span>,records);<br><br><br>    &#125;<br></code></pre></td></tr></table></figure>



<p>测试</p>
<h1 id="新增讲师"><a href="#新增讲师" class="headerlink" title="新增讲师"></a>新增讲师</h1><p>在EduTeacher类中的创建时间和更新时间添加自动填充注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiModelProperty(value = &quot;创建时间&quot;)</span><br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br><span class="hljs-keyword">private</span> Date gmtCreate;<br><br><span class="hljs-meta">@ApiModelProperty(value = &quot;更新时间&quot;)</span><br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br><span class="hljs-keyword">private</span> Date gmtModified;<br></code></pre></td></tr></table></figure>

<p>在servicebase模块中创建handler包，并在handler包中创建MyMetaObjectHandler类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMetaObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MetaObjectHandler</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">&quot;gmtCreate&quot;</span>, <span class="hljs-keyword">new</span> Date(), metaObject);<br>        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">&quot;gmtModified&quot;</span>, <span class="hljs-keyword">new</span> Date(), metaObject);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">&quot;gmtModified&quot;</span>, <span class="hljs-keyword">new</span> Date(), metaObject);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>在EduTeacherController中编写方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 添加讲师</span><br><span class="hljs-meta">@ApiOperation(&quot;添加讲师&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;addTeacher&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">addTeacher</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-meta">@ApiParam(name = &quot;teacher&quot;,value = &quot;讲师对象&quot;,required = true)</span></span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-meta">@RequestBody</span> EduTeacher teacher)</span></span>&#123;<br>    <span class="hljs-keyword">boolean</span> save = teacherService.save(teacher);<br>    <span class="hljs-keyword">if</span> (save)&#123;<br>        <span class="hljs-keyword">return</span> R.ok();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> R.error();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>测试</p>
<h1 id="根据id查询讲师"><a href="#根据id查询讲师" class="headerlink" title="根据id查询讲师"></a>根据id查询讲师</h1><p>在EduTeacherController中编写方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据id查询讲师</span><br><span class="hljs-meta">@ApiOperation(&quot;根据id查询讲师&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;getTeacher/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">getTeacher</span><span class="hljs-params">(<span class="hljs-meta">@ApiParam(name = &quot;id&quot;,value = &quot;讲师id&quot;,required = true)</span><span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>    EduTeacher teacher = teacherService.getById(id);<br>    <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;teacher&quot;</span>,teacher);<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="更新讲师"><a href="#更新讲师" class="headerlink" title="更新讲师"></a>更新讲师</h1><p>在EduTeacherController中编写方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 更新讲师信息</span><br><span class="hljs-meta">@ApiOperation(&quot;更新讲师&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;updateTeacher&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">updateTeacher</span><span class="hljs-params">(<span class="hljs-meta">@ApiParam(name = &quot;teacher&quot;,value = &quot;讲师对象&quot;)</span><span class="hljs-meta">@RequestBody</span> EduTeacher teacher)</span></span>&#123;<br>    <span class="hljs-keyword">boolean</span> flag = teacherService.updateById(teacher);<br>    <span class="hljs-keyword">if</span> (flag)&#123;<br>        <span class="hljs-keyword">return</span> R.ok();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> R.error();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>测试</p>
<h1 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h1><h2 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h2><p>在servicebase模块，创建exceptionhandler包，新建GlobalExceptionHandler类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GlobalExceptionHandler</span> </span>&#123;<br><br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span>  <span class="hljs-comment">// 发生什么异常的时候执行</span><br>    <span class="hljs-meta">@ResponseBody</span>   <span class="hljs-comment">// 为了返回数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">error</span><span class="hljs-params">(Exception e)</span></span>&#123;<br>        e.getStackTrace();<br>        <span class="hljs-keyword">return</span> R.error().message(<span class="hljs-string">&quot;执行了全局异常处理....&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>在service_base的pom文件中添加common_utils依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common_utils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>



<p>这个时候需要将service模块中的common_utils依赖去掉，因为依赖会传递，不去掉可能会有问题</p>
<h2 id="特殊异常处理"><a href="#特殊异常处理" class="headerlink" title="特殊异常处理"></a>特殊异常处理</h2><p>在<code>com.atguigu.servicebase.exceptionhandler</code>的GlobalExceptionHandler类中添加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 特殊异常处理</span><br><span class="hljs-meta">@ExceptionHandler(ArithmeticException.class)</span>  <span class="hljs-comment">// 发生什么异常的时候执行</span><br><span class="hljs-meta">@ResponseBody</span>   <span class="hljs-comment">// 为了返回数据</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">error</span><span class="hljs-params">(ArithmeticException e)</span></span>&#123;<br>    e.getStackTrace();<br>    <span class="hljs-keyword">return</span> R.error().message(<span class="hljs-string">&quot;执行了ArithmeticException异常处理....&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>在com.atguigu.servicebase.exceptionhandler包中创建GuliException类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GuliException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RuntimeException</span> </span>&#123;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;状态码&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer code;   <span class="hljs-comment">// 状态码</span><br>    <span class="hljs-keyword">private</span> String msg;     <span class="hljs-comment">// 异常信息</span><br><br>&#125;<br></code></pre></td></tr></table></figure>



<p>在<code>com.atguigu.servicebase.exceptionhandler</code>的GlobalExceptionHandler类中添加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 自定义异常处理</span><br><span class="hljs-meta">@ExceptionHandler(GuliException.class)</span>  <span class="hljs-comment">// 发生什么异常的时候执行</span><br><span class="hljs-meta">@ResponseBody</span>   <span class="hljs-comment">// 为了返回数据</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">error</span><span class="hljs-params">(GuliException e)</span></span>&#123;<br>    e.getStackTrace();<br>    <span class="hljs-keyword">return</span> R.error().code(e.getCode()).message(e.getMsg());<br>&#125;<br></code></pre></td></tr></table></figure>

<p>在会发生异常的地方进行下面处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span> / <span class="hljs-number">0</span>;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GuliException(<span class="hljs-number">20001</span>,<span class="hljs-string">&quot;执行了自定义异常&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>测试</p>
<h1 id="统一日志处理"><a href="#统一日志处理" class="headerlink" title="统一日志处理"></a>统一日志处理</h1><p>先把application.properties中的日志配置文件去掉</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">## 设置日志级别<br>#logging.level.root=WARN<br>##mybatis日志<br>#mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl<br></code></pre></td></tr></table></figure>

<p> 在resources包下创建logback-spring.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>  <span class="hljs-attr">scan</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">scanPeriod</span>=<span class="hljs-string">&quot;10 seconds&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span><br>    <span class="hljs-comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- de<span class="hljs-doctag">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">contextName</span>&gt;</span>logback<span class="hljs-tag">&lt;/<span class="hljs-name">contextName</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“$&#123;&#125;”来使用变量。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;log.path&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;E:/1/guli_log/edu&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 彩色日志 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置格式变量：CONSOLE_LOG_PATTERN 彩色日志格式 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- magenta:洋红 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- boldMagenta:粗红--&gt;</span><br>    <span class="hljs-comment">&lt;!-- cyan:青色 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- white:白色 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- magenta:洋红 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE_LOG_PATTERN&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%yellow(%date&#123;yyyy-MM-dd HH:mm:ss&#125;) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--输出到控制台--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span><br>        <span class="hljs-comment">&lt;!-- 例如：如果此处配置了INFO级别，则后面其他位置即使配置了DEBUG级别的日志，也不会被输出 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>INFO<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Pattern</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 设置字符集 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--输出到文件--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 时间滚动输出 level为 INFO 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;INFO_FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;log.path&#125;/log_info.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件输出格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/info/log-info-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>100MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 此日志文件只记录info级别的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>INFO<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 时间滚动输出 level为 WARN 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;WARN_FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;log.path&#125;/log_warn.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件输出格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span> <span class="hljs-comment">&lt;!-- 此处设置字符集 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/warn/log-warn-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>100MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 此日志文件只记录warn级别的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>warn<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ERROR_FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;log.path&#125;/log_error.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件输出格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span> <span class="hljs-comment">&lt;!-- 此处设置字符集 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/error/log-error-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>100MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 此日志文件只记录ERROR级别的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>ERROR<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        &lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。</span><br><span class="hljs-comment">        &lt;logger&gt;仅有一个name属性，</span><br><span class="hljs-comment">        一个可选的level和一个可选的addtivity属性。</span><br><span class="hljs-comment">        name:用来指定受此logger约束的某一个包或者具体的某一个类。</span><br><span class="hljs-comment">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，</span><br><span class="hljs-comment">              如果未设置此属性，那么当前logger将会继承上级的级别。</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：</span><br><span class="hljs-comment">        第一种把&lt;root level=&quot;INFO&quot;&gt;改成&lt;root level=&quot;DEBUG&quot;&gt;这样就会打印sql，不过这样日志那边会出现很多其他消息</span><br><span class="hljs-comment">        第二种就是单独给mapper下目录配置DEBUG模式，代码如下，这样配置sql语句会打印，其他还是正常DEBUG级别：</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-comment">&lt;!--开发环境:打印控制台--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dev&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--可以输出项目中的debug日志，包括mybatis的sql日志--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.guli&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性</span><br><span class="hljs-comment">            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，默认是DEBUG</span><br><span class="hljs-comment">            可以包含零个或多个appender元素。</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;INFO_FILE&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;WARN_FILE&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ERROR_FILE&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--生产环境:输出到文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pro&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;DEBUG_FILE&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;INFO_FILE&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ERROR_FILE&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;WARN_FILE&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>



<p>在com.atguigu.servicebase.exceptionhandler包的GlobalExceptionHandler类上面添加注解@Slf4j</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servicebase.exceptionhandler;<br><br><span class="hljs-keyword">import</span> com.atguigu.commonutils.R;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GlobalExceptionHandler</span> </span>&#123;<br>	...<br><br>    <span class="hljs-comment">// 自定义异常处理</span><br>    <span class="hljs-meta">@ExceptionHandler(GuliException.class)</span>  <span class="hljs-comment">// 发生什么异常的时候执行</span><br>    <span class="hljs-meta">@ResponseBody</span>   <span class="hljs-comment">// 为了返回数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">error</span><span class="hljs-params">(GuliException e)</span></span>&#123;<br>        log.info(e.getMessage());	<span class="hljs-comment">// 输出日志</span><br>        e.getStackTrace();<br>        <span class="hljs-keyword">return</span> R.error().code(e.getCode()).message(e.getMsg());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>项目|谷粒学院|笔记</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>day05-讲师管理模块前端开发</title>
    <url>/myBlog/day05-%E8%AE%B2%E5%B8%88%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="day05-讲师管理模块前端开发"><a href="#day05-讲师管理模块前端开发" class="headerlink" title="day05-讲师管理模块前端开发"></a>day05-讲师管理模块前端开发</h1><h1 id="后台系统登录功能改造"><a href="#后台系统登录功能改造" class="headerlink" title="后台系统登录功能改造"></a>后台系统登录功能改造</h1><p>在config中的dev.env.js把地址改成下面的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span><br><span class="hljs-keyword">const</span> merge = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-merge&#x27;</span>)<br><span class="hljs-keyword">const</span> prodEnv = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./prod.env&#x27;</span>)<br><br><span class="hljs-built_in">module</span>.exports = merge(prodEnv, &#123;<br>  <span class="hljs-attr">NODE_ENV</span>: <span class="hljs-string">&#x27;&quot;development&quot;&#x27;</span>,<br>  <span class="hljs-comment">//BASE_API: &#x27;&quot;https://easy-mock.com/mock/5950a2419adc231f356a6636/vue-admin&quot;&#x27;,</span><br>  <span class="hljs-attr">BASE_API</span>: <span class="hljs-string">&#x27;&quot;http://localhost:8001&quot;&#x27;</span>,<br>&#125;)<br><br></code></pre></td></tr></table></figure>



<p>在com.atguigu.eduservice.controller包下面，先模拟一个登录controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/eduservice/user&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span>    <span class="hljs-comment">// 解决跨域</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EduLoginController</span> </span>&#123;<br><br>    <span class="hljs-comment">// login</span><br>    <span class="hljs-meta">@PostMapping(&quot;login&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">login</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;token&quot;</span>,<span class="hljs-string">&quot;token&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// info</span><br>    <span class="hljs-meta">@GetMapping(&quot;info&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">info</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;roles&quot;</span>,<span class="hljs-string">&quot;roles&quot;</span>).data(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>).data(<span class="hljs-string">&quot;avatar&quot;</span>,<span class="hljs-string">&quot;http://img.hb.aicdn.com/7378f66599670a3614ce38edf79bf1551dacd8d0f5c70-53yvFv_fw580&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<p>在vue的api文件夹中修改url</p>
<p><img src="/myBlog/day05-%E8%AE%B2%E5%B8%88%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/image-20211223104513320.png" alt="image-20211223104513320"></p>
<p>启动后端服务器和前端页面，这时会报一个跨域的错误，只需要在controller上面加@CrossOrigin，重启服务器即可解决跨域问题。</p>
<h1 id="前端框架开发过程介绍"><a href="#前端框架开发过程介绍" class="headerlink" title="前端框架开发过程介绍"></a>前端框架开发过程介绍</h1><p><img src="/myBlog/day05-%E8%AE%B2%E5%B8%88%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/03-%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%BB%8B%E7%BB%8D.png" alt="03-前端框架开发过程介绍"></p>
<h1 id="讲师管理前端"><a href="#讲师管理前端" class="headerlink" title="讲师管理前端"></a>讲师管理前端</h1><h2 id="讲师列表"><a href="#讲师列表" class="headerlink" title="讲师列表"></a>讲师列表</h2><p>添加路由</p>
<p>在src的router的index.js文件中，添加讲师管理路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/teacher&#x27;</span>,<br>  <span class="hljs-attr">component</span>: Layout,<br>  <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/teacher/table&#x27;</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;讲师管理&#x27;</span>,<br>  <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;讲师管理&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;example&#x27;</span> &#125;,<br>  <span class="hljs-attr">children</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;table&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;讲师列表&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/edu/teacher/list&#x27;</span>),<br>      <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;讲师列表&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;table&#x27;</span> &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;save&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;添加讲师&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/edu/teacher/save&#x27;</span>),<br>      <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;添加讲师&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;tree&#x27;</span> &#125;<br>    &#125;<br>  ]<br>&#125;,<br></code></pre></td></tr></table></figure>



<p>在views/edu/teacher下创建list.vue和save.vue文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;app-container&quot;&gt;<br>        讲师列表<br>    &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>



<p>在api/edu下面创建teacher.js文件，写方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-comment">// 1.讲师列表（条件查询分页）</span><br>    <span class="hljs-comment">// current:当前分页，limit每页记录数，teacherQuery条件对象</span><br>    <span class="hljs-function"><span class="hljs-title">getTeacherListPage</span>(<span class="hljs-params">current,limit,teacherQuery</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> request(&#123;<br>            <span class="hljs-comment">// 可以拼接</span><br>            <span class="hljs-comment">//url: &#x27;/eduservice/teacher/pageTeacherCondition&#x27;+&quot;/&quot;+&#x27;current&#x27;,</span><br>            <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/teacher/pageTeacherCondition/<span class="hljs-subst">$&#123;current&#125;</span>/<span class="hljs-subst">$&#123;limit&#125;</span>`</span>,<br>            <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>            <span class="hljs-comment">// teacherQuery条件对象，后端使用RequestBody获取数据</span><br>            <span class="hljs-comment">// data表示把对象转成json进行传递到接口里面</span><br>            <span class="hljs-attr">data</span>:teacherQuery<br>          &#125;)<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>



<p>回到刚刚创建的list.vue页面将teacher.js文件引入当前页面，开始编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;app-container&quot;&gt;<br>        讲师列表<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>// 引入teacher.js文<br>import teacher from &#x27;@/api/edu/teacher&#x27;<br><br>export default &#123;<br>    data()&#123;     // 定义变量和初始值<br>        return&#123;<br>            list:null,  // 查询之后接口返回集合<br>            page : 1,   // 当前页<br>            limit : 10, // 每页的记录数<br>            total : 0,  // 总记录数<br>            teacherQuery:&#123;&#125;    // 条封装对象<br><br>        &#125;<br>    &#125;,<br>    created()&#123;      // 页面渲染之前执行，调用创建的方法<br>        this.getList<br>    &#125;,<br>    methods:&#123;<br>        // 讲师列表<br>        getList()&#123;<br>            teacher.getTeacherListPage(this.current,this.limit,this.teacherQuery)<br>            .then(response =&gt;&#123;// 执行成功<br>                // response接口接口返回的数据<br>                console.log(response);<br>            &#125;)     <br>            .catch(error =&gt;&#123; // 执行失败<br>                console.log(error);<br>            &#125;)   <br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>



<p>测试看显示是否正确。正确之后，进行数据显示，完整代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;app-container&quot;&gt;<br>        &lt;!-- 表格 --&gt;<br>        &lt;el-table<br>        v-loading=&quot;listLoading&quot;<br>        :data=&quot;list&quot;<br>        element-loading-text=&quot;数据加载中&quot;<br>        border<br>        fit<br>        highlight-current-row&gt;<br>        &lt;el-table-column<br>            label=&quot;序号&quot;<br>            width=&quot;70&quot;<br>            align=&quot;center&quot;&gt;<br>            &lt;template slot-scope=&quot;scope&quot;&gt;<br>            &#123;&#123; (page - 1) * limit + scope.$index + 1 &#125;&#125;<br>            &lt;/template&gt;<br>        &lt;/el-table-column&gt;<br>        &lt;el-table-column prop=&quot;name&quot; label=&quot;名称&quot; width=&quot;80&quot; /&gt;<br>        &lt;el-table-column label=&quot;头衔&quot; width=&quot;80&quot;&gt;<br>            &lt;template slot-scope=&quot;scope&quot;&gt;<br>            &#123;&#123; scope.row.level===1?&#x27;高级讲师&#x27;:&#x27;首席讲师&#x27; &#125;&#125;<br>            &lt;/template&gt;<br>        &lt;/el-table-column&gt;<br>        &lt;el-table-column prop=&quot;intro&quot; label=&quot;资历&quot; /&gt;<br>        &lt;el-table-column prop=&quot;gmtCreate&quot; label=&quot;添加时间&quot; width=&quot;160&quot;/&gt;<br>        &lt;el-table-column prop=&quot;sort&quot; label=&quot;排序&quot; width=&quot;60&quot; /&gt;<br>        &lt;el-table-column label=&quot;操作&quot; width=&quot;200&quot; align=&quot;center&quot;&gt;<br>            &lt;template slot-scope=&quot;scope&quot;&gt;<br>            &lt;router-link :to=&quot;&#x27;/edu/teacher/edit/&#x27;+scope.row.id&quot;&gt;<br>                &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; icon=&quot;el-icon-edit&quot;&gt;修改&lt;/el-button&gt;<br>            &lt;/router-link&gt;<br>            &lt;el-button type=&quot;danger&quot; size=&quot;mini&quot; icon=&quot;el-icon-delete&quot; @click=&quot;removeDataById(scope.row.id)&quot;&gt;删除&lt;/el-button&gt;<br>            &lt;/template&gt;<br>        &lt;/el-table-column&gt;<br>        &lt;/el-table&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>// 引入teacher.js文<br>import teacher from &#x27;@/api/edu/teacher&#x27;<br><br>export default &#123;<br>    data()&#123;     // 定义变量和初始值<br>        return&#123;<br>            list:null,  // 查询之后接口返回集合<br>            page:1,   // 当前页<br>            limit:10, // 每页的记录数<br>            total:0,  // 总记录数<br>            teacherQuery:&#123;&#125;    // 条封装对象<br><br>        &#125;<br>    &#125;,<br>    created()&#123;      // 页面渲染之前执行，调用创建的方法<br>        this.getList()<br>    &#125;,<br>    methods:&#123;<br>        // 讲师列表<br>        getList()&#123;<br>            teacher.getTeacherListPage(this.page,this.limit,this.teacherQuery)<br>                .then(response =&gt;&#123;// 执行成功<br>                    // response接口接口返回的数据<br>                    //console.log(response)<br>                    this.list = response.data.rows<br>                    this.total = response.data.total<br>                    console.log(this.list)<br>                    console.log(this.total)<br>                &#125;)     <br>                .catch(error =&gt;&#123; // 执行失败<br>                    console.log(error)<br>                &#125;)   <br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>



<p>再次测试。</p>
<h2 id="讲师分页"><a href="#讲师分页" class="headerlink" title="讲师分页"></a>讲师分页</h2><p>在src/views/edu/teacher/list.vue中的table标签外加分页组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;!-- 分页 --&gt;<br>   <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-pagination</span></span></span><br><span class="hljs-tag"><span class="xml">     <span class="hljs-attr">:current-page</span>=<span class="hljs-string">&quot;page&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">     <span class="hljs-attr">:page-size</span>=<span class="hljs-string">&quot;limit&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">     <span class="hljs-attr">:total</span>=<span class="hljs-string">&quot;total&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">     <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;padding: 30px 0; text-align: center;&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">     <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;total, prev, pager, next, jumper&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">     @<span class="hljs-attr">current-change</span>=<span class="hljs-string">&quot;getList&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">   /&gt;</span></span><br></code></pre></td></tr></table></figure>



<p>在getList方法中作下面的修改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 讲师列表</span><br>       <span class="hljs-function"><span class="hljs-title">getList</span>(<span class="hljs-params">page = <span class="hljs-number">1</span></span>)</span>&#123;<br>           <span class="hljs-built_in">this</span>.page = page<br>           teacher.getTeacherListPage(<span class="hljs-built_in">this</span>.page,<span class="hljs-built_in">this</span>.limit,<span class="hljs-built_in">this</span>.teacherQuery)<br></code></pre></td></tr></table></figure>



<h2 id="讲师条件查询"><a href="#讲师条件查询" class="headerlink" title="讲师条件查询"></a>讲师条件查询</h2><p>在table标签上面添加表单</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;!--查询表单--&gt;<br>     <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">:inline</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo-form-inline&quot;</span>&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;teacherQuery.name&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;讲师名&quot;</span>/&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="xml">	   </span><br><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;teacherQuery.level&quot;</span> <span class="hljs-attr">clearable</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;讲师头衔&quot;</span>&gt;</span></span><br><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;高级讲师&quot;</span>/&gt;</span></span><br><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;首席讲师&quot;</span>/&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="xml">	   </span><br><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;添加时间&quot;</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">el-date-picker</span></span></span><br><span class="hljs-tag"><span class="xml">           <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;teacherQuery.begin&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">           <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;datetime&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">           <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;选择开始时间&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">           <span class="hljs-attr">value-format</span>=<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">           <span class="hljs-attr">default-time</span>=<span class="hljs-string">&quot;00:00:00&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">         /&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="xml">	   </span><br><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">el-date-picker</span></span></span><br><span class="hljs-tag"><span class="xml">           <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;teacherQuery.end&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">           <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;datetime&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">           <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;选择截止时间&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">           <span class="hljs-attr">value-format</span>=<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">           <span class="hljs-attr">default-time</span>=<span class="hljs-string">&quot;00:00:00&quot;</span></span></span><br><span class="hljs-tag"><span class="xml">         /&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="xml">	   </span><br><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;el-icon-search&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;getList()&quot;</span>&gt;</span>查询<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;default&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;resetData()&quot;</span>&gt;</span>清空<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="xml">	   </span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span></span><br></code></pre></td></tr></table></figure>



<p>在mothods中添加清空方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">methods:&#123;<br>       <span class="hljs-function"><span class="hljs-title">resetData</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-comment">//清空</span><br>           <span class="hljs-comment">// 清空所有数据</span><br>           <span class="hljs-built_in">this</span>.teacherQuery = &#123;&#125;<br>           <span class="hljs-comment">// 查询所有用户</span><br>           <span class="hljs-built_in">this</span>.getList()<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>



<h2 id="讲师删除"><a href="#讲师删除" class="headerlink" title="讲师删除"></a>讲师删除</h2><p>在api/edu下面的teacher.js文件，添加删除讲师方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 删除讲师</span><br><span class="hljs-function"><span class="hljs-title">deleteTeacherId</span>(<span class="hljs-params">id</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/teacher/<span class="hljs-subst">$&#123;id&#125;</span>`</span>,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;delete&#x27;</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>

<p>在src/views/edu/teacher/list.vue中的methods标签里面加删除方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 删除讲师</span><br><span class="hljs-function"><span class="hljs-title">removeDataById</span>(<span class="hljs-params">id</span>)</span>&#123;<br><br>    <span class="hljs-built_in">this</span>.$confirm(<span class="hljs-string">&#x27;此操作将永久删除讲师记录, 是否继续?&#x27;</span>, <span class="hljs-string">&#x27;提示&#x27;</span>, &#123;<br>        <span class="hljs-attr">confirmButtonText</span>: <span class="hljs-string">&#x27;确定&#x27;</span>,<br>        <span class="hljs-attr">cancelButtonText</span>: <span class="hljs-string">&#x27;取消&#x27;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;warning&#x27;</span><br>    &#125;).then(<span class="hljs-function">() =&gt;</span> &#123;     <span class="hljs-comment">// 确认删除，执行then</span><br>        <span class="hljs-comment">// 调用删除方法</span><br>        teacher.deleteTeacherId(id)<br>            .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span>&#123;     <span class="hljs-comment">// 删除成功</span><br>            <span class="hljs-comment">// 提示信息</span><br>            <span class="hljs-built_in">this</span>.$message(&#123;<br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;success&#x27;</span>,<br>                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;删除成功!&#x27;</span><br>            &#125;);<br>            <span class="hljs-comment">// 回到列表页面</span><br>            <span class="hljs-built_in">this</span>.getList()<br>        &#125;)<br><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="讲师添加"><a href="#讲师添加" class="headerlink" title="讲师添加"></a>讲师添加</h2><p>初始化src/views/edu/teacher/save.vue页面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="xml">        讲师添加</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">label-width</span>=<span class="hljs-string">&quot;120px&quot;</span>&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;讲师名称&quot;</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;teacher.name&quot;</span>/&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;讲师排序&quot;</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">el-input-number</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;teacher.sort&quot;</span> <span class="hljs-attr">controls-position</span>=<span class="hljs-string">&quot;right&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;0&quot;</span>/&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;讲师头衔&quot;</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;teacher.level&quot;</span> <span class="hljs-attr">clearable</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请选择&quot;</span>&gt;</span></span><br><span class="xml">           <span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="xml">             数据类型一定要和取出的json中的一致，否则没法回填</span></span><br><span class="hljs-comment"><span class="xml">             因此，这里value使用动态绑定的值，保证其数据类型是number</span></span><br><span class="hljs-comment"><span class="xml">           --&gt;</span></span><br><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;高级讲师&quot;</span>/&gt;</span></span><br><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;首席讲师&quot;</span>/&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;讲师资历&quot;</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;teacher.career&quot;</span>/&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;讲师简介&quot;</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;teacher.intro&quot;</span> <span class="hljs-attr">:rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;textarea&quot;</span>/&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="xml">       <span class="hljs-comment">&lt;!-- 讲师头像：TODO --&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;saveBtnDisabled&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;saveOrUpdate&quot;</span>&gt;</span>保存<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">return</span>&#123;</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">        &#125;</span></span><br><span class="javascript"><span class="xml">    &#125;,</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-title">create</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">    &#125;,</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">methods</span>:&#123;</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<p>在api/edu下面的teacher.js文件，编写添加讲师方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">/ 添加讲师<br><span class="hljs-function"><span class="hljs-title">addTeacher</span>(<span class="hljs-params">teacher</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/teacher/addTeacher`</span>,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>        <span class="hljs-attr">data</span>:teacher<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>

<p>完成save.vue中方法的编写和调用，完整代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="xml">        讲师添加</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">label-width</span>=<span class="hljs-string">&quot;120px&quot;</span>&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;讲师名称&quot;</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;teacher.name&quot;</span>/&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;讲师排序&quot;</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">el-input-number</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;teacher.sort&quot;</span> <span class="hljs-attr">controls-position</span>=<span class="hljs-string">&quot;right&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;0&quot;</span>/&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;讲师头衔&quot;</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;teacher.level&quot;</span> <span class="hljs-attr">clearable</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请选择&quot;</span>&gt;</span></span><br><span class="xml">           <span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="xml">             数据类型一定要和取出的json中的一致，否则没法回填</span></span><br><span class="hljs-comment"><span class="xml">             因此，这里value使用动态绑定的值，保证其数据类型是number</span></span><br><span class="hljs-comment"><span class="xml">           --&gt;</span></span><br><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;高级讲师&quot;</span>/&gt;</span></span><br><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;首席讲师&quot;</span>/&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;讲师资历&quot;</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;teacher.career&quot;</span>/&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;讲师简介&quot;</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;teacher.intro&quot;</span> <span class="hljs-attr">:rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;textarea&quot;</span>/&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="xml">       <span class="hljs-comment">&lt;!-- 讲师头像：TODO --&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="xml">         <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;saveBtnDisabled&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;saveOrUpdate&quot;</span>&gt;</span>保存<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">import</span> teacherAPI <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api/edu/teacher&#x27;</span></span></span><br><span class="javascript"><span class="xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">return</span>&#123;</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-attr">teacher</span>:&#123;</span></span><br><span class="javascript"><span class="xml">                <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">                <span class="hljs-attr">sort</span>: <span class="hljs-number">0</span>,</span></span><br><span class="javascript"><span class="xml">                <span class="hljs-attr">level</span>: <span class="hljs-number">1</span>,</span></span><br><span class="javascript"><span class="xml">                <span class="hljs-attr">career</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">                <span class="hljs-attr">intro</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">                <span class="hljs-attr">avatar</span>: <span class="hljs-string">&#x27;&#x27;</span></span></span><br><span class="javascript"><span class="xml">            &#125;</span></span><br><span class="javascript"><span class="xml">        &#125;</span></span><br><span class="javascript"><span class="xml">    &#125;,</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-function"><span class="hljs-title">create</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">    &#125;,</span></span><br><span class="javascript"><span class="xml">    <span class="hljs-attr">methods</span>:&#123;</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-comment">// </span></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-function"><span class="hljs-title">saveOrUpdate</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-comment">// 添加</span></span></span><br><span class="javascript"><span class="xml">            <span class="hljs-built_in">this</span>.saveTeacher()</span></span><br><span class="javascript"><span class="xml">        &#125;,</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-comment">// 添加讲师</span></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-function"><span class="hljs-title">saveTeacher</span>(<span class="hljs-params"></span>)</span>&#123;</span></span><br><span class="javascript"><span class="xml">            teacherAPI.addTeacher(<span class="hljs-built_in">this</span>.teacher)</span></span><br><span class="javascript"><span class="xml">            .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span>&#123;      <span class="hljs-comment">//添加成功</span></span></span><br><span class="javascript"><span class="xml">            <span class="hljs-comment">// 提示信息</span></span></span><br><span class="javascript"><span class="xml">            <span class="hljs-built_in">this</span>.$message(&#123;</span></span><br><span class="javascript"><span class="xml">                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;success&#x27;</span>,</span></span><br><span class="javascript"><span class="xml">                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;删除成功!&#x27;</span></span></span><br><span class="javascript"><span class="xml">            &#125;);</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-comment">// 返回list页面</span></span></span><br><span class="javascript"><span class="xml">            <span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/teacher/table&#x27;</span>&#125;)</span></span><br><span class="javascript"><span class="xml">            &#125;)</span></span><br><span class="javascript"><span class="xml">        &#125;</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">    &#125;</span></span><br><span class="javascript"><span class="xml">&#125;</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>



<h2 id="讲师修改"><a href="#讲师修改" class="headerlink" title="讲师修改"></a>讲师修改</h2><h3 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h3><p>在src/router/index.js添加一个隐藏路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;edit/:id&#x27;</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;EduTeacherEdit&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/edu/teacher/save&#x27;</span>),<br>  <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;编辑讲师&#x27;</span>, <span class="hljs-attr">noCache</span>:<span class="hljs-literal">true</span> &#125;,<br>  <span class="hljs-attr">hidden</span>:<span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>在src/views/edu/teacher/list.vue中的修改按钮处做修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;router-link :to=&quot;&#x27;/teacher/edit/&#x27;+scope.row.id&quot;&gt;<br>    &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; icon=&quot;el-icon-edit&quot;&gt;修改&lt;/el-button&gt;<br>&lt;/router-link&gt;<br></code></pre></td></tr></table></figure>

<p>测试效果，实现点击修改按钮，路由跳转到添加的页面</p>
<h3 id="数据回显"><a href="#数据回显" class="headerlink" title="数据回显"></a>数据回显</h3><p>在api/edu下面的teacher.js文件，编写根据讲师id查询信息方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 根据id查询讲师    </span><br><span class="hljs-function"><span class="hljs-title">getTeacherInfo</span>(<span class="hljs-params">id</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/teacher/getTeacher/<span class="hljs-subst">$&#123;id&#125;</span>`</span>,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>

<p>在save.vue中添加根据讲师id查询信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">methods:&#123;<br>       // 根据讲师id查询信息<br>       getInfo(id)&#123;<br>           teacherAPI.getTeacherInfo(id)<br>           .then(response =&gt;&#123;<br>               this.teacher = response.data.teacher<br>           &#125;) <br>       &#125;,<br>       saveOrUpdate()&#123;<br>           // 添加<br>           this.saveTeacher()<br>       &#125;,<br>       // 添加讲师<br>       saveTeacher()&#123;<br>           teacherAPI.addTeacher(this.teacher)<br>           .then(response =&gt;&#123;      //添加成功<br>           // 提示信息<br>           this.$message(&#123;<br>               type: &#x27;success&#x27;,<br>               message: &#x27;删除成功!&#x27;<br>           &#125;);<br>           // 返回list页面<br>           this.$router.push(&#123;path:&#x27;/teacher/table&#x27;&#125;)<br>           &#125;)<br>       &#125;<br><br>   &#125;<br></code></pre></td></tr></table></figure>

<p>由于添加讲师的方法和修改讲师的方法的路径有差别，添加讲师的没有带id，修改讲师的有带id，所以根据路由的参数的id判断是否需要数据回显</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">created()&#123;   // 页面渲染之前执行<br>    // 判断路径是否有id值<br>    if (this.$route.params &amp;&amp; this.$route.params.id) &#123;<br>    // 从路径获取id值<br>    const id = this.$route.params.id<br>    // 调用根据id查询的方法<br>    this.getInfo(id)<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure>



<h3 id="完成修改"><a href="#完成修改" class="headerlink" title="完成修改"></a>完成修改</h3><p>在api/edu下面的teacher.js文件，编写修改讲师方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 修改讲师</span><br><span class="hljs-function"><span class="hljs-title">updateTeacherInfo</span>(<span class="hljs-params">teacher</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/teacher/updateTeacher`</span>,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>        <span class="hljs-attr">data</span>:teacher<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>

<p>在save.vue的methods中添加方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">// 修改讲师<br>       updateTeacher()&#123;<br>           teacherAPI.updateTeacherInfo(this.teacher)<br>           .then(response =&gt;&#123;<br>               // 提示信息<br>               this.$message(&#123;<br>                   type: &#x27;success&#x27;,<br>                   message: &#x27;修改成功!&#x27;<br>               &#125;);<br>               // 返回list页面<br>               this.$router.push(&#123;path:&#x27;/teacher/table&#x27;&#125;)<br>   <br>           &#125;)<br>       &#125;,<br></code></pre></td></tr></table></figure>

<p>由于添加和修改都在同一个页面，先判断是哪个方法,在save.vue的methods</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">saveOrUpdate()&#123;<br>    // 判断修改还是添加<br>    // 根据teacher是否有id<br>    if(!this.teacher.id)&#123;<br>        // 添加<br>    this.saveTeacher()<br>    &#125; else&#123;<br>        // 修改<br>        this.updateTeacher()<br>    &#125;<br>    <br>&#125;,<br></code></pre></td></tr></table></figure>

<p>save.vue完整代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;app-container&quot;&gt;<br>        讲师添加<br>        &lt;el-form label-width=&quot;120px&quot;&gt;<br>       &lt;el-form-item label=&quot;讲师名称&quot;&gt;<br>         &lt;el-input v-model=&quot;teacher.name&quot;/&gt;<br>       &lt;/el-form-item&gt;<br>       &lt;el-form-item label=&quot;讲师排序&quot;&gt;<br>         &lt;el-input-number v-model=&quot;teacher.sort&quot; controls-position=&quot;right&quot; min=&quot;0&quot;/&gt;<br>       &lt;/el-form-item&gt;<br>       &lt;el-form-item label=&quot;讲师头衔&quot;&gt;<br>         &lt;el-select v-model=&quot;teacher.level&quot; clearable placeholder=&quot;请选择&quot;&gt;<br>           &lt;!--<br>             数据类型一定要和取出的json中的一致，否则没法回填<br>             因此，这里value使用动态绑定的值，保证其数据类型是number<br>           --&gt;<br>           &lt;el-option :value=&quot;1&quot; label=&quot;高级讲师&quot;/&gt;<br>           &lt;el-option :value=&quot;2&quot; label=&quot;首席讲师&quot;/&gt;<br>         &lt;/el-select&gt;<br>       &lt;/el-form-item&gt;<br>       &lt;el-form-item label=&quot;讲师资历&quot;&gt;<br>         &lt;el-input v-model=&quot;teacher.career&quot;/&gt;<br>       &lt;/el-form-item&gt;<br>       &lt;el-form-item label=&quot;讲师简介&quot;&gt;<br>         &lt;el-input v-model=&quot;teacher.intro&quot; :rows=&quot;10&quot; type=&quot;textarea&quot;/&gt;<br>       &lt;/el-form-item&gt;<br>       &lt;!-- 讲师头像：TODO --&gt;<br>       &lt;el-form-item&gt;<br>         &lt;el-button :disabled=&quot;saveBtnDisabled&quot; type=&quot;primary&quot; @click=&quot;saveOrUpdate&quot;&gt;保存&lt;/el-button&gt;<br>       &lt;/el-form-item&gt;<br>     &lt;/el-form&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import teacherAPI from &#x27;@/api/edu/teacher&#x27;<br>export default &#123;<br>    data()&#123;<br>        return&#123;<br>            teacher:&#123;<br>                name: &#x27;&#x27;,<br>                sort: 0,<br>                level: 1,<br>                career: &#x27;&#x27;,<br>                intro: &#x27;&#x27;,<br>                avatar: &#x27;&#x27;<br>            &#125;,<br>            saveBtnDisabled:false    // 保存按钮是否禁止<br>        &#125;<br>    &#125;,<br>    created()&#123;   // 页面渲染之前执行<br>        // 判断路径是否有id值<br>        if (this.$route.params &amp;&amp; this.$route.params.id) &#123;<br>        // 从路径获取id值<br>        const id = this.$route.params.id<br>        // 调用根据id查询的方法<br>        this.getInfo(id)<br>        &#125;<br>    &#125;,<br>    methods:&#123;<br>        // 根据讲师id查询信息<br>        getInfo(id)&#123;<br>            teacherAPI.getTeacherInfo(id)<br>            .then(response =&gt;&#123;<br>                this.teacher = response.data.teacher<br>            &#125;) <br>        &#125;,<br><br>        saveOrUpdate()&#123;<br>            // 判断修改还是添加<br>            // 根据teacher是否有id<br>            if(!this.teacher.id)&#123;<br>                // 添加<br>            this.saveTeacher()<br>            &#125; else&#123;<br>                // 修改<br>                this.updateTeacher()<br>            &#125;<br>            <br>        &#125;,<br><br>        // 修改讲师<br>        updateTeacher()&#123;<br>            teacherAPI.updateTeacherInfo(this.teacher)<br>            .then(response =&gt;&#123;<br>                // 提示信息<br>                this.$message(&#123;<br>                    type: &#x27;success&#x27;,<br>                    message: &#x27;修改成功!&#x27;<br>                &#125;);<br>                // 返回list页面<br>                this.$router.push(&#123;path:&#x27;/teacher/table&#x27;&#125;)<br>    <br>            &#125;)<br>        &#125;,<br><br>        // 添加讲师<br>        saveTeacher()&#123;<br>            teacherAPI.addTeacher(this.teacher)<br>            .then(response =&gt;&#123;      //添加成功<br>            // 提示信息<br>            this.$message(&#123;<br>                type: &#x27;success&#x27;,<br>                message: &#x27;删除成功!&#x27;<br>            &#125;);<br>            // 返回list页面<br>            this.$router.push(&#123;path:&#x27;/teacher/table&#x27;&#125;)<br>            &#125;)<br>        &#125;<br><br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>测试添加和修改方法都成功</p>
<h1 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h1><p>第一次点击修改，进行数据回显</p>
<p>第二次再去点击 添加讲师，进入表单页面，数据没有清空，正确效果是清空</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>在添加讲师前将表单清空</p>
<p>在原有的created中添加一个else</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">created()&#123;   // 页面渲染之前执行<br>    // 判断路径是否有id值<br>    if (this.$route.params &amp;&amp; this.$route.params.id) &#123;<br>    // 从路径获取id值<br>    const id = this.$route.params.id<br>    // 调用根据id查询的方法<br>    this.getInfo(id)<br>    &#125; else &#123;    // 路径没有id，做添加<br>        // 表单清空<br>        this.teacher = &#123;&#125;<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure>

<p>发现结果还是不行。这个情况不是代码问题，因为created在页面渲染之前就执行，并且只执行一次，所以当点击修改的时候已经执行了，再次点击添加的时候就不会执行（同一个页面），为了让这个created方法可以再次执行，可以加一个监听watch。</p>
<p>将created的内容抽取出来，放在methods中init方法，在created调用init，并加监听</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">created()&#123;   // 页面渲染之前执行<br>        this.init()<br>    &#125;,<br>    watch:&#123;<br>        $route(to,from)&#123;    // 路由变化方式<br>        // 路由发生变化时，方法就会被执行<br>            this.init()<br>        &#125;<br>    &#125;,<br>    methods:&#123;<br>        init()&#123;<br>               // 判断路径是否有id值<br>            if (this.$route.params &amp;&amp; this.$route.params.id) &#123;<br>            // 从路径获取id值<br>            const id = this.$route.params.id<br>            // 调用根据id查询的方法<br>            this.getInfo(id)<br>            &#125; else &#123;    // 路径没有id，做添加<br>                // 表单清空<br>                this.teacher = &#123;&#125;<br>            &#125;<br>        <br>        &#125;,<br></code></pre></td></tr></table></figure>

<p>测试效果，完美解决。</p>
<p>save.vue完整代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;app-container&quot;&gt;<br>        讲师添加<br>        &lt;el-form label-width=&quot;120px&quot;&gt;<br>       &lt;el-form-item label=&quot;讲师名称&quot;&gt;<br>         &lt;el-input v-model=&quot;teacher.name&quot;/&gt;<br>       &lt;/el-form-item&gt;<br>       &lt;el-form-item label=&quot;讲师排序&quot;&gt;<br>         &lt;el-input-number v-model=&quot;teacher.sort&quot; controls-position=&quot;right&quot; min=&quot;0&quot;/&gt;<br>       &lt;/el-form-item&gt;<br>       &lt;el-form-item label=&quot;讲师头衔&quot;&gt;<br>         &lt;el-select v-model=&quot;teacher.level&quot; clearable placeholder=&quot;请选择&quot;&gt;<br>           &lt;!--<br>             数据类型一定要和取出的json中的一致，否则没法回填<br>             因此，这里value使用动态绑定的值，保证其数据类型是number<br>           --&gt;<br>           &lt;el-option :value=&quot;1&quot; label=&quot;高级讲师&quot;/&gt;<br>           &lt;el-option :value=&quot;2&quot; label=&quot;首席讲师&quot;/&gt;<br>         &lt;/el-select&gt;<br>       &lt;/el-form-item&gt;<br>       &lt;el-form-item label=&quot;讲师资历&quot;&gt;<br>         &lt;el-input v-model=&quot;teacher.career&quot;/&gt;<br>       &lt;/el-form-item&gt;<br>       &lt;el-form-item label=&quot;讲师简介&quot;&gt;<br>         &lt;el-input v-model=&quot;teacher.intro&quot; :rows=&quot;10&quot; type=&quot;textarea&quot;/&gt;<br>       &lt;/el-form-item&gt;<br>       &lt;!-- 讲师头像：TODO --&gt;<br>       &lt;el-form-item&gt;<br>         &lt;el-button :disabled=&quot;saveBtnDisabled&quot; type=&quot;primary&quot; @click=&quot;saveOrUpdate&quot;&gt;保存&lt;/el-button&gt;<br>       &lt;/el-form-item&gt;<br>     &lt;/el-form&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import teacherAPI from &#x27;@/api/edu/teacher&#x27;<br>export default &#123;<br>    data()&#123;<br>        return&#123;<br>            teacher:&#123;<br>                name: &#x27;&#x27;,<br>                sort: 0,<br>                level: 1,<br>                career: &#x27;&#x27;,<br>                intro: &#x27;&#x27;,<br>                avatar: &#x27;&#x27;<br>            &#125;,<br>            saveBtnDisabled:false    // 保存按钮是否禁止<br>        &#125;<br>    &#125;,<br>    created()&#123;   // 页面渲染之前执行<br>        this.init()<br>    &#125;,<br>    watch:&#123;<br>        $route(to,from)&#123;    // 路由变化方式<br>        // 路由发生变化时，方法就会被执行<br>            this.init()<br>        &#125;<br>    &#125;,<br>    methods:&#123;<br>        init()&#123;<br>               // 判断路径是否有id值<br>            if (this.$route.params &amp;&amp; this.$route.params.id) &#123;<br>            // 从路径获取id值<br>            const id = this.$route.params.id<br>            // 调用根据id查询的方法<br>            this.getInfo(id)<br>            &#125; else &#123;    // 路径没有id，做添加<br>                // 表单清空<br>                this.teacher = &#123;&#125;<br>            &#125;<br>        <br>        &#125;,<br><br>        // 根据讲师id查询信息<br>        getInfo(id)&#123;<br>            teacherAPI.getTeacherInfo(id)<br>            .then(response =&gt;&#123;<br>                this.teacher = response.data.teacher<br>            &#125;) <br>        &#125;,<br><br>        saveOrUpdate()&#123;<br>            // 判断修改还是添加<br>            // 根据teacher是否有id<br>            if(!this.teacher.id)&#123;<br>                // 添加<br>            this.saveTeacher()<br>            &#125; else&#123;<br>                // 修改<br>                this.updateTeacher()<br>            &#125;<br>            <br>        &#125;,<br><br>        // 修改讲师<br>        updateTeacher()&#123;<br>            teacherAPI.updateTeacherInfo(this.teacher)<br>            .then(response =&gt;&#123;<br>                // 提示信息<br>                this.$message(&#123;<br>                    type: &#x27;success&#x27;,<br>                    message: &#x27;修改成功!&#x27;<br>                &#125;);<br>                // 返回list页面<br>                this.$router.push(&#123;path:&#x27;/teacher/table&#x27;&#125;)<br>    <br>            &#125;)<br>        &#125;,<br><br>        // 添加讲师<br>        saveTeacher()&#123;<br>            teacherAPI.addTeacher(this.teacher)<br>            .then(response =&gt;&#123;      //添加成功<br>            // 提示信息<br>            this.$message(&#123;<br>                type: &#x27;success&#x27;,<br>                message: &#x27;删除成功!&#x27;<br>            &#125;);<br>            // 返回list页面<br>            this.$router.push(&#123;path:&#x27;/teacher/table&#x27;&#125;)<br>            &#125;)<br>        &#125;<br><br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>项目|谷粒学院|笔记</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>day06-整合阿里云oss和Excel导入分类</title>
    <url>/myBlog/day06-%E6%95%B4%E5%90%88%E9%98%BF%E9%87%8C%E4%BA%91oss%E5%92%8CExcel%E5%AF%BC%E5%85%A5%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="day06-整合阿里云oss和Excel导入分类"><a href="#day06-整合阿里云oss和Excel导入分类" class="headerlink" title="day06-整合阿里云oss和Excel导入分类"></a>day06-整合阿里云oss和Excel导入分类</h1><h1 id="讲师管理-上传讲师头像后端接口"><a href="#讲师管理-上传讲师头像后端接口" class="headerlink" title="讲师管理-上传讲师头像后端接口"></a>讲师管理-上传讲师头像后端接口</h1><h2 id="后端环境搭建"><a href="#后端环境搭建" class="headerlink" title="后端环境搭建"></a>后端环境搭建</h2><h3 id="搭建阿里云OSS项目环境"><a href="#搭建阿里云OSS项目环境" class="headerlink" title="搭建阿里云OSS项目环境"></a>搭建阿里云OSS项目环境</h3><p>在service模块下创建子模块service_oss</p>
<p>配置pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 阿里云oss依赖 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun.oss<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 日期工具栏依赖 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>joda-time<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>joda-time<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>配置application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#服务端口</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8002</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#服务名</span><br><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">service-oss</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#环境设置：dev、test、prod</span><br><span class="hljs-meta">spring.profiles.active</span>=<span class="hljs-string">dev</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#阿里云 OSS</span><br><span class="hljs-comment">#不同的服务器，地址不同</span><br><span class="hljs-meta">aliyun.oss.file.endpoint</span>=<span class="hljs-string">your endpoint</span><br><span class="hljs-meta">aliyun.oss.file.keyid</span>=<span class="hljs-string">your accessKeyId</span><br><span class="hljs-meta">aliyun.oss.file.keysecret</span>=<span class="hljs-string">your accessKeySecret</span><br><span class="hljs-comment">#bucket可以在控制台创建，也可以使用java代码创建</span><br><span class="hljs-meta">aliyun.oss.file.bucketname</span>=<span class="hljs-string">guli-file</span><br></code></pre></td></tr></table></figure>

<p>创建启动类，启动项目，发现报了一个需要配置数据库的问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">***************************<br>APPLICATION FAILED TO START<br>***************************<br><br>Description:<br><br>Failed to configure a DataSource: <span class="hljs-string">&#x27;url&#x27;</span> attribute is not specified and no embedded datasource could be configured.<br><br>Reason: Failed to determine a suitable driver class<br><br><br>Action:<br><br>Consider the following:<br>	If you want an embedded database (H2, HSQL or Derby), please put it on the classpath.<br>	If you have database settings to be loaded from a particular profile you may need to activate it (no profiles are currently active).<br><br></code></pre></td></tr></table></figure>

<p>解决方案</p>
<p>一，在配置文件中加入数据库的配置（由于该模块只做上传功能，不需要加入）。</p>
<p>二，在启动类上加入@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)这个便可，排除数据库自动装配的文件</p>
<h2 id="创建常量类"><a href="#创建常量类" class="headerlink" title="创建常量类"></a>创建常量类</h2><p>创建com.atguigu.oss.utils包，创建类ConstantPropertiesUtils</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 项目启动，spring接口，spring加载之后，执行接口一个方法</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConstantPropertiesUtils</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InitializingBean</span> </span>&#123;<br>    <span class="hljs-comment">// 读取配置文件内容</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;aliyun.oss.file.endpoint&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String endpoint;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;aliyun.oss.file.keyid&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String keyId;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;aliyun.oss.file.keysecret&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String keySecret;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;aliyun.oss.file.bucketname&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String bucketName;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String END_POINT;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String ACCESS_KEY_ID;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String ACCESS_KEY_SECRET;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String BUCKET_NAME;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        END_POINT = endpoint;<br>        ACCESS_KEY_ID = keyId;<br>        ACCESS_KEY_SECRET = keySecret;<br>        BUCKET_NAME = bucketName;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>InitializingBean这个接口是为了让其他人可以调用里面定义的属性</p>
<h2 id="后端接口实现"><a href="#后端接口实现" class="headerlink" title="后端接口实现"></a>后端接口实现</h2><p>在com.atguigu.oss.controller创建OssController类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;eduoss/fileoss&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-meta">@Api(description = &quot;Oss文件上传&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OssController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OssService ossService;<br><br>    <span class="hljs-comment">// 上传头像方法</span><br>    <span class="hljs-meta">@ApiOperation(&quot;头像上传&quot;)</span><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">uploadFile</span><span class="hljs-params">(<span class="hljs-meta">@ApiParam(name = &quot;file&quot;,value = &quot;上传文件&quot;,required = false)</span> MultipartFile file)</span></span>&#123;<br>        <span class="hljs-comment">// 获取上传文件，MultipartFile</span><br>        <span class="hljs-comment">// 返回上传文件的oss路径</span><br>        String url = ossService.uploadFileAvatar(file);<br>        <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;url&quot;</span>,url);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>在com.atguigu.oss.service创建service接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OssService</span> </span>&#123;<br>    <span class="hljs-comment">// 上传头像方法</span><br>    <span class="hljs-function">String <span class="hljs-title">uploadFileAvatar</span><span class="hljs-params">(MultipartFile file)</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>在com.atguigu.oss.service.impl实现service接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OssServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">OssService</span> </span>&#123;<br><br>    <span class="hljs-comment">// 上传头像方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">uploadFileAvatar</span><span class="hljs-params">(MultipartFile file)</span> </span>&#123;<br>        <span class="hljs-comment">// 工具类获取值</span><br>        String endpoint = ConstantPropertiesUtils.END_POINT;<br>        String accessKeyId = ConstantPropertiesUtils.ACCESS_KEY_ID;<br>        String accessKeySecret = ConstantPropertiesUtils.ACCESS_KEY_SECRET;<br>        String bucketName = ConstantPropertiesUtils.BUCKET_NAME;<br><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建ossClient实例</span><br>            OSS ossClient = <span class="hljs-keyword">new</span> OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);<br><br>            <span class="hljs-comment">// 上传文件流</span><br>            InputStream inputStream = file.getInputStream();<br><br>            <span class="hljs-comment">// 获取文件名称</span><br>            String filename = file.getOriginalFilename();<br><br>            <span class="hljs-comment">// 第一个参数：bucket名称</span><br>            <span class="hljs-comment">// 第二个参数：上传到oss文件路径和文件名称 /aa/bb/1.jpg</span><br>            <span class="hljs-comment">// 第三个参数：上传文件流</span><br>            ossClient.putObject(bucketName, filename, inputStream);<br><br>            <span class="hljs-comment">// 关闭OSSClient。</span><br>            ossClient.shutdown();<br><br>            <span class="hljs-comment">// 返回url</span><br>            <span class="hljs-comment">// https://project-guli-oss.oss-cn-shenzhen.aliyuncs.com/1.png</span><br>            String url = <span class="hljs-string">&quot;https://&quot;</span>+bucketName+<span class="hljs-string">&quot;.&quot;</span>+endpoint+<span class="hljs-string">&quot;/&quot;</span>+filename;<br>            <span class="hljs-keyword">return</span> url;<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>



<p>利用swagger-ui进行测试。</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li>多次上传相同名称文件，造成最后一次上传会把之前上传的文件覆盖</li>
<li>把文件进行分类管理</li>
</ol>
<p><strong>解决方案</strong></p>
<ol>
<li>在文件名称添加随机唯一值，让每个文件名不同</li>
<li>利用DateTime进行分类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OssServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">OssService</span> </span>&#123;<br><br>    <span class="hljs-comment">// 上传头像方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">uploadFileAvatar</span><span class="hljs-params">(MultipartFile file)</span> </span>&#123;<br>        <span class="hljs-comment">// 工具类获取值</span><br>        String endpoint = ConstantPropertiesUtils.END_POINT;<br>        String accessKeyId = ConstantPropertiesUtils.ACCESS_KEY_ID;<br>        String accessKeySecret = ConstantPropertiesUtils.ACCESS_KEY_SECRET;<br>        String bucketName = ConstantPropertiesUtils.BUCKET_NAME;<br><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建ossClient实例</span><br>            OSS ossClient = <span class="hljs-keyword">new</span> OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);<br><br>            <span class="hljs-comment">// 上传文件流</span><br>            InputStream inputStream = file.getInputStream();<br><br>            <span class="hljs-comment">// 获取文件名称</span><br>            String fileName = file.getOriginalFilename();<br><br>            <span class="hljs-comment">// 1.在文件名里面添加随机唯一值</span><br>            String uuid = UUID.randomUUID().toString().replaceAll(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>            <span class="hljs-comment">// 24g501.jpg</span><br>            fileName = uuid+fileName;<br><br>            <span class="hljs-comment">// 2.将文件按照日期分类管理</span><br>            <span class="hljs-comment">// 2021/1/1</span><br>            String datePath = <span class="hljs-keyword">new</span> DateTime().toString(<span class="hljs-string">&quot;yyyy/MM/dd&quot;</span>);<br>            <span class="hljs-comment">// 拼接</span><br>            <span class="hljs-comment">// 2021/1/1/ge3201.jgp</span><br>            fileName = datePath+<span class="hljs-string">&quot;/&quot;</span>+fileName;<br><br>            <span class="hljs-comment">// 第一个参数：bucket名称</span><br>            <span class="hljs-comment">// 第二个参数：上传到oss文件路径和文件名称 /aa/bb/1.jpg</span><br>            <span class="hljs-comment">// 第三个参数：上传文件流</span><br>            ossClient.putObject(bucketName, fileName, inputStream);<br><br>            <span class="hljs-comment">// 关闭OSSClient。</span><br>            ossClient.shutdown();<br><br>            <span class="hljs-comment">// 返回url</span><br>            <span class="hljs-comment">// https://project-guli-oss.oss-cn-shenzhen.aliyuncs.com/1.png</span><br>            String url = <span class="hljs-string">&quot;https://&quot;</span>+bucketName+<span class="hljs-string">&quot;.&quot;</span>+endpoint+<span class="hljs-string">&quot;/&quot;</span>+fileName;<br>            <span class="hljs-keyword">return</span> url;<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="Nginx回顾"><a href="#Nginx回顾" class="headerlink" title="Nginx回顾"></a>Nginx回顾</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><img src="/myBlog/day06-%E6%95%B4%E5%90%88%E9%98%BF%E9%87%8C%E4%BA%91oss%E5%92%8CExcel%E5%AF%BC%E5%85%A5%E5%88%86%E7%B1%BB/07-nginx%E6%A6%82%E5%BF%B5%E5%9B%9E%E9%A1%BE.png" alt="07-nginx概念回顾"></p>
<p>下载Nginx压缩包，解压直接使用。使用方式，通过cmd启动，关闭Nginx利用命令Nginx程序名 -s stop</p>
<h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><p>修改Nginx端口，80改为81</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">81</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br></code></pre></td></tr></table></figure>



<p>在http内加入以下转发规则</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>		<span class="hljs-attribute">listen</span>       <span class="hljs-number">9001</span>;<br>		<span class="hljs-attribute">server_name</span>  localhost;<br>	<br>		<span class="hljs-attribute">location</span> <span class="hljs-regexp">~ /eduservice/</span> &#123;           <br>			<span class="hljs-attribute">proxy_pass</span> http://localhost:8001;<br>		&#125;<br>	<br>		<span class="hljs-attribute">location</span> <span class="hljs-regexp">~ /eduoss/</span> &#123;           <br>			<span class="hljs-attribute">proxy_pass</span> http://localhost:8002;<br>		&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="/myBlog/day06-%E6%95%B4%E5%90%88%E9%98%BF%E9%87%8C%E4%BA%91oss%E5%92%8CExcel%E5%AF%BC%E5%85%A5%E5%88%86%E7%B1%BB/image-20211224141522821.png" alt="image-20211224141522821"></p>
<p>最后再前端config/dev.env.js中的地址改成Nginx的地址，最后启动服务器测试，观察请求路径是否为Nginx配置的就可以。 </p>
<h1 id="讲师管理-上传讲师头像前端实现"><a href="#讲师管理-上传讲师头像前端实现" class="headerlink" title="讲师管理-上传讲师头像前端实现"></a>讲师管理-上传讲师头像前端实现</h1><h2 id="复制头像上传组件"><a href="#复制头像上传组件" class="headerlink" title="复制头像上传组件"></a>复制头像上传组件</h2><p><strong>从vue-element-admin复制组件：</strong></p>
<p>vue-element-admin/src/components/ImageCropper</p>
<p>vue-element-admin/src/components/PanThumb</p>
<h2 id="前端添加文件上传组件"><a href="#前端添加文件上传组件" class="headerlink" title="前端添加文件上传组件"></a>前端添加文件上传组件</h2><p><strong>src/views/edu/teacher/save.vue</strong></p>
<p>template：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">!-- 讲师头像：TODO --&gt;<br>       &lt;!-- 讲师头像 --&gt;<br>        &lt;el-form-item label=&quot;讲师头像&quot;&gt;<br><br>            &lt;!-- 头衔缩略图 --&gt;<br>            &lt;pan-thumb :image=&quot;teacher.avatar&quot;/&gt;<br><br>            &lt;!-- 文件上传按钮 --&gt;<br>            &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-upload&quot; @click=&quot;imagecropperShow=true&quot;&gt;更换头像<br>            &lt;/el-button&gt;<br>            &lt;!--<br>            v-show：是否显示上传组件<br>            :key：类似于id，如果一个页面多个图片上传控件，可以做区分<br>            :url：后台上传的url地址<br>            @close：关闭上传组件<br>            @crop-upload-success：上传成功后的回调 --&gt;<br>            &lt;image-cropper<br>                        v-show=&quot;imagecropperShow&quot;<br>                        :width=&quot;300&quot;<br>                        :height=&quot;300&quot;<br>                        :key=&quot;imagecropperKey&quot;<br>                        :url=&quot;BASE_API+&#x27;/eduoss/fileoss&#x27;&quot;<br>                        field=&quot;file&quot;<br>                        @close=&quot;close&quot;<br>                        @crop-upload-success=&quot;cropSuccess&quot;/&gt;<br>        &lt;/el-form-item&gt;<br></code></pre></td></tr></table></figure>

<p>引入组件模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">import ImageCropper from &#x27;@/components/ImageCropper&#x27;<br>import PanThumb from &#x27;@/components/PanThumb&#x27;<br></code></pre></td></tr></table></figure>

<h2 id="设置默认头像"><a href="#设置默认头像" class="headerlink" title="设置默认头像"></a>设置默认头像</h2><p>config/dev.env.js中添加阿里云oss bucket地址</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">OSS_PATH: <span class="hljs-string">&#x27;&quot;https://guli-file.oss-cn-beijing.aliyuncs.com&quot;&#x27;</span><br></code></pre></td></tr></table></figure>

<p>组件中初始化头像默认地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">const defaultForm = &#123;<br>  ......,<br>  avatar: process.env.OSS_PATH + &#x27;/avatar/default.jpg&#x27;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="js脚本实现上传和图片回显"><a href="#js脚本实现上传和图片回显" class="headerlink" title="js脚本实现上传和图片回显"></a>js脚本实现上传和图片回显</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">export default &#123;<br>    components: &#123; ImageCropper, PanThumb &#125;,<br>    data()&#123;<br>        return&#123;<br>           ...<br>            BASE_API: process.env.BASE_API, // 接口API地址<br>            imagecropperShow: false, // 是否显示上传组件<br>            imagecropperKey: 0, // 上传组件id<br>            saveBtnDisabled:false    // 保存按钮是否禁止<br>        &#125;<br>    &#125;,<br>    ....<br>    methods:&#123;<br>        // 上传成功饭的回调函数<br>        cropSuccess(data)&#123;<br>            this.imagecropperShow = false<br>            this.teacher.avatar = data.url<br>            // 上传成功后，重新打开上传组件时初始化组件，否则显示上一次的上传结果<br>            this.imagecropperKey = this.imagecropperKey + 1<br>        &#125;,<br><br>        // 关闭上传组件<br>        close()&#123;<br>            this.imagecropperShow = false<br>			// 上传失败后，重新打开上传组件时初始化组件，否则显示上一次的上传结果<br>     		 this.imagecropperKey = this.imagecropperKey + 1<br>        &#125;,<br><br>      ....<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<p>测试</p>
<h1 id="课程分类管理-添加课程分类后端"><a href="#课程分类管理-添加课程分类后端" class="headerlink" title="课程分类管理-添加课程分类后端"></a>课程分类管理-添加课程分类后端</h1><h2 id="EasyExcel写操作"><a href="#EasyExcel写操作" class="headerlink" title="EasyExcel写操作"></a>EasyExcel写操作</h2><p>出了下面这个，还需要poi依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/easyexcel --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>easyexcel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>编写实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoData</span> </span>&#123;<br>	<span class="hljs-comment">// 设置Excel表头名称</span><br>    <span class="hljs-meta">@ExcelProperty(&quot;学生编号&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> sno;<br><br>    <span class="hljs-meta">@ExcelProperty(&quot;学生姓名&quot;)</span><br>    <span class="hljs-keyword">private</span> String sname;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestExcel</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String fileName = <span class="hljs-string">&quot;E:\\1\\write.xlsx&quot;</span>;<br>        <span class="hljs-comment">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span><br>        <span class="hljs-comment">// 如果这里想使用03 则 传入excelType参数即可</span><br>        EasyExcel.write(fileName,DemoData.class).sheet(<span class="hljs-string">&quot;学生信息&quot;</span>).doWrite(getData());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;DemoData&gt; <span class="hljs-title">getData</span><span class="hljs-params">()</span></span>&#123;<br>        List&lt;DemoData&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            DemoData demoData = <span class="hljs-keyword">new</span> DemoData();<br>            demoData.setSno(i);<br>            demoData.setSname(<span class="hljs-string">&quot;lucy&quot;</span> + i);<br>            list.add(demoData);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="EasyExcel读操作"><a href="#EasyExcel读操作" class="headerlink" title="EasyExcel读操作"></a>EasyExcel读操作</h2><p>编写实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoData</span> </span>&#123;<br>    <span class="hljs-comment">// 设置Excel表头名称</span><br>    <span class="hljs-meta">@ExcelProperty(value = &quot;学生编号&quot;,index = 0)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> sno;<br><br>    <span class="hljs-meta">@ExcelProperty(value = &quot;学生姓名&quot;,index = 1)</span><br>    <span class="hljs-keyword">private</span> String sname;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>创建监听器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建监听器</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExcelListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AnalysisEventListener</span>&lt;<span class="hljs-title">DemoData</span>&gt; </span>&#123;<br><br>    <span class="hljs-comment">// 一行一行的读，不读表头</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">invoke</span><span class="hljs-params">(DemoData data, AnalysisContext analysisContext)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;****&quot;</span> + data);<br>    &#125;<br><br>    <span class="hljs-comment">// 读表头</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">invokeHeadMap</span><span class="hljs-params">(Map&lt;Integer, String&gt; headMap, AnalysisContext context)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;表头&quot;</span> + headMap);<br>    &#125;<br><br>    <span class="hljs-comment">// 完成读后的操作</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doAfterAllAnalysed</span><span class="hljs-params">(AnalysisContext analysisContext)</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-comment">// 写</span><br>    <span class="hljs-comment">/*String fileName = &quot;E:\\1\\write.xlsx&quot;;</span><br><span class="hljs-comment">    // 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span><br><span class="hljs-comment">    // 如果这里想使用03 则 传入excelType参数即可</span><br><span class="hljs-comment">    EasyExcel.write(fileName,DemoData.class).sheet(&quot;学生信息&quot;).doWrite(getData());*/</span><br><br>    <span class="hljs-comment">// 读Excel操作</span><br>    String fileName = <span class="hljs-string">&quot;E:\\1\\write.xlsx&quot;</span>;<br>    EasyExcel.read(fileName,DemoData.class,<span class="hljs-keyword">new</span> ExcelListener()).sheet().doRead();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">表头&#123;0=学生编号, 1=学生姓名&#125;<br>****DemoData(sno=0, sname=lucy0)<br>****DemoData(sno=1, sname=lucy1)<br>****DemoData(sno=2, sname=lucy2)<br>****DemoData(sno=3, sname=lucy3)<br>****DemoData(sno=4, sname=lucy4)<br>****DemoData(sno=5, sname=lucy5)<br>****DemoData(sno=6, sname=lucy6)<br>****DemoData(sno=7, sname=lucy7)<br>****DemoData(sno=8, sname=lucy8)<br>****DemoData(sno=9, sname=lucy9)<br></code></pre></td></tr></table></figure>



<h2 id="添加课程分类"><a href="#添加课程分类" class="headerlink" title="添加课程分类"></a>添加课程分类</h2><p>导入依赖，上面已经导入了，不需要再次导入</p>
<p>利用代码生成器生成代码</p>
<p>编写controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/eduservice/subject&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EduSubjectController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EduSubjectService subjectService;<br><br>    <span class="hljs-comment">// 添加课程分类</span><br>    <span class="hljs-comment">// 获取上传的文件，把文件内容读取出来</span><br>    <span class="hljs-meta">@PostMapping(&quot;addSubject&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">addSubject</span><span class="hljs-params">(MultipartFile file)</span></span>&#123;<br>        <span class="hljs-comment">// 上传过来的Excel文件</span><br>        subjectService.saveSubject(file, subjectService);<br>        <span class="hljs-keyword">return</span> R.ok();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>编写service接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EduSubjectService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">IService</span>&lt;<span class="hljs-title">EduSubject</span>&gt; </span>&#123;<br><br>    <span class="hljs-comment">// 添加课程分类</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">saveSubject</span><span class="hljs-params">(MultipartFile file,EduSubjectService subjectService)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>编写service实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EduSubjectServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceImpl</span>&lt;<span class="hljs-title">EduSubjectMapper</span>, <span class="hljs-title">EduSubject</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">EduSubjectService</span> </span>&#123;<br><br>    <span class="hljs-comment">// 添加课程分类</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveSubject</span><span class="hljs-params">(MultipartFile file,EduSubjectService subjectService)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 文件输入流</span><br>            InputStream in = file.getInputStream();<br>            <span class="hljs-comment">// 调用方法进行读取</span><br>            EasyExcel.read(in, SubjectData.class,<span class="hljs-keyword">new</span> SubjectExcelListener(subjectService)).sheet().doRead();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>在com.atguigu.eduservice.entity.excel中编写表格的属性实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SubjectData</span> </span>&#123;<br><br>    <span class="hljs-meta">@ExcelProperty(index = 0)</span><br>    <span class="hljs-keyword">private</span> String oneSubjectName;<br>    <span class="hljs-meta">@ExcelProperty(index = 1)</span><br>    <span class="hljs-keyword">private</span> String twoSubjectName;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>在com.atguigu.eduservice.listener编写监听类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SubjectExcelListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AnalysisEventListener</span>&lt;<span class="hljs-title">SubjectData</span>&gt; </span>&#123;<br><br>    <span class="hljs-comment">// 因为SubjectExcelListener不能交给spring管理，需要自己new，不能注入其他对象</span><br>    <span class="hljs-comment">// 不能实现数据的操作</span><br>    <span class="hljs-keyword">public</span> EduSubjectService subjectService;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SubjectExcelListener</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SubjectExcelListener</span><span class="hljs-params">(EduSubjectService subjectService)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.subjectService = subjectService;<br>    &#125;<br><br>    <span class="hljs-comment">// 一行一行读取</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">invoke</span><span class="hljs-params">(SubjectData subjectData, AnalysisContext analysisContext)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (subjectData == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GuliException(<span class="hljs-number">20001</span>,<span class="hljs-string">&quot;文件数据为空&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 一行一行读取，每次读取有两个值，第一个值一级分类，第二值二级分类</span><br>        <span class="hljs-comment">// 判断一级分类是否重复</span><br>        EduSubject exitOneSubject = <span class="hljs-keyword">this</span>.exitOneSubject(subjectService, subjectData.getOneSubjectName());<br>        <span class="hljs-keyword">if</span> (exitOneSubject == <span class="hljs-keyword">null</span>)&#123;    <span class="hljs-comment">// 说明不存在相同的一级分类，可以添加</span><br>            exitOneSubject = <span class="hljs-keyword">new</span> EduSubject();<br>            exitOneSubject.setParentId(<span class="hljs-string">&quot;0&quot;</span>);<br>            exitOneSubject.setTitle(subjectData.getOneSubjectName());<br>            subjectService.save(exitOneSubject);<br>        &#125;<br><br>        <span class="hljs-comment">// 获取一级分类id</span><br>        String pid = exitOneSubject.getId();<br><br>        <span class="hljs-comment">// 判断二级分类是否重复</span><br>        EduSubject exitTwoSubject = <span class="hljs-keyword">this</span>.exitTwoSubject(subjectService, subjectData.getOneSubjectName(),pid);<br>        <span class="hljs-keyword">if</span> (exitTwoSubject == <span class="hljs-keyword">null</span>)&#123;    <span class="hljs-comment">// 说明不存在相同的一级分类，可以添加</span><br>            exitTwoSubject = <span class="hljs-keyword">new</span> EduSubject();<br>            exitTwoSubject.setParentId(pid);<br>            exitTwoSubject.setTitle(subjectData.getTwoSubjectName());<br>            subjectService.save(exitTwoSubject);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 判断一级分类不能重复添加</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> EduSubject <span class="hljs-title">exitOneSubject</span><span class="hljs-params">(EduSubjectService subjectService,String name)</span></span>&#123;<br>        QueryWrapper&lt;EduSubject&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        wrapper.eq(<span class="hljs-string">&quot;title&quot;</span>,name);<br>        wrapper.eq(<span class="hljs-string">&quot;parent_id&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>);<br>        EduSubject oneSubject = subjectService.getOne(wrapper);<br>        <span class="hljs-keyword">return</span> oneSubject;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断二级分类不能重复添加</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> EduSubject <span class="hljs-title">exitTwoSubject</span><span class="hljs-params">(EduSubjectService subjectService,String name,String pid)</span></span>&#123;<br>        QueryWrapper&lt;EduSubject&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        wrapper.eq(<span class="hljs-string">&quot;title&quot;</span>,name);<br>        wrapper.eq(<span class="hljs-string">&quot;parent_id&quot;</span>,pid);<br>        EduSubject twoSubject = subjectService.getOne(wrapper);<br>        <span class="hljs-keyword">return</span> twoSubject;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doAfterAllAnalysed</span><span class="hljs-params">(AnalysisContext analysisContext)</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>利用swagger测试。</p>
<h1 id="课程分类管理-添加课程分类前端"><a href="#课程分类管理-添加课程分类前端" class="headerlink" title="课程分类管理-添加课程分类前端"></a>课程分类管理-添加课程分类前端</h1><h2 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h2><p>vue-admin-template-master\src\router\index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/subject&#x27;</span>,<br>    <span class="hljs-attr">component</span>: Layout,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/subject/list&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;课程分类管理&#x27;</span>,<br>    <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;课程分类管理&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;example&#x27;</span> &#125;,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;list&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;课程列表&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/edu/subject/list&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;课程列表&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;table&#x27;</span> &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;save&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;添加课程分类&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/edu/subject/save&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;添加课程分类&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;tree&#x27;</span> &#125;<br>      &#125;<br>    ]<br>  &#125;,<br></code></pre></td></tr></table></figure>

<h2 id="添加vue组件"><a href="#添加vue组件" class="headerlink" title="添加vue组件"></a>添加vue组件</h2><p>list.vue和save.vue</p>
<h2 id="template"><a href="#template" class="headerlink" title="template"></a>template</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>   &lt;div class=&quot;app-container&quot;&gt;<br>     &lt;el-form label-width=&quot;120px&quot;&gt;<br>       &lt;el-form-item label=&quot;信息描述&quot;&gt;<br>         &lt;el-tag type=&quot;info&quot;&gt;excel模版说明&lt;/el-tag&gt;<br>         &lt;el-tag&gt;<br>           &lt;i class=&quot;el-icon- &quot;/&gt;<br>           &lt;a :href=&quot;&#x27;/static/01.xlsx&#x27;&quot;&gt;点击下载模版&lt;/a&gt;<br>         &lt;/el-tag&gt;<br>       &lt;/el-form-item&gt;<br>       &lt;el-form-item label=&quot;选择Excel&quot;&gt;<br>         &lt;el-upload<br>           ref=&quot;upload&quot;<br>           :auto-upload=&quot;false&quot;<br>           :on-success=&quot;fileUploadSuccess&quot;<br>           :on-error=&quot;fileUploadError&quot;<br>           :disabled=&quot;importBtnDisabled&quot;<br>           :limit=&quot;1&quot;<br>           :action=&quot;BASE_API+&#x27;/eduservice/subject/addSubject&#x27;&quot;<br>           name=&quot;file&quot;<br>           accept=&quot;application/vnd.ms-excel&quot;&gt;<br>           &lt;el-button slot=&quot;trigger&quot; size=&quot;small&quot; type=&quot;primary&quot;&gt;选取文件&lt;/el-button&gt;<br>           &lt;el-button<br>             :loading=&quot;loading&quot;<br>             style=&quot;margin-left: 10px;&quot;<br>             size=&quot;small&quot;<br>             type=&quot;success&quot;<br>             @click=&quot;submitUpload&quot;&gt;上传到服务器&lt;/el-button&gt;<br>         &lt;/el-upload&gt;<br>       &lt;/el-form-item&gt;<br>     &lt;/el-form&gt;<br>   &lt;/div&gt;<br> &lt;/template&gt;<br></code></pre></td></tr></table></figure>

<h2 id="js定义数据"><a href="#js定义数据" class="headerlink" title="js定义数据"></a>js定义数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br> export default &#123;<br>     data()&#123;<br><br>         return&#123;<br>            BASE_API: process.env.BASE_API,     // 接口API地址<br>            importBtnDisabled: false,           // 按钮是否禁用,<br>            loading: false<br>         &#125;<br><br>     &#125;,<br>     created()&#123;<br><br>     &#125;,<br>     methods:&#123;<br>         // 上传到服务器<br>         submitUpload()&#123;<br>           <br>         &#125;,<br>         // 上传成功<br>         fileUploadSuccess()&#123;<br>           <br>         &#125;,<br><br>         // 上传失败<br>         fileUploadError()&#123;<br>         <br>         &#125;<br>     &#125;<br> &#125;<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="js上传方法"><a href="#js上传方法" class="headerlink" title="js上传方法"></a>js上传方法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">// 上传到服务器<br>submitUpload()&#123;<br>    this.fileUploadBtnText = &#x27;正在上传&#x27;<br>    this.importBtnDisabled = true<br>    this.loading = true<br>    this.$refs.upload.submit()<br>&#125;,<br></code></pre></td></tr></table></figure>

<h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">// 上传成功<br>fileUploadSuccess()&#123;<br>    this.loading = false<br>    this.$message(&#123;<br>        type: &#x27;success&#x27;,<br>        message: &#x27;添加课程分类成功&#x27;<br>	&#125;)<br>// 跳转到课程分类列表<br>&#125;,<br><br>// 上传失败<br>fileUploadError()&#123;<br>    this.loading = false<br>    this.$message(&#123;<br>        type: &#x27;error&#x27;,<br>        message: &#x27;添加课程分类失败&#x27;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>

<p>save.vue完整代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>   &lt;div class=&quot;app-container&quot;&gt;<br>     &lt;el-form label-width=&quot;120px&quot;&gt;<br>       &lt;el-form-item label=&quot;信息描述&quot;&gt;<br>         &lt;el-tag type=&quot;info&quot;&gt;excel模版说明&lt;/el-tag&gt;<br>         &lt;el-tag&gt;<br>           &lt;i class=&quot;el-icon- &quot;/&gt;<br>           &lt;a :href=&quot;&#x27;/static/01.xlsx&#x27;&quot;&gt;点击下载模版&lt;/a&gt;<br>         &lt;/el-tag&gt;<br>       &lt;/el-form-item&gt;<br>       &lt;el-form-item label=&quot;选择Excel&quot;&gt;<br>         &lt;el-upload<br>           ref=&quot;upload&quot;<br>           :auto-upload=&quot;false&quot;<br>           :on-success=&quot;fileUploadSuccess&quot;<br>           :on-error=&quot;fileUploadError&quot;<br>           :disabled=&quot;importBtnDisabled&quot;<br>           :limit=&quot;1&quot;<br>           :action=&quot;BASE_API+&#x27;/eduservice/subject/addSubject&#x27;&quot;<br>           name=&quot;file&quot;<br>           accept=&quot;application/vnd.ms-excel&quot;&gt;<br>           &lt;el-button slot=&quot;trigger&quot; size=&quot;small&quot; type=&quot;primary&quot;&gt;选取文件&lt;/el-button&gt;<br>           &lt;el-button<br>             :loading=&quot;loading&quot;<br>             style=&quot;margin-left: 10px;&quot;<br>             size=&quot;small&quot;<br>             type=&quot;success&quot;<br>             @click=&quot;submitUpload&quot;&gt;上传到服务器&lt;/el-button&gt;<br>         &lt;/el-upload&gt;<br>       &lt;/el-form-item&gt;<br>     &lt;/el-form&gt;<br>   &lt;/div&gt;<br> &lt;/template&gt;<br><br> &lt;script&gt;<br> export default &#123;<br>     data()&#123;<br><br>         return&#123;<br>            BASE_API: process.env.BASE_API,     // 接口API地址<br>            importBtnDisabled: false,           // 按钮是否禁用,<br>            loading: false<br>         &#125;<br><br>     &#125;,<br>     created()&#123;<br><br>     &#125;,<br>     methods:&#123;<br>         // 上传到服务器<br>         submitUpload()&#123;<br>            this.fileUploadBtnText = &#x27;正在上传&#x27;<br>            this.importBtnDisabled = true<br>            this.loading = true<br>            this.$refs.upload.submit()<br>         &#125;,<br>         // 上传成功<br>         fileUploadSuccess()&#123;<br>            this.loading = false<br>            this.$message(&#123;<br>            type: &#x27;success&#x27;,<br>                message: &#x27;添加课程分类成功&#x27;<br>            &#125;)<br>            // 跳转到课程分类列表，路由转发<br>            this.$router.push(&#123;path:&#x27;/subject/list&#x27;&#125;)<br>         &#125;,<br><br>         // 上传失败<br>         fileUploadError()&#123;<br>            this.loading = false<br>            this.$message(&#123;<br>                type: &#x27;error&#x27;,<br>                message: &#x27;添加课程分类失败&#x27;<br>            &#125;)<br>         &#125;<br><br>     &#125;<br> &#125;<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>





<h1 id="课程分类管理-课程分类显示接口"><a href="#课程分类管理-课程分类显示接口" class="headerlink" title="课程分类管理-课程分类显示接口"></a>课程分类管理-课程分类显示接口</h1><p>树形结构，框架需要的返回数据，进行接口的编写</p>
<h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><p>在com.atguigu.eduservice.entity.subject下创建对应的实体类</p>
<p>一级分类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 一级分类</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OneSubject</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-comment">// 存放二级分类</span><br>    List&lt;TwoSubject&gt; children = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>二级分类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 二级分类</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TwoSubject</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String title;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/eduservice/subject&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EduSubjectController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EduSubjectService subjectService;<br><br>	....<br><br>    <span class="hljs-comment">// 查看所有课程分类（树形结构）</span><br>    <span class="hljs-meta">@GetMapping(&quot;findAllSubject&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">findAllSubject</span><span class="hljs-params">()</span></span>&#123;<br>        List&lt;OneSubject&gt; allSubjectList = subjectService.findOneTwoSubject();<br>        <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;allSubjectList&quot;</span>,allSubjectList);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="service接口"><a href="#service接口" class="headerlink" title="service接口"></a>service接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EduSubjectService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">IService</span>&lt;<span class="hljs-title">EduSubject</span>&gt; </span>&#123;<br><br>    ....<br>        <br>    <span class="hljs-comment">// 查看所有课程分类（树形结构）</span><br>    <span class="hljs-function">List&lt;OneSubject&gt; <span class="hljs-title">findOneTwoSubject</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="serviceImpl实现类"><a href="#serviceImpl实现类" class="headerlink" title="serviceImpl实现类"></a>serviceImpl实现类</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EduSubjectServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceImpl</span>&lt;<span class="hljs-title">EduSubjectMapper</span>, <span class="hljs-title">EduSubject</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">EduSubjectService</span> </span>&#123;<br><br>		....<br>            <br>    <span class="hljs-comment">// 查看所有课程分类（树形结构）</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;OneSubject&gt; <span class="hljs-title">findOneTwoSubject</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 一级分类的parent_id为0，二级的不为0</span><br>        <span class="hljs-comment">// 1.查询所有一级分类</span><br>        QueryWrapper&lt;EduSubject&gt; oneSubjectWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        oneSubjectWrapper.eq(<span class="hljs-string">&quot;parent_id&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>);<br><br>        <span class="hljs-comment">// 调用BaseMapper查询数据库</span><br>        List&lt;EduSubject&gt; oneSubjectsList = baseMapper.selectList(oneSubjectWrapper);<br><br>        <span class="hljs-comment">// 2.查询所有二级分类</span><br>        QueryWrapper&lt;EduSubject&gt; twoSubjectWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        twoSubjectWrapper.ne(<span class="hljs-string">&quot;parent_id&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>);<br>        List&lt;EduSubject&gt; twoSubjectsList = baseMapper.selectList(twoSubjectWrapper);<br><br>        <span class="hljs-comment">// 创建一个最终返回的list集合</span><br>        List&lt;OneSubject&gt; finalSubjectList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-comment">// 3.封装一级分类</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; oneSubjectsList.size(); i++)&#123;<br>            <span class="hljs-comment">// 先从集合中得到一个EduSubject对象</span><br>            EduSubject eduSubject = oneSubjectsList.get(i);<br><br>            <span class="hljs-comment">// 创建一个OneSubject对象，将从集合中取出的值加入进去oneSubject</span><br>            OneSubject oneSubject = <span class="hljs-keyword">new</span> OneSubject();<br><br>            <span class="hljs-comment">// 第一种写法</span><br>            <span class="hljs-comment">//oneSubject.setId(eduSubject.getId());</span><br>            <span class="hljs-comment">//oneSubject.setTitle(eduSubject.getTitle());</span><br><br>            <span class="hljs-comment">// 第二种写法，利用工具类，将eduSubject的值赋给oneSubject，效果和上面的一样</span><br>            BeanUtils.copyProperties(eduSubject,oneSubject);<br><br>            <span class="hljs-comment">// 将oneSubject加入到最终的集合finalSubjectList</span><br>            finalSubjectList.add(oneSubject);<br><br>            <span class="hljs-comment">// 4.封装二级分类</span><br>            <span class="hljs-comment">// 先创建一个集合保存二级分类</span><br>            List&lt;TwoSubject&gt; finalTwoSubjectList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>            <span class="hljs-comment">// 遍历twoSubjectsList，拿到数据</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> m = <span class="hljs-number">0</span>; m &lt; twoSubjectsList.size(); m++) &#123;<br>                <span class="hljs-comment">// 从遍历twoSubjectsList中取一个EduSubject对象</span><br>                EduSubject tSubject = twoSubjectsList.get(m);<br><br>                <span class="hljs-comment">// 创建一个twoSubject，方便从twoSubjectsList取出来的tSubject加入</span><br>                TwoSubject twoSubject = <span class="hljs-keyword">new</span> TwoSubject();<br><br>                <span class="hljs-comment">// 判断是否需要该一级分类的</span><br>                <span class="hljs-keyword">if</span> (tSubject.getParentId().equals(eduSubject.getId()))&#123;<br>                    <span class="hljs-comment">// 如果二级分类的ParentId等于一级分类的id就说明是同一分类的，则将tSubject赋值给twoSubject</span><br>                    BeanUtils.copyProperties(tSubject,twoSubject);<br><br>                    <span class="hljs-comment">// 将赋值后的twoSubject加入到finalTwoSubjectList中</span><br>                    finalTwoSubjectList.add(twoSubject);<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 当这个for循环结束后，将二级分类集合加入到当前一级分类</span><br>            oneSubject.setChildren(finalTwoSubjectList);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> finalSubjectList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>测试</p>
<h1 id="课程分类管理-课程分类显示前端"><a href="#课程分类管理-课程分类显示前端" class="headerlink" title="课程分类管理-课程分类显示前端"></a>课程分类管理-课程分类显示前端</h1><p>在vue-admin-template-master\src\api\edu\subject.js，添加方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-comment">// 查询课程分类列表</span><br>    <span class="hljs-function"><span class="hljs-title">getSubjectList</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> request(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/subject/findAllSubject`</span>,<br>            <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>          &#125;)<br>    &#125;<br>   <br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>在vue-admin-template-master\src\views\edu\subject\list.vue将data2的值置空</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">data() &#123;<br>  return &#123;<br>    filterText: &#x27;&#x27;,<br>    data2: [],<br>    defaultProps: &#123;<br>      children: &#x27;children&#x27;,<br>      label: &#x27;title&#x27;<br>    &#125;<br>  &#125;<br>&#125;s<br></code></pre></td></tr></table></figure>

<p>导入方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">import subject from &#x27;@/api/edu/subject&#x27;<br></code></pre></td></tr></table></figure>

<p>调用方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue"> created()&#123;<br>    // 调用查询课程分类的方法<br>    this.getAllSubject()<br>  &#125;,<br>...<br><br>  methods: &#123;<br>    // 查询课程分类列表<br>    getAllSubject()&#123;<br>        subject.getSubjectList()<br>        .then(response =&gt;&#123;<br>            this.data2 = response.data.list<br>        &#125;)<br>    &#125;,<br></code></pre></td></tr></table></figure>

<p>检索功能优化，优化区分大小写，优化后不区分大小写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">filterNode(value, data) &#123;<br>      if (!value) return true<br>      return data.title.toLowerCase().indexOf(value.toLowerCase()) !== -1<br>    &#125;<br></code></pre></td></tr></table></figure>



<p>list.vue完整代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;el-input v-model=&quot;filterText&quot; placeholder=&quot;Filter keyword&quot; style=&quot;margin-bottom:30px;&quot; /&gt;<br><br>    &lt;el-tree<br>      ref=&quot;tree2&quot;<br>      :data=&quot;data2&quot;<br>      :props=&quot;defaultProps&quot;<br>      :filter-node-method=&quot;filterNode&quot;<br>      class=&quot;filter-tree&quot;<br>      default-expand-all<br>    /&gt;<br><br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><br>import subject from &#x27;@/api/edu/subject&#x27;<br><br>export default &#123;<br><br>  data() &#123;<br>    return &#123;<br>      filterText: &#x27;&#x27;,<br>      data2: [],<br>      defaultProps: &#123;<br>        children: &#x27;children&#x27;,<br>        label: &#x27;title&#x27;<br>      &#125;<br>    &#125;<br>  &#125;,<br>  created()&#123;<br>    // 调用查询课程分类的方法<br>    this.getAllSubject()<br>  &#125;,<br>  watch: &#123;<br>    filterText(val) &#123;<br>      this.$refs.tree2.filter(val)<br>    &#125;<br>  &#125;,<br><br>  methods: &#123;<br>    // 查询课程分类列表<br>    getAllSubject()&#123;<br>        subject.getSubjectList()<br>        .then(response =&gt;&#123;<br>            this.data2 = response.data.list<br>        &#125;)<br>    &#125;,<br><br>    filterNode(value, data) &#123;<br>      if (!value) return true<br>      return data.title.toLowerCase().indexOf(value.toLowerCase()) !== -1<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>项目|谷粒学院|笔记</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>day08-课程管理</title>
    <url>/myBlog/day08-%E8%AF%BE%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="day08-课程管理"><a href="#day08-课程管理" class="headerlink" title="day08-课程管理"></a>day08-课程管理</h1><h1 id="课程管理大纲列表后端"><a href="#课程管理大纲列表后端" class="headerlink" title="课程管理大纲列表后端"></a>课程管理大纲列表后端</h1><p>创建对应的vo实体类</p>
<p>ChapterVo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 课程章节</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChapterVo</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-comment">// 每个章节里面包含小节</span><br>    List&lt;VideoVo&gt; children = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>VideoVo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 小节vo</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VideoVo</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String title;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/eduservice/chapter&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EduChapterController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EduChapterService eduChapterService;<br><br>    <span class="hljs-comment">// 查看所有课程大纲，章节小节</span><br>    <span class="hljs-meta">@GetMapping(&quot;getAllChapterVideo/&#123;courseId&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">getAllChapterVideo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String courseId)</span></span>&#123;<br>        List&lt;ChapterVo&gt; list = eduChapterService.getAllChapterVideo(courseId);<br>        <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;list&quot;</span>,list);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>service接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EduChapterService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">IService</span>&lt;<span class="hljs-title">EduChapter</span>&gt; </span>&#123;<br>    <span class="hljs-comment">// 查看所有课程大纲，章节小节</span><br>    <span class="hljs-function">List&lt;ChapterVo&gt; <span class="hljs-title">getAllChapterVideo</span><span class="hljs-params">(String courseId)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>serviceImpl实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 查看所有课程大纲，章节小节</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;ChapterVo&gt; <span class="hljs-title">getAllChapterVideo</span><span class="hljs-params">(String courseId)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 查询所有的章节</span><br>    QueryWrapper&lt;EduChapter&gt; chapterWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    chapterWrapper.eq(<span class="hljs-string">&quot;course_id&quot;</span>,courseId);<br>    List&lt;EduChapter&gt; chapterList = baseMapper.selectList(chapterWrapper);<br><br>    <span class="hljs-comment">// 查询所有的小节</span><br>    QueryWrapper&lt;EduVideo&gt; videoWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    chapterWrapper.eq(<span class="hljs-string">&quot;course_id&quot;</span>,courseId);<br>    List&lt;EduVideo&gt; eduVideoList = eduVideoService.list(videoWrapper);<br><br>    <span class="hljs-comment">// 创建集合保存最终的集合</span><br>    List&lt;ChapterVo&gt; finalList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-comment">// 封装章节</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; chapterList.size(); i++) &#123;<br>        <span class="hljs-comment">// 得到eduChapter对象</span><br>        EduChapter eduChapter = chapterList.get(i);<br>        ChapterVo chapterVo = <span class="hljs-keyword">new</span> ChapterVo();<br>        BeanUtils.copyProperties(eduChapter,chapterVo);<br>        <span class="hljs-comment">// 将得到的章节加入最终集合</span><br>        finalList.add(chapterVo);<br><br>        <span class="hljs-comment">// 封装小节</span><br>        <span class="hljs-comment">// 先创建一个集合存放小节</span><br>        List&lt;VideoVo&gt; videoList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> m = <span class="hljs-number">0</span>; m &lt; eduVideoList.size(); m++) &#123;<br>            EduVideo eduVideo = eduVideoList.get(m);<br>           <span class="hljs-comment">// 判断eduVideo中的chapter_id是否和章节的id相等</span><br>            <span class="hljs-keyword">if</span> (eduVideo.getChapterId().equals(eduChapter.getId()))&#123;<br>                VideoVo videoVo = <span class="hljs-keyword">new</span> VideoVo();<br>                BeanUtils.copyProperties(eduVideo,videoVo);<br>                videoList.add(videoVo);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 将小节加到章节chapterVo中</span><br>        chapterVo.setChildren(videoList);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> finalList;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="课程管理大纲列表前端"><a href="#课程管理大纲列表前端" class="headerlink" title="课程管理大纲列表前端"></a>课程管理大纲列表前端</h1><h2 id="定义api"><a href="#定义api" class="headerlink" title="定义api"></a>定义api</h2><p>chapter.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-comment">// 根据课程id查询章节和小节</span><br>    <span class="hljs-function"><span class="hljs-title">getAllChapterVideo</span>(<span class="hljs-params">courseId</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> request(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/chapter/getAllChapterVideo/<span class="hljs-subst">$&#123;courseId&#125;</span>`</span>,<br>            <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>          &#125;)<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="定义组件脚本"><a href="#定义组件脚本" class="headerlink" title="定义组件脚本"></a>定义组件脚本</h2><p>定义data</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">chapterVideoList:[],<br>courseId:&#x27;&#x27;<br></code></pre></td></tr></table></figure>

<p>created中调用getChapterVideo方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">created() &#123;<br>     // 获取路由的id<br>     if(this.$route.params &amp;&amp; this.$route.params.id)&#123;<br>       this.courseId = this.$route.params.id;<br>       // 根据课程id获取章节和小节<br>       this.getChapterVideo()<br>     &#125;<br>   &#125;,<br></code></pre></td></tr></table></figure>

<p>methods</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">methods: &#123;<br>     // 根据课程id查询章节和小节<br>     getChapterVideo()&#123;<br>       chapter.getAllChapterVideo(this.courseId)<br>        .then(response =&gt;&#123;<br>          this.chapterVideoList = response.data.allChapterVideo<br>        &#125;)<br>     &#125;,<br></code></pre></td></tr></table></figure>

<h2 id="定义组件模板"><a href="#定义组件模板" class="headerlink" title="定义组件模板"></a>定义组件模板</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;el-button type=&quot;text&quot;&gt;添加章节&lt;/el-button&gt;<br>      &lt;!-- 章节 --&gt;<br>      &lt;ul class=&quot;chanpterList&quot;&gt;<br>          &lt;li<br>              v-for=&quot;chapter in chapterVideoList&quot;<br>              :key=&quot;chapter.id&quot;&gt;<br>              &lt;p&gt;<br>                  &#123;&#123; chapter.title &#125;&#125;<br>                  <br>              &lt;/p&gt;<br>              &lt;!-- 视频 --&gt;<br>              &lt;ul class=&quot;chanpterList videoList&quot;&gt;<br>                  &lt;li<br>                      v-for=&quot;video in chapter.children&quot;<br>                      :key=&quot;video.id&quot;&gt;<br>                      &lt;p&gt;&#123;&#123; video.title &#125;&#125;<br>                      &lt;/p&gt;<br>                  &lt;/li&gt;<br>              &lt;/ul&gt;<br>          &lt;/li&gt;<br>      &lt;/ul&gt;<br>      &lt;div&gt;<br>          &lt;el-button @click=&quot;previous&quot;&gt;上一步&lt;/el-button&gt;<br>          &lt;el-button :disabled=&quot;saveBtnDisabled&quot; type=&quot;primary&quot; @click=&quot;next&quot;&gt;下一步&lt;/el-button&gt;<br>      &lt;/div&gt;<br></code></pre></td></tr></table></figure>

<h2 id="定义样式"><a href="#定义样式" class="headerlink" title="定义样式"></a>定义样式</h2><p>将样式的定义放在页面的最后</p>
<p>scope表示这里定义的样式只在当前页面范围内生效，不会污染到其他的页</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue"> &lt;style scoped&gt;<br>.chanpterList&#123;<br>    position: relative;<br>    list-style: none;<br>    margin: 0;<br>    padding: 0;<br>&#125;<br>.chanpterList li&#123;<br>  position: relative;<br>&#125;<br>.chanpterList p&#123;<br>  float: left;<br>  font-size: 20px;<br>  margin: 10px 0;<br>  padding: 10px;<br>  height: 70px;<br>  line-height: 50px;<br>  width: 100%;<br>  border: 1px solid #DDD;<br>&#125;<br>.chanpterList .acts &#123;<br>    float: right;<br>    font-size: 14px;<br>&#125;<br>.videoList&#123;<br>  padding-left: 50px;<br>&#125;<br>.videoList p&#123;<br>  float: left;<br>  font-size: 14px;<br>  margin: 10px 0;<br>  padding: 10px;<br>  height: 50px;<br>  line-height: 30px;<br>  width: 100%;<br>  border: 1px dotted #DDD;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>



<h2 id="完整chapter-vue代码"><a href="#完整chapter-vue代码" class="headerlink" title="完整chapter.vue代码"></a>完整chapter.vue代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>   &lt;div class=&quot;app-container&quot;&gt;<br>     &lt;h2 style=&quot;text-align: center;&quot;&gt;发布新课程&lt;/h2&gt;<br>     &lt;el-steps :active=&quot;2&quot; process-status=&quot;wait&quot; align-center style=&quot;margin-bottom: 40px;&quot;&gt;<br>       &lt;el-step title=&quot;填写课程基本信息&quot;/&gt;<br>       &lt;el-step title=&quot;创建课程大纲&quot;/&gt;<br>       &lt;el-step title=&quot;最终发布&quot;/&gt;<br>     &lt;/el-steps&gt;<br><br>      &lt;el-button type=&quot;text&quot;&gt;添加章节&lt;/el-button&gt;<br>      &lt;!-- 章节 --&gt;<br>      &lt;ul class=&quot;chanpterList&quot;&gt;<br>          &lt;li<br>              v-for=&quot;chapter in chapterVideoList&quot;<br>              :key=&quot;chapter.id&quot;&gt;<br>              &lt;p&gt;<br>                  &#123;&#123; chapter.title &#125;&#125;<br>                  <br>              &lt;/p&gt;<br>              &lt;!-- 视频 --&gt;<br>              &lt;ul class=&quot;chanpterList videoList&quot;&gt;<br>                  &lt;li<br>                      v-for=&quot;video in chapter.children&quot;<br>                      :key=&quot;video.id&quot;&gt;<br>                      &lt;p&gt;&#123;&#123; video.title &#125;&#125;<br>                      &lt;/p&gt;<br>                  &lt;/li&gt;<br>              &lt;/ul&gt;<br>          &lt;/li&gt;<br>      &lt;/ul&gt;<br>      &lt;div&gt;<br>          &lt;el-button @click=&quot;previous&quot;&gt;上一步&lt;/el-button&gt;<br>          &lt;el-button :disabled=&quot;saveBtnDisabled&quot; type=&quot;primary&quot; @click=&quot;next&quot;&gt;下一步&lt;/el-button&gt;<br>      &lt;/div&gt;<br><br>     &lt;!-- &lt;el-form label-width=&quot;120px&quot;&gt;<br>       &lt;el-form-item&gt;<br>         &lt;el-button @click=&quot;previous&quot;&gt;上一步&lt;/el-button&gt;<br>         &lt;el-button :disabled=&quot;saveBtnDisabled&quot; type=&quot;primary&quot; @click=&quot;next&quot;&gt;下一步&lt;/el-button&gt;<br>       &lt;/el-form-item&gt;<br>     &lt;/el-form&gt; --&gt;<br>   &lt;/div&gt;<br> &lt;/template&gt;<br> &lt;script&gt;<br>   import chapter from &#x27;@/api/edu/chapter&#x27;<br> export default &#123;<br>   data() &#123;<br>     return &#123;<br>       saveBtnDisabled: false, // 保存按钮是否禁用<br>       chapterVideoList:[],<br>       courseId:&#x27;&#x27;<br>     &#125;<br>   &#125;,<br>   created() &#123;<br>     // 获取路由的id<br>     if(this.$route.params &amp;&amp; this.$route.params.id)&#123;<br>       this.courseId = this.$route.params.id;<br>       // 根据课程id获取章节和小节<br>       this.getChapterVideo()<br>     &#125;<br>   &#125;,<br>   methods: &#123;<br>     // 根据课程id查询章节和小节<br>     getChapterVideo()&#123;<br>       chapter.getAllChapterVideo(this.courseId)<br>        .then(response =&gt;&#123;<br>          this.chapterVideoList = response.data.allChapterVideo<br>        &#125;)<br>     &#125;,<br><br>     previous() &#123;<br>       this.$router.push(&#123; path: &#x27;/course/info/&#x27;+this.courseId &#125;)<br>     &#125;,<br>     next() &#123;<br>       console.log(&#x27;next&#x27;)<br>       this.$router.push(&#123; path: &#x27;/course/publish/&#x27;+this.courseId &#125;)<br>     &#125;<br>   &#125;<br> &#125;<br> &lt;/script&gt;<br><br>  &lt;style scoped&gt;<br> .chanpterList&#123;<br>     position: relative;<br>     list-style: none;<br>     margin: 0;<br>     padding: 0;<br> &#125;<br> .chanpterList li&#123;<br>   position: relative;<br> &#125;<br> .chanpterList p&#123;<br>   float: left;<br>   font-size: 20px;<br>   margin: 10px 0;<br>   padding: 10px;<br>   height: 70px;<br>   line-height: 50px;<br>   width: 100%;<br>   border: 1px solid #DDD;<br> &#125;<br> .chanpterList .acts &#123;<br>     float: right;<br>     font-size: 14px;<br> &#125;<br> .videoList&#123;<br>   padding-left: 50px;<br> &#125;<br> .videoList p&#123;<br>   float: left;<br>   font-size: 14px;<br>   margin: 10px 0;<br>   padding: 10px;<br>   height: 50px;<br>   line-height: 30px;<br>   width: 100%;<br>   border: 1px dotted #DDD;<br> &#125;<br> &lt;/style&gt;<br></code></pre></td></tr></table></figure>



<h1 id="课程管理-修改课程信息后端"><a href="#课程管理-修改课程信息后端" class="headerlink" title="课程管理-修改课程信息后端"></a>课程管理-修改课程信息后端</h1><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据课程id查询基本信息</span><br><span class="hljs-meta">@GetMapping(&quot;getCourseInfo/&#123;courseId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">getCourseInfo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String courseId)</span></span>&#123;<br>    CourseInfoVo courseInfoVo = eduCourseService.getCourseInfo(courseId);<br>    <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;courseInfoVo&quot;</span>,courseInfoVo);<br>&#125;<br><br><span class="hljs-comment">// 修改课程信息</span><br><span class="hljs-meta">@PostMapping(&quot;updateCourseInfo&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">updateCourseInfo</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> CourseInfoVo courseInfoVo)</span></span>&#123;<br>    eduCourseService.updateCourseInfo(courseInfoVo);<br>    <span class="hljs-keyword">return</span> R.ok();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据课程id查询基本信息</span><br><span class="hljs-function">CourseInfoVo <span class="hljs-title">getCourseInfo</span><span class="hljs-params">(String courseId)</span></span>;<br><br><span class="hljs-comment">// 修改课程信息</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateCourseInfo</span><span class="hljs-params">(CourseInfoVo courseInfoVo)</span></span>;<br></code></pre></td></tr></table></figure>

<p>serviceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据课程id查询基本信息</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> CourseInfoVo <span class="hljs-title">getCourseInfo</span><span class="hljs-params">(String courseId)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 查询课程表</span><br>    EduCourse eduCourse = baseMapper.selectById(courseId);<br>    CourseInfoVo courseInfoVo = <span class="hljs-keyword">new</span> CourseInfoVo();<br>    BeanUtils.copyProperties(eduCourse,courseInfoVo);<br><br>    <span class="hljs-comment">// 查询描述表</span><br>    EduCourseDescription courseDescription = eduCourseDescriptionService.getById(courseId);<br>    courseInfoVo.setDescription(courseDescription.getDescription());<br><br>    <span class="hljs-keyword">return</span> courseInfoVo;<br>&#125;<br><br><span class="hljs-comment">// 修改课程信息</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateCourseInfo</span><span class="hljs-params">(CourseInfoVo courseInfoVo)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 修改课程表</span><br>    EduCourse eduCourse = <span class="hljs-keyword">new</span> EduCourse();<br>    BeanUtils.copyProperties(courseInfoVo,eduCourse);<br>    <span class="hljs-keyword">int</span> update = baseMapper.updateById(eduCourse);<br><br>    <span class="hljs-keyword">if</span> (update == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GuliException(<span class="hljs-number">20001</span>,<span class="hljs-string">&quot;修改课程信息失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 修改描述表</span><br>    EduCourseDescription description = <span class="hljs-keyword">new</span> EduCourseDescription();<br>    description.setId(courseInfoVo.getId());<br>    description.setDescription(courseInfoVo.getDescription());<br>    eduCourseDescriptionService.updateById(description);<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="课程管理-修改课程信息前端"><a href="#课程管理-修改课程信息前端" class="headerlink" title="课程管理-修改课程信息前端"></a>课程管理-修改课程信息前端</h1><p>course.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 根据课程id查询课程信息</span><br><span class="hljs-function"><span class="hljs-title">getCourseInfo</span>(<span class="hljs-params">id</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/course/getCourseInfo/`</span>+id,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>      &#125;)<br>&#125;,<br><span class="hljs-comment">// 修改课程信息</span><br><span class="hljs-function"><span class="hljs-title">updateCourseInfo</span>(<span class="hljs-params">courseInfo</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/course/updateCourseInfo`</span>,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>        <span class="hljs-attr">data</span>:courseInfo<br>      &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>



<p>info.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br><br>    import course from &#x27;@/api/edu/course&#x27;<br>    import subject from &#x27;@/api/edu/subject&#x27;<br>    import Tinymce from &#x27;@/components/Tinymce&#x27;<br><br>export default &#123;<br>		.....<br>    created()&#123;<br>    <br>        // 获取路由的id<br>        if(this.$route.params &amp;&amp; this.$route.params.id)&#123;<br>            this.courseId = this.$route.params.id<br>             // 根据课程id查询课程信息<br>            this.getCourseInfo()<br>        &#125; else &#123;<br>            // 如果没有id，就清空表单<br>            this.courseInfoVo =&#123;&#125;<br>            // 初始化讲师下拉列表<br>            this.findTeacherList()<br>            // 初始化一级分类<br>            this.getOneSubjectList()<br>        &#125;<br><br>   <br>    &#125;,<br>    methods:&#123;<br>        // 根据课程id查询课程信息<br>        getCourseInfo()&#123;<br>            course.getCourseInfo(this.courseId)<br>            .then(response =&gt;&#123;<br>                // 获取课程信息<br>                this.courseInfo = response.data.courseInfoVo<br>                // 查询所有的分类，包括一级分类和二级分类 <br>                subject.getSubjectList()<br>                    .then(response =&gt;&#123;<br>                        // 获取所有的一级分类<br>                        this.subjectOneList = response.data.list<br>                        // 把所有的一级分类进行遍历<br>                        for(var i = 0; i &lt; this.subjectOneList.length; i++)&#123;<br>                            // 获取每一个一级分类<br>                            var oneSubject = this.subjectOneList[i];<br>                            // 比较当前courseInfo的一级分类id和所有一级分类的id<br>                            if(this.courseInfo.subjectParentId == oneSubject.id)&#123;<br>                                // 获取一级分类的所有二级分类<br>                                this.subjectTwoList = oneSubject.children<br>                            &#125;<br>                        &#125;<br>                        <br>                &#125;)<br>                // 初始化讲师下拉列表<br>                this.findTeacherList()<br>            &#125;)<br>        &#125;,<br><br>        ....<br>        <br>        // 添加<br>        saveCourse()&#123;<br>            course.addCourseInfo(this.courseInfo)<br>            .then(response =&gt;&#123;<br>                // 提示信息<br>                this.$message(&#123;<br>                        type: &#x27;success&#x27;,<br>                        message: &#x27;添加课程信息成功!&#x27;<br>                    &#125;);  <br>                this.$router.push(&#123; path: &#x27;/course/chapter/&#x27;+response.data.courseId &#125;)<br>            &#125;)<br>          <br>        &#125;,<br>        // 修改<br>        updateCourse()&#123;<br>            course.updateCourseInfo(this.courseInfo)<br>            .then(response =&gt;&#123;<br>                this.$message(&#123;<br>                        type: &#x27;success&#x27;,<br>                        message: &#x27;修改课程信息成功!&#x27;<br>                    &#125;);  <br>                this.$router.push(&#123; path: &#x27;/course/chapter/&#x27;+this.courseId &#125;)<br>            &#125;)<br>        &#125;,<br><br>        saveOrUpdate()&#123;<br>          if(!this.courseId)&#123;<br>              // 添加<br>              this.saveCourse()<br>          &#125; else &#123;<br>              // 修改<br>              this.updateCourse()<br>          &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.tinymce-container &#123;<br>  line-height: 29px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>



<h1 id="课程章节后端接口"><a href="#课程章节后端接口" class="headerlink" title="课程章节后端接口"></a>课程章节后端接口</h1><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 添加章节</span><br><span class="hljs-meta">@PostMapping(&quot;addChapter&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">addChapter</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> EduChapter eduChapter)</span></span>&#123;<br>    eduChapterService.save(eduChapter);<br>    <span class="hljs-keyword">return</span> R.ok();<br>&#125;<br><br><span class="hljs-comment">// 根据章节id查询章节</span><br><span class="hljs-meta">@GetMapping(&quot;getChapterInfo/&#123;courseId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">getChapterInfo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String courseId)</span></span>&#123;<br>    eduChapterService.getById(courseId);<br>    <span class="hljs-keyword">return</span> R.ok();<br>&#125;<br><br><span class="hljs-comment">// 修改章节</span><br><span class="hljs-meta">@PostMapping(&quot;updateChapter&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">updateChapter</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> EduChapter eduChapter)</span></span>&#123;<br>    eduChapterService.updateById(eduChapter);<br>    <span class="hljs-keyword">return</span> R.ok();<br>&#125;<br><br><span class="hljs-comment">// 删除章节</span><br><span class="hljs-meta">@DeleteMapping(&quot;deleteChapter&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">deleteChapter</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String courseId)</span></span>&#123;<br>    <span class="hljs-keyword">boolean</span> flag = eduChapterService.deleteChapter(courseId);<br>    <span class="hljs-keyword">if</span> (flag)&#123;<br>        <span class="hljs-keyword">return</span> R.ok();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> R.error();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 删除章节</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">deleteChapter</span><span class="hljs-params">(String courseId)</span></span>;<br></code></pre></td></tr></table></figure>

<p>serviceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 删除章节</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">deleteChapter</span><span class="hljs-params">(String courseId)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 先查询是否有小节，如果有就不删除，没有就删除</span><br>    QueryWrapper&lt;EduVideo&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    wrapper.eq(<span class="hljs-string">&quot;chapter_id&quot;</span>,courseId);<br>    <span class="hljs-keyword">int</span> count = eduVideoService.count(wrapper);<br><br>    <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// 说明有小节，不能删除</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GuliException(<span class="hljs-number">20001</span>,<span class="hljs-string">&quot;还有小节，不能删除&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 否则没有小节，可以删除章节</span><br>        <span class="hljs-keyword">int</span> result = baseMapper.deleteById(courseId);<br>        <span class="hljs-comment">// 如果result大于0，则为true，否则为false</span><br>        <span class="hljs-keyword">return</span> result &gt; <span class="hljs-number">0</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="课程管理-添加章节前端"><a href="#课程管理-添加章节前端" class="headerlink" title="课程管理-添加章节前端"></a>课程管理-添加章节前端</h1><p>chapter.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 添加课程</span><br><span class="hljs-function"><span class="hljs-title">addChapter</span>(<span class="hljs-params">chapter</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/chapter/addChapter`</span>,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>        <span class="hljs-attr">data</span>:chapter<br>        &#125;)<br>&#125;,<br></code></pre></td></tr></table></figure>



<p>chapter.vue，添加chapter对象属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue"> export default &#123;<br>   data() &#123;<br>     return &#123;<br>....<br>       chapter: &#123;// 章节对象<br>          title:&#x27;&#x27;,<br>          sort:0<br>        &#125;<br>     &#125;<br>   &#125;,<br></code></pre></td></tr></table></figure>



<p>methods</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">methods: &#123;<br>     // 添加课程<br>     saveOrUpdate()&#123;<br>       // 设置课程id到chapter对象<br>       this.chapter.courseId = this.courseId <br>       chapter.addChapter(this.chapter)<br>        .then(response =&gt;&#123;<br>          // 提示<br>          this.$message(&#123;<br>                type: &#x27;success&#x27;,<br>                message: &#x27;添加课程成功!&#x27;<br>            &#125;);<br>          // 关闭弹框<br>          this.dialogChapterFormVisible = false<br><br>          // 回到页面<br>          this.getChapterVideo()<br>        &#125;)<br>     &#125;,<br></code></pre></td></tr></table></figure>



<h1 id="课程管理-修改章节前端"><a href="#课程管理-修改章节前端" class="headerlink" title="课程管理-修改章节前端"></a>课程管理-修改章节前端</h1><p>chapter.vue，添加编辑按钮</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;!-- 章节 --&gt;<br>&lt;ul class=&quot;chanpterList&quot;&gt;<br>    &lt;li<br>        v-for=&quot;chapter in chapterVideoList&quot;<br>        :key=&quot;chapter.id&quot;&gt;<br>        &lt;p&gt;<br>            &#123;&#123; chapter.title &#125;&#125;<br>          &lt;span class=&quot;acts&quot;&gt;<br>              &lt;el-button style=&quot;&quot; type=&quot;text&quot; @click=&quot;openEditChapter(chapter.id)&quot;&gt;编辑&lt;/el-button&gt;<br>              &lt;el-button type=&quot;text&quot;&gt;删除&lt;/el-button&gt;<br>          &lt;/span&gt;<br>            <br>        &lt;/p&gt;<br></code></pre></td></tr></table></figure>

<p>methods</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">methods: &#123;<br>  // 修改章节弹框数据回显<br>  openEditChapter(chapterId)&#123;<br>    // 弹框<br>    this.dialogChapterFormVisible = true<br>    // 调用接口<br>    chapter.getChapter(chapterId)<br>     .then(response =&gt;&#123;<br>       this.chapter = response.data.chapter<br>     &#125;)<br>  &#125;,<br>  // 添加章节弹框<br>  openChapterDialog()&#123;<br>    this.dialogChapterFormVisible = true<br>    this.chapter.title = &#x27;&#x27;<br>    this.chapter.sort = 0<br>  &#125;,<br>  // 添加章节<br>  addChapter()&#123;<br>   // 设置课程id到chapter对象<br>    this.chapter.courseId = this.courseId <br>    chapter.addChapter(this.chapter)<br>     .then(response =&gt;&#123;<br>       // 提示<br>       this.$message(&#123;<br>             type: &#x27;success&#x27;,<br>             message: &#x27;添加课程成功!&#x27;<br>         &#125;);<br>       // 关闭弹框<br>       this.dialogChapterFormVisible = false<br><br>       // 回到页面<br>       this.getChapterVideo()<br>     &#125;)    <br>  &#125;,<br>  // 修改章节<br> updateChapter()&#123;<br>   chapter.updateChapter(this.chapter)<br>   .then(response =&gt;&#123;<br>        // 提示<br>       this.$message(&#123;<br>             type: &#x27;success&#x27;,<br>             message: &#x27;修改课程成功!&#x27;<br>         &#125;);<br>       // 关闭弹框<br>       this.dialogChapterFormVisible = false<br><br>       // 回到页面<br>       this.getChapterVideo()<br>   &#125;)<br> &#125; , <br>  // 添加章节<br>  saveOrUpdate()&#123;<br>    if(!this.chapter.id)&#123;<br>      // 添加 <br>      this.addChapter()<br>    &#125; else &#123;<br>      // 修改<br>      this.updateChapter()<br>    &#125;<br>   <br>  &#125;,<br></code></pre></td></tr></table></figure>



<h1 id="课程管理-删除章节前端"><a href="#课程管理-删除章节前端" class="headerlink" title="课程管理-删除章节前端"></a>课程管理-删除章节前端</h1><p>chapter.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;el-button type=&quot;text&quot; @click=&quot;removeChapter(chapter.id)&quot;&gt;删除&lt;/el-button&gt;<br></code></pre></td></tr></table></figure>

<p>methods</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">// 删除章节<br>    removeChapter(chapterId)&#123;<br>      this.$confirm(&#x27;此操作将永久删除讲师记录, 是否继续?&#x27;, &#x27;提示&#x27;, &#123;<br>           confirmButtonText: &#x27;确定&#x27;,<br>           cancelButtonText: &#x27;取消&#x27;,<br>           type: &#x27;warning&#x27;<br>           &#125;).then(() =&gt; &#123;     // 确认删除，执行then<br>               // 调用删除方法<br>               chapter.deleteChapter(chapterId)<br>                   .then(response =&gt;&#123;     // 删除成功<br>                       // 提示信息<br>                       this.$message(&#123;<br>                           type: &#x27;success&#x27;,<br>                           message: &#x27;删除成功!&#x27;<br>                       &#125;);<br>                       // 回到页面<br>                       this.getChapterVideo()<br>                   &#125;)<br>           <br>           &#125;)<br>    &#125;,<br></code></pre></td></tr></table></figure>



<h1 id="课程管理-添加小节前端"><a href="#课程管理-添加小节前端" class="headerlink" title="课程管理-添加小节前端"></a>课程管理-添加小节前端</h1><p>api/video.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 添加小节</span><br><span class="hljs-function"><span class="hljs-title">addChapter</span>(<span class="hljs-params">video</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/video/addVideo`</span>,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>        <span class="hljs-attr">data</span>:video<br>        &#125;)<br>&#125;,<br></code></pre></td></tr></table></figure>

<p>chapter.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;el-button style=&quot;&quot; type=&quot;text&quot; @click=&quot;openEditVideo(chapter.id)&quot;&gt;添加小节&lt;/el-button&gt;<br></code></pre></td></tr></table></figure>

<p>template</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;!-- 添加和修改课时表单 --&gt;<br>     &lt;el-dialog :visible.sync=&quot;dialogVideoFormVisible&quot; title=&quot;添加课时&quot;&gt;<br>       &lt;el-form :model=&quot;video&quot; label-width=&quot;120px&quot;&gt;<br>         &lt;el-form-item label=&quot;课时标题&quot;&gt;<br>           &lt;el-input v-model=&quot;video.title&quot;/&gt;<br>         &lt;/el-form-item&gt;<br>         &lt;el-form-item label=&quot;课时排序&quot;&gt;<br>           &lt;el-input-number v-model=&quot;video.sort&quot; :min=&quot;0&quot; controls-position=&quot;right&quot;/&gt;<br>         &lt;/el-form-item&gt;<br>         &lt;el-form-item label=&quot;是否免费&quot;&gt;<br>           &lt;el-radio-group v-model=&quot;video.free&quot;&gt;<br>             &lt;el-radio :label=&quot;true&quot;&gt;免费&lt;/el-radio&gt;<br>             &lt;el-radio :label=&quot;false&quot;&gt;默认&lt;/el-radio&gt;<br>           &lt;/el-radio-group&gt;<br>         &lt;/el-form-item&gt;<br>         &lt;el-form-item label=&quot;上传视频&quot;&gt;<br>           &lt;!-- TODO --&gt;<br>         &lt;/el-form-item&gt;<br>       &lt;/el-form&gt;<br>       &lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;<br>         &lt;el-button @click=&quot;dialogVideoFormVisible = false&quot;&gt;取 消&lt;/el-button&gt;<br>         &lt;el-button :disabled=&quot;saveVideoBtnDisabled&quot; type=&quot;primary&quot; @click=&quot;saveOrUpdateVideo&quot;&gt;确 定&lt;/el-button&gt;<br>       &lt;/div&gt;<br>     &lt;/el-dialog&gt;<br><br></code></pre></td></tr></table></figure>



<p>methods</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">// 添加小节弹框<br>      openEditVideo(chapterId)&#123;<br>        // 弹框<br>        this.dialogVideoFormVisible = true<br>        // 设置章节id<br>        this.video.chapterId = chapterId<br>        this.video.title = &#x27;&#x27;<br>        this.video.sort = 0<br>        this.video.free = 0<br>        this.video.videoSourceId = &#x27;&#x27;<br>        <br>      &#125;,<br>     <br>      // 添加小节<br>      addVideo()&#123;<br>        // 设置课程id<br>        this.video.courseId = this.courseId<br>        video.addChapter(this.video)<br>          .then(response =&gt;&#123;<br>          // 提示<br>            this.$message(&#123;<br>                  type: &#x27;success&#x27;,<br>                  message: &#x27;添加小节成功!&#x27;<br>              &#125;);<br>            // 关闭弹框<br>            this.dialogVideoFormVisible = false<br><br>            // 回到页面<br>            this.getChapterVideo()<br>          &#125;)<br>      &#125;,<br>      saveOrUpdateVideo()&#123;<br>        this.addVideo()<br>      &#125;,<br><br></code></pre></td></tr></table></figure>



<h1 id="课程管理-删除小节前端"><a href="#课程管理-删除小节前端" class="headerlink" title="课程管理-删除小节前端"></a>课程管理-删除小节前端</h1><p>api/video.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 删除小节</span><br><span class="hljs-function"><span class="hljs-title">deleteVideo</span>(<span class="hljs-params">id</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/video/<span class="hljs-subst">$&#123;id&#125;</span>`</span>,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;delete&#x27;</span><br>      &#125;)<br>&#125;,<br></code></pre></td></tr></table></figure>



<p>chapter.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;span class=&quot;acts&quot;&gt;<br>    &lt;el-button style=&quot;&quot; type=&quot;text&quot;&gt;编辑&lt;/el-button&gt;<br>    &lt;el-button type=&quot;text&quot; @click=&quot;removeVideo(video.id)&quot;&gt;删除&lt;/el-button&gt;<br>&lt;/span&gt;<br></code></pre></td></tr></table></figure>

<p>methods</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">// 删除小节<br>      removeVideo(id)&#123;<br>          this.$confirm(&#x27;此操作将永久删除小节记录, 是否继续?&#x27;, &#x27;提示&#x27;, &#123;<br>            confirmButtonText: &#x27;确定&#x27;,<br>            cancelButtonText: &#x27;取消&#x27;,<br>            type: &#x27;warning&#x27;<br>            &#125;).then(() =&gt; &#123;     // 确认删除，执行then<br>                // 调用删除方法<br>                video.deleteVideo(id)<br>                    .then(response =&gt;&#123;     // 删除成功<br>                        // 提示信息<br>                        this.$message(&#123;<br>                            type: &#x27;success&#x27;,<br>                            message: &#x27;删除小节成功!&#x27;<br>                        &#125;);<br>                        // 回到页面<br>                        this.getChapterVideo()<br>                    &#125;)<br>            <br>            &#125;)<br>      &#125;,<br><br></code></pre></td></tr></table></figure>



<h1 id="课程管理-信息确认后端"><a href="#课程管理-信息确认后端" class="headerlink" title="课程管理-信息确认后端"></a>课程管理-信息确认后端</h1><p>根据信息确认需要返回的数据创建CoursePublishVo类，自己写SQL语句查询结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CoursePublishVo</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String cover;<br>    <span class="hljs-keyword">private</span> Integer lessonNum;<br>    <span class="hljs-keyword">private</span> String subjectLevelOne;<br>    <span class="hljs-keyword">private</span> String subjectLevelTwo;<br>    <span class="hljs-keyword">private</span> String teacherName;<br>    <span class="hljs-keyword">private</span> String price;<span class="hljs-comment">//只用于显示</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EduCourseMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">EduCourse</span>&gt; </span>&#123;<br>    <span class="hljs-comment">// 根据课程id查询课程信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CoursePublishVo <span class="hljs-title">getCoursePublishInfo</span><span class="hljs-params">(String courseId)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atguigu.eduservice.mapper.EduCourseMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--根据课程id查询课程信息--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getCoursePublishInfo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.eduservice.entity.vo.CoursePublishVo&quot;</span>&gt;</span><br>        SELECT<br>          ec.`id`,<br>          ec.`title`,<br>          ec.`price`,<br>          ec.`lesson_num` AS lessonNum,<br>          ec.`cover`,<br>          et.`name` AS teacherName,<br>          es1.`title` AS subjectLevelOne,<br>          es2.`title` AS subjectLevelTwo<br>        FROM<br>          edu_course ec<br>          LEFT OUTER JOIN edu_course_description ecd<br>            ON ec.`id` = ecd.`id`<br>          LEFT OUTER JOIN edu_teacher et<br>            ON ec.`teacher_id` = et.`id`<br>          LEFT OUTER JOIN edu_subject es1<br>            ON ec.`subject_parent_id` = es1.`id`<br>          LEFT OUTER JOIN edu_subject es2<br>            ON ec.`subject_id` = es2.`id`<br>        WHERE ec.`id` = #&#123;courseId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure>



<p>com.atguigu.eduservice.controller.EduCourseController编写controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据课程id查询最终发布的课程信息</span><br><span class="hljs-meta">@GetMapping(&quot;getPublishCourseInfo/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">getPublishCourseInfo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>    CoursePublishVo coursePublishVo = eduCourseService.getPublishCourse(id);<br>    <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;courseInfo&quot;</span>,coursePublishVo);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据课程id查询最终发布的课程信息</span><br><span class="hljs-function">CoursePublishVo <span class="hljs-title">getPublishCourse</span><span class="hljs-params">(String id)</span></span>;<br></code></pre></td></tr></table></figure>

<p>serviceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据课程id查询最终发布的课程信息</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> CoursePublishVo <span class="hljs-title">getPublishCourse</span><span class="hljs-params">(String id)</span> </span>&#123;<br>    <span class="hljs-comment">// 调用mapper</span><br>    CoursePublishVo coursePublishInfo = baseMapper.getCoursePublishInfo(id);<br>    <span class="hljs-keyword">return</span> coursePublishInfo;<br>&#125;<br></code></pre></td></tr></table></figure>





<p>测试的时候出现了下面这个错误，原因是maven的默认加载机制是只加载后缀为.java的文件，其他的不加载，所以新加的xml没有加载到target文件中，即没有被编译</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.ibatis</span><span class="hljs-selector-class">.binding</span><span class="hljs-selector-class">.BindingException</span>: Invalid bound statement (not found): com<span class="hljs-selector-class">.atguigu</span><span class="hljs-selector-class">.eduservice</span><span class="hljs-selector-class">.mapper</span><span class="hljs-selector-class">.EduCourseMapper</span>.getCoursePublishInfo<br></code></pre></td></tr></table></figure>

<p>解决方法有</p>
<ol>
<li>复制xml到target中</li>
<li>把xml文件放到resources文件中</li>
<li><strong>推荐使用：通过配置文件加载xml文件</strong><ol>
<li>pom.xml</li>
<li>application.properties</li>
</ol>
</li>
</ol>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 项目打包时会将java目录中的*.xml文件也进行打包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#配置mapper xml文件的路径</span><br><span class="hljs-meta">mybatis-plus.mapper-locations</span>=<span class="hljs-string">classpath:com/atguigu/eduservice/mapper/xml/*.xml</span><br></code></pre></td></tr></table></figure>



<h1 id="403问题"><a href="#403问题" class="headerlink" title="403问题"></a>403问题</h1><h2 id="跨域或路径写错"><a href="#跨域或路径写错" class="headerlink" title="跨域或路径写错"></a>跨域或路径写错</h2><p>出现这个问题是因为在controller没有加@CrossOrigin的注解，没有开启跨域访问，或者是路径写错了403</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Access</span> <span class="hljs-keyword">to</span> XMLHttpRequest at <span class="hljs-string">&#x27;http://localhost:9001/eduservice/chapter/getAllChapterVideo/18&#x27;</span> <span class="hljs-keyword">from</span> origin <span class="hljs-string">&#x27;http://localhost:9528&#x27;</span> has been blocked <span class="hljs-keyword">by</span> CORS <span class="hljs-keyword">policy</span>: Response <span class="hljs-keyword">to</span> preflight request doesn<span class="hljs-string">&#x27;t pass access control check: No &#x27;</span><span class="hljs-keyword">Access</span>-Control-Allow-Origin<span class="hljs-string">&#x27; header is present on the requested resource.</span><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>项目|谷粒学院|笔记</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>day-09-课程管理</title>
    <url>/myBlog/day09-%E8%AF%BE%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="day09"><a href="#day09" class="headerlink" title="day09"></a>day09</h1><h1 id="课程管理-课程信息确认前端"><a href="#课程管理-课程信息确认前端" class="headerlink" title="课程管理-课程信息确认前端"></a>课程管理-课程信息确认前端</h1><h2 id="定义api"><a href="#定义api" class="headerlink" title="定义api"></a>定义api</h2><p>course.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 根据课程id查询最终发布的课程信息</span><br><span class="hljs-function"><span class="hljs-title">getPublishCourseInfo</span>(<span class="hljs-params">id</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/course/getPublishCourseInfo/`</span>+id,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>      &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="定义数据模型"><a href="#定义数据模型" class="headerlink" title="定义数据模型"></a>定义数据模型</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">data() &#123;<br>  return &#123;<br>    saveBtnDisabled: false ,// 保存按钮是否禁用<br>    courseId:&#x27;&#x27;,<br>    coursePublish:&#123;&#125;<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure>

<h2 id="完善步骤导航"><a href="#完善步骤导航" class="headerlink" title="完善步骤导航"></a>完善步骤导航</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">previous() &#123;<br>      this.$router.push(&#123; path: &#x27;/course/chapter/&#x27;+this.courseId &#125;)<br>    &#125;,<br>    publish() &#123;<br>      this.$router.push(&#123; path: &#x27;/course/list&#x27; &#125;)<br>    &#125;<br></code></pre></td></tr></table></figure>

<h2 id="组件方法定义"><a href="#组件方法定义" class="headerlink" title="组件方法定义"></a>组件方法定义</h2><p>import</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">import course from &#x27;@/api/edu/course&#x27;<br></code></pre></td></tr></table></figure>

<p>created</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">created() &#123;<br>  // 获取路由id<br>  if(this.$route.params &amp;&amp; this.$route.params.id)&#123;<br>     this.courseId = this.$route.params.id<br>    // 根据课程id回显数据<br>    this.getPublishCourseId()<br>  &#125;<br></code></pre></td></tr></table></figure>

<p>methods</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">methods: &#123;<br>    // 根据课程id回显数据<br>    getPublishCourseId()&#123;<br>      course.getPublishCourseInfo(this.courseId)<br>       .then(response =&gt;&#123;<br>         this.coursePublish = response.data.courseInfo<br>       &#125;)<br>    &#125;,<br></code></pre></td></tr></table></figure>

<h2 id="组件模板"><a href="#组件模板" class="headerlink" title="组件模板"></a>组件模板</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;h2 style=&quot;text-align: center;&quot;&gt;发布新课程&lt;/h2&gt;<br>    &lt;el-steps :active=&quot;3&quot; process-status=&quot;wait&quot; align-center style=&quot;margin-bottom: 40px;&quot;&gt;<br>      &lt;el-step title=&quot;填写课程基本信息&quot;/&gt;<br>      &lt;el-step title=&quot;创建课程大纲&quot;/&gt;<br>      &lt;el-step title=&quot;发布课程&quot;/&gt;<br>    &lt;/el-steps&gt;<br>    &lt;div class=&quot;ccInfo&quot;&gt;<br>      &lt;img :src=&quot;coursePublish.cover&quot;&gt;<br>      &lt;div class=&quot;main&quot;&gt;<br>        &lt;h2&gt;&#123;&#123; coursePublish.title &#125;&#125;&lt;/h2&gt;<br>        &lt;p class=&quot;gray&quot;&gt;&lt;span&gt;共&#123;&#123; coursePublish.lessonNum &#125;&#125;课时&lt;/span&gt;&lt;/p&gt;<br>        &lt;p&gt;&lt;span&gt;所属分类：&#123;&#123; coursePublish.subjectLevelOne &#125;&#125; — &#123;&#123; coursePublish.subjectLevelTwo &#125;&#125;&lt;/span&gt;&lt;/p&gt;<br>        &lt;p&gt;课程讲师：&#123;&#123; coursePublish.teacherName &#125;&#125;&lt;/p&gt;<br>        &lt;h3 class=&quot;red&quot;&gt;￥&#123;&#123; coursePublish.price &#125;&#125;&lt;/h3&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>    &lt;div&gt;<br>      &lt;el-button @click=&quot;previous&quot;&gt;返回修改&lt;/el-button&gt;<br>      &lt;el-button :disabled=&quot;saveBtnDisabled&quot; type=&quot;primary&quot; @click=&quot;publish&quot;&gt;发布课程&lt;/el-button&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>

<h2 id="css样式"><a href="#css样式" class="headerlink" title="css样式"></a>css样式</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;style scoped&gt;<br> .ccInfo &#123;<br>      background: #f5f5f5;<br>      padding: 20px;<br>      overflow: hidden;<br>      border: 1px dashed #DDD;<br>      margin-bottom: 40px;<br>      position: relative;<br> &#125;<br> .ccInfo img &#123;<br>     background: #d6d6d6;<br>     width: 500px;<br>     height: 278px;<br>     display: block;<br>     float: left;<br>     border: none;<br> &#125;<br> .ccInfo .main &#123;<br>     margin-left: 520px;<br> &#125;<br> .ccInfo .main h2 &#123;<br>     font-size: 28px;<br>     margin-bottom: 30px;<br>     line-height: 1;<br>     font-weight: normal;<br> &#125;<br> .ccInfo .main p &#123;<br>     margin-bottom: 10px;<br>     word-wrap: break-word;<br>     line-height: 24px;<br>     max-height: 48px;<br>     overflow: hidden;<br> &#125;<br> .ccInfo .main p &#123;<br>     margin-bottom: 10px;<br>     word-wrap: break-word;<br>     line-height: 24px;<br>     max-height: 48px;<br>     overflow: hidden;<br> &#125;<br>.ccInfo .main h3 &#123;<br>     left: 540px;<br>     bottom: 20px;<br>     line-height: 1;<br>     font-size: 28px;<br>     color: #d32f24;<br>     font-weight: normal;<br>     position: absolute;<br> &#125;<br> &lt;/style&gt;<br></code></pre></td></tr></table></figure>

<h1 id="课程管理-课程最终发布"><a href="#课程管理-课程最终发布" class="headerlink" title="课程管理-课程最终发布"></a>课程管理-课程最终发布</h1><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据课程id实现最终课程发布，修改表中的status字段，课程状态 Draft未发布 Normal已发布</span><br><span class="hljs-meta">@PostMapping(&quot;publishCourse/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">publishCourse</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>    EduCourse eduCourse = <span class="hljs-keyword">new</span> EduCourse();<br>    eduCourse.setId(id);<br>    eduCourse.setStatus(<span class="hljs-string">&quot;Normal&quot;</span>);<br>    eduCourseService.updateById(eduCourse);<br>    <span class="hljs-keyword">return</span> R.ok();<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>course.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 根据课程id实现最终课程发布</span><br><span class="hljs-function"><span class="hljs-title">publishCourseInfo</span>(<span class="hljs-params">id</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/course/publishCourse/`</span>+id,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span><br>      &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>

<p>publish.vue中的methods</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">publish() &#123;<br>        // 提示信息<br>         this.$confirm(&#x27;此操作将发布课程信息, 是否继续?&#x27;, &#x27;提示&#x27;, &#123;<br>           confirmButtonText: &#x27;确定&#x27;,<br>           cancelButtonText: &#x27;取消&#x27;,<br>           type: &#x27;warning&#x27;<br>           &#125;).then(() =&gt; &#123;     // 确认发布，执行then<br>               // 调用发布方法<br>               course.publishCourseInfo(this.courseId)<br>                   .then(response =&gt;&#123;     // 发布成功<br>                       // 提示信息<br>                       this.$message(&#123;<br>                           type: &#x27;success&#x27;,<br>                           message: &#x27;发布课程成功!&#x27;<br>                       &#125;);<br>                      // 回到列表页面<br>                      this.$router.push(&#123; path: &#x27;/course/list&#x27; &#125;)<br>                   &#125;)<br>           <br>           &#125;)<br></code></pre></td></tr></table></figure>

<h1 id="课程管理-课程列表"><a href="#课程管理-课程列表" class="headerlink" title="课程管理-课程列表"></a>课程管理-课程列表</h1><h2 id="后端-1"><a href="#后端-1" class="headerlink" title="后端"></a>后端</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 课程列表</span><br><span class="hljs-meta">@GetMapping</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">getCourseList</span><span class="hljs-params">()</span></span>&#123;<br>    List&lt;EduCourse&gt; list = eduCourseService.list(<span class="hljs-keyword">null</span>);<br>    <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;list&quot;</span>,list);<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="前端-1"><a href="#前端-1" class="headerlink" title="前端"></a>前端</h2><p>api/course.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 课程列表</span><br><span class="hljs-function"><span class="hljs-title">getCourseList</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/course`</span>,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>      &#125;)<br>&#125; <br></code></pre></td></tr></table></figure>

<p>list.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;app-container&quot;&gt;<br>        课程列表<br>     &lt;!--查询表单--&gt;<br>     &lt;el-form :inline=&quot;true&quot; class=&quot;demo-form-inline&quot;&gt;<br>       &lt;el-form-item&gt;<br>         &lt;el-input v-model=&quot;courseQuery.title&quot; placeholder=&quot;课程名&quot;/&gt;<br>       &lt;/el-form-item&gt;<br>	   <br>       &lt;el-form-item&gt;<br>         &lt;el-select v-model=&quot;courseQuery.status&quot; clearable placeholder=&quot;课程状态&quot;&gt;<br>           &lt;el-option :value=&quot;Normal&quot; label=&quot;已发布&quot;/&gt;<br>           &lt;el-option :value=&quot;Draft&quot; label=&quot;未发布&quot;/&gt;<br>         &lt;/el-select&gt;<br>       &lt;/el-form-item&gt;<br><br>	   <br>       &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-search&quot; @click=&quot;getList()&quot;&gt;查询&lt;/el-button&gt;<br>       &lt;el-button type=&quot;default&quot; @click=&quot;resetData()&quot;&gt;清空&lt;/el-button&gt;<br>	   <br>     &lt;/el-form&gt;<br><br>        &lt;!-- 表格 --&gt;<br>        &lt;el-table<br>        :data=&quot;list&quot;<br>        border<br>        fit<br>        highlight-current-row&gt;<br>        &lt;el-table-column<br>            label=&quot;序号&quot;<br>            width=&quot;70&quot;<br>            align=&quot;center&quot;&gt;<br>            &lt;template slot-scope=&quot;scope&quot;&gt;<br>            &#123;&#123; (page - 1) * limit + scope.$index + 1 &#125;&#125;<br>            &lt;/template&gt;<br>        &lt;/el-table-column&gt;<br>        &lt;el-table-column prop=&quot;title&quot; label=&quot;课程名称&quot; width=&quot;80&quot; /&gt;<br>        &lt;el-table-column label=&quot;状态&quot; width=&quot;80&quot;&gt;<br>            &lt;template slot-scope=&quot;scope&quot;&gt;<br>            &#123;&#123; scope.row.status===&#x27;Normal&#x27; ? &#x27;已发布&#x27;:&#x27;未发布&#x27; &#125;&#125;<br>            &lt;/template&gt;<br>        &lt;/el-table-column&gt;<br>        &lt;el-table-column prop=&quot;lessonNum&quot; label=&quot;课时数&quot; /&gt;<br>        &lt;el-table-column prop=&quot;gmtCreate&quot; label=&quot;添加时间&quot; width=&quot;160&quot;/&gt;<br>        &lt;el-table-column prop=&quot;viewCount&quot; label=&quot;浏览数量&quot; width=&quot;60&quot; /&gt;<br>        &lt;el-table-column label=&quot;操作&quot; width=&quot;200&quot; align=&quot;center&quot;&gt;<br>            &lt;template slot-scope=&quot;scope&quot;&gt;<br>            &lt;router-link :to=&quot;&#x27;/teacher/edit/&#x27;+scope.row.id&quot;&gt;<br>                &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; icon=&quot;el-icon-edit&quot;&gt;编辑课程基本信息&lt;/el-button&gt;<br>            &lt;/router-link&gt;<br>             &lt;router-link :to=&quot;&#x27;/teacher/edit/&#x27;+scope.row.id&quot;&gt;<br>                &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; icon=&quot;el-icon-edit&quot;&gt;编辑课程大纲信息&lt;/el-button&gt;<br>            &lt;/router-link&gt;<br>            &lt;el-button type=&quot;danger&quot; size=&quot;mini&quot; icon=&quot;el-icon-delete&quot; @click=&quot;removeDataById(scope.row.id)&quot;&gt;删除课程信息&lt;/el-button&gt;<br>            &lt;/template&gt;<br>        &lt;/el-table-column&gt;<br>        &lt;/el-table&gt;<br><br>    &lt;!-- 分页 --&gt;<br>    &lt;el-pagination<br>      :current-page=&quot;page&quot;<br>      :page-size=&quot;limit&quot;<br>      :total=&quot;total&quot;<br>      style=&quot;padding: 30px 0; text-align: center;&quot;<br>      layout=&quot;total, prev, pager, next, jumper&quot;<br>      @current-change=&quot;getList&quot;<br>    /&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><br>import course from &#x27;@/api/edu/course&#x27;<br><br>export default &#123;<br>    data()&#123;     // 定义变量和初始值<br>        return&#123;<br>            list:null,  // 查询之后接口返回集合<br>            page:1,   // 当前页<br>            limit:10, // 每页的记录数<br>            total:0,  // 总记录数<br>            courseQuery:&#123;&#125;    // 条封装对象<br><br>        &#125;<br>    &#125;,<br>    created()&#123;      // 页面渲染之前执行，调用创建的方法<br>        this.getList()<br>    &#125;,<br>    methods:&#123;<br>        // 讲师列表<br>        getList()&#123;<br>            course.getCourseList()<br>                .then(response =&gt;&#123;// 执行成功<br>                    // response接口接口返回的数据<br>                    this.list = response.data.list<br>                &#125;)     <br>                .catch(error =&gt;&#123; // 执行失败<br>                    console.log(error)<br>                &#125;)   <br>        &#125;,<br>        // 清空<br>        resetData()&#123;    //清空<br>            // 清空所有数据<br>            this.courseQuery = &#123;&#125;<br>            // 查询所有用户<br>            this.getList()<br>        &#125;,<br>        <br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>



<h1 id="课程管理-删除课程后端"><a href="#课程管理-删除课程后端" class="headerlink" title="课程管理-删除课程后端"></a>课程管理-删除课程后端</h1><p>删除流程：</p>
<p>小节=&gt;章节=&gt;课程描述=&gt;课程</p>
<p>com.atguigu.eduservice.controller.EduCourseController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据课程id删除课程</span><br><span class="hljs-meta">@DeleteMapping(&quot;deleteCourse/&#123;courseId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">deleteCourse</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String courseId)</span></span>&#123;<br>    eduCourseService.removeCourseById(courseId);<br>    <span class="hljs-keyword">return</span> R.ok();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>EduCourseService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据课程id删除课程</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">removeCourseById</span><span class="hljs-params">(String courseId)</span></span>;<br></code></pre></td></tr></table></figure>

<p>删除小节EduVideoService</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">EduVideoService</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">IService</span>&lt;<span class="hljs-symbol">EduVideo</span>&gt; &#123;<br><br>    <span class="hljs-comment">// 根据课程id删除小节</span><br>    <span class="hljs-built_in">void</span> removeVideoByCourseId(String courseId);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>删除小节EduVideoServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EduVideoServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceImpl</span>&lt;<span class="hljs-title">EduVideoMapper</span>, <span class="hljs-title">EduVideo</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">EduVideoService</span> </span>&#123;<br>    <span class="hljs-comment">// 根据课程id删除小节</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeVideoByCourseId</span><span class="hljs-params">(String courseId)</span> </span>&#123;<br>        QueryWrapper&lt;EduVideo&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        wrapper.eq(<span class="hljs-string">&quot;course_id&quot;</span>,courseId);<br>        baseMapper.delete(wrapper);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>删除章节EduChapterService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据课程id删除章节</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">removeChapterByCourseId</span><span class="hljs-params">(String courseId)</span></span>;<br></code></pre></td></tr></table></figure>

<p>删除章节EduChapterServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">// 根据课程id删除章节</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeChapterByCourseId</span><span class="hljs-params">(String courseId)</span> </span>&#123;<br>        QueryWrapper&lt;EduChapter&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        wrapper.eq(<span class="hljs-string">&quot;course_id&quot;</span>,courseId);<br>        baseMapper.delete(wrapper);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>EduCourseServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据课程id删除课程</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeCourseById</span><span class="hljs-params">(String courseId)</span> </span>&#123;<br>    <span class="hljs-comment">// 根据课程id删除小节</span><br>    eduVideoService.removeVideoByCourseId(courseId);<br><br>    <span class="hljs-comment">// 根据课程id删除章节</span><br>    eduChapterService.removeChapterByCourseId(courseId);<br><br>    <span class="hljs-comment">// 根据课程id删除描述,因为描述的id就是课程的id，可以直接删除</span><br>    eduCourseDescriptionService.removeById(courseId);<br><br>    <span class="hljs-comment">// 根据课程id删除课程</span><br>    <span class="hljs-keyword">int</span> result = baseMapper.deleteById(courseId);<br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GuliException(<span class="hljs-number">20001</span>,<span class="hljs-string">&quot;删除失败&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="课程管理-删除课程前端"><a href="#课程管理-删除课程前端" class="headerlink" title="课程管理-删除课程前端"></a>课程管理-删除课程前端</h1><p>course.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 根据课程id删除课程</span><br><span class="hljs-function"><span class="hljs-title">deleteCourseById</span>(<span class="hljs-params">id</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/course/deleteCourse/`</span>+id,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;delete&#x27;</span><br>      &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>

<p>list.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">methods:&#123;<br>        // 根据课程id删除课程<br>        removeDataById(id)&#123;<br>            this.$confirm(&#x27;此操作将永久删除讲师记录, 是否继续?&#x27;, &#x27;提示&#x27;, &#123;<br>            confirmButtonText: &#x27;确定&#x27;,<br>            cancelButtonText: &#x27;取消&#x27;,<br>            type: &#x27;warning&#x27;<br>            &#125;).then(() =&gt; &#123;     // 确认删除，执行then<br>                // 调用删除方法<br>                course.deleteCourseById(id)<br>                    .then(response =&gt;&#123;     // 删除成功<br>                        // 提示信息<br>                        this.$message(&#123;<br>                            type: &#x27;success&#x27;,<br>                            message: &#x27;删除课程成功!&#x27;<br>                        &#125;);<br>                        // 回到列表页面<br>                        this.getList()<br>                    &#125;)<br>            <br>            &#125;)<br>        &#125;,<br></code></pre></td></tr></table></figure>

<p>TODO:</p>
<p>课程条件查询，分页</p>
<h1 id="课程管理-课程条件分页查询"><a href="#课程管理-课程条件分页查询" class="headerlink" title="课程管理-课程条件分页查询"></a>课程管理-课程条件分页查询</h1><h2 id="后端-2"><a href="#后端-2" class="headerlink" title="后端"></a>后端</h2><p>CourseQuery封装对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CourseQuery</span> </span>&#123;<br>    <span class="hljs-comment">// 课程名称</span><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-comment">// 发布状态</span><br>    <span class="hljs-keyword">private</span> String status;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 分页带条件</span><br><span class="hljs-meta">@PostMapping(&quot;getCoursePageCondition/&#123;current&#125;/&#123;limit&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">getCoursePageCondition</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">long</span> current, <span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">long</span> limit,</span></span><br><span class="hljs-params"><span class="hljs-function">                                <span class="hljs-meta">@RequestBody</span> CourseQuery courseQuery)</span></span>&#123;<br>    <span class="hljs-comment">// 构建分页对象</span><br>    Page&lt;EduCourse&gt; coursePage = <span class="hljs-keyword">new</span> Page&lt;&gt;(current, limit);<br><br>    <span class="hljs-comment">// 构建查询条件</span><br>    QueryWrapper&lt;EduCourse&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br><br>    <span class="hljs-comment">// 取到传进来的对象的数据</span><br>    String title = courseQuery.getTitle();<br>    String status = courseQuery.getStatus();<br><br>    <span class="hljs-comment">// 判断数据的有效性，并封装条件</span><br>    <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(title))&#123;<br>        <span class="hljs-comment">// 模块查询课程名称</span><br>        wrapper.like(<span class="hljs-string">&quot;title&quot;</span>,title);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(status))&#123;<br>        wrapper.like(<span class="hljs-string">&quot;status&quot;</span>,status);<br>    &#125;<br><br>    <span class="hljs-comment">// 查询数据库</span><br>    eduCourseService.page(coursePage,wrapper);<br><br>    <span class="hljs-comment">// 得到所有数据</span><br>    List&lt;EduCourse&gt; records = coursePage.getRecords();<br>    <span class="hljs-keyword">long</span> total = coursePage.getTotal();<br><br>    <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;records&quot;</span>,records).data(<span class="hljs-string">&quot;total&quot;</span>,total);<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="前端-2"><a href="#前端-2" class="headerlink" title="前端"></a>前端</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">// 条件查询分页<br>       getList(page = 1)&#123;<br>           this.page = page<br>           course.getCourseListPage(this.page,this.limit,this.courseQuery)<br>           .then(response =&gt;&#123;<br>                this.list = response.data.records<br>               this.total = response.data.total<br>           <br>           &#125;)<br>       &#125;,<br></code></pre></td></tr></table></figure>



<h1 id="阿里云视频点播"><a href="#阿里云视频点播" class="headerlink" title="阿里云视频点播"></a>阿里云视频点播</h1><p>选择存储区域的时候一定要选择上海，会报not found的错误 ，this video not exist</p>
<h2 id="课程管理-添加小节上传视频后端"><a href="#课程管理-添加小节上传视频后端" class="headerlink" title="课程管理-添加小节上传视频后端"></a>课程管理-添加小节上传视频后端</h2><p>在service模块下创建service_vod子模块</p>
<p>application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 服务端口</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8003</span><br><span class="hljs-comment"># 服务名</span><br><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">service-vod</span><br><span class="hljs-comment"># 环境设置：dev、test、prod</span><br><span class="hljs-meta">spring.profiles.active</span>=<span class="hljs-string">dev</span><br><span class="hljs-comment">#阿里云 vod</span><br><span class="hljs-comment">#不同的服务器，地址不同</span><br><span class="hljs-meta">aliyun.vod.file.keyid</span>=<span class="hljs-string">your accessKeyId</span><br><span class="hljs-meta">aliyun.vod.file.keysecret</span>=<span class="hljs-string">your accessKeySecret</span><br></code></pre></td></tr></table></figure>

<p>定义工具类ConstantVodUtils</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConstantVodUtils</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InitializingBean</span> </span>&#123;<br><br>    <span class="hljs-meta">@Value(&quot;aliyun.vod.file.keyid&quot;)</span><br>    <span class="hljs-keyword">private</span> String keyId;<br><br>    <span class="hljs-meta">@Value(&quot;aliyun.vod.file.keysecret&quot;)</span><br>    <span class="hljs-keyword">private</span> String keySecret;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String ACCESS_KEY_ID;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String ACCESS_KEY_SECRET;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        ACCESS_KEY_ID = keyId;<br>        ACCESS_KEY_SECRET = keySecret;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>controller</p>
<p>com.atguigu.vod.controller.VodController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;eduvod/video&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VodController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> VodService vodService;<br><br>    <span class="hljs-comment">// 上传视频到阿里云</span><br>    <span class="hljs-meta">@PostMapping(&quot;uploadAlyVideo&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">uploadAlyVideo</span><span class="hljs-params">(MultipartFile file)</span></span>&#123;<br>        String videoId = vodService.uploadAly(file);<br>        <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;videoId&quot;</span>,videoId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<p>Service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">VodService</span> </span>&#123;<br>    <span class="hljs-comment">// 上传视频到阿里云</span><br>    <span class="hljs-function">String <span class="hljs-title">uploadAly</span><span class="hljs-params">(MultipartFile file)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>



<p>ServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VodServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">VodService</span> </span>&#123;<br><br>    <span class="hljs-comment">// 上传视频到阿里云</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">uploadAly</span><span class="hljs-params">(MultipartFile file)</span> </span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 文件输入流</span><br>            InputStream inputStream = file.getInputStream();<br>            <span class="hljs-comment">// 文件的源名字</span><br>            String fileName = file.getOriginalFilename();<br><br>            <span class="hljs-comment">// 上传文件的名称</span><br>            <span class="hljs-comment">// 源文件，01.mp4,改成01</span><br>            String title = fileName.substring(<span class="hljs-number">0</span>, fileName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br><br>            UploadStreamRequest request = <span class="hljs-keyword">new</span> UploadStreamRequest(ConstantVodUtils.ACCESS_KEY_ID, ConstantVodUtils.ACCESS_KEY_SECRET, title, fileName, inputStream);<br><br>            UploadVideoImpl uploader = <span class="hljs-keyword">new</span> UploadVideoImpl();<br>            UploadStreamResponse response = uploader.uploadStream(request);<br>            System.out.print(<span class="hljs-string">&quot;RequestId=&quot;</span> + response.getRequestId() + <span class="hljs-string">&quot;\n&quot;</span>);  <span class="hljs-comment">//请求视频点播服务的请求ID</span><br><br>            <span class="hljs-comment">// 视频返回的id</span><br>            String videoId = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">if</span> (response.isSuccess()) &#123;<br>                videoId = response.getVideoId();<br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//如果设置回调URL无效，不影响视频上传，可以返回VideoId同时会返回错误码。其他情况上传失败时，VideoId为空，此时需要根据返回错误码分析具体错误原因</span><br>                videoId = response.getVideoId();<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> videoId;<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>启动测试，报了一下错误，超过文件上传最大的容量，1M</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">Caused by: org.apache.tomcat.util.http.fileupload.FileUploadBase<span class="hljs-variable">$FileSizeLimitExceededException</span>: The field file exceeds its maximum permitted size of 1048576 bytes.<br></code></pre></td></tr></table></figure>

<p>解决方案</p>
<p>在application.properties配置文件中添加下面配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 最大上传单个文件大小：默认1M</span><br><span class="hljs-meta">spring.servlet.multipart.max-file-size</span>=<span class="hljs-string">1024MB</span><br><span class="hljs-comment"># 最大置总上传的数据大小 ：默认10M</span><br><span class="hljs-meta">spring.servlet.multipart.max-request-size</span>=<span class="hljs-string">1024MB</span><br></code></pre></td></tr></table></figure>



<h2 id="课程管理-添加小节上传视频前端"><a href="#课程管理-添加小节上传视频前端" class="headerlink" title="课程管理-添加小节上传视频前端"></a>课程管理-添加小节上传视频前端</h2><p>配置nginx反向代理</p>
<p>将接口地址加入nginx配置</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">location ~ <span class="hljs-regexp">/eduvod/</span> &#123;<br>    proxy_pass http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8003</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>配置nginx上传文件大小，否则上传时会有 413 (Request Entity Too Large) 异常</p>
<p>打开nginx主配置文件nginx.conf，找到http{}，添加</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><code class="hljs abnf">client_max_body_size <span class="hljs-number">1024</span>m<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>

<p>重启nginx</p>
<p><strong>数据定义</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">fileList: [],//上传文件列表<br>BASE_API: process.env.BASE_API // 接口API地址<br></code></pre></td></tr></table></figure>

<p><strong>整合上传组件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;el-form-item label=&quot;上传视频&quot;&gt;<br>            &lt;el-upload<br>                    :on-success=&quot;handleVodUploadSuccess&quot;<br>                    :on-remove=&quot;handleVodRemove&quot;<br>                    :before-remove=&quot;beforeVodRemove&quot;<br>                    :on-exceed=&quot;handleUploadExceed&quot;<br>                    :file-list=&quot;fileList&quot;<br>                    :action=&quot;BASE_API+&#x27;/eduvod/video/uploadAlyVideo&#x27;&quot;<br>                    :limit=&quot;1&quot;<br>                    class=&quot;upload-demo&quot;&gt;<br>            &lt;el-button size=&quot;small&quot; type=&quot;primary&quot;&gt;上传视频&lt;/el-button&gt;<br>            &lt;el-tooltip placement=&quot;right-end&quot;&gt;<br>                &lt;div slot=&quot;content&quot;&gt;最大支持1G，&lt;br&gt;<br>                    支持3GP、ASF、AVI、DAT、DV、FLV、F4V、&lt;br&gt;<br>                    GIF、M2T、M4V、MJ2、MJPEG、MKV、MOV、MP4、&lt;br&gt;<br>                    MPE、MPG、MPEG、MTS、OGG、QT、RM、RMVB、&lt;br&gt;<br>                    SWF、TS、VOB、WMV、WEBM 等视频格式上传&lt;/div&gt;<br>                &lt;i class=&quot;el-icon-question&quot;/&gt;<br>            &lt;/el-tooltip&gt;<br>            &lt;/el-upload&gt;<br>        &lt;/el-form-item&gt;<br><br></code></pre></td></tr></table></figure>



<p><strong>方法定义</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">methods: &#123;<br>     // 成功<br>     handleVodUploadSuccess(response,file,fileList)&#123;<br>       this.video.videoSourceId = response.data.videoId<br>       this.video.videoOriginalName = file.name<br>     &#125;,<br>    //视图上传多于一个视频<br>    handleUploadExceed(files, fileList) &#123;<br>      this.$message.warning(&#x27;想要重新上传视频，请先删除已上传的<br>    &#125;,<br><br></code></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>项目|谷粒学院|笔记</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>day13-微信登录</title>
    <url>/myBlog/day13-%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h1 id="Day13-微信登录"><a href="#Day13-微信登录" class="headerlink" title="Day13-微信登录"></a>Day13-微信登录</h1><h1 id="OAuth2介绍"><a href="#OAuth2介绍" class="headerlink" title="OAuth2介绍"></a>OAuth2介绍</h1><p>OAuth2解决方案:令牌机制，按照一定规则生成字符串，字符串包含用户信息</p>
<p><img src="/myBlog/day13-%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95/image-20220107001223830.png" alt="image-20220107001223830"></p>
<h1 id="微信扫描登录-生成授权url（生成二维码）"><a href="#微信扫描登录-生成授权url（生成二维码）" class="headerlink" title="微信扫描登录-生成授权url（生成二维码）"></a>微信扫描登录-生成授权url（生成二维码）</h1><h2 id="后端开发"><a href="#后端开发" class="headerlink" title="后端开发"></a>后端开发</h2><h3 id="1、添加配置"><a href="#1、添加配置" class="headerlink" title="1、添加配置"></a>1、添加配置</h3><p>application.properties添加相关配置信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 微信开放平台 appid</span><br><span class="hljs-meta">wx.open.app_id</span>=<span class="hljs-string">wxed9954c01bb89b47</span><br><span class="hljs-comment"># 微信开放平台 appsecret</span><br><span class="hljs-meta">wx.open.app_secret</span>=<span class="hljs-string">a7482517235173ddb4083788de60b90e</span><br><span class="hljs-comment"># 微信开放平台 重定向url</span><br><span class="hljs-meta">wx.open.redirect_url</span>=<span class="hljs-string">http://localhost:8160/api/ucenter/wx/callback</span><br></code></pre></td></tr></table></figure>

<p><img src="/myBlog/day13-%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95/image-20220107001247192.png" alt="image-20220107001247192"></p>
<h3 id="2、创建常量类"><a href="#2、创建常量类" class="headerlink" title="2、创建常量类"></a>2、创建常量类</h3><p>创建util包，创建ConstantPropertiesUtil.java常量类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConstantWxUtil</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InitializingBean</span> </span>&#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;wx.open.app_id&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String appId;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;wx.open.app_secret&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String appSecret;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;wx.open.redirect_url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String redirectUrl;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String WX_OPEN_APP_ID;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String WX_OPEN_APP_SECRET;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String WX_OPEN_REDIRECT_URL;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        WX_OPEN_APP_ID = appId;<br>        WX_OPEN_APP_SECRET = appSecret;<br>        WX_OPEN_REDIRECT_URL = redirectUrl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="3、创建controller"><a href="#3、创建controller" class="headerlink" title="3、创建controller"></a>3、创建controller</h3><p>guli-microservice-ucenter微服务中创建api包</p>
<p>api包中创建WxApiController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-meta">@Controller</span> <span class="hljs-comment">// 这里不需要返回数据，所以用controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/api/ucenter/wx&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WxApiController</span> </span>&#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;login&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getWxCode</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 微信开放平台授权baseUrl</span><br>        String baseUrl = <span class="hljs-string">&quot;https://open.weixin.qq.com/connect/qrconnect&quot;</span> +<br>        <span class="hljs-string">&quot;?appid=%s&quot;</span> +<br>        <span class="hljs-string">&quot;&amp;redirect_uri=%s&quot;</span> +<br>        <span class="hljs-string">&quot;&amp;response_type=code&quot;</span> +<br>        <span class="hljs-string">&quot;&amp;scope=snsapi_login&quot;</span> +<br>        <span class="hljs-string">&quot;&amp;state=%s&quot;</span> +<br>        <span class="hljs-string">&quot;#wechat_redirect&quot;</span>;<br><br>        <span class="hljs-comment">// redirect_url需要转码</span><br>        String redirectUrl = ConstantWxUtil.WX_OPEN_REDIRECT_URL;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redirectUrl = URLEncoder.encode(redirectUrl, <span class="hljs-string">&quot;utf-8&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-comment">// 生成url</span><br>        String url = String.format(<br>                baseUrl,<br>                ConstantWxUtil.WX_OPEN_APP_ID,<br>                redirectUrl,<br>                <span class="hljs-string">&quot;atguigu&quot;</span><br>        );<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:&quot;</span>+url;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h3><p>访问：<a href="http://localhost:8006/api/ucenter/wx/login">http://localhost:8006/api/ucenter/wx/login</a> </p>
<p>发现错误</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">redirect_uri</span> 参数错误<br></code></pre></td></tr></table></figure>

<p>解决方案</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">微信扫码失效的，使用新的，首先将模块启动端口改成<span class="hljs-number">8160</span>（一定得是这个，其他的没用），其次将redirect_url 改为：http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8160</span><span class="hljs-regexp">/api/u</span>center<span class="hljs-regexp">/wx/</span>callback，还需要将Nginx的配置改成对应的url<br></code></pre></td></tr></table></figure>



<h1 id="微信扫描登录-开发回调url（获取扫描人的信息）"><a href="#微信扫描登录-开发回调url（获取扫描人的信息）" class="headerlink" title="微信扫描登录-开发回调url（获取扫描人的信息）"></a>微信扫描登录-开发回调url（获取扫描人的信息）</h1><p>扫描之后获取扫描人信息流程分析</p>
<p><img src="/myBlog/day13-%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95/image-20220107001357983.png" alt="image-20220107001357983"></p>
<h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><h3 id="1、全局配置的跳转路径"><a href="#1、全局配置的跳转路径" class="headerlink" title="1、全局配置的跳转路径"></a>1、全局配置的跳转路径</h3><figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 微信开放平台 重定向url</span><br><span class="hljs-meta">wx.open.redirect_url</span>=<span class="hljs-string">http://localhost:8160/api/ucenter/wx/callback</span><br></code></pre></td></tr></table></figure>

<h3 id="2、修改当前项目启动端口号为8160"><a href="#2、修改当前项目启动端口号为8160" class="headerlink" title="2、修改当前项目启动端口号为8160"></a>2、修改当前项目启动端口号为8160</h3><h3 id="3、测试回调是否可用"><a href="#3、测试回调是否可用" class="headerlink" title="3、测试回调是否可用"></a>3、测试回调是否可用</h3><p>在WxApiController中添加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;callback&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">callback</span><span class="hljs-params">(String code, String state, HttpSession session)</span> </span>&#123;<br>   <span class="hljs-comment">//得到授权临时票据code</span><br>   System.out.println(<span class="hljs-string">&quot;code = &quot;</span> + code);<br>   System.out.println(<span class="hljs-string">&quot;state = &quot;</span> + state);<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="二、后台开发"><a href="#二、后台开发" class="headerlink" title="二、后台开发"></a>二、后台开发</h2><h3 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--httpclient--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--commons-io--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--gson--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.code.gson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>gson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="2、创建httpclient工具类"><a href="#2、创建httpclient工具类" class="headerlink" title="2、创建httpclient工具类"></a>2、创建httpclient工具类</h3><p>放入util包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.educenter.utils;<br><br><span class="hljs-keyword">import</span> org.apache.commons.io.IOUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.lang.StringUtils;<br><span class="hljs-keyword">import</span> org.apache.http.Consts;<br><span class="hljs-keyword">import</span> org.apache.http.HttpEntity;<br><span class="hljs-keyword">import</span> org.apache.http.HttpResponse;<br><span class="hljs-keyword">import</span> org.apache.http.NameValuePair;<br><span class="hljs-keyword">import</span> org.apache.http.client.HttpClient;<br><span class="hljs-keyword">import</span> org.apache.http.client.config.RequestConfig;<br><span class="hljs-keyword">import</span> org.apache.http.client.config.RequestConfig.Builder;<br><span class="hljs-keyword">import</span> org.apache.http.client.entity.UrlEncodedFormEntity;<br><span class="hljs-keyword">import</span> org.apache.http.client.methods.HttpGet;<br><span class="hljs-keyword">import</span> org.apache.http.client.methods.HttpPost;<br><span class="hljs-keyword">import</span> org.apache.http.conn.ConnectTimeoutException;<br><span class="hljs-keyword">import</span> org.apache.http.conn.ssl.SSLConnectionSocketFactory;<br><span class="hljs-keyword">import</span> org.apache.http.conn.ssl.SSLContextBuilder;<br><span class="hljs-keyword">import</span> org.apache.http.conn.ssl.TrustStrategy;<br><span class="hljs-keyword">import</span> org.apache.http.conn.ssl.X509HostnameVerifier;<br><span class="hljs-keyword">import</span> org.apache.http.entity.ContentType;<br><span class="hljs-keyword">import</span> org.apache.http.entity.StringEntity;<br><span class="hljs-keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;<br><span class="hljs-keyword">import</span> org.apache.http.impl.client.HttpClients;<br><span class="hljs-keyword">import</span> org.apache.http.impl.conn.PoolingHttpClientConnectionManager;<br><span class="hljs-keyword">import</span> org.apache.http.message.BasicNameValuePair;<br><br><span class="hljs-keyword">import</span> javax.net.ssl.SSLContext;<br><span class="hljs-keyword">import</span> javax.net.ssl.SSLException;<br><span class="hljs-keyword">import</span> javax.net.ssl.SSLSession;<br><span class="hljs-keyword">import</span> javax.net.ssl.SSLSocket;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.SocketTimeoutException;<br><span class="hljs-keyword">import</span> java.security.GeneralSecurityException;<br><span class="hljs-keyword">import</span> java.security.cert.CertificateException;<br><span class="hljs-keyword">import</span> java.security.cert.X509Certificate;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Map.Entry;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  依赖的jar包有：commons-lang-2.6.jar、httpclient-4.3.2.jar、httpcore-4.3.1.jar、commons-io-2.4.jar</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zhaoyb</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpClientUtils</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> connTimeout=<span class="hljs-number">10000</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> readTimeout=<span class="hljs-number">10000</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String charset=<span class="hljs-string">&quot;UTF-8&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HttpClient client = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        PoolingHttpClientConnectionManager cm = <span class="hljs-keyword">new</span> PoolingHttpClientConnectionManager();<br>        cm.setMaxTotal(<span class="hljs-number">128</span>);<br>        cm.setDefaultMaxPerRoute(<span class="hljs-number">128</span>);<br>        client = HttpClients.custom().setConnectionManager(cm).build();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">postParameters</span><span class="hljs-params">(String url, String parameterStr)</span> <span class="hljs-keyword">throws</span> ConnectTimeoutException, SocketTimeoutException, Exception</span>&#123;<br>        <span class="hljs-keyword">return</span> post(url,parameterStr,<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>,charset,connTimeout,readTimeout);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">postParameters</span><span class="hljs-params">(String url, String parameterStr,String charset, Integer connTimeout, Integer readTimeout)</span> <span class="hljs-keyword">throws</span> ConnectTimeoutException, SocketTimeoutException, Exception</span>&#123;<br>        <span class="hljs-keyword">return</span> post(url,parameterStr,<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>,charset,connTimeout,readTimeout);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">postParameters</span><span class="hljs-params">(String url, Map&lt;String, String&gt; params)</span> <span class="hljs-keyword">throws</span> ConnectTimeoutException,</span><br><span class="hljs-function">            SocketTimeoutException, Exception </span>&#123;<br>        <span class="hljs-keyword">return</span> postForm(url, params, <span class="hljs-keyword">null</span>, connTimeout, readTimeout);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">postParameters</span><span class="hljs-params">(String url, Map&lt;String, String&gt; params, Integer connTimeout,Integer readTimeout)</span> <span class="hljs-keyword">throws</span> ConnectTimeoutException,</span><br><span class="hljs-function">            SocketTimeoutException, Exception </span>&#123;<br>        <span class="hljs-keyword">return</span> postForm(url, params, <span class="hljs-keyword">null</span>, connTimeout, readTimeout);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">get</span><span class="hljs-params">(String url)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">return</span> get(url, charset, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">get</span><span class="hljs-params">(String url, String charset)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">return</span> get(url, charset, connTimeout, readTimeout);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送一个 Post 请求, 使用指定的字符集编码.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> url</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> body RequestBody</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mimeType 例如 application/xml &quot;application/x-www-form-urlencoded&quot; a=1&amp;b=2&amp;c=3</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> charset 编码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> connTimeout 建立链接超时时间,毫秒.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> readTimeout 响应超时时间,毫秒.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> ResponseBody, 使用指定的字符集编码.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ConnectTimeoutException 建立链接超时异常</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> SocketTimeoutException  响应超时</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">post</span><span class="hljs-params">(String url, String body, String mimeType,String charset, Integer connTimeout, Integer readTimeout)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> ConnectTimeoutException, SocketTimeoutException, Exception </span>&#123;<br>        HttpClient client = <span class="hljs-keyword">null</span>;<br>        HttpPost post = <span class="hljs-keyword">new</span> HttpPost(url);<br>        String result = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(body)) &#123;<br>                HttpEntity entity = <span class="hljs-keyword">new</span> StringEntity(body, ContentType.create(mimeType, charset));<br>                post.setEntity(entity);<br>            &#125;<br>            <span class="hljs-comment">// 设置参数</span><br>            Builder customReqConf = RequestConfig.custom();<br>            <span class="hljs-keyword">if</span> (connTimeout != <span class="hljs-keyword">null</span>) &#123;<br>                customReqConf.setConnectTimeout(connTimeout);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (readTimeout != <span class="hljs-keyword">null</span>) &#123;<br>                customReqConf.setSocketTimeout(readTimeout);<br>            &#125;<br>            post.setConfig(customReqConf.build());<br><br>            HttpResponse res;<br>            <span class="hljs-keyword">if</span> (url.startsWith(<span class="hljs-string">&quot;https&quot;</span>)) &#123;<br>                <span class="hljs-comment">// 执行 Https 请求.</span><br>                client = createSSLInsecureClient();<br>                res = client.execute(post);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 执行 Http 请求.</span><br>                client = HttpClientUtils.client;<br>                res = client.execute(post);<br>            &#125;<br>            result = IOUtils.toString(res.getEntity().getContent(), charset);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            post.releaseConnection();<br>            <span class="hljs-keyword">if</span> (url.startsWith(<span class="hljs-string">&quot;https&quot;</span>) &amp;&amp; client != <span class="hljs-keyword">null</span>&amp;&amp; client <span class="hljs-keyword">instanceof</span> CloseableHttpClient) &#123;<br>                ((CloseableHttpClient) client).close();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 提交form表单</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> url</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> params</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> connTimeout</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> readTimeout</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ConnectTimeoutException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> SocketTimeoutException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">postForm</span><span class="hljs-params">(String url, Map&lt;String, String&gt; params, Map&lt;String, String&gt; headers, Integer connTimeout,Integer readTimeout)</span> <span class="hljs-keyword">throws</span> ConnectTimeoutException,</span><br><span class="hljs-function">            SocketTimeoutException, Exception </span>&#123;<br><br>        HttpClient client = <span class="hljs-keyword">null</span>;<br>        HttpPost post = <span class="hljs-keyword">new</span> HttpPost(url);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (params != <span class="hljs-keyword">null</span> &amp;&amp; !params.isEmpty()) &#123;<br>                List&lt;NameValuePair&gt; formParams = <span class="hljs-keyword">new</span> ArrayList&lt;NameValuePair&gt;();<br>                Set&lt;Entry&lt;String, String&gt;&gt; entrySet = params.entrySet();<br>                <span class="hljs-keyword">for</span> (Entry&lt;String, String&gt; entry : entrySet) &#123;<br>                    formParams.add(<span class="hljs-keyword">new</span> BasicNameValuePair(entry.getKey(), entry.getValue()));<br>                &#125;<br>                UrlEncodedFormEntity entity = <span class="hljs-keyword">new</span> UrlEncodedFormEntity(formParams, Consts.UTF_8);<br>                post.setEntity(entity);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (headers != <span class="hljs-keyword">null</span> &amp;&amp; !headers.isEmpty()) &#123;<br>                <span class="hljs-keyword">for</span> (Entry&lt;String, String&gt; entry : headers.entrySet()) &#123;<br>                    post.addHeader(entry.getKey(), entry.getValue());<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 设置参数</span><br>            Builder customReqConf = RequestConfig.custom();<br>            <span class="hljs-keyword">if</span> (connTimeout != <span class="hljs-keyword">null</span>) &#123;<br>                customReqConf.setConnectTimeout(connTimeout);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (readTimeout != <span class="hljs-keyword">null</span>) &#123;<br>                customReqConf.setSocketTimeout(readTimeout);<br>            &#125;<br>            post.setConfig(customReqConf.build());<br>            HttpResponse res = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">if</span> (url.startsWith(<span class="hljs-string">&quot;https&quot;</span>)) &#123;<br>                <span class="hljs-comment">// 执行 Https 请求.</span><br>                client = createSSLInsecureClient();<br>                res = client.execute(post);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 执行 Http 请求.</span><br>                client = HttpClientUtils.client;<br>                res = client.execute(post);<br>            &#125;<br>            <span class="hljs-keyword">return</span> IOUtils.toString(res.getEntity().getContent(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            post.releaseConnection();<br>            <span class="hljs-keyword">if</span> (url.startsWith(<span class="hljs-string">&quot;https&quot;</span>) &amp;&amp; client != <span class="hljs-keyword">null</span><br>                    &amp;&amp; client <span class="hljs-keyword">instanceof</span> CloseableHttpClient) &#123;<br>                ((CloseableHttpClient) client).close();<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送一个 GET 请求</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> url</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> charset</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> connTimeout  建立链接超时时间,毫秒.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> readTimeout  响应超时时间,毫秒.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ConnectTimeoutException   建立链接超时</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> SocketTimeoutException   响应超时</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">get</span><span class="hljs-params">(String url, String charset, Integer connTimeout,Integer readTimeout)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> ConnectTimeoutException,SocketTimeoutException, Exception </span>&#123;<br><br>        HttpClient client = <span class="hljs-keyword">null</span>;<br>        HttpGet get = <span class="hljs-keyword">new</span> HttpGet(url);<br>        String result = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 设置参数</span><br>            Builder customReqConf = RequestConfig.custom();<br>            <span class="hljs-keyword">if</span> (connTimeout != <span class="hljs-keyword">null</span>) &#123;<br>                customReqConf.setConnectTimeout(connTimeout);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (readTimeout != <span class="hljs-keyword">null</span>) &#123;<br>                customReqConf.setSocketTimeout(readTimeout);<br>            &#125;<br>            get.setConfig(customReqConf.build());<br><br>            HttpResponse res = <span class="hljs-keyword">null</span>;<br><br>            <span class="hljs-keyword">if</span> (url.startsWith(<span class="hljs-string">&quot;https&quot;</span>)) &#123;<br>                <span class="hljs-comment">// 执行 Https 请求.</span><br>                client = createSSLInsecureClient();<br>                res = client.execute(get);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 执行 Http 请求.</span><br>                client = HttpClientUtils.client;<br>                res = client.execute(get);<br>            &#125;<br><br>            result = IOUtils.toString(res.getEntity().getContent(), charset);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            get.releaseConnection();<br>            <span class="hljs-keyword">if</span> (url.startsWith(<span class="hljs-string">&quot;https&quot;</span>) &amp;&amp; client != <span class="hljs-keyword">null</span> &amp;&amp; client <span class="hljs-keyword">instanceof</span> CloseableHttpClient) &#123;<br>                ((CloseableHttpClient) client).close();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从 response 里获取 charset</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ressponse</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unused&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getCharsetFromResponse</span><span class="hljs-params">(HttpResponse ressponse)</span> </span>&#123;<br>        <span class="hljs-comment">// Content-Type:text/html; charset=GBK</span><br>        <span class="hljs-keyword">if</span> (ressponse.getEntity() != <span class="hljs-keyword">null</span>  &amp;&amp; ressponse.getEntity().getContentType() != <span class="hljs-keyword">null</span> &amp;&amp; ressponse.getEntity().getContentType().getValue() != <span class="hljs-keyword">null</span>) &#123;<br>            String contentType = ressponse.getEntity().getContentType().getValue();<br>            <span class="hljs-keyword">if</span> (contentType.contains(<span class="hljs-string">&quot;charset=&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> contentType.substring(contentType.indexOf(<span class="hljs-string">&quot;charset=&quot;</span>) + <span class="hljs-number">8</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建 SSL连接</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> GeneralSecurityException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> CloseableHttpClient <span class="hljs-title">createSSLInsecureClient</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> GeneralSecurityException </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            SSLContext sslContext = <span class="hljs-keyword">new</span> SSLContextBuilder().loadTrustMaterial(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> TrustStrategy() &#123;<br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isTrusted</span><span class="hljs-params">(X509Certificate[] chain,String authType)</span> <span class="hljs-keyword">throws</span> CertificateException </span>&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125;<br>            &#125;).build();<br><br>            SSLConnectionSocketFactory sslsf = <span class="hljs-keyword">new</span> SSLConnectionSocketFactory(sslContext, <span class="hljs-keyword">new</span> X509HostnameVerifier() &#123;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">verify</span><span class="hljs-params">(String arg0, SSLSession arg1)</span> </span>&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">verify</span><span class="hljs-params">(String host, SSLSocket ssl)</span></span><br><span class="hljs-function">                        <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                &#125;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">verify</span><span class="hljs-params">(String host, X509Certificate cert)</span></span><br><span class="hljs-function">                        <span class="hljs-keyword">throws</span> SSLException </span>&#123;<br>                &#125;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">verify</span><span class="hljs-params">(String host, String[] cns,</span></span><br><span class="hljs-params"><span class="hljs-function">                                   String[] subjectAlts)</span> <span class="hljs-keyword">throws</span> SSLException </span>&#123;<br>                &#125;<br><br>            &#125;);<br><br>            <span class="hljs-keyword">return</span> HttpClients.custom().setSSLSocketFactory(sslsf).build();<br><br>        &#125; <span class="hljs-keyword">catch</span> (GeneralSecurityException e) &#123;<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            String str= post(<span class="hljs-string">&quot;https://localhost:443/ssl/test.shtml&quot;</span>,<span class="hljs-string">&quot;name=12&amp;page=34&quot;</span>,<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>);<br>            <span class="hljs-comment">//String str= get(&quot;https://localhost:443/ssl/test.shtml?name=12&amp;page=34&quot;,&quot;GBK&quot;);</span><br>            <span class="hljs-comment">/*Map&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();</span><br><span class="hljs-comment">            map.put(&quot;name&quot;, &quot;111&quot;);</span><br><span class="hljs-comment">            map.put(&quot;page&quot;, &quot;222&quot;);</span><br><span class="hljs-comment">            String str= postForm(&quot;https://localhost:443/ssl/test.shtml&quot;,map,null, 10000, 10000);*/</span><br>            System.out.println(str);<br>        &#125; <span class="hljs-keyword">catch</span> (ConnectTimeoutException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SocketTimeoutException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="3、创建回调controller方法"><a href="#3、创建回调controller方法" class="headerlink" title="3、创建回调controller方法"></a>3、创建回调controller方法</h3><p>在WxApiController.java中添加如下方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">// 2.获取扫描人信息，添加数据</span><br><span class="hljs-meta">@GetMapping(&quot;callback&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">callback</span><span class="hljs-params">(String code,String state)</span></span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 1.获取code和state</span><br><br>        <span class="hljs-comment">// 2.根据获取到的code和state，去请求微信固定的地址，获取access_token</span><br>        String baseAccessTokenUrl = <span class="hljs-string">&quot;https://api.weixin.qq.com/sns/oauth2/access_token&quot;</span> +<br>                <span class="hljs-string">&quot;?appid=%s&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;secret=%s&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;code=%s&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;grant_type=authorization_code&quot;</span>;<br><br>        String accessTokenUrl = String.format(<br>                baseAccessTokenUrl,<br>                ConstantWxUtil.WX_OPEN_APP_ID,<br>                ConstantWxUtil.WX_OPEN_APP_SECRET,<br>                code);<br><br>        <span class="hljs-comment">// 请求拼接好的url，得到返回的access_token和openid</span><br>        <span class="hljs-comment">// 使用HTTPClient发送请求</span><br>        String accessTokenInfo = HttpClientUtils.get(accessTokenUrl);<br><br>        <span class="hljs-comment">//System.out.println(&quot;accessTokenInfo:&quot;+accessTokenInfo);</span><br><br>        <span class="hljs-comment">// 从获取到的accessTokenInfo中将accessToken和openid取出来</span><br>        <span class="hljs-comment">// 将获取到的accessTokenInfo字符串转换为map，利用gson</span><br>        Gson gson = <span class="hljs-keyword">new</span> Gson();<br>        HashMap mapAccessToken = gson.fromJson(accessTokenInfo, HashMap.class);<br><br>        String accessToken = (String) mapAccessToken.get(<span class="hljs-string">&quot;access_token&quot;</span>);<br>        String openid = (String) mapAccessToken.get(<span class="hljs-string">&quot;openid&quot;</span>);<br><br>        <span class="hljs-comment">// 根据accessToken和openid去请求微信固定的地址，获取用户信息</span><br>        <span class="hljs-comment">// 拼接地址</span><br>        <span class="hljs-comment">//访问微信的资源服务器，获取用户信息</span><br>        String baseUserInfoUrl = <span class="hljs-string">&quot;https://api.weixin.qq.com/sns/userinfo&quot;</span> +<br>        <span class="hljs-string">&quot;?access_token=%s&quot;</span> +<br>        <span class="hljs-string">&quot;&amp;openid=%s&quot;</span>;<br><br>        String userInfoUrl = String.format(baseUserInfoUrl, accessToken, openid);<br>        <br>        <span class="hljs-comment">// 根据userInfoUrl调用HTTPClient,发送请求</span><br>        String userInfo = HttpClientUtils.get(userInfoUrl);<br>        <span class="hljs-comment">//System.out.println(&quot;userInfo=&quot;+userInfo);</span><br><br>        <span class="hljs-comment">// 将获取到的用户信息字符串转换给map</span><br>        HashMap userInfoMap = gson.fromJson(userInfo, HashMap.class);<br>        String nickname = (String) userInfoMap.get(<span class="hljs-string">&quot;nickname&quot;</span>); <span class="hljs-comment">// 昵称</span><br>        String headimgurl = (String) userInfoMap.get(<span class="hljs-string">&quot;headimgurl&quot;</span>);  <span class="hljs-comment">// 头像</span><br><br>        <span class="hljs-comment">// 把扫描人的信息加到数据库中</span><br>        <span class="hljs-comment">// 先判断数据库是否已经存在</span><br>        UcenterMember member = memberService.getOpenIdMember(openid);<br>        <span class="hljs-keyword">if</span> (member == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 说明没有，直接添加</span><br>            member = <span class="hljs-keyword">new</span> UcenterMember();<br>            member.setId(openid);<br>            member.setNickname(nickname);<br>            member.setAvatar(headimgurl);<br><br>            memberService.save(member);<br>        &#125;<br>        <span class="hljs-comment">// 登录成功之后，跳转到首页</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:http://localhost:3000&quot;</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GuliException(<span class="hljs-number">20001</span>,<span class="hljs-string">&quot;登录失败&quot;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="4、业务层"><a href="#4、业务层" class="headerlink" title="4、业务层"></a>4、业务层</h3><p>业务接口：MemberService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 把扫描人的信息加到数据库中</span><br><span class="hljs-function">UcenterMember <span class="hljs-title">getOpenIdMember</span><span class="hljs-params">(String openid)</span></span>;<br></code></pre></td></tr></table></figure>

<p>业务实现：MemberServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据openID查询用户</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> UcenterMember <span class="hljs-title">getOpenIdMember</span><span class="hljs-params">(String openid)</span> </span>&#123;<br>    QueryWrapper&lt;UcenterMember&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    wrapper.eq(<span class="hljs-string">&quot;openid&quot;</span>,openid);<br>    UcenterMember member = baseMapper.selectOne(wrapper);<br>    <span class="hljs-keyword">return</span> member;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="微信扫描登录-功能完善和整合jwt令牌"><a href="#微信扫描登录-功能完善和整合jwt令牌" class="headerlink" title="微信扫描登录-功能完善和整合jwt令牌"></a>微信扫描登录-功能完善和整合jwt令牌</h1><p>把第3步换了位置，由于cookie不能跨域，所以整合jwt将用户信息转换成token字符串，通过路径传递。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2.获取扫描人信息，添加数据</span><br><span class="hljs-meta">@GetMapping(&quot;callback&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">callback</span><span class="hljs-params">(String code,String state)</span></span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 1.获取code和state</span><br><br>        <span class="hljs-comment">// 2.根据获取到的code和state，去请求微信固定的地址，获取access_token</span><br>        String baseAccessTokenUrl = <span class="hljs-string">&quot;https://api.weixin.qq.com/sns/oauth2/access_token&quot;</span> +<br>                <span class="hljs-string">&quot;?appid=%s&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;secret=%s&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;code=%s&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;grant_type=authorization_code&quot;</span>;<br><br>        String accessTokenUrl = String.format(<br>                baseAccessTokenUrl,<br>                ConstantWxUtil.WX_OPEN_APP_ID,<br>                ConstantWxUtil.WX_OPEN_APP_SECRET,<br>                code);<br><br>        <span class="hljs-comment">// 请求拼接好的url，得到返回的access_token和openid</span><br>        <span class="hljs-comment">// 使用HTTPClient发送请求</span><br>        String accessTokenInfo = HttpClientUtils.get(accessTokenUrl);<br><br>        <span class="hljs-comment">//System.out.println(&quot;accessTokenInfo:&quot;+accessTokenInfo);</span><br><br>        <span class="hljs-comment">// 从获取到的accessTokenInfo中将accessToken和openid取出来</span><br>        <span class="hljs-comment">// 将获取到的accessTokenInfo字符串转换为map，利用gson</span><br>        Gson gson = <span class="hljs-keyword">new</span> Gson();<br>        HashMap mapAccessToken = gson.fromJson(accessTokenInfo, HashMap.class);<br><br>        String accessToken = (String) mapAccessToken.get(<span class="hljs-string">&quot;access_token&quot;</span>);<br>        String openid = (String) mapAccessToken.get(<span class="hljs-string">&quot;openid&quot;</span>);<br><br><br><br>        <span class="hljs-comment">// 把扫描人的信息加到数据库中</span><br>        <span class="hljs-comment">// 先判断数据库是否已经存在</span><br>        UcenterMember member = memberService.getOpenIdMember(openid);<br>        <span class="hljs-keyword">if</span> (member == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 说明没有，直接添加</span><br><br>            <span class="hljs-comment">// 3.根据accessToken和openid去请求微信固定的地址，获取用户信息</span><br>            <span class="hljs-comment">// 拼接地址</span><br>            <span class="hljs-comment">//访问微信的资源服务器，获取用户信息</span><br>            String baseUserInfoUrl = <span class="hljs-string">&quot;https://api.weixin.qq.com/sns/userinfo&quot;</span> +<br>                    <span class="hljs-string">&quot;?access_token=%s&quot;</span> +<br>                    <span class="hljs-string">&quot;&amp;openid=%s&quot;</span>;<br><br>            String userInfoUrl = String.format(baseUserInfoUrl, accessToken, openid);<br><br>            <span class="hljs-comment">// 根据userInfoUrl调用HTTPClient,发送请求</span><br>            String userInfo = HttpClientUtils.get(userInfoUrl);<br>            <span class="hljs-comment">//System.out.println(&quot;userInfo=&quot;+userInfo);</span><br><br>            <span class="hljs-comment">// 将获取到的用户信息字符串转换给map</span><br>            HashMap userInfoMap = gson.fromJson(userInfo, HashMap.class);<br>            String nickname = (String) userInfoMap.get(<span class="hljs-string">&quot;nickname&quot;</span>); <span class="hljs-comment">// 昵称</span><br>            String headimgurl = (String) userInfoMap.get(<span class="hljs-string">&quot;headimgurl&quot;</span>);  <span class="hljs-comment">// 头像</span><br><br>            member = <span class="hljs-keyword">new</span> UcenterMember();<br>            member.setOpenid(openid);<br>            member.setNickname(nickname);<br>            member.setAvatar(headimgurl);<br><br>            memberService.save(member);<br>        &#125;<br><br>        <span class="hljs-comment">// 由于cookie不能跨域，所以需要用jwt生成token信息，通过路径传递</span><br>        String jwtToken = JwtUtils.getJwtToken(member.getId(), member.getNickname());<br>        <span class="hljs-comment">// 登录成功之后，跳转到首页</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:http://localhost:3000?token=&quot;</span>+jwtToken;<br><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GuliException(<span class="hljs-number">20001</span>,<span class="hljs-string">&quot;登录失败&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="微信扫描登录-首页面显示信息"><a href="#微信扫描登录-首页面显示信息" class="headerlink" title="微信扫描登录-首页面显示信息"></a>微信扫描登录-首页面显示信息</h1><p><img src="/myBlog/day13-%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95/image-20220107001556836.png" alt="image-20220107001556836"></p>
<h2 id="1、修改default-vue页面脚本"><a href="#1、修改default-vue页面脚本" class="headerlink" title="1、修改default.vue页面脚本"></a>1、修改default.vue页面脚本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">export default &#123;<br>     layout: &#x27;sign&#x27;,<br>     data () &#123;<br>       return &#123;<br>         user:&#123;<br>           mobile:&#x27;&#x27;,<br>           password:&#x27;&#x27;<br>         &#125;,<br>         loginInfo:&#123;&#125;<br>       &#125;<br>     &#125;,<br>     methods: &#123;<br><br>       // 登录<br>       submitLogin()&#123;<br>         // 第一步调用接口获取登录token值<br>         loginApi.submitLoginUser(this.user)<br>          .then(response =&gt;&#123;<br>            // 第二步，将获取到的token值放到cookie中<br>            cookie.set(&#x27;guli_token&#x27;,response.data.data.token,&#123; domain: &#x27;localhost&#x27; &#125;)<br><br>            // 第四步，根据token的值，调用接口，获取用户数据，并存入cookie中<br>            loginApi.getUserInfo()<br>              .then(response =&gt;&#123;<br>                this.loginInfo = response.data.data.userInfo<br>                // 将得到的用户信息存入cookie中<br>                cookie.set(&quot;guli_ucenter&quot;,JSON.stringify(this.loginInfo),&#123; domain: &#x27;localhost&#x27; &#125;)<br>                // 跳转页面<br>                window.location.href = &quot;/&quot;<br>              &#125;)<br>          &#125;)<br>          <br>       &#125;,<br>       checkPhone (rule, value, callback) &#123;<br>         //debugger<br>         if (!(/^1[34578]\d&#123;9&#125;$/.test(value))) &#123;<br>           return callback(new Error(&#x27;手机号码格式不正确&#x27;))<br>         &#125;<br>         return callback()<br>       &#125;<br>     &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>项目|谷粒学院|笔记</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>day15-课程评论分析_支付功能</title>
    <url>/myBlog/day15-%E8%AF%BE%E7%A8%8B%E8%AF%84%E8%AE%BA%E5%88%86%E6%9E%90_%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="day15-课程评论分析-支付功能"><a href="#day15-课程评论分析-支付功能" class="headerlink" title="day15-课程评论分析_支付功能"></a>day15-课程评论分析_支付功能</h1><h1 id="课程评论实现过程分析-TODO"><a href="#课程评论实现过程分析-TODO" class="headerlink" title="课程评论实现过程分析(TODO)"></a>课程评论实现过程分析(TODO)</h1><p>![02 课程评论实现过程分析](day15-课程评论分析_支付功能/02 课程评论实现过程分析.png)</p>
<h2 id="一、数据库设计"><a href="#一、数据库设计" class="headerlink" title="一、数据库设计"></a>一、数据库设计</h2><h3 id="1、数据库"><a href="#1、数据库" class="headerlink" title="1、数据库"></a>1、数据库</h3><p>edu_comment</p>
<h3 id="2、数据表"><a href="#2、数据表" class="headerlink" title="2、数据表"></a><strong>2、数据表</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">guli_edu.sql<br></code></pre></td></tr></table></figure>

<h2 id="二、创建课程评论接口"><a href="#二、创建课程评论接口" class="headerlink" title="二、创建课程评论接口"></a><strong>二、创建课程评论接口</strong></h2><h3 id="1、在service-edu模块，生成课程评论代码"><a href="#1、在service-edu模块，生成课程评论代码" class="headerlink" title="1、在service-edu模块，生成课程评论代码"></a>1、在service-edu模块，生成课程评论代码</h3><p>（1）使用mp代码生成器生成</p>
<h3 id="2、在service-ucenter模块，创建接口"><a href="#2、在service-ucenter模块，创建接口" class="headerlink" title="2、在service-ucenter模块，创建接口"></a>2、在service-ucenter模块，创建接口</h3><p>（1）实现用户id获取用户信息，返回用户信息对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据token字符串获取用户信息</span><br><span class="hljs-meta">@PostMapping(&quot;getInfoUc/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> com.atguigu.commonutils.vo.<span class="hljs-function">UcenterMember <span class="hljs-title">getInfo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span> </span>&#123;<br>        <span class="hljs-comment">//根据用户id获取用户信息</span><br>        UcenterMember ucenterMember = memberService.getById(id);<br>        com.atguigu.commonutils.vo.UcenterMember memeber = <span class="hljs-keyword">new</span> com.atguigu.commonutils.vo.UcenterMember();<br>        BeanUtils.copyProperties(ucenterMember,memeber);<br>        <span class="hljs-keyword">return</span> memeber;<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="3、创建课程评论controller"><a href="#3、创建课程评论controller" class="headerlink" title="3、创建课程评论controller"></a><strong>3、创建课程评论controller</strong></h3><p>（1）在service-edu模块创建client，实现微服务调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@FeignClient(name=&quot;service-ucenter&quot;,fallback = UcenterClientImpl.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UcenterClient</span> </span>&#123;<br>    <span class="hljs-comment">//根据用户id获取用户信息</span><br>    <span class="hljs-meta">@GetMapping(&quot;/ucenterservice/member/getUcenterPay/&#123;memberId&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UcenterMemberPay <span class="hljs-title">getUcenterPay</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;memberId&quot;)</span> String memberId)</span></span>;<br>&#125;<br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UcenterClientImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UcenterClient</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UcenterMemberPay <span class="hljs-title">getUcenterPay</span><span class="hljs-params">(String memberId)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>（2）创建评论列表和添加评论接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/eduservice/comment&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommentFrontController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CommentService commentService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UcenterClient ucenterClient;<br>    <span class="hljs-comment">//根据课程id查询评论列表</span><br>    <span class="hljs-meta">@ApiOperation(value = &quot;评论分页列表&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;&#123;page&#125;/&#123;limit&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">index</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@ApiParam(name = &quot;page&quot;, value = &quot;当前页码&quot;, required = true)</span></span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@PathVariable</span> Long page,</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@ApiParam(name = &quot;limit&quot;, value = &quot;每页记录数&quot;, required = true)</span></span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@PathVariable</span> Long limit,</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@ApiParam(name = &quot;courseQuery&quot;, value = &quot;查询对象&quot;, required = false)</span></span></span><br><span class="hljs-params"><span class="hljs-function">                    String courseId)</span> </span>&#123;<br>        Page&lt;Comment&gt; pageParam = <span class="hljs-keyword">new</span> Page&lt;&gt;(page, limit);<br>        QueryWrapper&lt;Comment&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        wrapper.eq(<span class="hljs-string">&quot;course_id&quot;</span>,courseId);<br>        commentService.page(pageParam,wrapper);<br>        List&lt;Comment&gt; commentList = pageParam.getRecords();<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;items&quot;</span>, commentList);<br>        map.put(<span class="hljs-string">&quot;current&quot;</span>, pageParam.getCurrent());<br>        map.put(<span class="hljs-string">&quot;pages&quot;</span>, pageParam.getPages());<br>        map.put(<span class="hljs-string">&quot;size&quot;</span>, pageParam.getSize());<br>        map.put(<span class="hljs-string">&quot;total&quot;</span>, pageParam.getTotal());<br>        map.put(<span class="hljs-string">&quot;hasNext&quot;</span>, pageParam.hasNext());<br>        map.put(<span class="hljs-string">&quot;hasPrevious&quot;</span>, pageParam.hasPrevious());<br>        <span class="hljs-keyword">return</span> R.ok().data(map);<br>    &#125;<br>    <span class="hljs-meta">@ApiOperation(value = &quot;添加评论&quot;)</span><br>    <span class="hljs-meta">@PostMapping(&quot;auth/save&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Comment comment, HttpServletRequest request)</span> </span>&#123;<br>        String memberId = JwtUtils.getMemberIdByJwtToken(request);<br>        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(memberId)) &#123;<br>            <span class="hljs-keyword">return</span> R.error().code(<span class="hljs-number">28004</span>).message(<span class="hljs-string">&quot;请登录&quot;</span>);<br>        &#125;<br>        comment.setMemberId(memberId);<br>        UcenterMemberPay ucenterInfo = ucenterClient.getUcenterPay(memberId);<br>        comment.setNickname(ucenterInfo.getNickname());<br>        comment.setAvatar(ucenterInfo.getAvatar());<br>        commentService.save(comment);<br>        <span class="hljs-keyword">return</span> R.ok();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="三、课程评论前端整合"><a href="#三、课程评论前端整合" class="headerlink" title="三、课程评论前端整合"></a>三、课程评论前端整合</h2><h3 id="1、在api创建commonedu-js"><a href="#1、在api创建commonedu-js" class="headerlink" title="1、在api创建commonedu.js"></a>1、在api创建commonedu.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-function"><span class="hljs-title">getPageList</span>(<span class="hljs-params">page, limit, courseId</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/comment/<span class="hljs-subst">$&#123;page&#125;</span>/<span class="hljs-subst">$&#123;limit&#125;</span>`</span>,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>      <span class="hljs-attr">params</span>: &#123;courseId&#125;<br>    &#125;)<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">addComment</span>(<span class="hljs-params">comment</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/comment/auth/save`</span>,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>      <span class="hljs-attr">data</span>: comment<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="2、在课程详情页面，调用方法-id-vue"><a href="#2、在课程详情页面，调用方法-id-vue" class="headerlink" title="2、在课程详情页面，调用方法 _id.vue"></a>2、在课程详情页面，调用方法 _id.vue</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">import comment from &#x27;@/api/commonedu&#x27;<br>2<br> 3<br>&lt;script&gt;<br>4<br>import course from &#x27;@/api/course&#x27;<br>5<br>import comment from &#x27;@/api/commonedu&#x27;<br>6<br>export default &#123;<br>      //和页面异步开始的<br>   asyncData(&#123; params, error &#125;) &#123;<br>     return &#123;courseId: params.id&#125;<br>   &#125;,<br>   data() &#123;<br>     return &#123;<br>       data:&#123;&#125;,<br>       page:1,<br>       limit:4,<br>       total:10,<br>       comment:&#123;<br>         content:&#x27;&#x27;,<br>         courseId:&#x27;&#x27;<br>       &#125;,<br>       courseInfo:&#123;&#125;,<br>       chapterVideoList:[],<br>       isbuyCourse:false<br>     &#125;<br>   &#125;,<br>   created() &#123;<br>     this.initCourseInfo()<br>     this.initComment()<br>   &#125;,<br>   methods:&#123;<br>     //获取课程详情<br>     initCourseInfo() &#123;<br>       course.getCourseInfo(this.courseId)<br>             .then(response =&gt; &#123;<br>               this.courseInfo=response.data.data.courseFrontInfo<br>               this.chapterVideoList=response.data.data.chapterVideoList<br>               this.isbuyCourse=response.data.data.isbuyCourse<br>             &#125;)<br>     &#125;,<br>     initComment()&#123;<br>        comment.getPageList(this.page, this.limit, this.courseId).then(response =&gt; &#123;<br>            this.data = response.data.data<br>        &#125;)<br>     &#125;,<br>     addComment()&#123;<br>         this.comment.courseId = this.courseId<br>         this.comment.teacherId = this.courseInfo.teacherId<br>         comment.addComment(this.comment).then(response =&gt; &#123;<br>             if(response.data.success)&#123;<br>                 this.comment.content = &#x27;&#x27;<br>                 this.initComment()<br>             &#125;<br>         &#125;)<br>     &#125;,<br>     gotoPage(page)&#123;<br>           comment.getPageList(page, this.limit,this.courseId).then(response =&gt; &#123;<br>               this.data = response.data.data<br>           &#125;)<br>       &#125;<br>   &#125;<br> &#125;;<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h3 id="3、在课程详情页面-id-vue显示评论"><a href="#3、在课程详情页面-id-vue显示评论" class="headerlink" title="3、在课程详情页面 _id.vue显示评论"></a>3、在课程详情页面 _id.vue显示评论</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;mt50 commentHtml&quot;</span>&gt;&lt;div&gt;<br>       &lt;h6 class=&quot;c-c-content c-infor-title&quot; id=&quot;i-art-comment&quot;&gt;<br>         &lt;span class=&quot;commentTitle&quot;&gt;课程评论&lt;/span&gt;<br>       &lt;/h6&gt;<br>       &lt;section class=&quot;lh-bj-list pr mt20 replyhtml&quot;&gt;<br>         &lt;ul&gt;<br>           &lt;li class=&quot;unBr&quot;&gt;<br>             &lt;aside class=&quot;noter-pic&quot;&gt;<br>               &lt;img width=&quot;50&quot; height=&quot;50&quot; class=&quot;picImg&quot; src=&quot;~/assets/img/avatar-boy.gif&quot;&gt;<br>               &lt;/aside&gt;<br>             &lt;div class=&quot;of&quot;&gt;<br>               &lt;section class=&quot;n-reply-wrap&quot;&gt;<br>                 &lt;fieldset&gt;<br>                   &lt;textarea name=&quot;&quot; v-model=&quot;comment.content&quot; placeholder=&quot;输入您要评论的文字&quot; id=&quot;commentContent&quot;&gt;&lt;/textarea&gt;<br>                 &lt;/fieldset&gt;<br>                 &lt;p class=&quot;of mt5 tar pl10 pr10&quot;&gt;<br>                   &lt;span class=&quot;fl &quot;&gt;&lt;tt class=&quot;c-red commentContentmeg&quot; style=&quot;display: none;&quot;&gt;&lt;/tt&gt;&lt;/span&gt;<br>                   &lt;input type=&quot;button&quot; @click=&quot;addComment()&quot; value=&quot;回复&quot; class=&quot;lh-reply-btn&quot;&gt;<br>                 &lt;/p&gt;<br>               &lt;/section&gt;<br>             &lt;/div&gt;<br>           &lt;/li&gt;<br>         &lt;/ul&gt;<br>       &lt;/section&gt;<br>       &lt;section class=&quot;&quot;&gt;<br>           &lt;section class=&quot;question-list lh-bj-list pr&quot;&gt;<br>             &lt;ul class=&quot;pr10&quot;&gt;<br>               &lt;li v-for=&quot;(comment,index) in data.items&quot; v-bind:key=&quot;index&quot;&gt;<br>                   &lt;aside class=&quot;noter-pic&quot;&gt;<br>                     &lt;img width=&quot;50&quot; height=&quot;50&quot; class=&quot;picImg&quot; :src=&quot;comment.avatar&quot;&gt;<br>                     &lt;/aside&gt;<br>                   &lt;div class=&quot;of&quot;&gt;<br>                     &lt;span class=&quot;fl&quot;&gt; <br>                     &lt;font class=&quot;fsize12 c-blue&quot;&gt; <br>                       &#123;&#123;comment.nickname&#125;&#125;&lt;/font&gt;<br>                     &lt;font class=&quot;fsize12 c-999 ml5&quot;&gt;评论：&lt;/font&gt;&lt;/span&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;noter-txt mt5&quot;&gt;<br>                     &lt;p&gt;&#123;&#123;comment.content&#125;&#125;&lt;/p&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;of mt5&quot;&gt;<br>                     &lt;span class=&quot;fr&quot;&gt;&lt;font class=&quot;fsize12 c-999 ml5&quot;&gt;&#123;&#123;comment.gmtCreate&#125;&#125;&lt;/font&gt;&lt;/span&gt;<br>                   &lt;/div&gt;<br>                 &lt;/li&gt;<br>               &lt;/ul&gt;<br>           &lt;/section&gt;<br>         &lt;/section&gt;<br>         &lt;!-- 公共分页 开始 --&gt;<br>         &lt;div class=&quot;paging&quot;&gt;<br>             &lt;!-- undisable这个class是否存在，取决于数据属性hasPrevious --&gt;<br>             &lt;a<br>             :class=&quot;&#123;undisable: !data.hasPrevious&#125;&quot;<br>             href=&quot;#&quot;<br>             title=&quot;首页&quot;<br>             @click.prevent=&quot;gotoPage(1)&quot;&gt;首&lt;/a&gt;<br>             &lt;a<br>             :class=&quot;&#123;undisable: !data.hasPrevious&#125;&quot;<br>             href=&quot;#&quot;<br>             title=&quot;前一页&quot;<br>             @click.prevent=&quot;gotoPage(data.current-1)&quot;&gt;&amp;lt;&lt;/a&gt;<br>             &lt;a<br>             v-for=&quot;page in data.pages&quot;<br>             :key=&quot;page&quot;<br>             :class=&quot;&#123;current: data.current == page, undisable: data.current == page&#125;&quot;<br>             :title=&quot;&#x27;第&#x27;+page+&#x27;页&#x27;&quot;<br>             href=&quot;#&quot;<br>             @click.prevent=&quot;gotoPage(page)&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;<br>             &lt;a<br>             :class=&quot;&#123;undisable: !data.hasNext&#125;&quot;<br>             href=&quot;#&quot;<br>             title=&quot;后一页&quot;<br>             @click.prevent=&quot;gotoPage(data.current+1)&quot;&gt;&amp;gt;&lt;/a&gt;<br>             &lt;a<br>             :class=&quot;&#123;undisable: !data.hasNext&#125;&quot;<br>             href=&quot;#&quot;<br>             title=&quot;末页&quot;<br>             @click.prevent=&quot;gotoPage(data.pages)&quot;&gt;末&lt;/a&gt;<br>             &lt;div class=&quot;clear&quot;/&gt;<br>         &lt;/div&gt;<br>         &lt;!-- 公共分页 结束 --&gt;<br>       &lt;/div&gt;<br>     &lt;/div&gt;<br></code></pre></td></tr></table></figure>



<h1 id="课程支付功能0"><a href="#课程支付功能0" class="headerlink" title="课程支付功能0"></a>课程支付功能0</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>![03 课程支付需求分析](day15-课程评论分析_支付功能/03 课程支付需求分析.png)</p>
<h2 id="所需接口"><a href="#所需接口" class="headerlink" title="所需接口"></a>所需接口</h2><p>![04 课程支付接口](day15-课程评论分析_支付功能/04 课程支付接口.png)</p>
<h2 id="创建支付模块和准备"><a href="#创建支付模块和准备" class="headerlink" title="创建支付模块和准备"></a>创建支付模块和准备</h2><p>1、在service模块下创建子模块service_order</p>
<p>2、在service_order模块中引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.wxpay<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>wxpay-sdk<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>3、创建支付相关的表</p>
<p>4、使用代码生成器生成相关代码</p>
<p>5、编写application.properties配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 服务端口</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8007</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 服务名</span><br><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">service-order</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># mysql数据库连接</span><br><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/guli?serverTimezone=GMT%2B8</span><br><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">root</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#返回json的全局时间格式</span><br><span class="hljs-meta">spring.jackson.date-format</span>=<span class="hljs-string">yyyy-MM-dd HH:mm:ss</span><br><span class="hljs-meta">spring.jackson.time-zone</span>=<span class="hljs-string">GMT+8</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#配置mapper xml文件的路径</span><br><span class="hljs-meta">mybatis-plus.mapper-locations</span>=<span class="hljs-string">classpath:com/atguigu/eduorder/mapper/xml/*.xml</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#mybatis日志</span><br><span class="hljs-meta">mybatis-plus.configuration.log-impl</span>=<span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># nacos服务地址</span><br><span class="hljs-meta">spring.cloud.nacos.discovery.server-addr</span>=<span class="hljs-string">127.0.0.1:8848</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#开启熔断机制</span><br><span class="hljs-comment">#feign.hystrix.enabled=true</span><br><span class="hljs-comment"># 设置hystrix超时时间，默认1000ms</span><br><span class="hljs-comment">#hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=3000</span><br></code></pre></td></tr></table></figure>



<h2 id="开发创建订单接口"><a href="#开发创建订单接口" class="headerlink" title="开发创建订单接口"></a>开发创建订单接口</h2><p>1、编写订单controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/eduorder/order&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderService orderService;<br><br>    <span class="hljs-comment">// 根据课程id，生成订单的方法，返回订单号</span><br>    <span class="hljs-meta">@PostMapping(&quot;createOrder/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">saveOrder</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id, HttpServletRequest request)</span></span>&#123;<br><br>        String orderId = orderService.createOrder(id,JwtUtils.getMemberIdByJwtToken(request));<br>        <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;orderId&quot;</span>,orderId);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>2、在service_edu创建接口</p>
<p>（1）实现根据课程id获取课程信息，返回课程信息对象(所需要的返回对象，直接复制原来的实体类到公共模块即可)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据课程id，查询课程信息</span><br><span class="hljs-meta">@PostMapping(&quot;getCourseInfoOrder/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> CourseWebVoOrder <span class="hljs-title">getCourseInfoOrder</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>    CourseWebVo courseInfo = courseService.getBaseCourseInfo(id);<br>    CourseWebVoOrder courseWebVoOrder = <span class="hljs-keyword">new</span> CourseWebVoOrder();<br>    BeanUtils.copyProperties(courseInfo,courseWebVoOrder);<br>    <span class="hljs-keyword">return</span> courseWebVoOrder;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>3、在service_ucenter创建接口</p>
<p>（1）实现用户id获取用户信息，返回用户信息对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据用户id查询用户信息，前台</span><br><span class="hljs-meta">@PostMapping(&quot;getUserInfoOrder/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> UcenterMemberOrder <span class="hljs-title">getUserInfoOrder</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>    UcenterMember member = memberService.getById(id);<br>    UcenterMemberOrder ucenterMemberOrder = <span class="hljs-keyword">new</span> UcenterMemberOrder();<br>    BeanUtils.copyProperties(member,ucenterMemberOrder);<br>    <span class="hljs-keyword">return</span> ucenterMemberOrder;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>4、编写订单service</p>
<p>（1）在service_order模块创建接口，实现远程调用</p>
<p><strong>EduClient</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@FeignClient(name = &quot;service-edu&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EduClient</span> </span>&#123;<br>    <span class="hljs-comment">// 根据课程id，查询课程信息</span><br>    <span class="hljs-meta">@PostMapping(&quot;/eduservice/coursefront/getCourseInfoOrder/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CourseWebVoOrder <span class="hljs-title">getCourseInfoOrder</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>UcenterClient</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@FeignClient(name = &quot;service-ucenter&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UcenterClient</span> </span>&#123;<br>    <span class="hljs-comment">// 根据用户id查询用户信息，前台</span><br>    <span class="hljs-meta">@PostMapping(&quot;/educenter/member/getUserInfoOrder/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UcenterMemberOrder <span class="hljs-title">getUserInfoOrder</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>(2）在service_order模块编写创建订单service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceImpl</span>&lt;<span class="hljs-title">OrderMapper</span>, <span class="hljs-title">Order</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">OrderService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EduClient eduClient;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UcenterClient ucenterClient;<br><br>    <span class="hljs-comment">// 根据课程id，生成订单的方法，返回订单号</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">createOrder</span><span class="hljs-params">(String courseId, String memberId)</span> </span>&#123;<br>        <span class="hljs-comment">// 1.根据课程id查询课程信息</span><br>        CourseWebVoOrder courseInfoOrder = eduClient.getCourseInfoOrder(courseId);<br><br>        <span class="hljs-comment">// 2.根据用户id，查询用户信息</span><br>        UcenterMemberOrder userInfoOrder = ucenterClient.getUserInfoOrder(memberId);<br><br>        <span class="hljs-comment">// 加到数据库</span><br>        Order order = <span class="hljs-keyword">new</span> Order();<br>        order.setOrderNo(OrderNoUtil.getOrderNo());                 <span class="hljs-comment">// 订单号</span><br>        order.setCourseId(courseId);<br>        order.setCourseTitle(courseInfoOrder.getTitle());<br>        order.setCourseCover(courseInfoOrder.getCover());<br>        order.setTeacherName(courseInfoOrder.getTeacherName());<br>        order.setTotalFee(courseInfoOrder.getPrice());<br>        order.setMemberId(memberId);<br>        order.setMobile(userInfoOrder.getMobile());<br>        order.setNickname(userInfoOrder.getNickname());<br><br>        order.setStatus(<span class="hljs-number">0</span>);     <span class="hljs-comment">// 订单状态（0：未支付 1：已支付）</span><br>        order.setPayType(<span class="hljs-number">1</span>);    <span class="hljs-comment">// 支付类型（1：微信 2：支付宝）</span><br><br>        baseMapper.insert(order);<br><br>        <span class="hljs-comment">// 返回订单号</span><br>        <span class="hljs-keyword">return</span> order.getOrderNo();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>OrderNoUtil</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 订单号工具类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> qy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderNoUtil</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取订单号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getOrderNo</span><span class="hljs-params">()</span> </span>&#123;<br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyyMMddHHmmss&quot;</span>);<br>        String newDate = sdf.format(<span class="hljs-keyword">new</span> Date());<br>        String result = <span class="hljs-string">&quot;&quot;</span>;<br>        Random random = <span class="hljs-keyword">new</span> Random();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>            result += random.nextInt(<span class="hljs-number">10</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> newDate + result;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="开发获取订单接口"><a href="#开发获取订单接口" class="headerlink" title="开发获取订单接口"></a>开发获取订单接口</h2><p>1、在订单controller创建根据id获取订单信息接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据订单号查询订单信息</span><br><span class="hljs-meta">@GetMapping(&quot;getOrder/&#123;orderId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">getOrder</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String orderId)</span></span>&#123;<br>    QueryWrapper&lt;Order&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    wrapper.eq(<span class="hljs-string">&quot;order_no&quot;</span>,orderId);<br>    Order order = orderService.getOne(wrapper);<br>    <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;item&quot;</span>,order);<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="生成订单前端整合"><a href="#生成订单前端整合" class="headerlink" title="生成订单前端整合"></a>生成订单前端整合</h2><h3 id="页面样式修改"><a href="#页面样式修改" class="headerlink" title="页面样式修改"></a>页面样式修改</h3><p><strong>1、复制样式文件到assets</strong></p>
<p><img src="/myBlog/day15-%E8%AF%BE%E7%A8%8B%E8%AF%84%E8%AE%BA%E5%88%86%E6%9E%90_%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD/image-20220103163408936.png" alt="image-20220103163408936"></p>
<p><strong>2、修改default.vue页面</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">import &#x27;~/assets/css/reset.css&#x27;<br>import &#x27;~/assets/css/theme.css&#x27;<br>import &#x27;~/assets/css/global.css&#x27;<br>import &#x27;~/assets/css/web.css&#x27;<br>import &#x27;~/assets/css/base.css&#x27;<br>import &#x27;~/assets/css/activity_tab.css&#x27;<br>import &#x27;~/assets/css/bottom_rec.css&#x27;<br>import &#x27;~/assets/css/nice_select.css&#x27;<br>import &#x27;~/assets/css/order.css&#x27;<br>import &#x27;~/assets/css/swiper-3.3.1.min.css&#x27;<br>import &quot;~/assets/css/pages-weixinpay.css&quot;<br></code></pre></td></tr></table></figure>

<h3 id="课程支付前端"><a href="#课程支付前端" class="headerlink" title="课程支付前端"></a><strong>课程支付前端</strong></h3><p>1、在api文件夹下创建order.js文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// 创建订单</span><br>  <span class="hljs-function"><span class="hljs-title">createOrder</span>(<span class="hljs-params">courseId</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduorder/order/createOrder/<span class="hljs-subst">$&#123;courseId&#125;</span>`</span>,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span><br>    &#125;)<br>  &#125;,<br>  <span class="hljs-comment">// 根据订单号查询订单信息</span><br>  <span class="hljs-function"><span class="hljs-title">getOrderInfo</span>(<span class="hljs-params">id</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduorder/order/getOrder/<span class="hljs-subst">$&#123;id&#125;</span>`</span>,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>2、在课程详情页面中添加创建订单方法</p>
<p>在“立即购买”位置添加事件</p>
<p><img src="/myBlog/day15-%E8%AF%BE%E7%A8%8B%E8%AF%84%E8%AE%BA%E5%88%86%E6%9E%90_%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD/image-20220103163638975.png" alt="image-20220103163638975"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">methods:&#123;<br>   // 创建订单<br>   createOrder()&#123;<br>     order.createOrder(this.courseId)<br>       .then(response =&gt;&#123;<br>         // 获取返回的订单号<br>         // 将订单号放在路径上跳转订单显示页面<br>         this.$router.push(&#123;path:&#x27;/order/&#x27;+response.data.data.orderId &#125;)<br>       &#125;)<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="创建订单页面，显示订单信息"><a href="#创建订单页面，显示订单信息" class="headerlink" title="创建订单页面，显示订单信息"></a><strong>创建订单页面，显示订单信息</strong></h3><p>在pages下面创建order文件夹，创建_oid.vue页面</p>
<p>在_oid.vue页面调用方法，获取订单信息</p>
<p>（1）页面部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>   &lt;div class=&quot;Page Confirm&quot;&gt;<br>     &lt;div class=&quot;Title&quot;&gt;<br>       &lt;h1 class=&quot;fl f18&quot;&gt;订单确认&lt;/h1&gt;<br>       &lt;img src=&quot;~/assets/img/cart_setp2.png&quot; class=&quot;fr&quot;&gt;<br>       &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>     &lt;/div&gt;<br>     &lt;form name=&quot;flowForm&quot; id=&quot;flowForm&quot; method=&quot;post&quot; action=&quot;&quot;&gt;<br>       &lt;table class=&quot;GoodList&quot;&gt;<br>         &lt;tbody&gt;<br>         &lt;tr&gt;<br>           &lt;th class=&quot;name&quot;&gt;商品&lt;/th&gt;<br>           &lt;th class=&quot;price&quot;&gt;原价&lt;/th&gt;<br>           &lt;th class=&quot;priceNew&quot;&gt;价格&lt;/th&gt;<br>         &lt;/tr&gt;<br>         &lt;/tbody&gt;<br>         &lt;tbody&gt;<br>         &lt;!-- &lt;tr&gt;<br>           &lt;td colspan=&quot;3&quot; class=&quot;Title red f18 fb&quot;&gt;&lt;p&gt;限时折扣&lt;/p&gt;&lt;/td&gt;<br>         &lt;/tr&gt; --&gt;<br>         &lt;tr&gt;<br>           &lt;td colspan=&quot;3&quot; class=&quot;teacher&quot;&gt;讲师：&#123;&#123;order.teacherName&#125;&#125;&lt;/td&gt;<br>         &lt;/tr&gt;<br>         &lt;tr class=&quot;good&quot;&gt;<br>           &lt;td class=&quot;name First&quot;&gt;<br>             &lt;a target=&quot;_blank&quot; :href=&quot;&#x27;https://localhost:3000/course/&#x27;+order.courseId&quot;&gt;<br>               &lt;img :src=&quot;order.courseCover&quot;&gt;&lt;/a&gt;<br>             &lt;div class=&quot;goodInfo&quot;&gt;<br>               &lt;input type=&quot;hidden&quot; class=&quot;ids ids_14502&quot; value=&quot;14502&quot;&gt;<br>               &lt;a target=&quot;_blank&quot; :href=&quot;&#x27;https://localhost:3000/course/&#x27;+ order.courseId&quot;&gt;&#123;&#123;order.courseTitle&#125;&#125;&lt;/a&gt;<br>             &lt;/div&gt;<br>           &lt;/td&gt;<br>           &lt;td class=&quot;price&quot;&gt;<br>             &lt;p&gt;￥&lt;strong&gt;&#123;&#123;order.totalFee&#125;&#125;&lt;/strong&gt;&lt;/p&gt;<br>             &lt;!-- &lt;span class=&quot;discName red&quot;&gt;限时8折&lt;/span&gt; --&gt;<br>           &lt;/td&gt;<br>           &lt;td class=&quot;red priceNew Last&quot;&gt;￥&lt;strong&gt;&#123;&#123;order.totalFee&#125;&#125;&lt;/strong&gt;&lt;/td&gt;<br>         &lt;/tr&gt;<br>         &lt;tr&gt;<br>           &lt;td class=&quot;Billing tr&quot; colspan=&quot;3&quot;&gt;<br>             &lt;div class=&quot;tr&quot;&gt;<br>               &lt;p&gt;共 &lt;strong class=&quot;red&quot;&gt;1&lt;/strong&gt; 件商品，合计&lt;span<br>                 class=&quot;red f20&quot;&gt;￥&lt;strong&gt;&#123;&#123;order.totalFee&#125;&#125;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;<br>             &lt;/div&gt;<br>           &lt;/td&gt;<br>         &lt;/tr&gt;<br>         &lt;/tbody&gt;<br>       &lt;/table&gt;<br>       &lt;div class=&quot;Finish&quot;&gt;<br>         &lt;div class=&quot;fr&quot; id=&quot;AgreeDiv&quot;&gt;<br>           &lt;label for=&quot;Agree&quot;&gt;&lt;p class=&quot;on&quot;&gt;&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot;&gt;我已阅读并同意&lt;a href=&quot;javascript:&quot; target=&quot;_blank&quot;&gt;《谷粒学院购买协议》&lt;/a&gt;&lt;/p&gt;&lt;/label&gt;<br>         &lt;/div&gt;<br>         &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>         &lt;div class=&quot;Main fl&quot;&gt;<br>           &lt;div class=&quot;fl&quot;&gt;<br>             &lt;a :href=&quot;&#x27;/course/&#x27;+order.courseId&quot;&gt;返回课程详情页&lt;/a&gt;<br>           &lt;/div&gt;<br>           &lt;div class=&quot;fr&quot;&gt;<br>             &lt;p&gt;共 &lt;strong class=&quot;red&quot;&gt;1&lt;/strong&gt; 件商品，合计&lt;span class=&quot;red f20&quot;&gt;￥&lt;strong<br>               id=&quot;AllPrice&quot;&gt;&#123;&#123;order.totalFee&#125;&#125;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;<br>           &lt;/div&gt;<br>         &lt;/div&gt;<br>         &lt;input name=&quot;score&quot; value=&quot;0&quot; type=&quot;hidden&quot; id=&quot;usedScore&quot;&gt;<br>         &lt;button class=&quot;fr redb&quot; type=&quot;button&quot; id=&quot;submitPay&quot; @click=&quot;toPay()&quot;&gt;去支付&lt;/button&gt;<br>         &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>       &lt;/div&gt;<br>     &lt;/form&gt;<br>   &lt;/div&gt;<br> &lt;/template&gt;<br></code></pre></td></tr></table></figure>

<p>（2）调用部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>    import orderApi from &quot;@/api/order&quot;<br>export default &#123;<br>    // 订单详情<br>    asyncData(&#123;params,error&#125;)&#123;<br>        return orderApi.getOrderInfo(params.oid)<br>           .then(response =&gt;&#123;<br>               return&#123;<br>                   order:response.data.data.item<br>               &#125;<br>           &#125;)<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>



<h2 id="生成微信支付二维码接口"><a href="#生成微信支付二维码接口" class="headerlink" title="生成微信支付二维码接口"></a>生成微信支付二维码接口</h2><p>需要用的信息</p>
<img src="/myBlog/day15-%E8%AF%BE%E7%A8%8B%E8%AF%84%E8%AE%BA%E5%88%86%E6%9E%90_%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD/image-20220103173830092.png" alt="image-20220103173830092">

<h3 id="1、编写controller"><a href="#1、编写controller" class="headerlink" title="1、编写controller"></a>1、编写controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/eduorder/paylog&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PayLogController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> PayLogService payLogService;<br><br>    <span class="hljs-comment">// 生成微信支付二维码</span><br>    <span class="hljs-meta">@GetMapping(&quot;createNative/&#123;orderNo&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">createNative</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String orderNo)</span></span>&#123;<br>        <span class="hljs-comment">// 需要返回二维码和订单信息</span><br>        Map map = payLogService.createNative(orderNo);<br>        <span class="hljs-keyword">return</span> R.ok().data(map);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="2、编写service"><a href="#2、编写service" class="headerlink" title="2、编写service"></a><strong>2、编写service</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PayLogServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceImpl</span>&lt;<span class="hljs-title">PayLogMapper</span>, <span class="hljs-title">PayLog</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">PayLogService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderService orderService;<br><br>    <span class="hljs-comment">// 生成微信支付二维码</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">createNative</span><span class="hljs-params">(String orderNo)</span> </span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 1.根据订单号，查询订单信息</span><br>            QueryWrapper&lt;Order&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>            wrapper.eq(<span class="hljs-string">&quot;order_no&quot;</span>,orderNo);<br>            Order order = orderService.getOne(wrapper);<br><br>            <span class="hljs-comment">// 2.用map封装生成二维码需要的参数</span><br>            Map m = <span class="hljs-keyword">new</span> HashMap();<br>            m.put(<span class="hljs-string">&quot;appid&quot;</span>, <span class="hljs-string">&quot;wx74862e0dfcf69954&quot;</span>);<br>            m.put(<span class="hljs-string">&quot;mch_id&quot;</span>, <span class="hljs-string">&quot;1558950191&quot;</span>);<br>            m.put(<span class="hljs-string">&quot;nonce_str&quot;</span>, WXPayUtil.generateNonceStr());   <span class="hljs-comment">// 生成随机的字符串，让每一个二维码都不一样</span><br>            m.put(<span class="hljs-string">&quot;body&quot;</span>, order.getCourseTitle());  <span class="hljs-comment">// 课程标题</span><br>            m.put(<span class="hljs-string">&quot;out_trade_no&quot;</span>, orderNo);         <span class="hljs-comment">// 订单号</span><br>            <span class="hljs-comment">// 将BigDecimal类型先转换为long，再转换为字符串</span><br>            m.put(<span class="hljs-string">&quot;total_fee&quot;</span>, order.getTotalFee().multiply(<span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-string">&quot;100&quot;</span>)).longValue()+<span class="hljs-string">&quot;&quot;</span>);<br>            m.put(<span class="hljs-string">&quot;spbill_create_ip&quot;</span>, <span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>            m.put(<span class="hljs-string">&quot;notify_url&quot;</span>, <span class="hljs-string">&quot;http://guli.shop/api/order/weixinPay/weixinNotify\n&quot;</span>);<br>            m.put(<span class="hljs-string">&quot;trade_type&quot;</span>, <span class="hljs-string">&quot;NATIVE&quot;</span>);<br><br>            <span class="hljs-comment">// 3.用client发送请求</span><br>            HttpClient client = <span class="hljs-keyword">new</span> HttpClient(<span class="hljs-string">&quot;https://api.mch.weixin.qq.com/pay/unifiedorder&quot;</span>);<br><br>            <span class="hljs-comment">// client 设置参数</span><br>            client.setXmlParam(WXPayUtil.generateSignedXml(m, <span class="hljs-string">&quot;T6m9iK73b0kn9g5v426MKfHQH7X8rKwb&quot;</span>));<br>            client.setHttps(<span class="hljs-keyword">true</span>);<br>            client.post();<br><br>            <span class="hljs-comment">// 返回数据，xml格式</span><br>            String xml = client.getContent();<br>            <span class="hljs-comment">// 利用微信提供的工具类将xml格式转换为map格式</span><br>            Map&lt;String, String&gt; resultMap = WXPayUtil.xmlToMap(xml);<br><br>            <span class="hljs-comment">// 4.封装最后的数据</span><br>            Map map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>            map.put(<span class="hljs-string">&quot;out_trade_no&quot;</span>, orderNo);<br>            map.put(<span class="hljs-string">&quot;course_id&quot;</span>, order.getCourseId());<br>            map.put(<span class="hljs-string">&quot;total_fee&quot;</span>, order.getTotalFee());<br>            map.put(<span class="hljs-string">&quot;result_code&quot;</span>, resultMap.get(<span class="hljs-string">&quot;result_code&quot;</span>));<br>            map.put(<span class="hljs-string">&quot;code_url&quot;</span>, resultMap.get(<span class="hljs-string">&quot;code_url&quot;</span>));<br><br>            <span class="hljs-comment">//微信支付二维码2小时过期，可采取2小时未支付取消订单</span><br>            <span class="hljs-comment">//redisTemplate.opsForValue().set(orderNo, map, 120, TimeUnit.MINUTES);</span><br>            <span class="hljs-comment">// 将封装好的map返回</span><br>            <span class="hljs-keyword">return</span> map;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GuliException(<span class="hljs-number">20001</span>,<span class="hljs-string">&quot;生成二维码失败&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="查询订单支付状态接口"><a href="#查询订单支付状态接口" class="headerlink" title="查询订单支付状态接口"></a>查询订单支付状态接口</h2><h3 id="1、编写controller-1"><a href="#1、编写controller-1" class="headerlink" title="1、编写controller"></a><strong>1、编写controller</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据订单号查询支付状态</span><br><span class="hljs-meta">@GetMapping(&quot;queryPayStatus/&#123;orderNo&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">queryPayStatus</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String orderNo)</span></span>&#123;<br>    <span class="hljs-comment">// 根据订单号查询支付状态</span><br>    Map&lt;String,String&gt; map = payLogService.queryPayStatus(orderNo);<br><br>    <span class="hljs-comment">// 判断返回的map是否为空</span><br>    <span class="hljs-keyword">if</span> (map == <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> R.error().message(<span class="hljs-string">&quot;支付失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//支付成功</span><br>    <span class="hljs-keyword">if</span> (map.get(<span class="hljs-string">&quot;trade_state&quot;</span>).equals(<span class="hljs-string">&quot;SUCCESS&quot;</span>))&#123;<br>        <span class="hljs-comment">// 向表里面添加记录，更支付状态</span><br>        payLogService.updataOrderStatus(map);<br>        <span class="hljs-keyword">return</span> R.ok().message(<span class="hljs-string">&quot;支付成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> R.ok().message(<span class="hljs-string">&quot;支付中&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="2、编写service，更新订单状态"><a href="#2、编写service，更新订单状态" class="headerlink" title="2、编写service，更新订单状态"></a>2、编写service，更新订单状态</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 向表里面添加记录，更支付状态</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updataOrderStatus</span><span class="hljs-params">(Map&lt;String,String&gt; map)</span> </span>&#123;<br>    <span class="hljs-comment">// 获取订单号id</span><br>    String orderNo = map.get(<span class="hljs-string">&quot;out_trade_no&quot;</span>);<br><br>    <span class="hljs-comment">// 根据订单号，查询订单信息</span><br>    QueryWrapper&lt;Order&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    wrapper.eq(<span class="hljs-string">&quot;order_no&quot;</span>,orderNo);<br>    Order order = orderService.getOne(wrapper);<br><br>    <span class="hljs-comment">// 判断是否已支付</span><br>    <span class="hljs-keyword">if</span> (order.getStatus().intValue() == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 如果没有支付,则设置支付状态</span><br>    order.setStatus(<span class="hljs-number">1</span>);<br>    orderService.updateById(order);<br><br>    <span class="hljs-comment">//记录支付日志</span><br>    PayLog payLog=<span class="hljs-keyword">new</span> PayLog();<br>    payLog.setOrderNo(order.getOrderNo());          <span class="hljs-comment">// 支付订单号</span><br>    payLog.setPayTime(<span class="hljs-keyword">new</span> Date());                  <span class="hljs-comment">// 支付时间</span><br>    payLog.setPayType(<span class="hljs-number">1</span>);                           <span class="hljs-comment">// 支付类型 1微信</span><br>    payLog.setTotalFee(order.getTotalFee());        <span class="hljs-comment">// 总金额(分)</span><br>    payLog.setTradeState(map.get(<span class="hljs-string">&quot;trade_state&quot;</span>));   <span class="hljs-comment">// 支付状态</span><br>    payLog.setTransactionId(map.get(<span class="hljs-string">&quot;transaction_id&quot;</span>)); <span class="hljs-comment">// 流水号</span><br>    payLog.setAttr(JSONObject.toJSONString(map));   <span class="hljs-comment">// 将其他信息加入以json的格式加入到数据库</span><br>    baseMapper.insert(payLog);<span class="hljs-comment">//插入到支付日志表</span><br><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="生成微信支付二维码"><a href="#生成微信支付二维码" class="headerlink" title="生成微信支付二维码"></a>生成微信支付二维码</h2><p>（1）页面部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>   &lt;div class=&quot;cart py-container&quot;&gt;<br>     &lt;!--主内容--&gt;<br>     &lt;div class=&quot;checkout py-container  pay&quot;&gt;<br>       &lt;div class=&quot;checkout-tit&quot;&gt;<br>         &lt;h4 class=&quot;fl tit-txt&quot;&gt;&lt;span class=&quot;success-icon&quot;&gt;&lt;/span&gt;&lt;span class=&quot;success-info&quot;&gt;订单提交成功，请您及时付款！订单号：&#123;&#123;payObj.out_trade_no&#125;&#125;&lt;/span&gt;<br>         &lt;/h4&gt;<br>         &lt;span class=&quot;fr&quot;&gt;&lt;em class=&quot;sui-lead&quot;&gt;应付金额：&lt;/em&gt;&lt;em class=&quot;orange money&quot;&gt;￥&#123;&#123;payObj.total_fee&#125;&#125;&lt;/em&gt;&lt;/span&gt;<br>         &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;<br>       &lt;/div&gt;<br>       &lt;div class=&quot;checkout-steps&quot;&gt;<br>         &lt;div class=&quot;fl weixin&quot;&gt;微信支付&lt;/div&gt;<br>         &lt;div class=&quot;fl sao&quot;&gt;<br>           &lt;p class=&quot;red&quot;&gt;请使用微信扫一扫。&lt;/p&gt;<br>           &lt;div class=&quot;fl code&quot;&gt;<br>             &lt;!-- &lt;img id=&quot;qrious&quot; src=&quot;~/assets/img/erweima.png&quot; alt=&quot;&quot;&gt; --&gt;<br>             &lt;!-- &lt;qriously value=&quot;weixin://wxpay/bizpayurl?pr=R7tnDpZ&quot; :size=&quot;338&quot;/&gt; --&gt;<br>             &lt;qriously :value=&quot;payObj.code_url&quot; :size=&quot;338&quot;/&gt;<br>             &lt;div class=&quot;saosao&quot;&gt;<br>               &lt;p&gt;请使用微信扫一扫&lt;/p&gt;<br>               &lt;p&gt;扫描二维码支付&lt;/p&gt;<br>             &lt;/div&gt;<br>           &lt;/div&gt;<br>         &lt;/div&gt;<br>         &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;<br>         &lt;!-- &lt;p&gt;&lt;a href=&quot;pay.html&quot; target=&quot;_blank&quot;&gt;&gt; 其他支付方式&lt;/a&gt;&lt;/p&gt; --&gt;<br>       &lt;/div&gt;<br>     &lt;/div&gt;<br>   &lt;/div&gt;<br> &lt;/template&gt;<br></code></pre></td></tr></table></figure>



<p>（2）调用部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>    import orderApi from &quot;@/api/order&quot;<br>export default &#123;<br>    // 生成支付二维码<br>    asyncData(&#123;params,error&#125;)&#123;<br>        return orderApi.createNative(params.pid)<br>           .then(response =&gt;&#123;<br>               return&#123;<br>                   payObj: response.data.data<br>               &#125;<br>           &#125;)<br>    &#125;,<br>    data()&#123;<br>        return&#123;<br>            time1:&#x27;&#x27;<br>        &#125;<br>    &#125;,<br>    // 页面渲染之后执行<br>    mounted()&#123;<br>     //在页面渲染之后执行<br>     //每隔三秒，去查询一次支付状态<br>     this.timer1 = setInterval(() =&gt; &#123;<br>       this.queryPayStatus(this.payObj.out_trade_no)<br>     &#125;, 3000);<br><br>    &#125;,<br>    methods:&#123;<br>        // 查询订单状态<br>        queryPayStatus(out_trade_no)&#123;<br>            orderApi.getPayStatus(out_trade_no)<br>               .then(response =&gt;&#123;<br>                       if (response.data.success) &#123;<br>                           //如果支付成功，清除定时器<br>                           clearInterval(this.timer1)<br>                           this.$message(&#123;<br>                               type: &#x27;success&#x27;,<br>                               message: &#x27;支付成功!&#x27;<br>                            &#125;)<br>                           //跳转到课程详情页面观看视频<br>                           this.$router.push(&#123;path: &#x27;/course/&#x27; + this.payObj.course_id&#125;)<br>                   &#125;<br>               &#125;)<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>项目|谷粒学院|笔记</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>day16-数据分析_统计分析</title>
    <url>/myBlog/day16-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90_%E7%BB%9F%E8%AE%A1%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="day16-数据分析-统计分析"><a href="#day16-数据分析-统计分析" class="headerlink" title="day16-数据分析_统计分析"></a>day16-数据分析_统计分析</h1><h1 id="课程详情页显示效果完善"><a href="#课程详情页显示效果完善" class="headerlink" title="课程详情页显示效果完善"></a>课程详情页显示效果完善</h1><h2 id="修改课程详情接口"><a href="#修改课程详情接口" class="headerlink" title="修改课程详情接口"></a>修改课程详情接口</h2><h3 id="1、在service-order模块添加接口"><a href="#1、在service-order模块添加接口" class="headerlink" title="1、在service_order模块添加接口"></a>1、在service_order模块添加接口</h3><p>根据用户id和课程id查询订单信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据课程id和用户id查询订单支付状态</span><br><span class="hljs-meta">@GetMapping(&quot;isBuyCourse/&#123;courseId&#125;/&#123;memberId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isBuyCourse</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String courseId,<span class="hljs-meta">@PathVariable</span> String memberId)</span></span>&#123;<br>    QueryWrapper&lt;Order&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    wrapper.eq(<span class="hljs-string">&quot;course_id&quot;</span>,courseId);<br>    wrapper.eq(<span class="hljs-string">&quot;member_id&quot;</span>,memberId);<br>    wrapper.eq(<span class="hljs-string">&quot;status&quot;</span>,<span class="hljs-number">1</span>);     <span class="hljs-comment">// 1.已支付</span><br><br>    <span class="hljs-keyword">int</span> count = orderService.count(wrapper);<br>    <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// 说明已经支付</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 否则未支付，返回false</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="2、在service-edu模块课程详情接口远程调用"><a href="#2、在service-edu模块课程详情接口远程调用" class="headerlink" title="2、在service_edu模块课程详情接口远程调用"></a><strong>2、在service_edu模块课程详情接口远程调用</strong></h3><p>（1）创建OrderClient接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@FeignClient(name = &quot;service-order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OrderClient</span> </span>&#123;<br><br>    <span class="hljs-comment">// 根据课程id和用户id查询订单支付状态</span><br>    <span class="hljs-meta">@GetMapping(&quot;/eduorder/order/isBuyCourse/&#123;courseId&#125;/&#123;memberId&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isBuyCourse</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;courseId&quot;)</span> String courseId, <span class="hljs-meta">@PathVariable(&quot;memberId&quot;)</span> String memberId)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>（2）在课程详情接口调用com.atguigu.eduservice.controller.front</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2.课程详情的方法</span><br><span class="hljs-meta">@GetMapping(&quot;getFrontCourseInfo/&#123;courseId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">getFrontCourseInfo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String courseId, HttpServletRequest request)</span></span>&#123;<br><br>    <span class="hljs-comment">// 根据课程id，编写SQL语句查询课程信息</span><br>    CourseWebVo courseWebVo = courseService.getBaseCourseInfo(courseId);<br>    <span class="hljs-comment">// 根据课程id，查询章节和小节</span><br>    List&lt;ChapterVo&gt; chapterVideoList = chapterService.getAllChapterVideo(courseId);<br><br>    <span class="hljs-comment">// 根据课程id和用户id查询当前课程是否已经支付过了</span><br>    String memberId = JwtUtils.getMemberIdByJwtToken(request);<br>    <span class="hljs-comment">// 判断是否已经登录</span><br>    <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(memberId))&#123;<br>        <span class="hljs-keyword">boolean</span> buyCourse = orderClient.isBuyCourse(courseId, memberId);<br>        <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;courseWebVo&quot;</span>,courseWebVo).data(<span class="hljs-string">&quot;chapterVideoList&quot;</span>,chapterVideoList).data(<span class="hljs-string">&quot;isBuy&quot;</span>,buyCourse);<br>    &#125;<br>    <span class="hljs-keyword">return</span> R.ok().code(<span class="hljs-number">28004</span>).message(<span class="hljs-string">&quot;请先登录&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="修改课程详情页面"><a href="#修改课程详情页面" class="headerlink" title="修改课程详情页面"></a>修改课程详情页面</h2><p>1、页面内容修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;section class=&quot;c-attr-mt&quot; v-if=&quot;isBuy || Number(courseWebVo.price) === 0&quot;&gt;<br>  &lt;a href=&quot;#&quot; title=&quot;立即观看&quot; class=&quot;comm-btn c-btn-3&quot; &gt;立即观看&lt;/a&gt;<br>&lt;/section&gt;<br>&lt;section class=&quot;c-attr-mt&quot; v-else&gt;<br>  &lt;a href=&quot;#&quot; title=&quot;立即购买&quot; class=&quot;comm-btn c-btn-3&quot; @click=&quot;createOrder()&quot;&gt;立即购买&lt;/a&gt;<br>&lt;/section&gt;<br></code></pre></td></tr></table></figure>

<p>2、调用方法修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue"> &lt;script&gt;<br>import course from &quot;@/api/course&quot;<br>import order from &quot;@/api/order&quot;<br> export default &#123;<br><br>   asyncData(&#123; params, error  &#125;)&#123;<br>     return &#123;courseId : params.id&#125;<br>   &#125;,<br>   data()&#123;<br>     return&#123;<br>          courseWebVo: &#123;&#125;,<br>          chapterVideoList: [],<br>          isBuy: false,<br>     &#125;<br>   &#125;,<br>   created()&#123;<br>    this.initCourseInfo()<br>   &#125;,<br>   methods:&#123;<br>     initCourseInfo()&#123;<br>      course.getCourseInfo(this.courseId)<br>        .then(response =&gt;&#123;<br>            this.courseWebVo = response.data.data.courseWebVo,<br>            this.chapterVideoList = response.data.data.chapterVideoList,<br>            this.isBuy=response.data.data.isBuy<br>        &#125;)<br>     &#125;,<br>      // 创建订单<br>      createOrder()&#123;<br>        order.createOrder(this.courseId)<br>          .then(response =&gt;&#123;<br>            // 获取返回的订单号<br>            // 将订单号放在路径上跳转订单显示页面<br>            this.$router.push(&#123;path:&#x27;/order/&#x27;+response.data.data.orderId &#125;)<br>          &#125;)<br>      &#125;<br>   &#125;<br>   <br> &#125;;<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>



<h1 id="数据分析-生成统计数据接口"><a href="#数据分析-生成统计数据接口" class="headerlink" title="数据分析-生成统计数据接口"></a>数据分析-生成统计数据接口</h1><h2 id="一、数据库设计"><a href="#一、数据库设计" class="headerlink" title="一、数据库设计"></a>一、数据库设计</h2><p>1、数据库</p>
<p>guli_statistics</p>
<p>2、数据表</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">guli_statistics.<span class="hljs-keyword">sql</span><br></code></pre></td></tr></table></figure>

<h2 id="二、创建微服务"><a href="#二、创建微服务" class="headerlink" title="二、创建微服务"></a><strong>二、创建微服务</strong></h2><h3 id="1、在service模块下创建子模块service-statistics"><a href="#1、在service模块下创建子模块service-statistics" class="headerlink" title="1、在service模块下创建子模块service_statistics"></a>1、在service模块下创建子模块service_statistics</h3><h3 id="2、application-properties"><a href="#2、application-properties" class="headerlink" title="2、application.properties"></a><strong>2</strong>、application.properties</h3><p>resources目录下创建文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 服务端口</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8008</span><br><span class="hljs-comment"># 服务名</span><br><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">service-statistics</span><br><span class="hljs-comment"># mysql数据库连接</span><br><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/guli?serverTimezone=GMT%2B8</span><br><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">root</span><br><span class="hljs-comment">#返回json的全局时间格式</span><br><span class="hljs-meta">spring.jackson.date-format</span>=<span class="hljs-string">yyyy-MM-dd HH:mm:ss</span><br><span class="hljs-meta">spring.jackson.time-zone</span>=<span class="hljs-string">GMT+8</span><br><span class="hljs-comment">#配置mapper xml文件的路径</span><br><span class="hljs-meta">mybatis-plus.mapper-locations</span>=<span class="hljs-string">classpath:com/atguigu/staservice/mapper/xml/*.xml</span><br><span class="hljs-comment">#mybatis日志</span><br><span class="hljs-meta">mybatis-plus.configuration.log-impl</span>=<span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br><span class="hljs-comment"># nacos服务地址</span><br><span class="hljs-meta">spring.cloud.nacos.discovery.server-addr</span>=<span class="hljs-string">127.0.0.1:8848</span><br></code></pre></td></tr></table></figure>

<h3 id="3、MP代码生成器生成代码"><a href="#3、MP代码生成器生成代码" class="headerlink" title="3、MP代码生成器生成代码"></a>3、MP代码生成器生成代码</h3><h3 id="4、创建SpringBoot启动类"><a href="#4、创建SpringBoot启动类" class="headerlink" title="4、创建SpringBoot启动类"></a>4、创建SpringBoot启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@ComponentScan(&#123;&quot;com.atguigu&quot;&#125;)</span><br><span class="hljs-meta">@MapperScan(&quot;com.atguigu.staservice.mapper&quot;)</span><br><span class="hljs-meta">@EnableDiscoveryClient</span>  <span class="hljs-comment">// 开启nacos</span><br><span class="hljs-meta">@EnableFeignClients</span> <span class="hljs-comment">// 开启远程调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(StaApplication.class,args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="三、实现服务调用"><a href="#三、实现服务调用" class="headerlink" title="三、实现服务调用"></a>三、实现服务调用</h2><h3 id="1、在service-ucenter模块创建接口，统计某一天的注册人数"><a href="#1、在service-ucenter模块创建接口，统计某一天的注册人数" class="headerlink" title="1、在service_ucenter模块创建接口，统计某一天的注册人数"></a>1、在service_ucenter模块创建接口，统计某一天的注册人数</h3><p><strong>controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据日期查询某一天的注册人数</span><br><span class="hljs-meta">@PostMapping(&quot;countRegister/&#123;day&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">countRegister</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String day)</span></span>&#123;<br>    Integer count = memberService.countRegister(day);<br>    <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;countRegister&quot;</span>,count);<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>service</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据日期查询某一天的注册人数</span><br><span class="hljs-function">Integer <span class="hljs-title">countRegister</span><span class="hljs-params">(String day)</span></span>;<br></code></pre></td></tr></table></figure>

<p><strong>serviceImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据日期查询某一天的注册人数</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">countRegister</span><span class="hljs-params">(String day)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> baseMapper.countRegister(day);<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>mapper</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UcenterMemberMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">UcenterMember</span>&gt; </span>&#123;<br>    <span class="hljs-comment">// 查询某一天的注册人数，如果是多个参数，需要用@Param(&quot;day&quot;)</span><br>    <span class="hljs-function">Integer <span class="hljs-title">countRegister</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;day&quot;)</span> String day)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;countRegister&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;</span><br>    SELECT<br>      COUNT(*)<br>    FROM<br>      ucenter_member uc<br>    WHERE DATE(uc.`gmt_create`) = #&#123;day&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="2、在service-statistics模块创建远程调用接口"><a href="#2、在service-statistics模块创建远程调用接口" class="headerlink" title="2、在service_statistics模块创建远程调用接口"></a>2、在service_statistics模块创建远程调用接口</h3><p>创建client包和UcenterClient接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@FeignClient(name = &quot;service-ucenter&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UcenterClient</span> </span>&#123;<br>    <span class="hljs-comment">// 根据日期查询某一天的注册人数</span><br>    <span class="hljs-meta">@PostMapping(&quot;/educenter/member/countRegister/&#123;day&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">countRegister</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;day&quot;)</span> String day)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="3、在service-statistics模块调用微服务"><a href="#3、在service-statistics模块调用微服务" class="headerlink" title="3、在service_statistics模块调用微服务"></a>3、在service_statistics模块调用微服务</h3><p><strong>controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/staservice/sta&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StatisticsDailyController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StatisticsDailyService dailyService;<br><br>    <span class="hljs-comment">// 查询某一天的注册人数，并加入到数据库</span><br>    <span class="hljs-meta">@PostMapping(&quot;registerCount/&#123;day&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">registerCount</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String day)</span></span>&#123;<br>        dailyService.registerCountDay(day);<br>        <span class="hljs-keyword">return</span> R.ok();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>service</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StatisticsDailyServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceImpl</span>&lt;<span class="hljs-title">StatisticsDailyMapper</span>, <span class="hljs-title">StatisticsDaily</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">StatisticsDailyService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UcenterClient ucenterClient;<br><br>    <span class="hljs-comment">// 查询某一天的注册人数，并加入到数据库</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerCountDay</span><span class="hljs-params">(String day)</span> </span>&#123;<br>        <span class="hljs-comment">// 添加记录之前先删除相同日期的</span><br>        QueryWrapper&lt;StatisticsDaily&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        wrapper.eq(<span class="hljs-string">&quot;date_calculated&quot;</span>,day);<br>        baseMapper.delete(wrapper);<br><br>        <span class="hljs-comment">// 调用远程方法，查询数据库</span><br>        R registerR = ucenterClient.countRegister(day);<br><br>        <span class="hljs-comment">// data中取出人数</span><br>        Integer countRegister = (Integer) registerR.getData().get(<span class="hljs-string">&quot;countRegister&quot;</span>);<br><br>        <span class="hljs-comment">// 将数据加入到数据库</span><br>        StatisticsDaily daily = <span class="hljs-keyword">new</span> StatisticsDaily();<br>        daily.setRegisterNum(countRegister);<br>        daily.setDateCalculated(day);<br>        daily.setLoginNum(RandomUtils.nextInt(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>));<br>        daily.setVideoViewNum(RandomUtils.nextInt(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>));<br>        daily.setCourseNum(RandomUtils.nextInt(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>));<br><br>        baseMapper.insert(daily);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="统计分析-生成统计数据前端整合"><a href="#统计分析-生成统计数据前端整合" class="headerlink" title="统计分析-生成统计数据前端整合"></a>统计分析-生成统计数据前端整合</h1><h2 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/sta&#x27;</span>,<br>    <span class="hljs-attr">component</span>: Layout,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/sta/create&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;统计分析&#x27;</span>,<br>    <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;统计分析&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;example&#x27;</span> &#125;,<br>    <span class="hljs-attr">children</span>: [<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;create&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;生成数据&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/sta/create&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;生成数据&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;table&#x27;</span> &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;show&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;显示数据&#x27;</span>,<br>        <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/sta/show&#x27;</span>),<br>        <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;显示数据&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;tree&#x27;</span> &#125;<br>      &#125;<br>    ]<br>  &#125;,<br><br></code></pre></td></tr></table></figure>

<h2 id="创建api"><a href="#创建api" class="headerlink" title="创建api"></a>创建api</h2><p>src/api/sta.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-comment">// 生成数据</span><br>    <span class="hljs-function"><span class="hljs-title">createStaDate</span>(<span class="hljs-params">day</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> request(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">`/staservice/sta/registerCount/<span class="hljs-subst">$&#123;day&#125;</span>`</span>,<br>            <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span><br>          &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a><strong>创建组件</strong></h2><p>src/views/sta/create.vue</p>
<p>模板部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;!--表单--&gt;<br>    &lt;el-form :inline=&quot;true&quot; class=&quot;demo-form-inline&quot;&gt;<br>      &lt;el-form-item label=&quot;日期&quot;&gt;<br>        &lt;el-date-picker<br>          v-model=&quot;day&quot;<br>          type=&quot;date&quot;<br>          placeholder=&quot;选择要统计的日期&quot;<br>          value-format=&quot;yyyy-MM-dd&quot; /&gt;<br>      &lt;/el-form-item&gt;<br>      &lt;el-button<br>        :disabled=&quot;btnDisabled&quot;<br>        type=&quot;primary&quot;<br>        @click=&quot;create()&quot;&gt;生成&lt;/el-button&gt;<br>    &lt;/el-form&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>

<p>script</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>import sta from &quot;@/api/sta&quot;<br>export default &#123;<br>    data()&#123;<br>        return&#123;<br>            day:&#x27;&#x27;,<br>            btnDisabled: false<br>        &#125;<br>    &#125;,<br>    created()&#123;<br><br>    &#125;,<br>    methods:&#123;<br>        create()&#123;<br>            sta.createStaDate(this.day)<br>                .then(response =&gt;&#123;<br>                    // 提示信息<br>                    this.$message(&#123;<br>                            type: &#x27;success&#x27;,<br>                            message: &#x27;生成数据成功!&#x27;<br>                        &#125;);<br>                    // 跳转到生成页面<br>                    this.$router.push(&#123;path:&#x27;/sta/show&#x27;&#125;)<br>                &#125;)<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h1 id="添加定时任务"><a href="#添加定时任务" class="headerlink" title="添加定时任务"></a>添加定时任务</h1><h2 id="1、创建定时任务类，使用cron表达式"><a href="#1、创建定时任务类，使用cron表达式" class="headerlink" title="1、创建定时任务类，使用cron表达式"></a>1、创建定时任务类，使用cron表达式</h2><p><strong>复制日期工具类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.staservice.utils;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Calendar;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 日期操作工具类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> qy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateUtil</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String dateFormat = <span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 格式化日期</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> date</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">formatDate</span><span class="hljs-params">(Date date)</span> </span>&#123;<br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(dateFormat);<br>        <span class="hljs-keyword">return</span> sdf.format(date);<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在日期date上增加amount天 。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> date   处理的日期，非null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> amount 要加的天数，可能为负数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Date <span class="hljs-title">addDays</span><span class="hljs-params">(Date date, <span class="hljs-keyword">int</span> amount)</span> </span>&#123;<br>        Calendar now =Calendar.getInstance();<br>        now.setTime(date);<br>        now.set(Calendar.DATE,now.get(Calendar.DATE)+amount);<br>        <span class="hljs-keyword">return</span> now.getTime();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(DateUtil.formatDate(<span class="hljs-keyword">new</span> Date()));<br>        System.out.println(DateUtil.formatDate(DateUtil.addDays(<span class="hljs-keyword">new</span> Date(), -<span class="hljs-number">1</span>)));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="2、在启动类上添加注解"><a href="#2、在启动类上添加注解" class="headerlink" title="2、在启动类上添加注解"></a>2、在启动类上添加注解</h2><figure class="highlight aspectj"><table><tr><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@EnableScheduling</span>   <span class="hljs-comment">// 开启定时任务</span><br></code></pre></td></tr></table></figure>

<h2 id="3-编写方法"><a href="#3-编写方法" class="headerlink" title="3.编写方法"></a>3.编写方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScheduledTask</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StatisticsDailyService dailyService;<br><br>    <span class="hljs-comment">// 只能是6位，默认年为当前的年</span><br>    <span class="hljs-comment">// 秒 分 时 日 月 周 年</span><br>    <span class="hljs-meta">@Scheduled(cron = &quot;0 0 1 * * ?&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">task2</span><span class="hljs-params">()</span></span>&#123;<br>        dailyService.registerCountDay(DateUtil.formatDate(DateUtil.addDays(<span class="hljs-keyword">new</span> Date(), -<span class="hljs-number">1</span>)));<br>    &#125;<br><br><span class="hljs-comment">/*    // 每隔5秒执行一次</span><br><span class="hljs-comment">    @Scheduled(cron = &quot;0/5 * * * * ?&quot;)</span><br><span class="hljs-comment">    public void task1() &#123;</span><br><span class="hljs-comment">        System.out.println(&quot;*********++++++++++++*****执行了&quot;);</span><br><span class="hljs-comment">    &#125;*/</span><br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>在线生成工具</p>
<p><a href="https://www.pppet.net/">https://www.pppet.net/</a></p>
<h1 id="Echarts"><a href="#Echarts" class="headerlink" title="Echarts"></a>Echarts</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p><a href="https://echarts.apache.org/zh/index.html">https://echarts.apache.org/zh/index.html</a></p>
<h2 id="2、基本使用"><a href="#2、基本使用" class="headerlink" title="2、基本使用"></a>2、基本使用</h2><p>入门参考：官网-&gt;文档-&gt;教程-&gt;5分钟上手ECharts</p>
<p>（1）创建html页面：柱图.html</p>
<p>（2）引入ECharts</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 引入 ECharts 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>（3）定义图表区域</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 为ECharts准备一个具备大小（宽高）的Dom --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 600px;height:400px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br></code></pre></td></tr></table></figure>

<p>（4）渲染图表</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// 基于准备好的dom，初始化echarts实例</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> myChart = echarts.init(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;main&#x27;</span>));</span><br><span class="javascript">        <span class="hljs-comment">// 指定图表的配置项和数据</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> option = &#123;</span><br><span class="javascript">            <span class="hljs-attr">title</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;ECharts 入门示例&#x27;</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">tooltip</span>: &#123;&#125;,</span><br><span class="javascript">            <span class="hljs-attr">legend</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">data</span>:[<span class="hljs-string">&#x27;销量&#x27;</span>]</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">xAxis</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">data</span>: [<span class="hljs-string">&quot;衬衫&quot;</span>,<span class="hljs-string">&quot;羊毛衫&quot;</span>,<span class="hljs-string">&quot;雪纺衫&quot;</span>,<span class="hljs-string">&quot;裤子&quot;</span>,<span class="hljs-string">&quot;高跟鞋&quot;</span>,<span class="hljs-string">&quot;袜子&quot;</span>]</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">yAxis</span>: &#123;&#125;,</span><br><span class="javascript">            <span class="hljs-attr">series</span>: [&#123;</span><br><span class="javascript">                <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;销量&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">data</span>: [<span class="hljs-number">5</span>, <span class="hljs-number">20</span>, <span class="hljs-number">36</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>]</span><br><span class="javascript">            &#125;]</span><br><span class="javascript">        &#125;;</span><br><span class="javascript">        <span class="hljs-comment">// 使用刚指定的配置项和数据显示图表。</span></span><br><span class="javascript">        myChart.setOption(option);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="3、折线图"><a href="#3、折线图" class="headerlink" title="3、折线图"></a>3、折线图</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入 ECharts 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 600px;height:400px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> myChart = echarts.init(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;main&#x27;</span>));</span><br><span class="javascript">        <span class="hljs-keyword">var</span> option = &#123;</span><br><span class="javascript">            <span class="hljs-comment">//x轴是类目轴（离散数据）,必须通过data设置类目数据</span></span><br><span class="javascript">            <span class="hljs-attr">xAxis</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;Mon&#x27;</span>, <span class="hljs-string">&#x27;Tue&#x27;</span>, <span class="hljs-string">&#x27;Wed&#x27;</span>, <span class="hljs-string">&#x27;Thu&#x27;</span>, <span class="hljs-string">&#x27;Fri&#x27;</span>, <span class="hljs-string">&#x27;Sat&#x27;</span>, <span class="hljs-string">&#x27;Sun&#x27;</span>]</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-comment">//y轴是数据轴（连续数据）</span></span><br><span class="javascript">            <span class="hljs-attr">yAxis</span>: &#123;</span><br><span class="javascript">                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;value&#x27;</span></span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-comment">//系列列表。每个系列通过 type 决定自己的图表类型</span></span><br><span class="javascript">            <span class="hljs-attr">series</span>: [&#123;</span><br><span class="javascript">                <span class="hljs-comment">//系列中的数据内容数组</span></span><br><span class="javascript">                <span class="hljs-attr">data</span>: [<span class="hljs-number">820</span>, <span class="hljs-number">932</span>, <span class="hljs-number">901</span>, <span class="hljs-number">934</span>, <span class="hljs-number">1290</span>, <span class="hljs-number">1330</span>, <span class="hljs-number">1320</span>],</span><br><span class="javascript">                <span class="hljs-comment">//折线图</span></span><br><span class="javascript">                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span></span><br><span class="javascript">            &#125;]</span><br><span class="javascript">        &#125;;</span><br><span class="javascript">        myChart.setOption(option);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>





<h1 id="统计分析-图表显示-页面整合"><a href="#统计分析-图表显示-页面整合" class="headerlink" title="统计分析-图表显示-页面整合"></a>统计分析-图表显示-页面整合</h1><h2 id="1、安装ECharts"><a href="#1、安装ECharts" class="headerlink" title="1、安装ECharts"></a>1、安装ECharts</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm install --save echarts@4.1.0<br><span class="hljs-comment"># 如果不行就用cnpm </span><br></code></pre></td></tr></table></figure>



<h2 id="3、创建组件"><a href="#3、创建组件" class="headerlink" title="3、创建组件"></a>3、创建组件</h2><p>src/views/sta/show.vue</p>
<p><strong>模板</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>   &lt;div class=&quot;app-container&quot;&gt;<br>     &lt;!--表单--&gt;<br>     &lt;el-form :inline=&quot;true&quot; class=&quot;demo-form-inline&quot;&gt;<br>       &lt;el-form-item&gt;<br>         &lt;el-select v-model=&quot;searchObj.type&quot; clearable placeholder=&quot;请选择&quot;&gt;<br>           &lt;el-option label=&quot;学员登录数统计&quot; value=&quot;login_num&quot;/&gt;<br>           &lt;el-option label=&quot;学员注册数统计&quot; value=&quot;register_num&quot;/&gt;<br>           &lt;el-option label=&quot;课程播放数统计&quot; value=&quot;video_view_num&quot;/&gt;<br>           &lt;el-option label=&quot;每日课程数统计&quot; value=&quot;course_num&quot;/&gt;<br>         &lt;/el-select&gt;<br>       &lt;/el-form-item&gt;<br>       &lt;el-form-item&gt;<br>         &lt;el-date-picker<br>           v-model=&quot;searchObj.begin&quot;<br>           type=&quot;date&quot;<br>           placeholder=&quot;选择开始日期&quot;<br>           value-format=&quot;yyyy-MM-dd&quot; /&gt;<br>       &lt;/el-form-item&gt;<br>       &lt;el-form-item&gt;<br>         &lt;el-date-picker<br>           v-model=&quot;searchObj.end&quot;<br>           type=&quot;date&quot;<br>           placeholder=&quot;选择截止日期&quot;<br>           value-format=&quot;yyyy-MM-dd&quot; /&gt;<br>       &lt;/el-form-item&gt;<br>       &lt;el-button<br>         :disabled=&quot;btnDisabled&quot;<br>         type=&quot;primary&quot;<br>         icon=&quot;el-icon-search&quot;<br>         @click=&quot;showChart()&quot;&gt;查询&lt;/el-button&gt;<br>     &lt;/el-form&gt;<br>     &lt;div class=&quot;chart-container&quot;&gt;<br>       &lt;div id=&quot;chart&quot; class=&quot;chart&quot; style=&quot;height:500px;width:100%&quot; /&gt;<br>     &lt;/div&gt;<br>   &lt;/div&gt;<br> &lt;/template&gt;<br></code></pre></td></tr></table></figure>

<p><strong>js：暂时显示临时数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>import echarts from &#x27;echarts&#x27;<br> export default &#123;<br>     data()&#123;<br>         return&#123;<br>             searchObj: &#123;<br>                type: &#x27;&#x27;,<br>                begin: &#x27;&#x27;,<br>                end: &#x27;&#x27;<br>            &#125;,<br>            btnDisabled: false,<br>            chart: null,<br>            title: &#x27;&#x27;,<br>            xData: [],<br>            yData: []<br>         &#125;<br>     &#125;,<br>     created()&#123;<br><br>     &#125;,<br>     methods:&#123;<br>        showChart()&#123;<br>            // 基于准备好的dom，初始化echarts实例<br>            this.chart = echarts.init(document.getElementById(&#x27;chart&#x27;))<br>            // console.log(this.chart)<br>            // 指定图表的配置项和数据<br>            var option = &#123;<br>                // x轴是类目轴（离散数据）,必须通过data设置类目数据<br>                xAxis: &#123;<br>                type: &#x27;category&#x27;,<br>                data: [&#x27;Mon&#x27;, &#x27;Tue&#x27;, &#x27;Wed&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;, &#x27;Sun&#x27;]<br>                &#125;,<br>                // y轴是数据轴（连续数据）<br>                yAxis: &#123;<br>                type: &#x27;value&#x27;<br>                &#125;,<br>                // 系列列表。每个系列通过 type 决定自己的图表类型<br>                series: [&#123;<br>                // 系列中的数据内容数组<br>                data: [820, 932, 901, 934, 1290, 1330, 1320],<br>                // 折线图<br>                type: &#x27;line&#x27;<br>        <br>                &#125;]<br>            &#125;<br>            this.chart.setOption(option)<br>        &#125;,<br><br><br>     &#125;<br> &#125;<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>



<h1 id="统计分析-图标显示接口"><a href="#统计分析-图标显示接口" class="headerlink" title="统计分析-图标显示接口"></a>统计分析-图标显示接口</h1><h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 图表显示，返回两部分数据，日期json数组 数量json数组</span><br><span class="hljs-meta">@PostMapping(&quot;showData/&#123;type&#125;/&#123;begin&#125;/&#123;end&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">showData</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String type,<span class="hljs-meta">@PathVariable</span> String begin,<span class="hljs-meta">@PathVariable</span> String end)</span></span>&#123;<br>    Map&lt;String,Object&gt; map = dailyService.getShowData(type,begin,end);<br>    <span class="hljs-keyword">return</span> R.ok().data(map);<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 图表显示，返回两部分数据，日期json数组 数量json数组</span><br><span class="hljs-function">Map&lt;String, Object&gt; <span class="hljs-title">getShowData</span><span class="hljs-params">(String type, String begin, String end)</span></span>;<br></code></pre></td></tr></table></figure>

<h2 id="serviceImpl"><a href="#serviceImpl" class="headerlink" title="serviceImpl"></a>serviceImpl</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 图表显示，返回两部分数据，日期json数组 数量json数组</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">getShowData</span><span class="hljs-params">(String type, String begin, String end)</span> </span>&#123;<br>    <span class="hljs-comment">// 先根据条件查询数据</span><br>    QueryWrapper&lt;StatisticsDaily&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    wrapper.between(<span class="hljs-string">&quot;date_calculated&quot;</span>,begin,end);<br>    <span class="hljs-comment">// 由于只需要某个字段的数据，为了更加精确，所以有select</span><br>    wrapper.select(<span class="hljs-string">&quot;date_calculated&quot;</span>,type);<br>    <span class="hljs-comment">// 查询</span><br>    List&lt;StatisticsDaily&gt; staList = baseMapper.selectList(wrapper);<br><br>    <span class="hljs-comment">// 按照条件构造日期json数组和数量json数组</span><br>    List&lt;String&gt; date_calculatedList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    List&lt;Integer&gt; numDataList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; staList.size(); i++) &#123;<br>        StatisticsDaily daily = staList.get(i);<br>        <span class="hljs-comment">// 将时间添加到时间集合</span><br>        date_calculatedList.add(daily.getDateCalculated());<br><br>        <span class="hljs-comment">// 用switch判断选择的是哪个类型的数据</span><br>        <span class="hljs-keyword">switch</span> (type)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;login_num&quot;</span>:<br>                numDataList.add(daily.getLoginNum());<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;register_num&quot;</span>:<br>                numDataList.add(daily.getRegisterNum());<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;video_view_num&quot;</span>:<br>                numDataList.add(daily.getVideoViewNum());<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;course_num&quot;</span>:<br>                numDataList.add(daily.getCourseNum());<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 封装数据返回</span><br>    Map&lt;String, Object&gt; map  = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;date_calculatedList&quot;</span>,date_calculatedList);<br>    map.put(<span class="hljs-string">&quot;numDataList&quot;</span>,numDataList);<br><br>    <span class="hljs-keyword">return</span> map;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="统计分析-图表显示前端"><a href="#统计分析-图表显示前端" class="headerlink" title="统计分析-图表显示前端"></a>统计分析-图表显示前端</h1><p>api/sta.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 图表显示</span><br><span class="hljs-function"><span class="hljs-title">getDataShow</span>(<span class="hljs-params">searchObj</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">`/staservice/sta/showData/<span class="hljs-subst">$&#123;searchObj.type&#125;</span>/<span class="hljs-subst">$&#123;searchObj.begin&#125;</span>/<span class="hljs-subst">$&#123;searchObj.end&#125;</span>`</span>,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>      &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>

<p>methods</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">methods:&#123;<br>       showChart()&#123;<br>           staApi.getDataShow(this.searchObj)<br>               .then(response =&gt;&#123;<br>                   this.xData = response.data.date_calculatedList<br>                   this.yData = response.data.numDataList<br><br>                   // 调用方法<br>                   this.setChart()<br>               &#125;)<br>        &#125;,<br>       setChart()&#123;<br>           // 基于准备好的dom，初始化echarts实例<br>           this.chart = echarts.init(document.getElementById(&#x27;chart&#x27;))<br>           // console.log(this.chart)<br>           // 指定图表的配置项和数据<br>           var option = &#123;<br>               // x轴是类目轴（离散数据）,必须通过data设置类目数据<br>               xAxis: &#123;<br>               type: &#x27;category&#x27;,<br>               data: this.xData<br>               &#125;,<br>               // y轴是数据轴（连续数据）<br>               yAxis: &#123;<br>               type: &#x27;value&#x27;<br>               &#125;,<br>               // 系列列表。每个系列通过 type 决定自己的图表类型<br>               series: [&#123;<br>               // 系列中的数据内容数组<br>               data: this.yData,<br>               // 折线图<br>               type: &#x27;line&#x27;<br>       <br>               &#125;]<br>           &#125;<br>           this.chart.setOption(option)<br>       &#125;,<br><br></code></pre></td></tr></table></figure>

<h1 id="样式调整"><a href="#样式调整" class="headerlink" title="样式调整"></a>样式调整</h1><h2 id="1、显示标题"><a href="#1、显示标题" class="headerlink" title="1、显示标题"></a>1、显示标题</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">// 显示标题<br>title: &#123;<br>	text: &quot;数据统计&quot;<br>&#125;,<br></code></pre></td></tr></table></figure>

<h2 id="2、x坐标轴触发提示"><a href="#2、x坐标轴触发提示" class="headerlink" title="2、x坐标轴触发提示"></a>2、x坐标轴触发提示</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">// x坐标轴触发提示<br>tooltip: &#123;<br>	trigger: &#x27;axis&#x27;<br>&#125;,<br></code></pre></td></tr></table></figure>

<h2 id="3、区域缩放"><a href="#3、区域缩放" class="headerlink" title="3、区域缩放"></a>3、区域缩放</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">// 区域缩放<br>dataZoom: [&#123;<br>    show: true,<br>    height: 30,<br>    xAxisIndex: [<br>   	 0<br>    ],<br>    bottom: 30,<br>    start: 10,<br>    end: 80,<br>    handleIcon: &#x27;path://M306.1,413c0,2.2-1.8,4-4,4h-59.8c-2.2,0-4-1.8-4-4V200.8c0-2.2,1.8-4,4-4h59.8c2.2,0,4,1.8,4,4V413z&#x27;,<br>    handleSize: &#x27;110%&#x27;,<br>    handleStyle: &#123;<br>   	 color: &#x27;#d3dee5&#x27;<br>    &#125;,<br>    textStyle: &#123;<br>    	color: &#x27;#fff&#x27;<br>    &#125;,<br>    borderColor: &#x27;#90979c&#x27;<br>    &#125;,<br>    &#123;<br>        type: &#x27;inside&#x27;,<br>        show: true,<br>        height: 15,<br>        start: 1,<br>        end: 35<br>&#125;]<br></code></pre></td></tr></table></figure>



<h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
      <categories>
        <category>项目|谷粒学院|笔记</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>day17-canal_Gateway网关_权限管理</title>
    <url>/myBlog/day17-canal_Gateway%E7%BD%91%E5%85%B3_%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="day17-canal-Gateway网关-权限管理"><a href="#day17-canal-Gateway网关-权限管理" class="headerlink" title="day17-canal_Gateway网关_权限管理"></a>day17-canal_Gateway网关_权限管理</h1><h1 id="canal数据同步【TODO】"><a href="#canal数据同步【TODO】" class="headerlink" title="canal数据同步【TODO】"></a>canal数据同步【TODO】</h1><p>Linux中还没装数据库</p>
<h1 id="SpringCloud-Gateway网关"><a href="#SpringCloud-Gateway网关" class="headerlink" title="SpringCloud-Gateway网关"></a>SpringCloud-Gateway网关</h1><h2 id="创建api-gateway模块（网关服务）"><a href="#创建api-gateway模块（网关服务）" class="headerlink" title="创建api-gateway模块（网关服务）"></a>创建api-gateway模块（网关服务）</h2><p>1、在infrastructure模块下创建api_gateway模块</p>
<p>2、在pom.xml引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common_utils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--gson--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.code.gson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>gson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--服务调用--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>3、编写application.properties配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 服务端口</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8222</span><br><span class="hljs-comment"># 服务名</span><br><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">service-gateway</span><br><span class="hljs-comment"># nacos服务地址</span><br><span class="hljs-meta">spring.cloud.nacos.discovery.server-addr</span>=<span class="hljs-string">127.0.0.1:8848</span><br><span class="hljs-comment">#使用服务发现路由</span><br><span class="hljs-meta">spring.cloud.gateway.discovery.locator.enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-comment">#服务路由名小写</span><br><span class="hljs-comment">#spring.cloud.gateway.discovery.locator.lower-case-service-id=true</span><br><span class="hljs-comment">#设置路由id</span><br><span class="hljs-meta">spring.cloud.gateway.routes[0].id</span>=<span class="hljs-string">service-acl</span><br><span class="hljs-comment">#设置路由的uri</span><br><span class="hljs-meta">spring.cloud.gateway.routes[0].uri</span>=<span class="hljs-string">lb://service-acl</span><br><span class="hljs-comment">#设置路由断言,代理servicerId为auth-service的/auth/路径</span><br><span class="hljs-meta">spring.cloud.gateway.routes[0].predicates</span>= <span class="hljs-string">Path=/*/acl/**</span><br><span class="hljs-comment">#配置service-edu服务</span><br><span class="hljs-meta">spring.cloud.gateway.routes[1].id</span>=<span class="hljs-string">service-edu</span><br><span class="hljs-meta">spring.cloud.gateway.routes[1].uri</span>=<span class="hljs-string">lb://service-edu</span><br><span class="hljs-meta">spring.cloud.gateway.routes[1].predicates</span>= <span class="hljs-string">Path=/eduservice/**</span><br><span class="hljs-comment">#配置service-ucenter服务</span><br><span class="hljs-meta">spring.cloud.gateway.routes[2].id</span>=<span class="hljs-string">service-ucenter</span><br><span class="hljs-meta">spring.cloud.gateway.routes[2].uri</span>=<span class="hljs-string">lb://service-ucenter</span><br><span class="hljs-meta">spring.cloud.gateway.routes[2].predicates</span>= <span class="hljs-string">Path=/ucenterservice/**</span><br><span class="hljs-comment">#配置service-ucenter服务</span><br><span class="hljs-meta">spring.cloud.gateway.routes[3].id</span>=<span class="hljs-string">service-cms</span><br><span class="hljs-meta">spring.cloud.gateway.routes[3].uri</span>=<span class="hljs-string">lb://service-cms</span><br><span class="hljs-meta">spring.cloud.gateway.routes[3].predicates</span>= <span class="hljs-string">Path=/cmsservice/**</span><br></code></pre></td></tr></table></figure>

<p>4、编写启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApiGatewayApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(ApiGatewayApplication.class,args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="网关相关配置"><a href="#网关相关配置" class="headerlink" title="网关相关配置"></a>网关相关配置</h2><p><strong>1、网关解决跨域问题</strong></p>
<p><img src="/myBlog/day17-canal_Gateway%E7%BD%91%E5%85%B3_%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/image-20220105165534139.png" alt="image-20220105165534139"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CorsConfig</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CorsWebFilter <span class="hljs-title">corsFilter</span><span class="hljs-params">()</span> </span>&#123;<br>        CorsConfiguration config = <span class="hljs-keyword">new</span> CorsConfiguration();<br>        config.addAllowedMethod(<span class="hljs-string">&quot;*&quot;</span>);<br>        config.addAllowedOrigin(<span class="hljs-string">&quot;*&quot;</span>);<br>        config.addAllowedHeader(<span class="hljs-string">&quot;*&quot;</span>);<br>        UrlBasedCorsConfigurationSource source = <span class="hljs-keyword">new</span> UrlBasedCorsConfigurationSource(<span class="hljs-keyword">new</span> PathPatternParser());<br>        source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, config);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CorsWebFilter(source);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>2、全局Filter，统一处理会员登录与外部不允许访问的服务</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 全局Filter，统一处理会员登录与外部不允许访问的服务</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthGlobalFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GlobalFilter</span>, <span class="hljs-title">Ordered</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> AntPathMatcher antPathMatcher = <span class="hljs-keyword">new</span> AntPathMatcher();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;<br>        ServerHttpRequest request = exchange.getRequest();<br>        String path = request.getURI().getPath();<br>        <span class="hljs-comment">//谷粒学院api接口，校验用户必须登录</span><br>        <span class="hljs-keyword">if</span>(antPathMatcher.match(<span class="hljs-string">&quot;/api/**/auth/**&quot;</span>, path)) &#123;<br>            List&lt;String&gt; tokenList = request.getHeaders().get(<span class="hljs-string">&quot;token&quot;</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">null</span> == tokenList) &#123;<br>                ServerHttpResponse response = exchange.getResponse();<br>                <span class="hljs-keyword">return</span> out(response);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//                Boolean isCheck = JwtUtils.checkToken(tokenList.get(0));</span><br><span class="hljs-comment">//                if(!isCheck) &#123;</span><br>                ServerHttpResponse response = exchange.getResponse();<br>                <span class="hljs-keyword">return</span> out(response);<br><span class="hljs-comment">//                &#125;</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//内部服务接口，不允许外部访问</span><br>        <span class="hljs-keyword">if</span>(antPathMatcher.match(<span class="hljs-string">&quot;/**/inner/**&quot;</span>, path)) &#123;<br>            ServerHttpResponse response = exchange.getResponse();<br>            <span class="hljs-keyword">return</span> out(response);<br>        &#125;<br>        <span class="hljs-keyword">return</span> chain.filter(exchange);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Mono&lt;Void&gt; <span class="hljs-title">out</span><span class="hljs-params">(ServerHttpResponse response)</span> </span>&#123;<br>        JsonObject message = <span class="hljs-keyword">new</span> JsonObject();<br>        message.addProperty(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-keyword">false</span>);<br>        message.addProperty(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">28004</span>);<br>        message.addProperty(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;鉴权失败&quot;</span>);<br>        <span class="hljs-keyword">byte</span>[] bits = message.toString().getBytes(StandardCharsets.UTF_8);<br>        DataBuffer buffer = response.bufferFactory().wrap(bits);<br>        <span class="hljs-comment">//response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br>        <span class="hljs-comment">//指定编码，否则在浏览器中会中文乱码</span><br>        response.getHeaders().add(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>        <span class="hljs-keyword">return</span> response.writeWith(Mono.just(buffer));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<p><strong>3、自定义异常处理</strong></p>
<p>服务网关调用服务时可能会有一些异常或服务不可用，它返回错误信息不友好，需要我们覆盖处理</p>
<p>ErrorHandlerConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 全局Filter，统一处理会员登录与外部不允许访问的服务</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableConfigurationProperties(&#123;ServerProperties.class, ResourceProperties.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ErrorHandlerConfig</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ServerProperties serverProperties;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ApplicationContext applicationContext;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ResourceProperties resourceProperties;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;ViewResolver&gt; viewResolvers;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ServerCodecConfigurer serverCodecConfigurer;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ErrorHandlerConfig</span><span class="hljs-params">(ServerProperties serverProperties,</span></span><br><span class="hljs-params"><span class="hljs-function">                              ResourceProperties resourceProperties,</span></span><br><span class="hljs-params"><span class="hljs-function">                              ObjectProvider&lt;List&lt;ViewResolver&gt;&gt; viewResolversProvider,</span></span><br><span class="hljs-params"><span class="hljs-function">                              ServerCodecConfigurer serverCodecConfigurer,</span></span><br><span class="hljs-params"><span class="hljs-function">                              ApplicationContext applicationContext)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.serverProperties = serverProperties;<br>        <span class="hljs-keyword">this</span>.applicationContext = applicationContext;<br>        <span class="hljs-keyword">this</span>.resourceProperties = resourceProperties;<br>        <span class="hljs-keyword">this</span>.viewResolvers = viewResolversProvider.getIfAvailable(Collections::emptyList);<br>        <span class="hljs-keyword">this</span>.serverCodecConfigurer = serverCodecConfigurer;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ErrorWebExceptionHandler <span class="hljs-title">errorWebExceptionHandler</span><span class="hljs-params">(ErrorAttributes errorAttributes)</span> </span>&#123;<br>        JsonExceptionHandler exceptionHandler = <span class="hljs-keyword">new</span> JsonExceptionHandler(<br>                errorAttributes,<br>                <span class="hljs-keyword">this</span>.resourceProperties,<br>                <span class="hljs-keyword">this</span>.serverProperties.getError(),<br>                <span class="hljs-keyword">this</span>.applicationContext);<br>        exceptionHandler.setViewResolvers(<span class="hljs-keyword">this</span>.viewResolvers);<br>        exceptionHandler.setMessageWriters(<span class="hljs-keyword">this</span>.serverCodecConfigurer.getWriters());<br>        exceptionHandler.setMessageReaders(<span class="hljs-keyword">this</span>.serverCodecConfigurer.getReaders());<br>        <span class="hljs-keyword">return</span> exceptionHandler;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>JsonExceptionHandler</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义异常处理</span><br><span class="hljs-comment"> * &lt;p&gt;异常时用JSON代替HTML异常信息&lt;p&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonExceptionHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DefaultErrorWebExceptionHandler</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">JsonExceptionHandler</span><span class="hljs-params">(ErrorAttributes errorAttributes, ResourceProperties resourceProperties,</span></span><br><span class="hljs-params"><span class="hljs-function">                                ErrorProperties errorProperties, ApplicationContext applicationContext)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(errorAttributes, resourceProperties, errorProperties, applicationContext);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取异常属性</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Map&lt;String, Object&gt; <span class="hljs-title">getErrorAttributes</span><span class="hljs-params">(ServerRequest request, <span class="hljs-keyword">boolean</span> includeStackTrace)</span> </span>&#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-keyword">false</span>);<br>        map.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">20005</span>);<br>        map.put(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;网关失败&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定响应处理方法为JSON处理的方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> errorAttributes</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> RouterFunction&lt;ServerResponse&gt; <span class="hljs-title">getRoutingFunction</span><span class="hljs-params">(ErrorAttributes errorAttributes)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> RouterFunctions.route(RequestPredicates.all(), <span class="hljs-keyword">this</span>::renderErrorResponse);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据code获取对应的HttpStatus</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> errorAttributes</span><br><span class="hljs-comment">     */</span><br><span class="hljs-comment">//    @Override</span><br><span class="hljs-comment">//    protected HttpStatus getHttpStatus(Map&lt;String, Object&gt; errorAttributes) &#123;</span><br><span class="hljs-comment">//        return HttpStatus.OK;</span><br><span class="hljs-comment">//    &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="权限管理-表结构和关系"><a href="#权限管理-表结构和关系" class="headerlink" title="权限管理-表结构和关系"></a>权限管理-表结构和关系</h1><p>![07 权限管理需求](day17-canal_Gateway网关_权限管理/07 权限管理需求.png)</p>
<h1 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h1><p><strong>1、在service模块下创建子模块service-acl</strong></p>
<p><strong>2、在service_acl模块中引入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring_security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>3、创建权限管理相关的表</strong></p>
<p><img src="/myBlog/day17-canal_Gateway%E7%BD%91%E5%85%B3_%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/image-20220105205447389.png" alt="image-20220105205447389"></p>
<p><strong>4、复制权限管理接口代码</strong></p>
<p><strong>5、复制整合Spring Security代码</strong></p>
<p><strong>（1）在common模块下创建子模块spring_security</strong></p>
<p><strong>6、编写application.properties配置文件</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 服务端口</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8009</span><br><span class="hljs-comment"># 服务名</span><br><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">service-acl</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># mysql数据库连接</span><br><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/guli?serverTimezone=GMT%2B8</span><br><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">root</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#返回json的全局时间格式</span><br><span class="hljs-meta">spring.jackson.date-format</span>=<span class="hljs-string">yyyy-MM-dd HH:mm:ss</span><br><span class="hljs-meta">spring.jackson.time-zone</span>=<span class="hljs-string">GMT+8</span><br><br><span class="hljs-meta">spring.redis.host</span>=<span class="hljs-string">192.168.44.132</span><br><span class="hljs-meta">spring.redis.port</span>=<span class="hljs-string">6379</span><br><span class="hljs-meta">spring.redis.database</span>= <span class="hljs-string">0</span><br><span class="hljs-meta">spring.redis.timeout</span>=<span class="hljs-string">1800000</span><br><br><span class="hljs-meta">spring.redis.lettuce.pool.max-active</span>=<span class="hljs-string">20</span><br><span class="hljs-meta">spring.redis.lettuce.pool.max-wait</span>=<span class="hljs-string">-1</span><br><span class="hljs-comment">#最大阻塞等待时间(负数表示没限制)</span><br><span class="hljs-meta">spring.redis.lettuce.pool.max-idle</span>=<span class="hljs-string">5</span><br><span class="hljs-meta">spring.redis.lettuce.pool.min-idle</span>=<span class="hljs-string">0</span><br><span class="hljs-comment">#最小空闲</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#配置mapper xml文件的路径</span><br><span class="hljs-meta">mybatis-plus.mapper-locations</span>=<span class="hljs-string">classpath:com/atguigu/aclservice/mapper/xml/*.xml</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># nacos服务地址</span><br><span class="hljs-meta">spring.cloud.nacos.discovery.server-addr</span>=<span class="hljs-string">127.0.0.1:8848</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#mybatis日志</span><br><span class="hljs-meta">mybatis-plus.configuration.log-impl</span>=<span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure>



<h1 id="权限管理-查询所有菜单-递归"><a href="#权限管理-查询所有菜单-递归" class="headerlink" title="权限管理-查询所有菜单-递归"></a>权限管理-查询所有菜单-递归</h1><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取全部菜单1</span><br><span class="hljs-meta">@ApiOperation(value = &quot;查询所有菜单1&quot;)</span><br><span class="hljs-meta">@GetMapping</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">indexAllPermission1</span><span class="hljs-params">()</span> </span>&#123;<br>    List&lt;Permission&gt; list =  permissionService.queryAllMenuGuli1();<br>    <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;children&quot;</span>,list);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取全部菜单1</span><br><span class="hljs-function">List&lt;Permission&gt; <span class="hljs-title">queryAllMenuGuli1</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure>

<p>serviceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取全部菜单1</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Permission&gt; <span class="hljs-title">queryAllMenuGuli1</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 1.查询所有的菜单</span><br>    QueryWrapper&lt;Permission&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    wrapper.orderByDesc(<span class="hljs-string">&quot;id&quot;</span>);<br>    List&lt;Permission&gt; permissionList = baseMapper.selectList(wrapper);<br>    <span class="hljs-comment">// 按照要求把所有的菜单进行封装返回</span><br>    List&lt;Permission&gt; resultList = bulidPermission1(permissionList);<br>    <span class="hljs-keyword">return</span> resultList;<br>&#125;<br><br><span class="hljs-comment">// 遍历所有的菜单，将得到的数据进行封装</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Permission&gt; <span class="hljs-title">bulidPermission1</span><span class="hljs-params">(List&lt;Permission&gt; permissionList)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 构建一个集合，用于最终的数据封装</span><br>    List&lt;Permission&gt; finalList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-comment">// 2.遍历所有的菜单，找到一级菜单</span><br>    <span class="hljs-keyword">for</span> (Permission permissionNode : permissionList) &#123;<br>        <span class="hljs-comment">// 判断是否是一级菜单，一级菜单的id为0，即找到递归查询的入口</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;0&quot;</span>.equals(permissionNode.getPid()))&#123;<br>            <span class="hljs-comment">// 将它的level层级设置为1</span><br>            permissionNode.setLevel(<span class="hljs-number">1</span>);<br>            <span class="hljs-comment">// 根据顶层菜单，递归查询下面的子菜单，并加入到最终的集合</span><br>            finalList.add(selectChildren1(permissionNode,permissionList));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> finalList;<br>&#125;<br><br><span class="hljs-comment">// 查询子菜单</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Permission <span class="hljs-title">selectChildren1</span><span class="hljs-params">(Permission permissionNode, List&lt;Permission&gt; permissionList)</span> </span>&#123;<br>    <span class="hljs-comment">// 先初始化父菜单的子菜单</span><br>    permissionNode.setChildren(<span class="hljs-keyword">new</span> ArrayList&lt;&gt;());<br><br>    <span class="hljs-comment">// 遍历所有的菜单，查到子菜单</span><br>    <span class="hljs-keyword">for</span> (Permission it : permissionList) &#123;<br>        <span class="hljs-comment">// 判断子菜单是否属于父菜单，条件为子菜单的pid等于父菜单的id</span><br>        <span class="hljs-keyword">if</span> (it.getPid().equals(permissionNode.getId()))&#123;<br>            <span class="hljs-comment">// 将子菜单的level+1</span><br>            Integer level = permissionNode.getLevel() + <span class="hljs-number">1</span>;<br>            it.setLevel(level );<br><br>            <span class="hljs-comment">// 添加之前应该判断子菜单是否为空，如果为空，初始化</span><br>            <span class="hljs-keyword">if</span> (permissionNode.getChildren() == <span class="hljs-keyword">null</span>)&#123;<br>                permissionNode.setChildren(<span class="hljs-keyword">new</span> ArrayList&lt;&gt;());<br>            &#125;<br><br>            <span class="hljs-comment">// 将查询出来的菜单放到该父菜单下的子菜单中</span><br>            <span class="hljs-comment">// 再以这个菜单为父菜单，继续查询该菜单下的子菜单，即递归查询子菜单</span><br>            permissionNode.getChildren().add(selectChildren1(it,permissionList));<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 最后返回父菜单</span><br>    <span class="hljs-keyword">return</span> permissionNode;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="权限管理-递归删除菜单"><a href="#权限管理-递归删除菜单" class="headerlink" title="权限管理-递归删除菜单"></a>权限管理-递归删除菜单</h1><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value = &quot;递归删除菜单1&quot;)</span><br><span class="hljs-meta">@DeleteMapping(&quot;remove/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span> </span>&#123;<br>    permissionService.removeChildByIdGuli1(id);<br>    <span class="hljs-keyword">return</span> R.ok();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 递归删除菜单1</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">removeChildByIdGuli1</span><span class="hljs-params">(String id)</span></span>;<br></code></pre></td></tr></table></figure>

<p>serviceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// =--------------递归删除菜单---------------------</span><br><span class="hljs-comment">// 递归删除菜单1</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeChildByIdGuli1</span><span class="hljs-params">(String id)</span> </span>&#123;<br>    <span class="hljs-comment">// 先创建一个集合，用于封装所有需要删除的id</span><br>    List&lt;String&gt; idList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-comment">// 查询要删除的id下面的所有的子菜单的id</span><br>    <span class="hljs-keyword">this</span>.selectPermissionChildById1111(id,idList);<br><br>    <span class="hljs-comment">// 将需要删除的结点也加入到集合</span><br>    idList.add(id);<br>    baseMapper.deleteBatchIds(idList);<br>&#125;<br><br><span class="hljs-comment">// 递归查询要删除的id下面所有的子菜单的id</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectPermissionChildById1111</span><span class="hljs-params">(String id, List&lt;String&gt; idList)</span> </span>&#123;<br>    <span class="hljs-comment">// 根据id查询出该菜单才所有的子菜单id</span><br>    QueryWrapper&lt;Permission&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    wrapper.eq(<span class="hljs-string">&quot;pid&quot;</span>,id);<br>    wrapper.select(<span class="hljs-string">&quot;id&quot;</span>);<br>    <span class="hljs-comment">// 查询出来的子菜单id</span><br>    List&lt;Permission&gt; selectIdList = baseMapper.selectList(wrapper);<br><br>    <span class="hljs-comment">// 遍历查询出来的子菜单id，加入到idList集合中</span><br>    selectIdList.stream().forEach(item -&gt;&#123;<br>        idList.add(item.getId());<br>        <span class="hljs-comment">// 再以这个结点递归查询他下面的子菜单</span><br>        <span class="hljs-keyword">this</span>.selectPermissionChildById1111(item.getId(),idList);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="权限管理-角色分配菜单"><a href="#权限管理-角色分配菜单" class="headerlink" title="权限管理-角色分配菜单"></a>权限管理-角色分配菜单</h1><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value = &quot;给角色分配权限1&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/doAssign&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">doAssign</span><span class="hljs-params">(String roleId,String[] permissionId)</span> </span>&#123;<br>    permissionService.saveRolePermissionRealtionShipGuli11(roleId,permissionId);<br>    <span class="hljs-keyword">return</span> R.ok();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 给角色分配菜单</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">saveRolePermissionRealtionShipGuli11</span><span class="hljs-params">(String roleId, String[] permissionId)</span></span>;<br></code></pre></td></tr></table></figure>

<p>serviceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// =--------------给角色分配菜单----------------</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveRolePermissionRealtionShipGuli11</span><span class="hljs-params">(String roleId, String[] permissionIds)</span> </span>&#123;<br>    <span class="hljs-comment">// 先创建一个集合，用于封装需要添加的数据</span><br>    List&lt;RolePermission&gt; rolePermissionList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-comment">// 遍历permissionIds，得到要添加的每一个菜单id</span><br>    <span class="hljs-keyword">for</span> (String permissionId : permissionIds) &#123;<br>        <span class="hljs-comment">// 构造一个RolePermission对象</span><br>        RolePermission rolePermission = <span class="hljs-keyword">new</span> RolePermission();<br>        <span class="hljs-comment">// 设置rolePermission的角色id</span><br>        rolePermission.setRoleId(roleId);<br>        <span class="hljs-comment">// 设置rolePermission的菜单id</span><br>        rolePermission.setPermissionId(permissionId);<br><br>        <span class="hljs-comment">// 将封装好的rolePermission对象加入到rolePermissionList中</span><br>        rolePermissionList.add(rolePermission);<br>    &#125;<br>    <span class="hljs-comment">// 调用方法，加入到数据库中，由于操作的是角色菜单表，因此需要注入rolePermissionService</span><br>    rolePermissionService.saveBatch(rolePermissionList);<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>项目|谷粒学院|笔记</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>day18-权限管理_Nacos配置中心_Git</title>
    <url>/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/</url>
    <content><![CDATA[<h1 id="day18-权限管理-Nacos-配置中心-Git"><a href="#day18-权限管理-Nacos-配置中心-Git" class="headerlink" title="day18-权限管理 Nacos 配置中心 Git"></a>day18-权限管理 Nacos 配置中心 Git</h1><h1 id="权限管理-SpringSecurity介绍"><a href="#权限管理-SpringSecurity介绍" class="headerlink" title="权限管理-SpringSecurity介绍"></a>权限管理-SpringSecurity介绍</h1><h2 id="授权和认证实现思路"><a href="#授权和认证实现思路" class="headerlink" title="授权和认证实现思路"></a>授权和认证实现思路</h2><p>用户先进行输入账号密码登录，从数据库中查询数据，如果登录成功，将用户的用户名作为key，将从数据库中查询出来的权限作为value存到redis中。登录成功后，返回token，将token存到cookie中并且在请起头header也存放token信息。接着SpringSecurity再请求头header中获取token信息，从token信息中解析出用户名，根据用户名去redis中查询该用户所有的权限，最后，SpringSecurity根据查询出来的权限赋予用户相当于的权限，可以进行对应的操作。</p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220107014803076.png" alt="image-20220107014803076"></p>
<h1 id="权限管理-整合SpringSecurity"><a href="#权限管理-整合SpringSecurity" class="headerlink" title="权限管理-整合SpringSecurity"></a>权限管理-整合SpringSecurity</h1><p><strong>1、在common下创建spring_security模块</strong></p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220105234509111.png" alt="image-20220105234509111"></p>
<p><strong>2、在spring_security引入相关依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common_utils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring Security依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>



<p>**3、在service_acl引入*<em>spring_security*<em>依赖</em></em></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring_security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>代码结构说明：</strong></p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220105234622263.png" alt="image-20220105234622263"></p>
<p><strong>4、创建spring security核心配置类</strong></p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220105234639165.png" alt="image-20220105234639165"></p>
<p>Spring Security的核心配置就是继承WebSecurityConfigurerAdapter并注解@EnableWebSecurity的配置。</p>
<p>这个配置指明了用户名密码的处理方式、请求路径的开合、登录登出控制等和安全相关的配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.serurity.config;<br><br><span class="hljs-keyword">import</span> com.atguigu.serurity.filter.TokenAuthenticationFilter;<br><span class="hljs-keyword">import</span> com.atguigu.serurity.filter.TokenLoginFilter;<br><span class="hljs-keyword">import</span> com.atguigu.serurity.security.DefaultPasswordEncoder;<br><span class="hljs-keyword">import</span> com.atguigu.serurity.security.TokenLogoutHandler;<br><span class="hljs-keyword">import</span> com.atguigu.serurity.security.TokenManager;<br><span class="hljs-keyword">import</span> com.atguigu.serurity.security.UnauthorizedEntryPoint;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.WebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * Security配置类</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> qy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2019-11-18</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TokenWebSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> UserDetailsService userDetailsService;<br>    <span class="hljs-keyword">private</span> TokenManager tokenManager;<br>    <span class="hljs-keyword">private</span> DefaultPasswordEncoder defaultPasswordEncoder;<br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TokenWebSecurityConfig</span><span class="hljs-params">(UserDetailsService userDetailsService, DefaultPasswordEncoder defaultPasswordEncoder,</span></span><br><span class="hljs-params"><span class="hljs-function">                                  TokenManager tokenManager, RedisTemplate redisTemplate)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userDetailsService = userDetailsService;<br>        <span class="hljs-keyword">this</span>.defaultPasswordEncoder = defaultPasswordEncoder;<br>        <span class="hljs-keyword">this</span>.tokenManager = tokenManager;<br>        <span class="hljs-keyword">this</span>.redisTemplate = redisTemplate;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> http</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        http.exceptionHandling()<br>                .authenticationEntryPoint(<span class="hljs-keyword">new</span> UnauthorizedEntryPoint())<br>                .and().csrf().disable()<br>                .authorizeRequests()<br>                .anyRequest().authenticated()<br>                .and().logout().logoutUrl(<span class="hljs-string">&quot;/admin/acl/index/logout&quot;</span>)<br>                .addLogoutHandler(<span class="hljs-keyword">new</span> TokenLogoutHandler(tokenManager,redisTemplate)).and()<br>                .addFilter(<span class="hljs-keyword">new</span> TokenLoginFilter(authenticationManager(), tokenManager, redisTemplate))<br>                .addFilter(<span class="hljs-keyword">new</span> TokenAuthenticationFilter(authenticationManager(), tokenManager, redisTemplate)).httpBasic();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 密码处理</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> auth</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        auth.userDetailsService(userDetailsService).passwordEncoder(defaultPasswordEncoder);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置哪些请求不拦截</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> web</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(WebSecurity web)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        web.ignoring().antMatchers(<span class="hljs-string">&quot;/api/**&quot;</span>,<br>                <span class="hljs-string">&quot;/swagger-resources/**&quot;</span>, <span class="hljs-string">&quot;/webjars/**&quot;</span>, <span class="hljs-string">&quot;/v2/**&quot;</span>, <span class="hljs-string">&quot;/swagger-ui.html/**&quot;</span><br>               );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>5、创建认证授权相关的工具类</strong></p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220105234720427.png" alt="image-20220105234720427"></p>
<p>（1）DefaultPasswordEncoder：密码处理的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.serurity.security;<br><br><span class="hljs-keyword">import</span> com.atguigu.commonutils.MD5;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * t密码的处理方法类型</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> qy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2019-11-08</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefaultPasswordEncoder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PasswordEncoder</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DefaultPasswordEncoder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(-<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> strength</span><br><span class="hljs-comment">     *            the log rounds to use, between 4 and 31</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DefaultPasswordEncoder</span><span class="hljs-params">(<span class="hljs-keyword">int</span> strength)</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">encode</span><span class="hljs-params">(CharSequence rawPassword)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> MD5.encrypt(rawPassword.toString());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">matches</span><span class="hljs-params">(CharSequence rawPassword, String encodedPassword)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> encodedPassword.equals(MD5.encrypt(rawPassword.toString()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>（2）TokenManager：token操作的工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.serurity.security;<br><br><span class="hljs-keyword">import</span> io.jsonwebtoken.CompressionCodecs;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.Jwts;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * token管理</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> qy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2019-11-08</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TokenManager</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> tokenExpiration = <span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">1000</span>;<br>    <span class="hljs-keyword">private</span> String tokenSignKey = <span class="hljs-string">&quot;123456&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">createToken</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        String token = Jwts.builder().setSubject(username)<br>                .setExpiration(<span class="hljs-keyword">new</span> Date(System.currentTimeMillis() + tokenExpiration))<br>                .signWith(SignatureAlgorithm.HS512, tokenSignKey).compressWith(CompressionCodecs.GZIP).compact();<br>        <span class="hljs-keyword">return</span> token;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUserFromToken</span><span class="hljs-params">(String token)</span> </span>&#123;<br>        String user = Jwts.parser().setSigningKey(tokenSignKey).parseClaimsJws(token).getBody().getSubject();<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeToken</span><span class="hljs-params">(String token)</span> </span>&#123;<br>        <span class="hljs-comment">//jwttoken无需删除，客户端扔掉即可。</span><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>（3）TokenLogoutHandler：退出实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.serurity.security;<br><br><span class="hljs-keyword">import</span> com.atguigu.commonutils.R;<br><span class="hljs-keyword">import</span> com.atguigu.commonutils.ResponseUtil;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.logout.LogoutHandler;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 登出业务逻辑类</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> qy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2019-11-08</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TokenLogoutHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">LogoutHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> TokenManager tokenManager;<br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TokenLogoutHandler</span><span class="hljs-params">(TokenManager tokenManager, RedisTemplate redisTemplate)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.tokenManager = tokenManager;<br>        <span class="hljs-keyword">this</span>.redisTemplate = redisTemplate;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">logout</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> </span>&#123;<br>        String token = request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-keyword">if</span> (token != <span class="hljs-keyword">null</span>) &#123;<br>            tokenManager.removeToken(token);<br><br>            <span class="hljs-comment">//清空当前用户缓存中的权限数据</span><br>            String userName = tokenManager.getUserFromToken(token);<br>            redisTemplate.delete(userName);<br>        &#125;<br>        ResponseUtil.out(response, R.ok());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>（4）UnauthorizedEntryPoint：未授权统一处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.serurity.security;<br><br><span class="hljs-keyword">import</span> com.atguigu.commonutils.R;<br><span class="hljs-keyword">import</span> com.atguigu.commonutils.ResponseUtil;<br><span class="hljs-keyword">import</span> org.springframework.security.core.AuthenticationException;<br><span class="hljs-keyword">import</span> org.springframework.security.web.AuthenticationEntryPoint;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 未授权的统一处理方式</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> qy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2019-11-08</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UnauthorizedEntryPoint</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AuthenticationEntryPoint</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">commence</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="hljs-params"><span class="hljs-function">                         AuthenticationException authException)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br><br>        ResponseUtil.out(response, R.error());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p><strong>6、创建认证授权实体类</strong></p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220105234907668.png" alt="image-20220105234907668"></p>
<p><strong>（1）SecutityUser</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.serurity.entity;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 安全认证用户详情信息</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> qy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2019-11-08</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityUser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetails</span> </span>&#123;<br><br>    <span class="hljs-comment">//当前登录用户</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> User currentUserInfo;<br><br>    <span class="hljs-comment">//当前权限</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; permissionValueList;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SecurityUser</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SecurityUser</span><span class="hljs-params">(User user)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (user != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">this</span>.currentUserInfo = user;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;<br>        Collection&lt;GrantedAuthority&gt; authorities = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(String permissionValue : permissionValueList) &#123;<br>            <span class="hljs-keyword">if</span>(StringUtils.isEmpty(permissionValue)) <span class="hljs-keyword">continue</span>;<br>            SimpleGrantedAuthority authority = <span class="hljs-keyword">new</span> SimpleGrantedAuthority(permissionValue);<br>            authorities.add(authority);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> authorities;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> currentUserInfo.getPassword();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> currentUserInfo.getUsername();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAccountNonExpired</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAccountNonLocked</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isCredentialsNonExpired</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEnabled</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p><strong>（2）User</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.serurity.entity;<br><br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModel;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModelProperty;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 用户实体类</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> qy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2019-11-08</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(description = &quot;用户实体类&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br>	<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br><br>	<span class="hljs-meta">@ApiModelProperty(value = &quot;微信openid&quot;)</span><br>	<span class="hljs-keyword">private</span> String username;<br><br>	<span class="hljs-meta">@ApiModelProperty(value = &quot;密码&quot;)</span><br>	<span class="hljs-keyword">private</span> String password;<br><br>	<span class="hljs-meta">@ApiModelProperty(value = &quot;昵称&quot;)</span><br>	<span class="hljs-keyword">private</span> String nickName;<br><br>	<span class="hljs-meta">@ApiModelProperty(value = &quot;用户头像&quot;)</span><br>	<span class="hljs-keyword">private</span> String salt;<br><br>	<span class="hljs-meta">@ApiModelProperty(value = &quot;用户签名&quot;)</span><br>	<span class="hljs-keyword">private</span> String token;<br><br>&#125;<br><br><br><br><br></code></pre></td></tr></table></figure>

<p><strong>7、创建认证和授权的filter</strong></p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220105235005444.png" alt="image-20220105235005444"></p>
<p><strong>（1）TokenLoginFilter：认证的filter</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.serurity.filter;<br><br><span class="hljs-keyword">import</span> com.atguigu.commonutils.R;<br><span class="hljs-keyword">import</span> com.atguigu.commonutils.ResponseUtil;<br><span class="hljs-keyword">import</span> com.atguigu.serurity.entity.SecurityUser;<br><span class="hljs-keyword">import</span> com.atguigu.serurity.entity.User;<br><span class="hljs-keyword">import</span> com.atguigu.serurity.security.TokenManager;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;<br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<br><span class="hljs-keyword">import</span> org.springframework.security.core.AuthenticationException;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;<br><span class="hljs-keyword">import</span> org.springframework.security.web.util.matcher.AntPathRequestMatcher;<br><br><span class="hljs-keyword">import</span> javax.servlet.FilterChain;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 登录过滤器，继承UsernamePasswordAuthenticationFilter，对用户名密码进行登录校验</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> qy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2019-11-08</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TokenLoginFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">UsernamePasswordAuthenticationFilter</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> AuthenticationManager authenticationManager;<br>    <span class="hljs-keyword">private</span> TokenManager tokenManager;<br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TokenLoginFilter</span><span class="hljs-params">(AuthenticationManager authenticationManager, TokenManager tokenManager, RedisTemplate redisTemplate)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.authenticationManager = authenticationManager;<br>        <span class="hljs-keyword">this</span>.tokenManager = tokenManager;<br>        <span class="hljs-keyword">this</span>.redisTemplate = redisTemplate;<br>        <span class="hljs-keyword">this</span>.setPostOnly(<span class="hljs-keyword">false</span>);<br>        <span class="hljs-keyword">this</span>.setRequiresAuthenticationRequestMatcher(<span class="hljs-keyword">new</span> AntPathRequestMatcher(<span class="hljs-string">&quot;/admin/acl/login&quot;</span>,<span class="hljs-string">&quot;POST&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Authentication <span class="hljs-title">attemptAuthentication</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse res)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            User user = <span class="hljs-keyword">new</span> ObjectMapper().readValue(req.getInputStream(), User.class);<br><br>            <span class="hljs-keyword">return</span> authenticationManager.authenticate(<span class="hljs-keyword">new</span> UsernamePasswordAuthenticationToken(user.getUsername(), user.getPassword(), <span class="hljs-keyword">new</span> ArrayList&lt;&gt;()));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 登录成功</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> req</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> res</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> chain</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> auth</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">successfulAuthentication</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse res, FilterChain chain,</span></span><br><span class="hljs-params"><span class="hljs-function">                                            Authentication auth)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        SecurityUser user = (SecurityUser) auth.getPrincipal();<br>        String token = tokenManager.createToken(user.getCurrentUserInfo().getUsername());<br>        redisTemplate.opsForValue().set(user.getCurrentUserInfo().getUsername(), user.getPermissionValueList());<br><br>        ResponseUtil.out(res, R.ok().data(<span class="hljs-string">&quot;token&quot;</span>, token));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 登录失败</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unsuccessfulAuthentication</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="hljs-params"><span class="hljs-function">                                              AuthenticationException e)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        ResponseUtil.out(response, R.error());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>（2）TokenAuthenticationFilter：<br>授权filter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.serurity.filter;<br><br><span class="hljs-keyword">import</span> com.atguigu.commonutils.R;<br><span class="hljs-keyword">import</span> com.atguigu.commonutils.ResponseUtil;<br><span class="hljs-keyword">import</span> com.atguigu.serurity.security.TokenManager;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.www.BasicAuthenticationFilter;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><br><span class="hljs-keyword">import</span> javax.servlet.FilterChain;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 访问过滤器</span><br><span class="hljs-comment"> * &lt;/p&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> qy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2019-11-08</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TokenAuthenticationFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BasicAuthenticationFilter</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> TokenManager tokenManager;<br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TokenAuthenticationFilter</span><span class="hljs-params">(AuthenticationManager authManager, TokenManager tokenManager,RedisTemplate redisTemplate)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(authManager);<br>        <span class="hljs-keyword">this</span>.tokenManager = tokenManager;<br>        <span class="hljs-keyword">this</span>.redisTemplate = redisTemplate;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilterInternal</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse res, FilterChain chain)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        logger.info(<span class="hljs-string">&quot;=================&quot;</span>+req.getRequestURI());<br>        <span class="hljs-keyword">if</span>(req.getRequestURI().indexOf(<span class="hljs-string">&quot;admin&quot;</span>) == -<span class="hljs-number">1</span>) &#123;<br>            chain.doFilter(req, res);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        UsernamePasswordAuthenticationToken authentication = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            authentication = getAuthentication(req);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            ResponseUtil.out(res, R.error());<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (authentication != <span class="hljs-keyword">null</span>) &#123;<br>            SecurityContextHolder.getContext().setAuthentication(authentication);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ResponseUtil.out(res, R.error());<br>        &#125;<br>        chain.doFilter(req, res);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> UsernamePasswordAuthenticationToken <span class="hljs-title">getAuthentication</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>        <span class="hljs-comment">// token置于header里</span><br>        String token = request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-keyword">if</span> (token != <span class="hljs-keyword">null</span> &amp;&amp; !<span class="hljs-string">&quot;&quot;</span>.equals(token.trim())) &#123;<br>            String userName = tokenManager.getUserFromToken(token);<br><br>            List&lt;String&gt; permissionValueList = (List&lt;String&gt;) redisTemplate.opsForValue().get(userName);<br>            Collection&lt;GrantedAuthority&gt; authorities = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>            <span class="hljs-keyword">for</span>(String permissionValue : permissionValueList) &#123;<br>                <span class="hljs-keyword">if</span>(StringUtils.isEmpty(permissionValue)) <span class="hljs-keyword">continue</span>;<br>                SimpleGrantedAuthority authority = <span class="hljs-keyword">new</span> SimpleGrantedAuthority(permissionValue);<br>                authorities.add(authority);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(userName)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UsernamePasswordAuthenticationToken(userName, token, authorities);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="Ncaos配置中心-读取配置文件"><a href="#Ncaos配置中心-读取配置文件" class="headerlink" title="Ncaos配置中心-读取配置文件"></a>Ncaos配置中心-读取配置文件</h1><h2 id="1、在Nacos创建统一配置文件"><a href="#1、在Nacos创建统一配置文件" class="headerlink" title="1、在Nacos创建统一配置文件"></a>1、在Nacos创建统一配置文件</h2><p><strong>（1）点击创建按钮</strong></p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220106114719415.png" alt="image-20220106114719415"></p>
<p><strong>（2）输入配置信息</strong></p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220106114733131.png" alt="image-20220106114733131"></p>
<p><strong>a）Data ID 的完整规则格式如下</strong></p>
<p><strong>${prefix}-${spring.profile.active}.${file-extension}</strong></p>
<p><strong>- prefix</strong> 服务名 </p>
<p><strong>- spring.profiles.active=dev</strong> 即为当前环境对应的 profile。 注意：当 spring.profiles.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 ${prefix}.${file-extension}</p>
<p><strong>- file-exetension</strong> 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。目前只支持 properties 和 yaml 类型</p>
<h2 id="2、以service-statistics模块为例"><a href="#2、以service-statistics模块为例" class="headerlink" title="2、以service-statistics模块为例"></a>2、以service-statistics模块为例</h2><p><strong>（1）在service中引入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>（2）创建bootstrap.properties配置文件</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#配置中心地址</span><br><span class="hljs-meta">spring.cloud.nacos.config.server-addr</span>=<span class="hljs-string">127.0.0.1:8848</span><br><span class="hljs-meta">spring.profiles.active</span>=<span class="hljs-string">dev</span><br><span class="hljs-comment"># 该配置影响统一配置中心中的dataId</span><br><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">service-statistics</span><br></code></pre></td></tr></table></figure>

<p><strong>（3）把项目之前的application.properties内容注释，启动项目查看效果</strong></p>
<h2 id="3、补充：springboot配置文件加载顺序"><a href="#3、补充：springboot配置文件加载顺序" class="headerlink" title="3、补充：springboot配置文件加载顺序"></a><strong>3、补充：springboot配置文件加载顺序</strong></h2><p>其实yml和properties文件是一样的原理，且一个项目上要么yml或者properties，二选一的存在。推荐使用yml，更简洁。</p>
<p>bootstrap与application<br><strong>（1）加载顺序</strong><br>这里主要是说明application和bootstrap的加载顺序。</p>
<p>bootstrap.yml（bootstrap.properties）先加载<br>application.yml（application.properties）后加载<br>bootstrap.yml 用于应用程序上下文的引导阶段。</p>
<p>bootstrap.yml 由父Spring ApplicationContext加载。</p>
<p>父ApplicationContext 被加载到使用 application.yml 的之前。</p>
<p><strong>（2）配置区别</strong><br>bootstrap.yml 和application.yml 都可以用来配置参数。</p>
<p>bootstrap.yml 可以理解成系统级别的一些参数配置，这些参数一般是不会变动的。<br>application.yml 可以用来定义应用级别的。</p>
<h1 id="Nacos配置中心-命名空间切换"><a href="#Nacos配置中心-命名空间切换" class="headerlink" title="Nacos配置中心-命名空间切换"></a>Nacos配置中心-命名空间切换</h1><p><strong>1、创建命名空间</strong></p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220106122544604.png" alt="image-20220106122544604"></p>
<p>默认只有public，新建了dev、test和prod命名空间</p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220106122615420.png" alt="image-20220106122615420"></p>
<p><strong>2、克隆配置</strong></p>
<p><strong>（1）切换到配置列表：</strong></p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220106122627430.png" alt="image-20220106122627430"></p>
<p><strong>可以发现有四个名称空间：public（默认）以及我们自己添加的3个名称空间（prod、dev、test），可以点击查看每个名称空间下的配置文件，当然现在只有public下有一个配置。默认情况下，项目会到public下找 服务名.properties文件。接下来，在dev名称空间中也添加一个nacos-provider.properties配置。这时有两种方式：第一，切换到dev名称空间，添加一个新的配置文件。缺点：每个环境都要重复配置类似的项目第二，直接通过clone方式添加配置，并修改即可。推荐</strong></p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220106122646003.png" alt="image-20220106122646003"></p>
<p><strong>点击编辑：修改配置内容，端口号改为8013以作区分</strong></p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220106122658060.png" alt="image-20220106122658060"></p>
<p><strong>在项目模块中，修改bootstrap.properties添加如下配置</strong></p>
<p><strong>namespace的值为：</strong></p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220106122722359.png" alt="image-20220106122722359"></p>
<p><strong>重启服务提供方服务，测试修改之后是否生效</strong></p>
<h1 id="Nacos配置中心-多配置文件加载"><a href="#Nacos配置中心-多配置文件加载" class="headerlink" title="Nacos配置中心-多配置文件加载"></a>Nacos配置中心-多配置文件加载</h1><p>在一些情况下需要加载多个配置文件。假如现在dev名称空间下有三个配置文件：service-statistics.properties、redis.properties、jdbc.properties</p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220106124021259.png" alt="image-20220106124021259"></p>
<p><strong>添加配置，加载多个配置文件</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.cloud.nacos.config.server-addr</span>=<span class="hljs-string">127.0.0.1:8848</span><br><span class="hljs-meta">spring.profiles.active</span>=<span class="hljs-string">dev</span><br><span class="hljs-comment"># 该配置影响统一配置中心中的dataId，之前已经配置过</span><br><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">service-statistics</span><br><span class="hljs-meta">spring.cloud.nacos.config.namespace</span>=<span class="hljs-string">13b5c197-de5b-47e7-9903-ec0538c9db01</span><br><span class="hljs-meta">spring.cloud.nacos.config.ext-config[0].data-id</span>=<span class="hljs-string">redis.properties</span><br><span class="hljs-comment"># 开启动态刷新配置，否则配置文件修改，工程无法感知</span><br><span class="hljs-meta">spring.cloud.nacos.config.ext-config[0].refresh</span>=<span class="hljs-string">true</span><br><span class="hljs-meta">spring.cloud.nacos.config.ext-config[1].data-id</span>=<span class="hljs-string">jdbc.properties</span><br></code></pre></td></tr></table></figure>



<h1 id="远程Git仓库-提交代码（idea提交）"><a href="#远程Git仓库-提交代码（idea提交）" class="headerlink" title="远程Git仓库-提交代码（idea提交）"></a>远程Git仓库-提交代码（idea提交）</h1><ol>
<li><p>在gitee新创建一个仓库</p>
</li>
<li><p>在idea设置git的路径</p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220106131621652.png" alt="image-20220106131621652"></p>
<ol start="3">
<li><p>创建一个本地git仓库，一般以项目为仓库</p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220106131738561.png" alt="image-20220106131738561"></p>
</li>
<li><p>选中项目根目录右键，点击git，选中add，添加到本地仓库</p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220106132035893.png" alt="image-20220106132035893"></p>
</li>
<li><p>设置要提交的远程仓库地址</p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220106132207764.png" alt="image-20220106132207764"></p>
</li>
<li><p>输入url，第一次需要输入用户名和密码验证</p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220106132326937.png" alt="image-20220106132326937"></p>
</li>
<li><p>添加好url后，点击git，选中commit Directory</p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220106132415267.png" alt="image-20220106132415267"></p>
</li>
<li><p>填好信息，点击提交</p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220106132610094.png" alt="image-20220106132610094"></p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220106132635518.png" alt="image-20220106132635518"></p>
</li>
<li><p>忽略警告，继续提交</p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220106132745104.png" alt="image-20220106132745104"></p>
</li>
<li><p>点击push</p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220106132821361.png" alt="image-20220106132821361"></p>
</li>
<li><p>输入用户名和密码验证</p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220106132905658.png" alt="image-20220106132905658"></p>
</li>
<li><p>idea提示成功</p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220106132945997.png" alt="image-20220106132945997"></p>
</li>
<li><p>来到gitee的仓库中查看，已成功</p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220106133015778.png" alt="image-20220106133015778"></p>
</li>
</ol>
</li>
</ol>
<p><strong>如何让本地仓库与远程仓库断开连接？</strong></p>
<p>找version control,选中要断开的仓库，点击减号，最后OK</p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220106143054094.png" alt="image-20220106143054094"></p>
<p>来到项目的本地目录下，将.git文件夹删除，需要打开查看隐藏文件</p>
<p><img src="/myBlog/day18-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86_Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83_Git/image-20220106143227167.png" alt="image-20220106143227167"></p>
]]></content>
      <categories>
        <category>项目|谷粒学院|笔记</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC并发编程</title>
    <url>/myBlog/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="JUC并发编程"><a href="#JUC并发编程" class="headerlink" title="JUC并发编程"></a>JUC并发编程</h1><h1 id="JUC-概述"><a href="#JUC-概述" class="headerlink" title="JUC 概述"></a>JUC 概述</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在 Java 5.0 提供了 java.util.concurrent （简称 JUC ）包，在此包中增加了在并发编程中很常用 的实用工具类，用于定义类似于线程的自定义子 系统，包括线程池、异步 IO 和轻量级任务框架。 提供可调的、灵活的线程池。还提供了设计用于多线程上下文中的 Collection 实现等。</p>
<h2 id="进程和线程的概念"><a href="#进程和线程的概念" class="headerlink" title="进程和线程的概念"></a>进程和线程的概念</h2><h3 id="进程（Process）"><a href="#进程（Process）" class="headerlink" title="进程（Process）"></a>进程（Process）</h3><ul>
<li>计算机中的程序关于某数据集合上的一次运行活动</li>
<li>进程是线程的容器</li>
<li>程序是指令、数据及其组织形式的描述，进程是程序的实体</li>
<li>系统进行资源分配和调度的基本单位，是操作系统结构的基础</li>
</ul>
<h3 id="线程（thread）"><a href="#线程（thread）" class="headerlink" title="线程（thread）"></a>线程（thread）</h3><ul>
<li>操作系统能够进行运算调度的最小单位</li>
<li>被包含在进程之中，是进程中的实际运作单位</li>
<li>一条线程指的是进程中一个单一顺序的控制流</li>
</ul>
<p>简单来说就是，进程是一个应用程序而线程就是一个应用程序里面的其他操作，一个应用程序可以包含多个线程。</p>
<h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><p>线程有5个状态，分别是NEW（新建）、RUNNABLE（准备就绪）、BLOCKED（阻塞）、WAITING（不见不散，一定得等到，不然不做其他的）、TIME-WAITING（过时不候：超过了时间就过去了）、TERMINATED（终结）。</p>
<h3 id="wait和sleep的区别"><a href="#wait和sleep的区别" class="headerlink" title="wait和sleep的区别"></a>wait和sleep的区别</h3><ol>
<li>sleep是Thead的静态方法，wait是Object里面的方法，wait可以被任意实例后的对象调用。</li>
<li>sleep不会释放锁，它也不需要占用锁，但是调用他的前提是当前线程占有锁（即需要再synchronize中）</li>
<li>他们都可以被interrupted中断。</li>
</ol>
<h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>并发就是指在很短的一个时间段发生的事情，如到点抢票。</p>
<h3 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h3><p>并行就是指在同一时刻发生的事情。</p>
<h3 id="管程Monitor"><a href="#管程Monitor" class="headerlink" title="管程Monitor"></a>管程Monitor</h3><p>管程Monitor，<strong>监视器</strong>，也就是我们所说的<strong>锁</strong>，它是一种同步机制，保证同一个时间只有一个线程访问被保护数据或者代码，jvm同步基于进入和退出，使用管程对象实现的。</p>
<h3 id="用户线程"><a href="#用户线程" class="headerlink" title="用户线程"></a>用户线程</h3><p>自定义线程都是用户线程，主线程结束了，用户线程还在，jvm存活。</p>
<h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>系统特定的线程，比如垃圾回收，没有用户线程了，都是守护线程，jvm结束。</p>
<p><strong>测试用户进程和守护进程的代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DaemonAndUserProcess</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Thread aa = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;::&quot;</span> + Thread.currentThread().isDaemon());<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br><br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;aa&quot;</span>);<br>        <span class="hljs-comment">// 设置线程为守护线程</span><br>        aa.setDaemon(<span class="hljs-keyword">true</span>);<br>        aa.start();     <span class="hljs-comment">// 开启线程</span><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; over&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="LOCK接口"><a href="#LOCK接口" class="headerlink" title="LOCK接口"></a>LOCK接口</h1><h2 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h2><h3 id="synchronized关键字"><a href="#synchronized关键字" class="headerlink" title="synchronized关键字"></a>synchronized关键字</h3><p>它是java中的关键字，是一种同步锁，它可以修饰以下几种：</p>
<ol>
<li>修改代码块，被修饰的代码块称为同步代码块，其作用范围就是大括号{}括起来的代码，作用对象就是调用这个代码的对象。</li>
<li>修饰一个方法，被修饰的方法称为同步方法，其作用范围就是整个方法，作用的对象是调用这个方法的对象。</li>
<li>修饰静态方法</li>
<li>修饰一个类。</li>
</ol>
<h3 id="多线程编程步骤（上）"><a href="#多线程编程步骤（上）" class="headerlink" title="多线程编程步骤（上）"></a>多线程编程步骤（上）</h3><ol>
<li>创建资源类，编程属性和操作方法</li>
<li>创建多线程，调用资源类的方法</li>
</ol>
<h3 id="售票例子"><a href="#售票例子" class="headerlink" title="售票例子"></a>售票例子</h3><p>三个售票员，卖30张票</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ten.juc.sync;<br><br><span class="hljs-comment">// 第一步：创建资源类，编写属性和操作方法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ticket</span></span>&#123;<br>    <span class="hljs-comment">// 定义票的数量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number = <span class="hljs-number">30</span>;<br>    <span class="hljs-comment">// 定义操作方法：卖票，得加锁synchronized</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 判断是否有剩余的票</span><br>        <span class="hljs-keyword">if</span> (number &gt; <span class="hljs-number">0</span>)&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; : 卖出了：&quot;</span> + (number--) + <span class="hljs-string">&quot; 剩余：&quot;</span> + number);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SaleTicket</span> </span>&#123;<br>    <span class="hljs-comment">// 第二部：编写多线程，调用操作资源</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Ticket ticket = <span class="hljs-keyword">new</span> Ticket();<br>        <span class="hljs-comment">// 创建三个线程，利用匿名内部类</span><br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                <span class="hljs-comment">// 编写操作</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>                    ticket.sale();<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;AA&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                <span class="hljs-comment">// 编写操作</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>                    ticket.sale();<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;BB&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                <span class="hljs-comment">// 编写操作</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>                    ticket.sale();<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;CC&quot;</span>).start();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="LOCK"><a href="#LOCK" class="headerlink" title="LOCK"></a>LOCK</h2><h3 id="什么是LOCK"><a href="#什么是LOCK" class="headerlink" title="什么是LOCK"></a>什么是LOCK</h3><p>LOCK锁实现提供了比使用同步方法和语句可以获得的更广泛的锁操作。LOCK是一个类，可以通过这个类实现同步访问。</p>
<p><strong>LOCK和synchronized的不同</strong></p>
<ol>
<li>LOCK不是java内置的，synchronized是java语言的关键字。</li>
<li>LOCK需要用户手动去上锁和释放锁，synchronized不用，它会自动帮我们完成。</li>
<li>LOCK可以让等待的线程响应中断，而synchronized不能，使用synchronized的时候，需要一直等待下去，不能够响应中断</li>
<li>通过lock可以知道有没有成功上锁，而synchronized不行</li>
<li>lock可以提高多个线程读操作的效率。</li>
</ol>
<h3 id="ReentrantLock可重入锁"><a href="#ReentrantLock可重入锁" class="headerlink" title="ReentrantLock可重入锁"></a>ReentrantLock可重入锁</h3><p><strong>代码实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ten.juc.lock;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-comment">// 第一步：创建资源类，别写属性和操作方法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LTicket</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number = <span class="hljs-number">30</span>;<br>    <span class="hljs-comment">// 卖票：不用synchronized，用ReentrantLock</span><br>    ReentrantLock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sale</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 为了让释放锁无论怎么都执行，所以代码有try finally包裹起来</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 上锁</span><br>            lock.lock();<br>           <span class="hljs-keyword">if</span>(number &gt; <span class="hljs-number">0</span>)&#123;<br>               System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; : 卖出了：&quot;</span> + (number--) + <span class="hljs-string">&quot; 剩余：&quot;</span> + number);<br>           &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 释放锁</span><br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LSaleTicket</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 第二步：创建多线程，调用操作方法</span><br>        LTicket lTicket = <span class="hljs-keyword">new</span> LTicket();<br>        <span class="hljs-comment">// 使用Lambda</span><br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>                lTicket.sale();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;AA&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>                lTicket.sale();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;BB&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>                lTicket.sale();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;CC&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="线程间的通信"><a href="#线程间的通信" class="headerlink" title="线程间的通信"></a>线程间的通信</h1><h2 id="多线程编程步骤（中、下）"><a href="#多线程编程步骤（中、下）" class="headerlink" title="多线程编程步骤（中、下）"></a>多线程编程步骤（中、下）</h2><p>第一步 创建资源类，在资源类中创建属性和编写操作方法</p>
<p>第二步 在资源类中操作方法</p>
<ol>
<li>判断</li>
<li>干活</li>
<li>通知</li>
</ol>
<p>第三步 创建多个线程，调用资源类的操作方法。</p>
<p>第四步 <strong>防止虚假唤醒问题</strong></p>
<h2 id="利用synchronized"><a href="#利用synchronized" class="headerlink" title="利用synchronized"></a>利用synchronized</h2><p>实现如下。</p>
<p><strong>测试代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ten.juc.sync;<br><br><span class="hljs-comment">// 第一步：创建资源类，编写属性和操作方法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Share</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 定义两个方法，一个加一，一个减一</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">incr</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-comment">// 判断</span><br>        <span class="hljs-keyword">if</span>(number != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">this</span>.wait();    <span class="hljs-comment">// 如果不等于0，则等待，wait特点在哪里等待就在哪里开始执行</span><br>        &#125;<br>        <span class="hljs-comment">// 干活</span><br>        <span class="hljs-comment">// 如果等于0了，加一</span><br>        number++;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;当前number为 &quot;</span> + number);<br>        <span class="hljs-comment">// 通知</span><br>        <span class="hljs-keyword">this</span>.notifyAll();<br>    &#125;<br>    <span class="hljs-comment">// 减一</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">decr</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-comment">// 判断</span><br>        <span class="hljs-keyword">if</span> (number != <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">this</span>.wait();<br>        &#125;<br>        <span class="hljs-comment">// 干活</span><br>        number--;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;当前number为 &quot;</span> + number);<br>        <span class="hljs-comment">// 通知</span><br>        <span class="hljs-keyword">this</span>.notifyAll();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TheadDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 第二步：创建多线程，调用操作资源</span><br>        Share share = <span class="hljs-keyword">new</span> Share();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    share.incr();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;AA&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    share.decr();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;BB&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>如果把上述的代码的多线程，再加两个CC和DD，则会出现不是1,0的结果。原因就是wait的特点是在哪里开始等待的就在哪里开始，wait需要用到循环中，即把if改成while循环，这个过程就是虚假唤醒。</strong></p>
<h2 id="用LOCK实现代码"><a href="#用LOCK实现代码" class="headerlink" title="用LOCK实现代码"></a><strong>用LOCK实现代码</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ten.juc.lock;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Share</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 利用LOCK实现</span><br>    <span class="hljs-keyword">private</span> Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>    <span class="hljs-keyword">private</span> Condition condition = lock.newCondition();<br>    <span class="hljs-comment">// +1</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">incr</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-comment">// 上锁</span><br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 判断 干活 通知</span><br>            <span class="hljs-keyword">while</span> (number != <span class="hljs-number">0</span>)&#123;<br>                condition.await();<br>            &#125;<br>            number++;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;当前number为 &quot;</span> + number);<br>            condition.signalAll();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 解锁</span><br>            lock.unlock();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// -1</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">decr</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-comment">// 上锁</span><br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 判断 干活 通知</span><br>            <span class="hljs-keyword">while</span> (number != <span class="hljs-number">1</span>)&#123;<br>                condition.await();<br>            &#125;<br>            number--;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;当前number为 &quot;</span> + number);<br>            condition.signalAll();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Share share = <span class="hljs-keyword">new</span> Share();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    share.incr();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;AA&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    share.decr();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;BB&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    share.incr();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;CC&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    share.decr();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;DD&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="线程间定制化通信"><a href="#线程间定制化通信" class="headerlink" title="线程间定制化通信"></a>线程间定制化通信</h1><p> <img src="/myBlog/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220304115504390.png" alt="image-20220304115504390"></p>
<p>实现代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ten.juc.lock;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-comment">// 第一步：创建资源类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShareResource</span> </span>&#123;<br>    <span class="hljs-comment">// 标志位</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> flag = <span class="hljs-number">1</span>;   <span class="hljs-comment">// 1:AA,2:BB,3:CC</span><br><br>    <span class="hljs-comment">// 创建LOCK</span><br>    <span class="hljs-keyword">private</span> Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br><br>    <span class="hljs-comment">// 创建三个condition</span><br>    <span class="hljs-keyword">private</span> Condition c1 =lock.newCondition();<br>    <span class="hljs-keyword">private</span> Condition c2 =lock.newCondition();<br>    <span class="hljs-keyword">private</span> Condition c3 =lock.newCondition();<br><br>    <span class="hljs-comment">// 输出5次，loop为轮数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print5</span><span class="hljs-params">(<span class="hljs-keyword">int</span> loop)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-comment">// 上锁</span><br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 判断 干活 通知</span><br>            <span class="hljs-keyword">while</span> (flag != <span class="hljs-number">1</span>)&#123;<br>                c1.await();<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;::&quot;</span> +i+ <span class="hljs-string">&quot;: 轮数：&quot;</span> +loop);<br>            &#125;<br>            <span class="hljs-comment">// 通知之前先修改标志位</span><br>            flag = <span class="hljs-number">2</span>;<br>            <span class="hljs-comment">// 通知BB</span><br>            c2.signal();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 解锁</span><br>            lock.unlock();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 输出10次，loop为轮数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print10</span><span class="hljs-params">(<span class="hljs-keyword">int</span> loop)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 判断 干活 通知</span><br>            <span class="hljs-keyword">while</span> (flag != <span class="hljs-number">2</span>)&#123;<br>                c2.await();<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;::&quot;</span> +i + <span class="hljs-string">&quot;: 轮数：&quot;</span> +loop);<br>            &#125;<br>            <span class="hljs-comment">// 通知之前先修改标志位</span><br>            flag = <span class="hljs-number">3</span>;<br>            <span class="hljs-comment">// 通知CC</span><br>            c3.signal();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 输出15次，loop为轮数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print15</span><span class="hljs-params">(<span class="hljs-keyword">int</span> loop)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 判断 干活 通知</span><br>            <span class="hljs-keyword">while</span> (flag != <span class="hljs-number">3</span>)&#123;<br>                c3.await();<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">15</span>; i++) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;::&quot;</span> +i + <span class="hljs-string">&quot;: 轮数：&quot;</span> +loop);<br>            &#125;<br>            <span class="hljs-comment">// 通知之前先修改标志位</span><br>            flag = <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 通知AA</span><br>            c1.signal();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadDemo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ShareResource shareResource = <span class="hljs-keyword">new</span> ShareResource();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    shareResource.print5(i);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;AA&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    shareResource.print10(i);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;BB&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    shareResource.print15(i);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;CC&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="集合的线程安全"><a href="#集合的线程安全" class="headerlink" title="集合的线程安全"></a>集合的线程安全</h1><h2 id="ArrayList异常演示"><a href="#ArrayList异常演示" class="headerlink" title="ArrayList异常演示"></a>ArrayList异常演示</h2><p>下面以list集合演示线程不安全的情况，会出现ConcurrentModificationException并发修改异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ten.juc.lock;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * list线程不安全的演示</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadDemo4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建list集合</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++)&#123;<br>            <span class="hljs-keyword">new</span> Thread(() -&gt;&#123;<br>                <span class="hljs-comment">// 生成随机数并添加到集合</span><br>                list.add(UUID.randomUUID().toString().substring(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>));<br>                System.out.println(list);<br>            &#125;,String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>为什么会出现这个异常，通过观察list.add的源码可以发现，list.add方没有synchronized修饰，即没有加锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Appends the specified element to the end of this list.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> e element to be appended to this list</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; (as specified by &#123;<span class="hljs-doctag">@link</span> Collection#add&#125;)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    ensureCapacityInternal(size + <span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>    elementData[size++] = e;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="解决方案-Vector"><a href="#解决方案-Vector" class="headerlink" title="解决方案-Vector"></a>解决方案-Vector</h3><p>将上述的 List<String> list = new ArrayList&lt;&gt;();换成List<String> list = new Vector&lt;&gt;(); 再次进行测试，就不会报错了。通过观察Vector的源代码可以发现，add方法是有synchronized关键字修饰的，所以可以多线程修改。</String></String></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addElement</span><span class="hljs-params">(E obj)</span> </span>&#123;<br>    modCount++;<br>    ensureCapacityHelper(elementCount + <span class="hljs-number">1</span>);<br>    elementData[elementCount++] = obj;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="解决方案-Collections"><a href="#解决方案-Collections" class="headerlink" title="解决方案-Collections"></a>解决方案-Collections</h3><p>将list集合换成List<String> list = Collections.synchronizedList(new ArrayList&lt;&gt;()); 再次进行测试也可以实现，但是以上两种都是比较古老的实现方式，实际上不经常用。</String></p>
<h3 id="解决方案-CopyOnWriteArrayList"><a href="#解决方案-CopyOnWriteArrayList" class="headerlink" title="解决方案-CopyOnWriteArrayList"></a>解决方案-CopyOnWriteArrayList</h3><p>比较常用的多线程数组就是CopyOnWriteArrayList，他的实现的原理就是并发读，写的时候复制旧的数组内容，写完的时候再合并在一起。他的源码如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Appends the specified element to the end of this list.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> e element to be appended to this list</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> true&#125; (as specified by &#123;<span class="hljs-doctag">@link</span> Collection#add&#125;)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> ReentrantLock lock = <span class="hljs-keyword">this</span>.lock;<br>    lock.lock();	<span class="hljs-comment">// 上锁</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        Object[] elements = getArray();		<span class="hljs-comment">// 获取数组</span><br>        <span class="hljs-keyword">int</span> len = elements.length;			<span class="hljs-comment">// 数组长度</span><br>        Object[] newElements = Arrays.copyOf(elements, len + <span class="hljs-number">1</span>);	<span class="hljs-comment">// 创建新的数组</span><br>        newElements[len] = e;				<span class="hljs-comment">// 写入新元素</span><br>        setArray(newElements);				<span class="hljs-comment">// 合并</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();						<span class="hljs-comment">// 解锁</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>上述三种方案的所有代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ten.juc.lock;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * list线程不安全的演示</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadDemo4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建list集合</span><br>        <span class="hljs-comment">//List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br>        <span class="hljs-comment">//List&lt;String&gt; list = new Vector&lt;&gt;();   // 利用Vector解决</span><br>        <span class="hljs-comment">//List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;&gt;());  // 用Collections解决</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> CopyOnWriteArrayList&lt;&gt;();   <span class="hljs-comment">// 用CopyOnWriteArrayList解决</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++)&#123;<br>            <span class="hljs-keyword">new</span> Thread(() -&gt;&#123;<br>                <span class="hljs-comment">// 生成随机数并添加到集合</span><br>                list.add(UUID.randomUUID().toString().substring(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>));<br>                System.out.println(list);<br>            &#125;,String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="HashSet异常演示"><a href="#HashSet异常演示" class="headerlink" title="HashSet异常演示"></a>HashSet异常演示</h2><p>以下代码也产生了并发修改异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 演示HashSet线程不安全问题</span><br>Set&lt;String&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++) &#123;<br>    <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>        <span class="hljs-comment">// 生成随机数并添加到集合</span><br>        set.add(UUID.randomUUID().toString().substring(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>));<br>        System.out.println(set);<br>    &#125;, String.valueOf(i)).start();<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="解决方案-CopyOnWriteArraySet"><a href="#解决方案-CopyOnWriteArraySet" class="headerlink" title="解决方案-CopyOnWriteArraySet"></a>解决方案-CopyOnWriteArraySet</h3><p>把set集合换成这个Set<String> set = new CopyOnWriteArraySet&lt;&gt;();就可以解决了</String></p>
<h2 id="HashMap异常演示"><a href="#HashMap异常演示" class="headerlink" title="HashMap异常演示"></a>HashMap异常演示</h2><p>以下代码也产生了并发修改异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 演示HashMap线程不安全问题</span><br>Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++) &#123;<br>    String key = String.valueOf(i);<br>    <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>        <span class="hljs-comment">// 生成随机数并添加到集合</span><br>        map.put(key,UUID.randomUUID().toString().substring(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>));<br>        System.out.println(map);<br>    &#125;, String.valueOf(i)).start();<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="解决方案-ConcurrentHashMap"><a href="#解决方案-ConcurrentHashMap" class="headerlink" title="解决方案-ConcurrentHashMap"></a>解决方案-ConcurrentHashMap</h3><p>将Map&lt;String,String&gt; map = new HashMap&lt;&gt;();换成Map&lt;String,String&gt; map = new ConcurrentHashMap&lt;&gt;(); 利用ConcurrentHashMap解决。</p>
<h1 id="多线程锁"><a href="#多线程锁" class="headerlink" title="多线程锁"></a>多线程锁</h1><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p><strong>synchronized</strong></p>
<p>锁的是当前对象this</p>
<p><strong>static synchronized</strong></p>
<p>锁的是当前的Class。</p>
<p><strong>synchronized实现同步的基础</strong>：Java中的每一个对象都可以作为锁，具体表现为以下3中形式。</p>
<p>对于普通同步方法，锁是当前实例对象。</p>
<p>对于静态同步方法，锁是当前类的Class对象。</p>
<p>对于同步方法快，锁是synchronized括号里配置的对象。</p>
<h2 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h2><h3 id="非公平锁"><a href="#非公平锁" class="headerlink" title="非公平锁"></a>非公平锁</h3><p>非公平锁可能会出现线程饿死的情况，它的效率高。</p>
<h3 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h3><p>公平锁阳光普照，不会出现线程饿死的情况，但是它每次都要询问是否有人占用资源，所以它的效率较低。</p>
<h3 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h3><p>通过查看ReentrantLock的源代码可以发现，在创建ReentrantLock的时候传入一个Boolean类型的参数即可，true为公平锁，false为非公平锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creates an instance of &#123;<span class="hljs-doctag">@code</span> ReentrantLock&#125;.</span><br><span class="hljs-comment"> * This is equivalent to using &#123;<span class="hljs-doctag">@code</span> ReentrantLock(false)&#125;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ReentrantLock</span><span class="hljs-params">()</span> </span>&#123;<br>    sync = <span class="hljs-keyword">new</span> NonfairSync();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creates an instance of &#123;<span class="hljs-doctag">@code</span> ReentrantLock&#125; with the</span><br><span class="hljs-comment"> * given fairness policy.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> fair &#123;<span class="hljs-doctag">@code</span> true&#125; if this lock should use a fair ordering policy</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ReentrantLock</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> fair)</span> </span>&#123;<br>    sync = fair ? <span class="hljs-keyword">new</span> FairSync() : <span class="hljs-keyword">new</span> NonfairSync();<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h2><p>可重入锁也叫做<strong>递归锁</strong>，synchronized和lock都是可重入锁，<strong>synchronized</strong>是<strong>隐式</strong>的，<strong>lock</strong>是<strong>显式</strong>的。</p>
<h3 id="synchronized-1"><a href="#synchronized-1" class="headerlink" title="synchronized"></a>synchronized</h3><p>synchronized的实现代码如下，外层开锁，里面的随便进入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ten.juc.lock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncLockDemo</span> </span>&#123;<br>	<span class="hljs-comment">//public synchronized void add()&#123;</span><br>    <span class="hljs-comment">//    add();</span><br>   <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>      <span class="hljs-comment">//  new SyncLockDemo().add();</span><br>        Object o = <span class="hljs-keyword">new</span> Object();<br>        <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>            <span class="hljs-keyword">synchronized</span> (o) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;外层&quot;</span>);<br>                <span class="hljs-keyword">synchronized</span> (o) &#123;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;中层&quot;</span>);<br>                    <span class="hljs-keyword">synchronized</span> (o) &#123;<br>                        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;内层&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;t1&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="LOCK实现"><a href="#LOCK实现" class="headerlink" title="LOCK实现"></a>LOCK实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncLockDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 上锁</span><br>                lock.lock();<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;外层&quot;</span>);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 上锁</span><br>                    lock.lock();<br>                    System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;内层&quot;</span>);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    <span class="hljs-comment">// 解锁</span><br>                    lock.unlock();<br>                &#125;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-comment">// 解锁</span><br>                lock.unlock();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;AA&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>所有的锁操作都要上锁和解锁，如果上述代码中的内层只上锁，没有解锁，只有他一个线程也可以运行，但是如果再加一个线程就不可以了，原因就是内层的锁没有释放，另一个线程继续等待锁。</p>
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><h3 id="什么是死锁"><a href="#什么是死锁" class="headerlink" title="什么是死锁"></a>什么是死锁</h3><p>两个或者两个以上的进程在执行过程中，因为争夺资源而造成的一种相互等待的现象，如果没有外力干涉，他们无法在继续执行下去。</p>
<p><img src="/myBlog/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220304150459745.png" alt="image-20220304150459745"></p>
<h3 id="产生死锁的原因"><a href="#产生死锁的原因" class="headerlink" title="产生死锁的原因"></a>产生死锁的原因</h3><ol>
<li>系统资源不足</li>
<li>进程推进顺序不合适</li>
<li>资源分配不当</li>
</ol>
<h3 id="验证是否是死锁"><a href="#验证是否是死锁" class="headerlink" title="验证是否是死锁"></a>验证是否是死锁</h3><p>使用以下命令</p>
<ol>
<li><strong>jps -l</strong>：查出线程号，类似Linux的 ps -ef</li>
<li><strong>jstack+线程号</strong>：jvm自带堆栈跟踪工具</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">E:\IdeaProject_code\juc&gt;jps -l<br>11776 sun.tools.jps.Jps<br>8704 com.ten.juc.sync.DeadLock<br>11420<br>14572 org.jetbrains.jps.cmdline.Launcher<br><br>E:\IdeaProject_code\juc&gt;jstack 8704<br>2022-03-04 15:26:01<br>Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.221-b11 mixed mode):<br><br><span class="hljs-string">&quot;DestroyJavaVM&quot;</span> <span class="hljs-comment">#14 prio=5 os_prio=0 tid=0x00000000032a2800 nid=0x3a88 waiting on condition [0x0000000000000000]</span><br>   java.lang.Thread.State: RUNNABLE<br><br><span class="hljs-string">&quot;A&quot;</span> <span class="hljs-comment">#13 prio=5 os_prio=0 tid=0x000000001aa58000 nid=0x368c waiting for monitor entry [0x000000001b43f000]</span><br>   java.lang.Thread.State: BLOCKED (on object monitor)<br>        at com.ten.juc.sync.DeadLock.lambda$main<span class="hljs-variable">$1</span>(DeadLock.java:35)<br>        - waiting to lock &lt;0x00000000d9560470&gt; (a java.lang.Object)<br>        - locked &lt;0x00000000d9560480&gt; (a java.lang.Object)<br>        at com.ten.juc.sync.DeadLock$$Lambda<span class="hljs-variable">$2</span>/1078694789.run(Unknown Source)<br>        at java.lang.Thread.run(Thread.java:748)<br><br><span class="hljs-string">&quot;A&quot;</span> <span class="hljs-comment">#12 prio=5 os_prio=0 tid=0x000000001aa51800 nid=0x36b8 waiting for monitor entry [0x000000001b33f000]</span><br>   java.lang.Thread.State: BLOCKED (on object monitor)<br>        at com.ten.juc.sync.DeadLock.lambda$main<span class="hljs-variable">$0</span>(DeadLock.java:22)<br>        - waiting to lock &lt;0x00000000d9560480&gt; (a java.lang.Object)<br>        - locked &lt;0x00000000d9560470&gt; (a java.lang.Object)<br>        at com.ten.juc.sync.DeadLock$$Lambda<span class="hljs-variable">$1</span>/1324119927.run(Unknown Source)<br>        at java.lang.Thread.run(Thread.java:748)<br><br>...........<br><br><br>Found one Java-level deadlock:<br>=============================<br><span class="hljs-string">&quot;A&quot;</span>:<br>  waiting to lock monitor 0x000000000339bd48 (object 0x00000000d9560470, a java.lang.Object),<br>  <span class="hljs-built_in">which</span> is held by <span class="hljs-string">&quot;A&quot;</span><br><span class="hljs-string">&quot;A&quot;</span>:<br>  waiting to lock monitor 0x000000000339e3c8 (object 0x00000000d9560480, a java.lang.Object),<br>  <span class="hljs-built_in">which</span> is held by <span class="hljs-string">&quot;A&quot;</span><br><br>Java stack information <span class="hljs-keyword">for</span> the threads listed above:<br>===================================================<br><span class="hljs-string">&quot;A&quot;</span>:<br>        at com.ten.juc.sync.DeadLock.lambda$main<span class="hljs-variable">$1</span>(DeadLock.java:35)<br>        - waiting to lock &lt;0x00000000d9560470&gt; (a java.lang.Object)<br>        - locked &lt;0x00000000d9560480&gt; (a java.lang.Object)<br>        at com.ten.juc.sync.DeadLock$$Lambda<span class="hljs-variable">$2</span>/1078694789.run(Unknown Source)<br>        at java.lang.Thread.run(Thread.java:748)<br><span class="hljs-string">&quot;A&quot;</span>:<br>        at com.ten.juc.sync.DeadLock.lambda$main<span class="hljs-variable">$0</span>(DeadLock.java:22)<br>        - waiting to lock &lt;0x00000000d9560480&gt; (a java.lang.Object)<br>        - locked &lt;0x00000000d9560470&gt; (a java.lang.Object)<br>        at com.ten.juc.sync.DeadLock$$Lambda<span class="hljs-variable">$1</span>/1324119927.run(Unknown Source)<br>        at java.lang.Thread.run(Thread.java:748)<br><br>Found 1 deadlock.<br><br></code></pre></td></tr></table></figure>



<h1 id="Callable接口"><a href="#Callable接口" class="headerlink" title="Callable接口"></a>Callable接口</h1><h2 id="创建线程的几种方式"><a href="#创建线程的几种方式" class="headerlink" title="创建线程的几种方式"></a>创建线程的几种方式</h2><ol>
<li>继承Thead类</li>
<li>实现Runnable接口</li>
<li>实现Callable接口</li>
<li>线程池</li>
</ol>
<h2 id="Runnable和Callable的不同"><a href="#Runnable和Callable的不同" class="headerlink" title="Runnable和Callable的不同"></a>Runnable和Callable的不同</h2><ol>
<li>是否有返回值，Runnable没有返回值，Callable有返回值</li>
<li>没有结果是否会出现异常，Runnable不会，Callable会抛出异常</li>
<li>需要重写的方法不同，Runnable是run方法，Callable是call方法</li>
</ol>
<p>Callable不能直接使用，需要寻找一个类来作为中间商，这个中间商就是FutureTask实现类（未来任务）</p>
<p><img src="/myBlog/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220304170030914.png" alt="image-20220304170030914"></p>
<h2 id="创建线程代码"><a href="#创建线程代码" class="headerlink" title="创建线程代码"></a>创建线程代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ten.juc.callable;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><span class="hljs-comment">// 用Runnable实现</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;MyThread1&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 用Callable实现</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span>&lt;<span class="hljs-title">Integer</span>&gt; </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">200</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CallableDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        <span class="hljs-comment">// 使用Runnable方式</span><br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> MyThread1(),<span class="hljs-string">&quot;AA&quot;</span>).start();<br><br>        <span class="hljs-comment">// 使用FutureTask 未来任务，返回值只计算一次，后面有用到就直接返回</span><br>        FutureTask&lt;Integer&gt; futureTask1 = <span class="hljs-keyword">new</span> FutureTask&lt;&gt;(<span class="hljs-keyword">new</span> MyThread2());<br>        <span class="hljs-comment">// 使用lombda表达式</span><br>        FutureTask&lt;Integer&gt; futureTask2 = <span class="hljs-keyword">new</span> FutureTask&lt;&gt;(()-&gt;&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1024</span>;<br>        &#125;);<br><br>        <span class="hljs-keyword">new</span> Thread(futureTask2,<span class="hljs-string">&quot;BB&quot;</span>).start();<br>        <span class="hljs-keyword">while</span> (!futureTask2.isDone())&#123;<br>            System.out.println(<span class="hljs-string">&quot;wait...&quot;</span>);<br>        &#125;<br>        System.out.println(futureTask2.get());<br>        System.out.println(futureTask2.get());  <span class="hljs-comment">// 第二次直接返回结果，不用进行计算</span><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; come over&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="辅助类"><a href="#辅助类" class="headerlink" title="辅助类"></a>辅助类</h1><h2 id="减少计数CountDownLatch"><a href="#减少计数CountDownLatch" class="headerlink" title="减少计数CountDownLatch"></a>减少计数CountDownLatch</h2><p>CountDownLatch类可以设置一个计算器，通过countDown方法来减一，使用await方法等待计数器不大于0，然后继续执行await方法之后的语句。具体实现代码如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ten.juc.juc;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.CountDownLatch;<br><br><span class="hljs-comment">// 演示CountDownLatch</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CountDownLatchDemo</span> </span>&#123;<br>    <span class="hljs-comment">// 6个同学陆续离开教室之后，班长锁门</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-comment">// 创建CountDownLatch对象，设置初始值</span><br>        CountDownLatch countDownLatch = <span class="hljs-keyword">new</span> CountDownLatch(<span class="hljs-number">6</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">6</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(() -&gt;&#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 号 离开了教室&quot;</span>);<br>                <span class="hljs-comment">// 操作一次就减一</span><br>                countDownLatch.countDown();<br>            &#125;,String.valueOf(i)).start();<br>        &#125;<br>        <span class="hljs-comment">// 如果不为0，就继续等待，如果为0了，就执行下面的输出</span><br>        countDownLatch.await();<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;  over&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="循环栅栏CyclicBarrier"><a href="#循环栅栏CyclicBarrier" class="headerlink" title="循环栅栏CyclicBarrier"></a>循环栅栏CyclicBarrier</h2><p>CyclicBarrier的意思是循环阻塞的意思，在使用中CyclicBarrier的构造方法第一个参数是目标障碍数，每次执行CyclicBarrier一次障碍数会加一，如果达到了目标障碍数，才会执行cyclicBarrier.await()之后的语句。可以将CyclicBarrier理解为+1的操作。</p>
<p>实现代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ten.juc.juc;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.CyclicBarrier;<br><br><span class="hljs-comment">// 演示 CyclicBarrier 循环栅栏</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CyclicBarrierDemo</span> </span>&#123;<br>    <span class="hljs-comment">// 定义常量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> NUMBER = <span class="hljs-number">7</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建CyclicBarrier对象</span><br>        CyclicBarrier cyclicBarrier = <span class="hljs-keyword">new</span> CyclicBarrier(NUMBER,()-&gt;&#123;<br>            System.out.println(<span class="hljs-string">&quot;******7颗龙珠已集齐！！&quot;</span>);<br>        &#125;);<br>        <span class="hljs-comment">// 收集七颗龙珠过程</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">7</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;星龙珠已经收集了&quot;</span>);<br>                    <span class="hljs-comment">// 等待</span><br>                    cyclicBarrier.await();<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;,String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="信号灯Semaphore"><a href="#信号灯Semaphore" class="headerlink" title="信号灯Semaphore"></a>信号灯Semaphore</h2><p>当我们创建一个可扩展大小的线程池，并且需要在线程池内同时让有限数目的线程并发运行时，就需要用到Semaphore（信号灯机制），Semaphore 通常用于限制可以访问某些资源（物理或逻辑的）的线程数目，它是一个计数信号量，从概念上讲，信号量维护了一个许可集合，如有必要，在许可可用前会阻塞每一个acquire()，然后再获取该许可，每个release() 添加一个许可，从而可能释放一个正在阻塞的获取者。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ten.juc.juc;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.concurrent.Semaphore;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">// 6辆汽车，停3个车位</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SemaphoreDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建Semaphore，设置许可数量</span><br>        Semaphore semaphore = <span class="hljs-keyword">new</span> Semaphore(<span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">6</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 占位</span><br>                    semaphore.acquire();<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 抢占了车位&quot;</span>);<br><br>                    <span class="hljs-comment">// 等待</span><br>                    TimeUnit.SECONDS.sleep(<span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">5</span>));<br><br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;----------离开了车位&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    <span class="hljs-comment">// 释放</span><br>                    semaphore.release();<br>                &#125;<br>            &#125;,String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>读写锁：一个资源可以被多个读线程访问，或者可以被一个写线程访问，但是不能同时存在读写线程，读写互斥，读读共享。</p>
<p><img src="/myBlog/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220304202147809.png" alt="image-20220304202147809"></p>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ten.juc.readwrite;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReadWriteLock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;<br><br><span class="hljs-comment">// 创建资源类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCatch</span></span>&#123;<br>    <span class="hljs-comment">// 定义一个map，由于存储数据   因为涉及到取和读的次数比较多，所以用volatile</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-comment">// 定义读写锁</span><br>    <span class="hljs-keyword">private</span> ReadWriteLock readWriteLock = <span class="hljs-keyword">new</span> ReentrantReadWriteLock();<br>    <span class="hljs-comment">// 存数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(String key, Object value)</span> </span>&#123;<br>        <span class="hljs-comment">// 添加写锁</span><br>        readWriteLock.writeLock().lock();<br>        <span class="hljs-comment">// 暂停一会</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 正在写数据&quot;</span> + key);<br>            TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">300</span>);<br>            <span class="hljs-comment">// 写入</span><br>            map.put(key, value);<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 已写完&quot;</span> + key);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 释放写锁</span><br>            readWriteLock.writeLock().unlock();<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">// 取数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">get</span><span class="hljs-params">(String key)</span>  </span>&#123;<br>        Object result = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">// 添加读锁</span><br>        readWriteLock.readLock().lock();<br>        <span class="hljs-comment">// 暂停一会</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 正在读取数据&quot;</span> + key);<br>            TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">300</span>);<br>            <span class="hljs-comment">// 取数据</span><br>            result = map.get(key);<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 已读完&quot;</span> + key);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 释放读锁</span><br>            readWriteLock.readLock().unlock();<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReadWriteLockDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyCatch myCatch = <span class="hljs-keyword">new</span> MyCatch();<br>        <span class="hljs-comment">// 先存5个</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++)&#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> num = i;<br>            <span class="hljs-keyword">new</span> Thread(() -&gt;&#123;<br>                myCatch.put(num+<span class="hljs-string">&quot;&quot;</span>,num);<br>            &#125;,String.valueOf(i)).start();<br>        &#125;<br>        <span class="hljs-comment">// 读取5个</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++)&#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> num = i;<br>            <span class="hljs-keyword">new</span> Thread(() -&gt;&#123;<br>                myCatch.get(num+<span class="hljs-string">&quot;&quot;</span>);<br>            &#125;,String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="读写锁的演变"><a href="#读写锁的演变" class="headerlink" title="读写锁的演变"></a>读写锁的演变</h2><p><img src="/myBlog/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220305132103446.png" alt="image-20220305132103446"></p>
<h2 id="读写锁的降级"><a href="#读写锁的降级" class="headerlink" title="读写锁的降级"></a>读写锁的降级</h2><p><img src="/myBlog/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220305132643455.png" alt="image-20220305132643455"></p>
<h2 id="读写锁降级代码演示"><a href="#读写锁降级代码演示" class="headerlink" title="读写锁降级代码演示"></a><strong>读写锁降级代码演示</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ten.juc.readwrite;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;<br><br><span class="hljs-comment">// 读写锁的降级</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demotion</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ReentrantReadWriteLock readWriteLock = <span class="hljs-keyword">new</span> ReentrantReadWriteLock();<br>        ReentrantReadWriteLock.WriteLock writeLock = readWriteLock.writeLock(); <span class="hljs-comment">// 写锁</span><br>        ReentrantReadWriteLock.ReadLock readLock = readWriteLock.readLock();    <span class="hljs-comment">// 读锁</span><br><br>        <span class="hljs-comment">// 写锁</span><br>        writeLock.lock();<br>        System.out.println(<span class="hljs-string">&quot;write----------&quot;</span>);<br><br>        <span class="hljs-comment">// 读锁</span><br>        readLock.lock();<br>        System.out.println(<span class="hljs-string">&quot;read======&quot;</span>);<br><br>        <span class="hljs-comment">// 释放写锁</span><br>        writeLock.unlock();<br>        <span class="hljs-comment">// 释放读锁</span><br>        readLock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="BlockingQueue阻塞队列"><a href="#BlockingQueue阻塞队列" class="headerlink" title="BlockingQueue阻塞队列"></a>BlockingQueue阻塞队列</h1><h2 id="概述和架构"><a href="#概述和架构" class="headerlink" title="概述和架构"></a>概述和架构</h2><p>阻塞队列是一个共享队列，先进先出。当队列是空的时候，从队列中取元素会被阻塞，当队列满了，从队列中添加元素会别阻塞。</p>
<p><img src="/myBlog/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220305134836146.png" alt="image-20220305134836146"></p>
<h2 id="分类和核心方法介绍"><a href="#分类和核心方法介绍" class="headerlink" title="分类和核心方法介绍"></a>分类和核心方法介绍</h2><h3 id="ArrayBlockiingQueue（常用）"><a href="#ArrayBlockiingQueue（常用）" class="headerlink" title="ArrayBlockiingQueue（常用）"></a>ArrayBlockiingQueue（常用）</h3><p>由数组结构组成的有界阻塞队列</p>
<h3 id="LinkedBlockingQueue（常用）"><a href="#LinkedBlockingQueue（常用）" class="headerlink" title="LinkedBlockingQueue（常用）"></a>LinkedBlockingQueue（常用）</h3><p>由链表结构组成的阻塞队列。大小默认为integer.MAX_VALUE</p>
<h3 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h3><p>使用优先级队列实现的延迟无界阻塞队列。</p>
<h3 id="PrioriityBlockingQueue"><a href="#PrioriityBlockingQueue" class="headerlink" title="PrioriityBlockingQueue"></a>PrioriityBlockingQueue</h3><p>支持优先级排序的无界阻塞队列。</p>
<h3 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h3><p>不存储元素的阻塞队列，也即单个元素的队列。</p>
<h3 id="LinkedTranferQueue"><a href="#LinkedTranferQueue" class="headerlink" title="LinkedTranferQueue"></a>LinkedTranferQueue</h3><p>由链表组成的无界阻塞队列。</p>
<h3 id="LinkedBlockingDeque"><a href="#LinkedBlockingDeque" class="headerlink" title="LinkedBlockingDeque"></a>LinkedBlockingDeque</h3><p>有链表组成的双向阻塞队列。</p>
<p><img src="/myBlog/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220305164446445.png" alt="image-20220305164446445"></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol>
<li>在多线程领域：所谓阻塞，在某些情况下会挂起线程（即阻塞），一旦条件满足，被挂起的线程又会自动唤起。</li>
</ol>
<h1 id="线程池-ThreadPool"><a href="#线程池-ThreadPool" class="headerlink" title="线程池 ThreadPool"></a>线程池 ThreadPool</h1><h2 id="概述和架构-1"><a href="#概述和架构-1" class="headerlink" title="概述和架构"></a>概述和架构</h2><p>线程池，是一种线程使用模式。线程过多会带来调度开销，进而影响缓存局部性和整体性能。而线程池维护者多个线程，等待着监督管理者分配可并发执行的任务。这避免了在处理短时间任务时创建于销毁线程的代价。线程池不仅能够保证内核的充分利用，还能防止过分调度。</p>
<p><strong>线程池优势</strong>：线程池做的工作只要是控制运行的线程数量，处理过程中将任务放入队列，然后在线程创将后自动启动这些线程任务，如果线程数量超过了最大数量，超出数量的线程排队等候，等其他线程执行完毕，再从队列中取出任务来执行。</p>
<p><strong>特点：</strong></p>
<ul>
<li>降低资源消耗：通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li>
<li>提高响应速度：当任务到达时，任务可以不需要等待线程创建就能立即执行。</li>
<li>提高线程的可管理性：线程是稀缺资源，如果无限制的创建，不仅会销毁系统资源，还回降低系统的稳定性，使用线程池可以统一的分配，调优和监控。</li>
<li>java中的线程池是通过Executor框架实现的，该框架中用到了Executor，Executors，ExecutorService，ThreadPoolExecutor这几个类。</li>
</ul>
<p><img src="/myBlog/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220305171806962.png" alt="image-20220305171806962"></p>
<h2 id="使用方式和底层原理"><a href="#使用方式和底层原理" class="headerlink" title="使用方式和底层原理"></a>使用方式和底层原理</h2><h3 id="newFixedThreadPoll（常用）"><a href="#newFixedThreadPoll（常用）" class="headerlink" title="newFixedThreadPoll（常用）"></a>newFixedThreadPoll（常用）</h3><p><strong>作用：</strong>创建一个可重用固定线程数的线程池，以共享的无界队列方式来运行这些线程。</p>
<p><strong>特征：</strong></p>
<ul>
<li>线程池中的线程处于一定的量，可以很好的控制线程的并发量。</li>
<li>线程可以重复被使用，在显示关闭之前，都将一直存在。</li>
<li>超出一定量的线程被提交时候需要在队列中等待。</li>
</ul>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ten.juc.pool;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.Executor;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-comment">// 常见的创建线程池</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadPoolDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 一池多线程</span><br>        <span class="hljs-comment">//ExecutorService threadPool1 = Executors.newFixedThreadPool(5);</span><br><br>        <span class="hljs-comment">// 一池一线程</span><br>        <span class="hljs-comment">//ExecutorService threadPool2 = Executors.newSingleThreadExecutor();</span><br><br>        <span class="hljs-comment">// 可扩容线程池</span><br>        ExecutorService threadPool3 = Executors.newCachedThreadPool();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; i++) &#123;<br>                <span class="hljs-comment">// 执行</span><br>                threadPool3.execute(()-&gt;&#123;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 办理业务&quot;</span>);<br>                &#125;);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 释放资源</span><br>            threadPool3.shutdown();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<p>通过观察这三种创建线程池方式源码可以发现，底层都是由ThreadPoolExecutor创建的。</p>
<h3 id="ThreadPoolExecutor的7个参数"><a href="#ThreadPoolExecutor的7个参数" class="headerlink" title="ThreadPoolExecutor的7个参数"></a>ThreadPoolExecutor的7个参数</h3><p><img src="/myBlog/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220305191058548.png" alt="image-20220305191058548"></p>
<h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>主线程启动后，执行execute()方法，创建线程池（执行executor()之后才创建），假设最大线程数是5个，常住线程数是2，阻塞队列是3个。当常驻线程数1，2满了，后面来的3,4,5的就被安排到阻塞队列，如果这时还来了第6,7,8个，则启动线程池的其他三个没用的线程，直接给他们用，如果第9个来了，这个时候所有的线程和阻塞队列都满了，则执行handler的拒绝策略。</p>
<p><img src="/myBlog/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220305191838834.png" alt="image-20220305191838834"></p>
<h3 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h3><p><img src="/myBlog/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220305192917090.png" alt="image-20220305192917090"></p>
<h2 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h2><p>实际上都会用自定义线程池。</p>
<p><img src="/myBlog/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/image-20220305193328989.png" alt="image-20220305193328989"></p>
<p><strong>代码演示</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ten.juc.pool;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-comment">// 自定义线程池</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadPoolDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ExecutorService threadPool = <span class="hljs-keyword">new</span> ThreadPoolExecutor(<br>                <span class="hljs-number">2</span>,<br>                <span class="hljs-number">5</span>,<br>                <span class="hljs-number">2L</span>,<br>                TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="hljs-number">3</span>),<br>                Executors.defaultThreadFactory(),<br>                <span class="hljs-keyword">new</span> ThreadPoolExecutor.AbortPolicy()<br>        );<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; i++) &#123;<br>                <span class="hljs-comment">// 执行</span><br>                threadPool.execute(()-&gt;&#123;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; 办理业务&quot;</span>);<br>                &#125;);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 释放资源</span><br>            threadPool.shutdown();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="Fork-Join-分支合并框架"><a href="#Fork-Join-分支合并框架" class="headerlink" title="Fork/Join 分支合并框架"></a>Fork/Join 分支合并框架</h1><p>Fork/Join它可以将一个大的任务拆分成多个子任务进行并行处理，最后将子任务结果合并成最后的计算结果，并进行输出。Fork/Join框架要完成两件事情：</p>
<p>Fork：把一个复杂任务进行分拆，大事化小。</p>
<p>Join：把拆分任务的结果进行合并</p>
<p><strong>代码演示</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ten.juc.forkjoin;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><span class="hljs-keyword">import</span> java.util.concurrent.ForkJoinPool;<br><span class="hljs-keyword">import</span> java.util.concurrent.ForkJoinTask;<br><span class="hljs-keyword">import</span> java.util.concurrent.RecursiveTask;<br><br><span class="hljs-comment">// 演示分支合并</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RecursiveTask</span>&lt;<span class="hljs-title">Integer</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span>  <span class="hljs-keyword">int</span> VALUE = <span class="hljs-number">10</span>;    <span class="hljs-comment">// 定义一个常量，用于判断两个数相加是否大于10</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> begin;  <span class="hljs-comment">// 开始的</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> end;    <span class="hljs-comment">// 结束的</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> result; <span class="hljs-comment">// 返回的结果</span><br><br>    <span class="hljs-comment">// 构造方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyTask</span><span class="hljs-params">(<span class="hljs-keyword">int</span> begin,<span class="hljs-keyword">int</span> end)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.begin = begin;<br>        <span class="hljs-keyword">this</span>.end = end;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Integer <span class="hljs-title">compute</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 如果他们相减小于10，则直接相加</span><br>        <span class="hljs-keyword">if</span>((end - begin) &lt;= VALUE)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = begin; i &lt;= end; i++)&#123;<br>                result = result + i;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 否则拆分</span><br>            <span class="hljs-comment">// 计算中间的值</span><br>            <span class="hljs-keyword">int</span> middle = (begin + end) / <span class="hljs-number">2</span>;<br>            <span class="hljs-comment">// 向左拆分</span><br>            MyTask task1 = <span class="hljs-keyword">new</span> MyTask(begin, middle);<br>            <span class="hljs-comment">// 向右拆分</span><br>            MyTask task2 = <span class="hljs-keyword">new</span> MyTask(middle + <span class="hljs-number">1</span>, end);<br>            <span class="hljs-comment">// 拆分</span><br>            task1.fork();<br>            task2.fork();<br><br>            <span class="hljs-comment">// 合并</span><br>            result = task1.join() + task2.join();<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ForkJoinDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        <span class="hljs-comment">// 创建任务对象</span><br>        MyTask myTask = <span class="hljs-keyword">new</span> MyTask(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>);<br>        <span class="hljs-comment">// 创建ForkJoinPool对象</span><br>        ForkJoinPool forkJoinPool = <span class="hljs-keyword">new</span> ForkJoinPool();<br>        ForkJoinTask&lt;Integer&gt; forkJoinTask = forkJoinPool.submit(myTask);<br>        <span class="hljs-comment">// 获取最终合并到的结果</span><br>        Integer result = forkJoinTask.get();<br>        System.out.println(result);<br>        <span class="hljs-comment">// 关闭池对象</span><br>        forkJoinPool.shutdown();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="CompletableFuture-异步回调"><a href="#CompletableFuture-异步回调" class="headerlink" title="CompletableFuture 异步回调"></a>CompletableFuture 异步回调</h1><p>runAsync： 没有返回值</p>
<p>supplyAsync：有返回值</p>
<p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ten.juc.completable;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.CompletableFuture;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><span class="hljs-comment">// 异步调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CompletableFutureDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException </span>&#123;<br>        <span class="hljs-comment">// 异步调用 没有返回值</span><br>        CompletableFuture&lt;Void&gt; completableFuture1 = CompletableFuture.runAsync(()-&gt;&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; --- completableFuture1&quot;</span>);<br>        &#125;);<br>        completableFuture1.get();<br><br>        <span class="hljs-comment">// 异步调用 有返回值</span><br>        CompletableFuture&lt;Integer&gt; completableFuture2 = CompletableFuture.supplyAsync(() -&gt;&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; --- completableFuture2&quot;</span>);<br>            <span class="hljs-comment">// 模拟异常</span><br>            <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span> / <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1024</span>;<br>        &#125;);<br>        completableFuture2.whenComplete((t,u) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;--------t=&quot;</span> +t);    <span class="hljs-comment">// 返回值</span><br>            System.out.println(<span class="hljs-string">&quot;--------u=&quot;</span> +u);    <span class="hljs-comment">// 异常</span><br>        &#125;).get();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JUC并发编程</category>
      </categories>
      <tags>
        <tag>JUC</tag>
      </tags>
  </entry>
  <entry>
    <title>day12-登录业务</title>
    <url>/myBlog/day12-%E7%99%BB%E5%BD%95%E4%B8%9A%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="Day12-登录业务"><a href="#Day12-登录业务" class="headerlink" title="Day12-登录业务"></a>Day12-登录业务</h1><h1 id="登录业务介绍（单点登录）"><a href="#登录业务介绍（单点登录）" class="headerlink" title="登录业务介绍（单点登录）"></a>登录业务介绍（单点登录）</h1><p><img src="/myBlog/day12-%E7%99%BB%E5%BD%95%E4%B8%9A%E5%8A%A1/image-20220107000233656.png" alt="image-20220107000233656"></p>
<h1 id="Jwt介绍"><a href="#Jwt介绍" class="headerlink" title="Jwt介绍"></a>Jwt介绍</h1><p><img src="/myBlog/day12-%E7%99%BB%E5%BD%95%E4%B8%9A%E5%8A%A1/image-20220107000249450.png" alt="image-20220107000249450"></p>
<h1 id="整合JWT令牌"><a href="#整合JWT令牌" class="headerlink" title="整合JWT令牌"></a>整合JWT令牌</h1><h2 id="1、在common-utils模块中添加jwt工具依赖"><a href="#1、在common-utils模块中添加jwt工具依赖" class="headerlink" title="1、在common_utils模块中添加jwt工具依赖"></a>1、在common_utils模块中添加jwt工具依赖</h2><p>在pom中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- JWT --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="创建JWT工具类"><a href="#创建JWT工具类" class="headerlink" title="创建JWT工具类"></a>创建JWT工具类</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JwtUtils</span> </span>&#123;<br><br>    <span class="hljs-comment">// 常量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> EXPIRE = <span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>;     <span class="hljs-comment">// token过期时间</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String APP_SECRET = <span class="hljs-string">&quot;ukc8BDbRigUDaY6pZFfWus2jZWLPHO&quot;</span>;   <span class="hljs-comment">// 秘钥</span><br><br>    <span class="hljs-comment">// 生成token字符串的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getJwtToken</span><span class="hljs-params">(String id, String nickname)</span></span>&#123;<br><br>        String JwtToken = Jwts.builder()<br>                <span class="hljs-comment">// 头信息</span><br>                .setHeaderParam(<span class="hljs-string">&quot;typ&quot;</span>, <span class="hljs-string">&quot;JWT&quot;</span>)<br>                .setHeaderParam(<span class="hljs-string">&quot;alg&quot;</span>, <span class="hljs-string">&quot;HS256&quot;</span>)<br><br>                .setSubject(<span class="hljs-string">&quot;guli-user&quot;</span>)<br>                .setIssuedAt(<span class="hljs-keyword">new</span> Date())<br>                .setExpiration(<span class="hljs-keyword">new</span> Date(System.currentTimeMillis() + EXPIRE))<br><br>                .claim(<span class="hljs-string">&quot;id&quot;</span>, id)    <span class="hljs-comment">// 设置token主体部分，存储用户信息</span><br>                .claim(<span class="hljs-string">&quot;nickname&quot;</span>, nickname)<br>                .signWith(SignatureAlgorithm.HS256, APP_SECRET)<br>                .compact();<br>        <span class="hljs-keyword">return</span> JwtToken;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断token是否存在与有效</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> jwtToken</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">checkToken</span><span class="hljs-params">(String jwtToken)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(jwtToken)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Jwts.parser().setSigningKey(APP_SECRET).parseClaimsJws(jwtToken);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断token是否存在与有效</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">checkToken</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            String jwtToken = request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>            <span class="hljs-keyword">if</span>(StringUtils.isEmpty(jwtToken)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            Jwts.parser().setSigningKey(APP_SECRET).parseClaimsJws(jwtToken);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据token获取会员id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getMemberIdByJwtToken</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>        String jwtToken = request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(jwtToken)) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        Jws&lt;Claims&gt; claimsJws = Jwts.parser().setSigningKey(APP_SECRET).parseClaimsJws(jwtToken);<br>        Claims claims = claimsJws.getBody();<br>        <span class="hljs-keyword">return</span> (String)claims.get(<span class="hljs-string">&quot;id&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="整合阿里云短信"><a href="#整合阿里云短信" class="headerlink" title="整合阿里云短信"></a>整合阿里云短信</h1><h2 id="新建短信微服务"><a href="#新建短信微服务" class="headerlink" title="新建短信微服务"></a>新建短信微服务</h2><p>1、在service模块下创建子模块service-msm</p>
<p>2、创建controller和service代码</p>
<p>3、配置application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 服务端口</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8005</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 服务名</span><br><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">service-msm</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># mysql数据库连接</span><br><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/guli?serverTimezone=GMT%2B8</span><br><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">root</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># redis</span><br><span class="hljs-meta">spring.redis.host</span>=<span class="hljs-string">192.168.242.3</span><br><span class="hljs-meta">spring.redis.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-meta">spring.redis.port</span>=<span class="hljs-string">6379</span><br><span class="hljs-meta">spring.redis.database</span>= <span class="hljs-string">0</span><br><span class="hljs-meta">spring.redis.timeout</span>=<span class="hljs-string">1800000</span><br><span class="hljs-meta">spring.redis.lettuce.pool.max-active</span>=<span class="hljs-string">20</span><br><span class="hljs-meta">spring.redis.lettuce.pool.max-wait</span>=<span class="hljs-string">-1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#最大阻塞等待时间(负数表示没限制)</span><br><span class="hljs-meta">spring.redis.lettuce.pool.max-idle</span>=<span class="hljs-string">5</span><br><span class="hljs-meta">spring.redis.lettuce.pool.min-idle</span>=<span class="hljs-string">0</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#最小空闲</span><br><span class="hljs-comment">#返回json的全局时间格式</span><br><span class="hljs-meta">spring.jackson.date-format</span>=<span class="hljs-string">yyyy-MM-dd HH:mm:ss</span><br><span class="hljs-meta">spring.jackson.time-zone</span>=<span class="hljs-string">GMT+8</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#配置mapper xml文件的路径</span><br><span class="hljs-meta">mybatis-plus.mapper-locations</span>=<span class="hljs-string">classpath:com/atguigu/edumsm/mapper/xml/*.xml</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#mybatis日志</span><br><span class="hljs-meta">mybatis-plus.configuration.log-impl</span>=<span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure>

<p>4、创建启动类</p>
<p>创建MsmApplication.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ComponentScan(&#123;&quot;com.atguigu&quot;&#125;)</span><br><span class="hljs-meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span>     <span class="hljs-comment">// 去掉数据库自动装配</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MsmApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(MsmApplication.class,args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="编写发送短信接口"><a href="#编写发送短信接口" class="headerlink" title="编写发送短信接口"></a>编写发送短信接口</h2><p>1、在service-msm的pom中引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>2、编写controller，根据手机号发送短信</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/edumsm/msm&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MsmController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MsmService msmService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String,String&gt; redisTemplate;<br><br>    <span class="hljs-comment">// 发送验证码</span><br>    <span class="hljs-meta">@GetMapping(value = &quot;send/&#123;phone&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">code</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String phone)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 1.先从redis中查询，如果查询出来就发送</span><br>        String code = redisTemplate.opsForValue().get(phone);<br>        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(code))&#123;<br>            <span class="hljs-keyword">return</span> R.ok();<br>        &#125;<br><br>        <span class="hljs-comment">// 2.查询不出来，在发送阿里云短信</span><br>        <span class="hljs-comment">// 随机生成验证码</span><br>        code = RandomUtil.getFourBitRandom();<br><br>        Map&lt;String,Object&gt; param = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>        param.put(<span class="hljs-string">&quot;code&quot;</span>, code);<br>        <span class="hljs-keyword">boolean</span> isSend = msmService.send(phone, param);<br>        <span class="hljs-keyword">if</span>(isSend) &#123;<br>            redisTemplate.opsForValue().set(phone,code,<span class="hljs-number">5</span>,TimeUnit.MINUTES);<br>            <span class="hljs-keyword">return</span> R.ok();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> R.error().message(<span class="hljs-string">&quot;发送短信失败&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>3、编写service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MsmServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MsmService</span> </span>&#123;<br><br>    <span class="hljs-comment">// 发送验证码</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">send</span><span class="hljs-params">(String phone, Map&lt;String, Object&gt; param)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(phone)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        DefaultProfile profile =<br>                DefaultProfile.getProfile(<span class="hljs-string">&quot;default&quot;</span>, <span class="hljs-string">&quot;LTAIq6nIPY09VROj&quot;</span>, <span class="hljs-string">&quot;FQ7UcixT9wEqMv9F35nORPqKr8XkTF&quot;</span>);<br>        IAcsClient client = <span class="hljs-keyword">new</span> DefaultAcsClient(profile);<br>        CommonRequest request = <span class="hljs-keyword">new</span> CommonRequest();<br>        <span class="hljs-comment">//request.setProtocol(ProtocolType.HTTPS);</span><br>        request.setMethod(MethodType.POST);<br><br>        request.setDomain(<span class="hljs-string">&quot;dysmsapi.aliyuncs.com&quot;</span>);<br>        request.setVersion(<span class="hljs-string">&quot;2017-05-25&quot;</span>);<br>        request.setAction(<span class="hljs-string">&quot;SendSms&quot;</span>);<br><br>        request.putQueryParameter(<span class="hljs-string">&quot;PhoneNumbers&quot;</span>, phone);<br>        request.putQueryParameter(<span class="hljs-string">&quot;SignName&quot;</span>, <span class="hljs-string">&quot;我的谷粒在线教育网站&quot;</span>);<br>        request.putQueryParameter(<span class="hljs-string">&quot;TemplateCode&quot;</span>, <span class="hljs-string">&quot;SMS_180051135&quot;</span>);<br>        request.putQueryParameter(<span class="hljs-string">&quot;TemplateParam&quot;</span>, JSONObject.toJSONString(param));<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            CommonResponse response = client.getCommonResponse(request);<br>            System.out.println(response.getData());<br>            <span class="hljs-keyword">return</span> response.getHttpResponse().isSuccess();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="云市场的短信验证码接收"><a href="#云市场的短信验证码接收" class="headerlink" title="云市场的短信验证码接收"></a>云市场的短信验证码接收</h2><p>这里我使用的是阿里云的云市场的，不用阿里云的短信服务</p>
<p>Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 用阿里云的云市场短信服务</span><br><span class="hljs-meta">@GetMapping(&quot;sendByPhone/&#123;phone&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">sendByPhone</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String phone)</span></span>&#123;<br><br>    <span class="hljs-comment">// 1.先从redis中取验证码</span><br>    String code = redisTemplate.opsForValue().get(phone);<br>    <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(code))&#123;<br>        <span class="hljs-keyword">return</span> R.ok();<br>    &#125;<br><br>    code = RandomUtil.getFourBitRandom();<br><br>    <span class="hljs-comment">// 2.如果redis没有，再发送短信</span><br>    <span class="hljs-keyword">boolean</span> isSend = msmService.sendCodeByPhone(phone,code);<br><br>    <span class="hljs-keyword">if</span> (isSend)&#123;<br>        redisTemplate.opsForValue().set(phone,code,<span class="hljs-number">5</span>,TimeUnit.MINUTES);<br>        <span class="hljs-keyword">return</span> R.ok();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> R.error().message(<span class="hljs-string">&quot;发送验证码失败&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>serviceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 用阿里云的云市场短信服务</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">sendCodeByPhone</span><span class="hljs-params">(String phone, String code)</span> </span>&#123;<br><br>    <span class="hljs-keyword">if</span>(StringUtils.isEmpty(phone)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>    String host = <span class="hljs-string">&quot;https://gyytz.market.alicloudapi.com&quot;</span>;<br>    String path = <span class="hljs-string">&quot;/sms/smsSend&quot;</span>;<br>    String method = <span class="hljs-string">&quot;POST&quot;</span>;<br>    String appcode = <span class="hljs-string">&quot;9……………2&quot;</span>;<br><br>    Map&lt;String, String&gt; headers = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;();<br><br>    <span class="hljs-comment">//最后在header中的格式(中间是英文空格)为Authorization:APPCODE 83359fd73fe94948385f570e3c139105</span><br>    headers.put(<span class="hljs-string">&quot;Authorization&quot;</span>, <span class="hljs-string">&quot;APPCODE &quot;</span> + appcode);<br><br>    Map&lt;String, String&gt; querys = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;();<br><br>    querys.put(<span class="hljs-string">&quot;mobile&quot;</span>, phone);<br>    querys.put(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;**code**:&quot;</span>+code+<span class="hljs-string">&quot;,**minute**:5&quot;</span>);<br>    querys.put(<span class="hljs-string">&quot;smsSignId&quot;</span>, <span class="hljs-string">&quot;2e65b1bb3d054466b82f0c9d125465e2&quot;</span>);<br>    querys.put(<span class="hljs-string">&quot;templateId&quot;</span>, <span class="hljs-string">&quot;908e94ccf08b4476ba6c876d13f084ad&quot;</span>);<br>    Map&lt;String, String&gt; bodys = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;();<br><br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 重要提示如下:</span><br><span class="hljs-comment">         * HttpUtils请从</span><br><span class="hljs-comment">         * https://github.com/aliyun/api-gateway-demo-sign-java/blob/master/src/main/java/com/aliyun/api/gateway/demo/util/HttpUtils.java</span><br><span class="hljs-comment">         * 下载</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * 相应的依赖请参照</span><br><span class="hljs-comment">         * https://github.com/aliyun/api-gateway-demo-sign-java/blob/master/pom.xml</span><br><span class="hljs-comment">         */</span><br>        HttpResponse response = HttpUtils.doPost(host, path, method, headers, querys, bodys);<br>        System.out.println(response.toString());<br>        <span class="hljs-comment">//获取response的body</span><br>        <span class="hljs-comment">//System.out.println(EntityUtils.toString(response.getEntity()));</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="登录功能接口"><a href="#登录功能接口" class="headerlink" title="登录功能接口"></a>登录功能接口</h1><h2 id="新建用户微服务"><a href="#新建用户微服务" class="headerlink" title="新建用户微服务"></a>新建用户微服务</h2><h3 id="1、在service模块下创建子模块service-ucenter"><a href="#1、在service模块下创建子模块service-ucenter" class="headerlink" title="1、在service模块下创建子模块service-ucenter"></a>1、在service模块下创建子模块service-ucenter</h3><h3 id="2、使用代码生成器生成代码"><a href="#2、使用代码生成器生成代码" class="headerlink" title="2、使用代码生成器生成代码"></a>2、使用代码生成器生成代码</h3><p>（1）创建ucenter_member表</p>
<p><img src="/myBlog/day12-%E7%99%BB%E5%BD%95%E4%B8%9A%E5%8A%A1/image-20220107000552998.png" alt="image-20220107000552998"></p>
<p>生成代码</p>
<h3 id="3、配置application-properties"><a href="#3、配置application-properties" class="headerlink" title="3、配置application.properties"></a>3、配置application.properties</h3><figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 服务端口</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8006</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 服务名</span><br><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">service-ucenter</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># mysql数据库连接</span><br><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/guli?serverTimezone=GMT%2B8</span><br><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">root</span><br><br><span class="hljs-meta">spring.redis.host</span>=<span class="hljs-string">192.168.242.3</span><br><span class="hljs-meta">spring.redis.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-meta">spring.redis.port</span>=<span class="hljs-string">6379</span><br><span class="hljs-meta">spring.redis.database</span>= <span class="hljs-string">0</span><br><span class="hljs-meta">spring.redis.timeout</span>=<span class="hljs-string">1800000</span><br><span class="hljs-meta">spring.redis.lettuce.pool.max-active</span>=<span class="hljs-string">20</span><br><span class="hljs-meta">spring.redis.lettuce.pool.max-wait</span>=<span class="hljs-string">-1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#最大阻塞等待时间(负数表示没限制)</span><br><span class="hljs-meta">spring.redis.lettuce.pool.max-idle</span>=<span class="hljs-string">5</span><br><span class="hljs-meta">spring.redis.lettuce.pool.min-idle</span>=<span class="hljs-string">0</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#最小空闲</span><br><span class="hljs-comment">#返回json的全局时间格式</span><br><span class="hljs-meta">spring.jackson.date-format</span>=<span class="hljs-string">yyyy-MM-dd HH:mm:ss</span><br><span class="hljs-meta">spring.jackson.time-zone</span>=<span class="hljs-string">GMT+8</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#配置mapper xml文件的路径</span><br><span class="hljs-meta">mybatis-plus.mapper-locations</span>=<span class="hljs-string">classpath:com/atguigu/educenter/mapper/xml/*.xml</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#mybatis日志</span><br><span class="hljs-meta">mybatis-plus.configuration.log-impl</span>=<span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure>



<h3 id="创建启动类"><a href="#创建启动类" class="headerlink" title="创建启动类"></a>创建启动类</h3><p>创建ServiceUcApplication.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@ComponentScan(&#123;&quot;com.atguigu&quot;&#125;)</span>     <span class="hljs-comment">// 整合swagger</span><br><span class="hljs-meta">@MapperScan(&quot;com.atguigu.educenter.mapper&quot;)</span> <span class="hljs-comment">// 扫描mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UcenterApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(UcenterApplication.class,args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="创建登录接口"><a href="#创建登录接口" class="headerlink" title="创建登录接口"></a>创建登录接口</h2><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/educenter/member&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UcenterMemberController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UcenterMemberService memberService;<br><br>    <span class="hljs-comment">// 登录</span><br>    <span class="hljs-meta">@GetMapping(&quot;login&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UcenterMember member)</span></span>&#123;<br>        String token = memberService.login(member);<br><span class="hljs-comment">// 返回token，用jwt生成</span><br><br>        <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;token&quot;</span>,token);<br>    &#125;<br><br>    <span class="hljs-comment">// 注册</span><br><br><br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="ServiceImpl"><a href="#ServiceImpl" class="headerlink" title="ServiceImpl"></a>ServiceImpl</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UcenterMemberServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceImpl</span>&lt;<span class="hljs-title">UcenterMemberMapper</span>, <span class="hljs-title">UcenterMember</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">UcenterMemberService</span> </span>&#123;<br><br>    <span class="hljs-comment">// 登录</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(UcenterMember member)</span> </span>&#123;<br>    <span class="hljs-comment">// 获取传过来的手机号码和密码</span><br>    String mobile = member.getMobile();<br>    String password = member.getPassword();<br><br>    <span class="hljs-comment">// 判断手机号码是否为空</span><br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(mobile))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GuliException(<span class="hljs-number">20001</span>,<span class="hljs-string">&quot;登录失败&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 判断密码是否为空</span><br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(password))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GuliException(<span class="hljs-number">20001</span>,<span class="hljs-string">&quot;登录失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 根据手机号码从数据库中查询对象</span><br>    QueryWrapper&lt;UcenterMember&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    wrapper.eq(<span class="hljs-string">&quot;mobile&quot;</span>,mobile);<br>    UcenterMember mobileMember = baseMapper.selectOne(wrapper);<br><br>    <span class="hljs-comment">// 如果查出来的对象为空</span><br>    <span class="hljs-keyword">if</span> (mobileMember == <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GuliException(<span class="hljs-number">20001</span>,<span class="hljs-string">&quot;登录失败&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 判断传进来的密码和数据库查出来的是否一致</span><br>    <span class="hljs-comment">// 先将传进来的密码加密，再和数据库的比较</span><br>    <span class="hljs-keyword">if</span> (!MD5.encrypt(password).equals(mobileMember.getPassword()))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GuliException(<span class="hljs-number">20001</span>,<span class="hljs-string">&quot;登录失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 判断是否被禁用</span><br>    <span class="hljs-keyword">if</span> (mobileMember.getIsDisabled())&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GuliException(<span class="hljs-number">20001</span>,<span class="hljs-string">&quot;登录失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 如果上面的校验都过了，说明可以登录,利用jwt工具生成token，并放回</span><br>    String jwtToken = JwtUtils.getJwtToken(mobileMember.getId(), mobileMember.getNickname());<br><br>    <span class="hljs-keyword">return</span> jwtToken;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.security.MessageDigest;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MD5</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">encrypt</span><span class="hljs-params">(String strSrc)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">char</span> hexChars[] = &#123; <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>,<br>                    <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span> &#125;;<br>            <span class="hljs-keyword">byte</span>[] bytes = strSrc.getBytes();<br>            MessageDigest md = MessageDigest.getInstance(<span class="hljs-string">&quot;MD5&quot;</span>);<br>            md.update(bytes);<br>            bytes = md.digest();<br>            <span class="hljs-keyword">int</span> j = bytes.length;<br>            <span class="hljs-keyword">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[j * <span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; bytes.length; i++) &#123;<br>                <span class="hljs-keyword">byte</span> b = bytes[i];<br>                chars[k++] = hexChars[b &gt;&gt;&gt; <span class="hljs-number">4</span> &amp; <span class="hljs-number">0xf</span>];<br>                chars[k++] = hexChars[b &amp; <span class="hljs-number">0xf</span>];<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(chars);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;MD5加密出错！！+&quot;</span> + e);<br>        &#125;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>出现异常</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public com.atguigu.commonutils.R com.atguigu.educenter.controller.UcenterMemberController.login(com.atguigu.educenter.entity.UcenterMember)<br></code></pre></td></tr></table></figure>

<p>经过排查，发现是controller的注解写错，把@GetMapping改成@PostMapping即可</p>
<h2 id="创建注册接口"><a href="#创建注册接口" class="headerlink" title="创建注册接口"></a>创建注册接口</h2><h3 id="RegisterVo"><a href="#RegisterVo" class="headerlink" title="RegisterVo"></a>RegisterVo</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegisterVo</span> </span>&#123;<br><br>   <span class="hljs-meta">@ApiModelProperty(value = &quot;昵称&quot;)</span><br>   <span class="hljs-keyword">private</span> String nickname;<br><br>   <span class="hljs-meta">@ApiModelProperty(value = &quot;手机号&quot;)</span><br>   <span class="hljs-keyword">private</span> String mobile;<br><br>   <span class="hljs-meta">@ApiModelProperty(value = &quot;密码&quot;)</span><br>   <span class="hljs-keyword">private</span> String password;<br><br>   <span class="hljs-meta">@ApiModelProperty(value = &quot;验证码&quot;)</span><br>    <span class="hljs-keyword">private</span> String code;<br>   <br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 注册</span><br><span class="hljs-meta">@PostMapping(&quot;register&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">registerUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> RegisterVo registerVo)</span></span>&#123;<br>    memberService.register(registerVo);<br>    <span class="hljs-keyword">return</span> R.ok();<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="serviceImpl"><a href="#serviceImpl" class="headerlink" title="serviceImpl"></a>serviceImpl</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 注册</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register</span><span class="hljs-params">(RegisterVo registerVo)</span> </span>&#123;<br>    <span class="hljs-comment">// 获取注册信息</span><br>    String nickname = registerVo.getNickname();<br>    String mobile = registerVo.getMobile();<br>    String password = registerVo.getPassword();<br>    String code = registerVo.getCode();<br><br>    <span class="hljs-comment">// 判断非空</span><br>    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(nickname) || StringUtils.isEmpty(mobile)<br>            || StringUtils.isEmpty(password) || StringUtils.isEmpty(code))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GuliException(<span class="hljs-number">20001</span>,<span class="hljs-string">&quot;注册失败，注册信息不能为空&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 判断验证码，从redis中取出来</span><br>    String mobileCode = redisTemplate.opsForValue().get(mobile);<br>    <span class="hljs-keyword">if</span> (!code.equals(mobileCode))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GuliException(<span class="hljs-number">20001</span>,<span class="hljs-string">&quot;注册失败，验证码错误&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 判断手机号码时候已经在数据库中</span><br>    QueryWrapper&lt;UcenterMember&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    wrapper.eq(<span class="hljs-string">&quot;mobile&quot;</span>,mobile);<br>    Integer count = baseMapper.selectCount(wrapper);<br><br>    <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// 如果大于0，说明数据库中已经存在</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GuliException(<span class="hljs-number">20001</span>,<span class="hljs-string">&quot;注册失败，手机号已经存在&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 将注册对象添加到数据库中</span><br>    UcenterMember ucenterMember = <span class="hljs-keyword">new</span> UcenterMember();<br>    ucenterMember.setNickname(registerVo.getNickname());<br>    ucenterMember.setMobile(registerVo.getMobile());<br>    ucenterMember.setPassword(MD5.encrypt(registerVo.getPassword()));<br>    ucenterMember.setIsDisabled(<span class="hljs-keyword">false</span>);     <span class="hljs-comment">// 是否被禁用</span><br>    ucenterMember.setAvatar(<span class="hljs-string">&quot;http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKxCqRzuYWQmpwiaqQEjNxbC7WicebicXQusU306jgmfoOzUcFg1qaDq5BStiblwBjw5dUOblQ2gUicQOQ/132&quot;</span>);<br><br>    baseMapper.insert(ucenterMember);<br><br>&#125;<br></code></pre></td></tr></table></figure>



<p>测试，先往redis中存验证码，再用swagger测试。</p>
<h2 id="根据token获取用户信息接口"><a href="#根据token获取用户信息接口" class="headerlink" title="根据token获取用户信息接口"></a>根据token获取用户信息接口</h2><p>Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据token获取用户信息</span><br><span class="hljs-meta">@GetMapping(&quot;getMemberInfo&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">getMemberInfo</span><span class="hljs-params">(HttpServletRequest request)</span></span>&#123;<br>    <span class="hljs-comment">// 根据token获取用户信息</span><br>    String memberId = JwtUtils.getMemberIdByJwtToken(request);<br><br>    <span class="hljs-comment">// 根据id查询用户对象</span><br>    UcenterMember member = memberService.getById(memberId);<br>    <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;userInfo&quot;</span>,member);<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="整合登录和注册页面"><a href="#整合登录和注册页面" class="headerlink" title="整合登录和注册页面"></a>整合登录和注册页面</h1><h2 id="一、在nuxt环境中安装插件"><a href="#一、在nuxt环境中安装插件" class="headerlink" title="一、在nuxt环境中安装插件"></a>一、在nuxt环境中安装插件</h2><h3 id="1、安装element-ui-和-vue-qriously"><a href="#1、安装element-ui-和-vue-qriously" class="headerlink" title="1、安装element-ui 和 vue-qriously"></a>1、安装element-ui 和 vue-qriously</h3><p>（1）执行命令安装</p>
<p>npm install element-ui</p>
<p>npm install vue-qriously</p>
<h3 id="2、修改配置文件-nuxt-swiper-plugin-js，使用插件"><a href="#2、修改配置文件-nuxt-swiper-plugin-js，使用插件" class="headerlink" title="2、修改配置文件 nuxt-swiper-plugin.js，使用插件"></a>2、修改配置文件 nuxt-swiper-plugin.js，使用插件</h3><p>nuxt-swiper-plugin.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> VueAwesomeSwiper <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-awesome-swiper/dist/ssr&#x27;</span><br><span class="hljs-keyword">import</span> VueQriously <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-qriously&#x27;</span><br><span class="hljs-keyword">import</span> ElementUI <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span> <span class="hljs-comment">//element-ui的全部组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span><span class="hljs-comment">//element-ui的css</span><br>Vue.use(ElementUI) <span class="hljs-comment">//使用elementUI</span><br>Vue.use(VueQriously)<br>Vue.use(VueAwesomeSwiper)<br></code></pre></td></tr></table></figure>

<h2 id="二、用户注册功能前端整合"><a href="#二、用户注册功能前端整合" class="headerlink" title="二、用户注册功能前端整合"></a>二、用户注册功能前端整合</h2><h3 id="1、在api文件夹中创建注册的js文件，定义接口"><a href="#1、在api文件夹中创建注册的js文件，定义接口" class="headerlink" title="1、在api文件夹中创建注册的js文件，定义接口"></a>1、在api文件夹中创建注册的js文件，定义接口</h3><p><strong>register.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-comment">// 根据手机号码发送验证码</span><br>  <span class="hljs-function"><span class="hljs-title">getCode</span>(<span class="hljs-params">mobile</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">`/edumsm/msm/sendByPhone/<span class="hljs-subst">$&#123;mobile&#125;</span>`</span>,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>    &#125;)<br>  &#125;,<br>  <span class="hljs-comment">// 注册</span><br>  <span class="hljs-function"><span class="hljs-title">registerMember</span>(<span class="hljs-params">formItem</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">`/educenter/member/register`</span>,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>      <span class="hljs-attr">data</span>:formItem<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="2、在pages文件夹中创建注册页面，调用方法"><a href="#2、在pages文件夹中创建注册页面，调用方法" class="headerlink" title="2、在pages文件夹中创建注册页面，调用方法"></a>2、在pages文件夹中创建注册页面，调用方法</h3><p><strong>（1）在layouts创建布局页面</strong></p>
<p><strong>sign.vue</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;sign&quot;&gt;<br>    &lt;!--标题--&gt;<br>    &lt;div class=&quot;logo&quot;&gt;<br>      &lt;img src=&quot;~/assets/img/logo.png&quot; alt=&quot;logo&quot;&gt;<br>    &lt;/div&gt;<br>    &lt;!--表单--&gt;<br>    &lt;nuxt/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>

<p><strong>（2）创建注册页面</strong></p>
<p><strong>修改layouts文件夹里面default.vue页面，修改登录和注册超链接地址</strong></p>
<p><img src="/myBlog/day12-%E7%99%BB%E5%BD%95%E4%B8%9A%E5%8A%A1/image-20220107000912160.png" alt="image-20220107000912160"></p>
<p><strong>在pages文件夹下，创建注册和登录页面</strong></p>
<p><strong>register.vue</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>   &lt;div class=&quot;main&quot;&gt;<br>     &lt;div class=&quot;title&quot;&gt;<br>       &lt;a href=&quot;/login&quot;&gt;登录&lt;/a&gt;<br>       &lt;span&gt;·&lt;/span&gt;<br>       &lt;a class=&quot;active&quot; href=&quot;/register&quot;&gt;注册&lt;/a&gt;<br>     &lt;/div&gt;<br>     &lt;div class=&quot;sign-up-container&quot;&gt;<br>       &lt;el-form ref=&quot;userForm&quot; :model=&quot;params&quot;&gt;<br>         &lt;el-form-item class=&quot;input-prepend restyle&quot; prop=&quot;nickname&quot; :rules=&quot;[&#123; required: true, message: &#x27;请输入你的昵称&#x27;, trigger: &#x27;blur&#x27; &#125;]&quot;&gt;<br>           &lt;div&gt;<br>             &lt;el-input type=&quot;text&quot; placeholder=&quot;你的昵称&quot; v-model=&quot;params.nickname&quot;/&gt;<br>             &lt;i class=&quot;iconfont icon-user&quot;/&gt;<br>           &lt;/div&gt;<br>         &lt;/el-form-item&gt;<br>         &lt;el-form-item class=&quot;input-prepend restyle no-radius&quot; prop=&quot;mobile&quot; :rules=&quot;[&#123; required: true, message: &#x27;请输入手机号码&#x27;, trigger: &#x27;blur&#x27; &#125;,&#123;validator: checkPhone, trigger: &#x27;blur&#x27;&#125;]&quot;&gt;<br>           &lt;div&gt;<br>             &lt;el-input type=&quot;text&quot; placeholder=&quot;手机号&quot; v-model=&quot;params.mobile&quot;/&gt;<br>             &lt;i class=&quot;iconfont icon-phone&quot;/&gt;<br>           &lt;/div&gt;<br>         &lt;/el-form-item&gt;<br>         &lt;el-form-item class=&quot;input-prepend restyle no-radius&quot; prop=&quot;code&quot; :rules=&quot;[&#123; required: true, message: &#x27;请输入验证码&#x27;, trigger: &#x27;blur&#x27; &#125;]&quot;&gt;<br>           &lt;div style=&quot;width: 100%;display: block;float: left;position: relative&quot;&gt;<br>             &lt;el-input type=&quot;text&quot; placeholder=&quot;验证码&quot; v-model=&quot;params.code&quot;/&gt;<br>             &lt;i class=&quot;iconfont icon-phone&quot;/&gt;<br>           &lt;/div&gt;<br>           &lt;div class=&quot;btn&quot; style=&quot;position:absolute;right: 0;top: 6px;width: 40%;&quot;&gt;<br>             &lt;a href=&quot;javascript:&quot; type=&quot;button&quot; @click=&quot;getCodeFun()&quot; :value=&quot;codeTest&quot; style=&quot;border: none;background-color: none&quot;&gt;&#123;&#123;codeTest&#125;&#125;&lt;/a&gt;<br>           &lt;/div&gt;<br>         &lt;/el-form-item&gt;<br>         &lt;el-form-item class=&quot;input-prepend&quot; prop=&quot;password&quot; :rules=&quot;[&#123; required: true, message: &#x27;请输入密码&#x27;, trigger: &#x27;blur&#x27; &#125;]&quot;&gt;<br>           &lt;div&gt;<br>             &lt;el-input type=&quot;password&quot; placeholder=&quot;设置密码&quot; v-model=&quot;params.password&quot;/&gt;<br>             &lt;i class=&quot;iconfont icon-password&quot;/&gt;<br>           &lt;/div&gt;<br>         &lt;/el-form-item&gt;<br>         &lt;div class=&quot;btn&quot;&gt;<br>           &lt;input type=&quot;button&quot; class=&quot;sign-up-button&quot; value=&quot;注册&quot; @click=&quot;submitRegister()&quot;&gt;<br>         &lt;/div&gt;<br>         &lt;p class=&quot;sign-up-msg&quot;&gt;<br>           点击 “注册” 即表示您同意并愿意遵守简书<br>           &lt;br&gt;<br>           &lt;a target=&quot;_blank&quot; href=&quot;http://www.jianshu.com/p/c44d171298ce&quot;&gt;用户协议&lt;/a&gt;<br>           和<br>           &lt;a target=&quot;_blank&quot; href=&quot;http://www.jianshu.com/p/2ov8x3&quot;&gt;隐私政策&lt;/a&gt; 。<br>         &lt;/p&gt;<br>       &lt;/el-form&gt;<br>       &lt;!-- 更多注册方式 --&gt;<br>       &lt;div class=&quot;more-sign&quot;&gt;<br>         &lt;h6&gt;社交帐号直接注册&lt;/h6&gt;<br>         &lt;ul&gt;<br>           &lt;li&gt;&lt;a id=&quot;weixin&quot; class=&quot;weixin&quot; target=&quot;_blank&quot; href=&quot;http://huaan.free.idcfengye.com/api/ucenter/wx/login&quot;&gt;&lt;i<br>             class=&quot;iconfont icon-weixin&quot;/&gt;&lt;/a&gt;&lt;/li&gt;<br>           &lt;li&gt;&lt;a id=&quot;qq&quot; class=&quot;qq&quot; target=&quot;_blank&quot; href=&quot;#&quot;&gt;&lt;i class=&quot;iconfont icon-qq&quot;/&gt;&lt;/a&gt;&lt;/li&gt;<br>         &lt;/ul&gt;<br>       &lt;/div&gt;<br>     &lt;/div&gt;<br>   &lt;/div&gt;<br> &lt;/template&gt;<br> &lt;script&gt;<br>   import &#x27;~/assets/css/sign.css&#x27;<br>   import &#x27;~/assets/css/iconfont.css&#x27;<br>   import registerApi from &#x27;@/api/register&#x27;<br>   export default &#123;<br>     layout: &#x27;sign&#x27;,<br>     data() &#123;<br>       return &#123;<br>         params: &#123;<br>           mobile: &#x27;&#x27;,<br>           code: &#x27;&#x27;,<br>           nickname: &#x27;&#x27;,<br>           password: &#x27;&#x27;<br>         &#125;,<br>         sending: true,      //是否发送验证码<br>         second: 60,        //倒计时间<br>         codeTest: &#x27;获取验证码&#x27;<br>       &#125;<br>     &#125;,<br>     methods: &#123;<br>       // 获取验证码<br>       getCodeFun()&#123;<br>         registerApi.getCode(this.params.mobile)<br>          .then(response =&gt;&#123;<br>            this.sending = false<br>            // 倒计时<br>            this.timeDown()<br>          &#125;)<br>       &#125;,<br><br>      // 倒计时<br>      timeDown() &#123;<br>        let result = setInterval(() =&gt; &#123;<br>          --this.second;<br>          this.codeTest = this.second<br>          if (this.second &lt; 1) &#123;<br>            clearInterval(result);<br>            this.sending = true;<br>            //this.disabled = false;<br>            this.second = 60;<br>            this.codeTest = &quot;获取验证码&quot;<br>          &#125;<br>        &#125;, 1000);<br><br>      &#125;,<br>       // 注册<br>       submitRegister()&#123;<br>         registerApi.registerMember(this.params)<br>          .then(response =&gt;&#123;<br>            //提示注册成功<br>              this.$message(&#123;<br>                type: &#x27;success&#x27;,<br>                message: &quot;注册成功&quot;<br>              &#125;)<br>              <br>            // 跳转至登录页面<br>            this.$router.push(&#123;path:&#x27;/login&#x27;&#125;)<br>          &#125;)<br>       &#125;,<br>       <br>       checkPhone (rule, value, callback) &#123;<br>         //debugger<br>         if (!(/^1[34578]\d&#123;9&#125;$/.test(value))) &#123;<br>           return callback(new Error(&#x27;手机号码格式不正确&#x27;))<br>         &#125;<br>         return callback()<br>       &#125;<br>     &#125;<br>   &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>



<h2 id="三、用户登录功能前端整合"><a href="#三、用户登录功能前端整合" class="headerlink" title="三、用户登录功能前端整合"></a>三、用户登录功能前端整合</h2><p>登录功能流程分析：</p>
<p>1、 点击登录，调用接口返回登录的token信息</p>
<p>2、 将返回的token存放到cookie中</p>
<p>3、 创建拦截器，判断cookie中是否有token，如果有就将token设置到请求头header中</p>
<p>4、 根据token调用接口，返回用户信息</p>
<p>5、 根据返回的用户信息，在页面显示对应的数据</p>
<p><img src="/myBlog/day12-%E7%99%BB%E5%BD%95%E4%B8%9A%E5%8A%A1/image-20220107000936830.png" alt="image-20220107000936830"></p>
<h3 id="1、在api文件夹中创建登录的js文件，定义接口"><a href="#1、在api文件夹中创建登录的js文件，定义接口" class="headerlink" title="1、在api文件夹中创建登录的js文件，定义接口"></a>1、在api文件夹中创建登录的js文件，定义接口</h3><p><strong>login.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-comment">// 登录</span><br>  <span class="hljs-function"><span class="hljs-title">submitLoginUser</span>(<span class="hljs-params">userInfo</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">`/educenter/member/login`</span>,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>      <span class="hljs-attr">data</span>:userInfo<br>    &#125;)<br>  &#125;,<br>  <span class="hljs-comment">// 根据token获取用户信息</span><br>  <span class="hljs-function"><span class="hljs-title">getUserInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">`/educenter/member/getMemberInfo`</span>,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="2、在pages文件夹中创建登录页面，调用方法"><a href="#2、在pages文件夹中创建登录页面，调用方法" class="headerlink" title="2、在pages文件夹中创建登录页面，调用方法"></a>2、在pages文件夹中创建登录页面，调用方法</h3><p>（1）安装js-cookie插件</p>
<p>npm install js-cookie</p>
<p>（2）login.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>   &lt;div class=&quot;main&quot;&gt;<br>     &lt;div class=&quot;title&quot;&gt;<br>       &lt;a class=&quot;active&quot; href=&quot;/login&quot;&gt;登录&lt;/a&gt;<br>       &lt;span&gt;·&lt;/span&gt;<br>       &lt;a href=&quot;/register&quot;&gt;注册&lt;/a&gt;<br>     &lt;/div&gt;<br>     &lt;div class=&quot;sign-up-container&quot;&gt;<br>       &lt;el-form ref=&quot;userForm&quot; :model=&quot;user&quot;&gt;<br>         &lt;el-form-item class=&quot;input-prepend restyle&quot; prop=&quot;mobile&quot; :rules=&quot;[&#123; required: true, message: &#x27;请输入手机号码&#x27;, trigger: &#x27;blur&#x27; &#125;,&#123;validator: checkPhone, trigger: &#x27;blur&#x27;&#125;]&quot;&gt;<br>           &lt;div &gt;<br>             &lt;el-input type=&quot;text&quot; placeholder=&quot;手机号&quot; v-model=&quot;user.mobile&quot;/&gt;<br>             &lt;i class=&quot;iconfont icon-phone&quot; /&gt;<br>           &lt;/div&gt;<br>         &lt;/el-form-item&gt;<br>         &lt;el-form-item class=&quot;input-prepend&quot; prop=&quot;password&quot; :rules=&quot;[&#123; required: true, message: &#x27;请输入密码&#x27;, trigger: &#x27;blur&#x27; &#125;]&quot;&gt;<br>           &lt;div&gt;<br>             &lt;el-input type=&quot;password&quot; placeholder=&quot;密码&quot; v-model=&quot;user.password&quot;/&gt;<br>             &lt;i class=&quot;iconfont icon-password&quot;/&gt;<br>           &lt;/div&gt;<br>         &lt;/el-form-item&gt;<br>         &lt;div class=&quot;btn&quot;&gt;<br>           &lt;input type=&quot;button&quot; class=&quot;sign-in-button&quot; value=&quot;登录&quot; @click=&quot;submitLogin()&quot;&gt;<br>         &lt;/div&gt;<br>       &lt;/el-form&gt;<br>       &lt;!-- 更多登录方式 --&gt;<br>       &lt;div class=&quot;more-sign&quot;&gt;<br>         &lt;h6&gt;社交帐号登录&lt;/h6&gt;<br>         &lt;ul&gt;<br>           &lt;li&gt;&lt;a id=&quot;weixin&quot; class=&quot;weixin&quot; target=&quot;_blank&quot; href=&quot;http://qy.free.idcfengye.com/api/ucenter/weixinLogin/login&quot;&gt;&lt;i class=&quot;iconfont icon-weixin&quot;/&gt;&lt;/a&gt;&lt;/li&gt;<br>           &lt;li&gt;&lt;a id=&quot;qq&quot; class=&quot;qq&quot; target=&quot;_blank&quot; href=&quot;#&quot;&gt;&lt;i class=&quot;iconfont icon-qq&quot;/&gt;&lt;/a&gt;&lt;/li&gt;<br>         &lt;/ul&gt;<br>       &lt;/div&gt;<br>     &lt;/div&gt;<br>   &lt;/div&gt;<br> &lt;/template&gt;<br> &lt;script&gt;<br>   import &#x27;~/assets/css/sign.css&#x27;<br>   import &#x27;~/assets/css/iconfont.css&#x27;<br><br>   import cookie from &#x27;js-cookie&#x27;<br>   import loginApi from &#x27;@/api/login&#x27;<br>   export default &#123;<br>     layout: &#x27;sign&#x27;,<br>     data () &#123;<br>       return &#123;<br>         user:&#123;<br>           mobile:&#x27;&#x27;,<br>           password:&#x27;&#x27;<br>         &#125;,<br>         loginInfo:&#123;&#125;<br>       &#125;<br>     &#125;,<br>     methods: &#123;<br>       // 登录<br>       submitLogin()&#123;<br>         // 第一步调用接口获取登录token值<br>         loginApi.submitLoginUser(this.user)<br>          .then(response =&gt;&#123;<br>            // 第二步，将获取到的token值放到cookie中<br>            cookie.set(&#x27;guli_token&#x27;,response.data.data.token,&#123; domain: &#x27;localhost&#x27; &#125;)<br><br>            // 第四步，根据token的值，调用接口，获取用户数据，并存入cookie中<br>            loginApi.getUserInfo()<br>              .then(response =&gt;&#123;<br>                this.loginInfo = response.data.data.userInfo<br>                // 将得到的用户信息存入cookie中<br>                cookie.set(&quot;guli_ucenter&quot;,JSON.stringify(this.loginInfo),&#123; domain: &#x27;localhost&#x27; &#125;)<br>                // 跳转页面<br>                window.location.href = &quot;/&quot;<br>              &#125;)<br>          &#125;)<br>          <br>       &#125;,<br>       checkPhone (rule, value, callback) &#123;<br>         //debugger<br>         if (!(/^1[34578]\d&#123;9&#125;$/.test(value))) &#123;<br>           return callback(new Error(&#x27;手机号码格式不正确&#x27;))<br>         &#125;<br>         return callback()<br>       &#125;<br>     &#125;<br>   &#125;<br> &lt;/script&gt;<br><br>&lt;style&gt;<br><br>   .el-form-item__error&#123;<br><br>    z-index: 9999999;<br><br>  &#125;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>



<h3 id="3、在request-js添加拦截器，用于传递token信息"><a href="#3、在request-js添加拦截器，用于传递token信息" class="headerlink" title="3、在request.js添加拦截器，用于传递token信息"></a>3、在request.js添加拦截器，用于传递token信息</h3><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> cookie <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;js-cookie&#x27;</span><br><span class="hljs-keyword">import</span> &#123; MessageBox, Message &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><br><span class="hljs-comment">// 创建axios实例</span><br><span class="hljs-keyword">const</span> service = axios.create(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;http://localhost:9001&#x27;</span>, <span class="hljs-comment">// api的base_url</span><br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">20000</span> <span class="hljs-comment">// 请求超时时间</span><br>&#125;)<br><br><span class="hljs-comment">// 第三步，编写一个拦截器</span><br><span class="hljs-comment">// http request 拦截器</span><br>service.interceptors.request.use(<br>  <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">//debugger</span><br>  <span class="hljs-keyword">if</span> (cookie.get(<span class="hljs-string">&#x27;guli_token&#x27;</span>)) &#123;<br>    <span class="hljs-comment">// 将token的值存入到请求头中</span><br>    config.headers[<span class="hljs-string">&#x27;token&#x27;</span>] = cookie.get(<span class="hljs-string">&#x27;guli_token&#x27;</span>);<br>  &#125;<br>    <span class="hljs-keyword">return</span> config<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(err);<br>&#125;)<br><br><span class="hljs-comment">// http response 拦截器</span><br>service.interceptors.response.use(<br>  <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">//debugger</span><br>    <span class="hljs-keyword">if</span> (response.data.code == <span class="hljs-number">28004</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;response.data.resultCode是28004&quot;</span>)<br>        <span class="hljs-comment">// 返回 错误代码-1 清除ticket信息并跳转到登录页面</span><br>        <span class="hljs-comment">//debugger</span><br>        <span class="hljs-built_in">window</span>.location.href=<span class="hljs-string">&quot;/login&quot;</span><br>        <span class="hljs-keyword">return</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-keyword">if</span> (response.data.code !== <span class="hljs-number">20000</span>) &#123;<br>        <span class="hljs-comment">//25000：订单支付中，不做任何提示</span><br>        <span class="hljs-keyword">if</span>(response.data.code != <span class="hljs-number">25000</span>) &#123;<br>          Message(&#123;<br>            <span class="hljs-attr">message</span>: response.data.message || <span class="hljs-string">&#x27;error&#x27;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;error&#x27;</span>,<br>            <span class="hljs-attr">duration</span>: <span class="hljs-number">5</span> * <span class="hljs-number">1000</span><br>          &#125;)<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> response;<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error.response)   <span class="hljs-comment">// 返回接口返回的错误信息</span><br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> service<br></code></pre></td></tr></table></figure>



<h3 id="4、修改layouts中的default-vue页面"><a href="#4、修改layouts中的default-vue页面" class="headerlink" title="4、修改layouts中的default.vue页面"></a>4、修改layouts中的default.vue页面</h3><p>（1）显示登录之后的用户信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br> import &quot;~/assets/css/reset.css&quot;;<br> import &quot;~/assets/css/theme.css&quot;;<br> import &quot;~/assets/css/global.css&quot;;<br> import &quot;~/assets/css/web.css&quot;;<br>   import cookie from &#x27;js-cookie&#x27;<br>   import loginApi from &#x27;@/api/login&#x27;<br> export default &#123;<br>   data()&#123;<br>     return&#123;<br>      token: &#x27;&#x27;,<br>      loginInfo: &#123;<br>        id: &#x27;&#x27;,<br>        age: &#x27;&#x27;,<br>        avatar: &#x27;&#x27;,<br>        mobile: &#x27;&#x27;,<br>        nickname: &#x27;&#x27;,<br>        sex: &#x27;&#x27;<br>      &#125;<br>     &#125;<br>   &#125;,<br>   created()&#123;<br>    this.showUserInfo()<br>   &#125;,<br>   methods:&#123;<br>     // 显示用户信息，从cookie中取出用户信息<br>     showUserInfo()&#123;<br>       loginApi.getUserInfo()<br>       .then(response =&gt;&#123;<br>         // 第五步，从cookie中取出用户信息，取出来的是字符串<br>          var userStr = cookie.get(&quot;guli_ucenter&quot;)<br>          // 判断取出来的字符串是有为空<br>          if(userStr)&#123;<br>          // 将取出来的字符串转为json，并赋值给loginInfo<br>          this.loginInfo = JSON.parse(userStr)<br>          &#125;<br><br>       &#125;)<br>     &#125;<br>   &#125;<br> &#125;;<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>



<p>（2）default.vue页面显示登录之后的用户信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;!-- / nav --&gt;<br>          &lt;ul class=&quot;h-r-login&quot;&gt;<br>              &lt;li v-if=&quot;!loginInfo.id&quot; id=&quot;no-login&quot;&gt;<br>                  &lt;a href=&quot;/login&quot; title=&quot;登录&quot;&gt;<br>                      &lt;em class=&quot;icon18 login-icon&quot;&gt;&amp;nbsp;&lt;/em&gt;<br>                      &lt;span class=&quot;vam ml5&quot;&gt;登录&lt;/span&gt;<br>                  &lt;/a&gt;<br>                  |<br>                  &lt;a href=&quot;/register&quot; title=&quot;注册&quot;&gt;<br>                      &lt;span class=&quot;vam ml5&quot;&gt;注册&lt;/span&gt;<br>                  &lt;/a&gt;<br>              &lt;/li&gt;<br>              &lt;li v-if=&quot;loginInfo.id&quot; id=&quot;is-login-one&quot; class=&quot;mr10&quot;&gt;<br>                  &lt;a id=&quot;headerMsgCountId&quot; href=&quot;#&quot; title=&quot;消息&quot;&gt;<br>                      &lt;em class=&quot;icon18 news-icon&quot;&gt;&amp;nbsp;&lt;/em&gt;<br>                  &lt;/a&gt;<br>                  &lt;q class=&quot;red-point&quot; style=&quot;display: none&quot;&gt;&amp;nbsp;&lt;/q&gt;<br>              &lt;/li&gt;<br>              &lt;li v-if=&quot;loginInfo.id&quot; id=&quot;is-login-two&quot; class=&quot;h-r-user&quot;&gt;<br>                  &lt;a href=&quot;/ucenter&quot; title&gt;<br>                      &lt;img<br>                            :src=&quot;loginInfo.avatar&quot;<br>                            width=&quot;30&quot;<br>                            height=&quot;30&quot;<br>                            class=&quot;vam picImg&quot;<br>                            alt<br>                            &gt;<br>                      &lt;span id=&quot;userName&quot; class=&quot;vam disIb&quot;&gt;&#123;&#123; loginInfo.nickname &#125;&#125;&lt;/span&gt;<br>                  &lt;/a&gt;<br>                  &lt;a href=&quot;javascript:void(0);&quot; title=&quot;退出&quot; @click=&quot;logout()&quot; class=&quot;ml5&quot;&gt;退出&lt;/a&gt;<br>              &lt;/li&gt;<br>              &lt;!-- /未登录显示第1 li；登录后显示第2，3 li --&gt;<br>          &lt;/ul&gt;<br></code></pre></td></tr></table></figure>



<h2 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h2><p>methods</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">// 退出登录<br>logout()&#123;<br>  cookie.set(&#x27;guli_token&#x27;,&#x27;&#x27;,&#123; domain: &#x27;localhost&#x27; &#125;)<br>  cookie.set(&quot;guli_ucenter&quot;,&#x27;&#x27;,&#123; domain: &#x27;localhost&#x27; &#125;)<br><br>  // 跳转页面<br>  window.location.href = &quot;/&quot;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>项目|谷粒学院|笔记</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>day14-讲师分页_课程列表_课程详情</title>
    <url>/myBlog/day14-%E8%AE%B2%E5%B8%88%E5%88%86%E9%A1%B5_%E8%AF%BE%E7%A8%8B%E5%88%97%E8%A1%A8_%E8%AF%BE%E7%A8%8B%E8%AF%A6%E6%83%85/</url>
    <content><![CDATA[<h1 id="day14-讲师分页-课程列表-课程详情"><a href="#day14-讲师分页-课程列表-课程详情" class="headerlink" title="day14-讲师分页 课程列表 课程详情"></a>day14-讲师分页 课程列表 课程详情</h1><h1 id="讲师分页查询接口"><a href="#讲师分页查询接口" class="headerlink" title="讲师分页查询接口"></a>讲师分页查询接口</h1><p>com.atguigu.eduservice.controller.front </p>
<h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/eduservice/teacherfront&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TeacherFrontController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EduTeacherService teacherService;<br><br>    <span class="hljs-comment">// 分页查询讲师的方法</span><br>    <span class="hljs-meta">@PostMapping(&quot;getTeacherFrontList/&#123;page&#125;/&#123;limit&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">getTeacherFrontList</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">long</span> page,<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">long</span> limit)</span></span>&#123;<br>        Page&lt;EduTeacher&gt; teacherPage = <span class="hljs-keyword">new</span> Page&lt;&gt;(page, limit);<br>        Map&lt;String,Object&gt; map = teacherService.getTeacherFrontList(teacherPage);<br>        <span class="hljs-keyword">return</span> R.ok().data(map);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EduTeacherService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">IService</span>&lt;<span class="hljs-title">EduTeacher</span>&gt; </span>&#123;<br><br>    <span class="hljs-comment">// 分页查询讲师的方法</span><br>    <span class="hljs-function">Map&lt;String, Object&gt; <span class="hljs-title">getTeacherFrontList</span><span class="hljs-params">(Page&lt;EduTeacher&gt; teacherPage)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="serviceImpl"><a href="#serviceImpl" class="headerlink" title="serviceImpl"></a>serviceImpl</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EduTeacherServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceImpl</span>&lt;<span class="hljs-title">EduTeacherMapper</span>, <span class="hljs-title">EduTeacher</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">EduTeacherService</span> </span>&#123;<br><br>    <span class="hljs-comment">// 分页查询讲师的方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">getTeacherFrontList</span><span class="hljs-params">(Page&lt;EduTeacher&gt; teacherPage)</span> </span>&#123;<br>        QueryWrapper&lt;EduTeacher&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        <span class="hljs-comment">// 按照id降序排序</span><br>        wrapper.orderByDesc(<span class="hljs-string">&quot;id&quot;</span>);<br><br>        baseMapper.selectPage(teacherPage,wrapper);<br><br>        List&lt;EduTeacher&gt; records = teacherPage.getRecords();<br>        <span class="hljs-keyword">long</span> current = teacherPage.getCurrent();<br>        <span class="hljs-keyword">long</span> pages = teacherPage.getPages();<br>        <span class="hljs-keyword">long</span> size = teacherPage.getSize();<br>        <span class="hljs-keyword">long</span> total = teacherPage.getTotal();<br>        <span class="hljs-keyword">boolean</span> hasNext = teacherPage.hasNext();<br>        <span class="hljs-keyword">boolean</span> hasPrevious = teacherPage.hasPrevious();<br><br>        <span class="hljs-comment">// 将查询出来的封装到map</span><br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;records&quot;</span>,records);<br>        map.put(<span class="hljs-string">&quot;current&quot;</span>,current);<br>        map.put(<span class="hljs-string">&quot;pages&quot;</span>,pages);<br>        map.put(<span class="hljs-string">&quot;size&quot;</span>,size);<br>        map.put(<span class="hljs-string">&quot;total&quot;</span>,total);<br>        map.put(<span class="hljs-string">&quot;hasNext&quot;</span>,hasNext);<br>        map.put(<span class="hljs-string">&quot;hasPrevious&quot;</span>,hasPrevious);<br><br>        <span class="hljs-comment">// 最后返回map</span><br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="讲师分页查询前端"><a href="#讲师分页查询前端" class="headerlink" title="讲师分页查询前端"></a>讲师分页查询前端</h1><h2 id="1、创建api"><a href="#1、创建api" class="headerlink" title="1、创建api"></a>1、创建api</h2><p>创建文件夹api，api下创建teacher.js，用于封装讲师模块的请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> request from <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br>export <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// 分页查询名师</span><br>  getTeacherList(page,limit) &#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>      url: `/eduservice/teacherfront/getTeacherFrontList/$&#123;page&#125;/$&#123;limit&#125;`,<br>      method: <span class="hljs-string">&#x27;post&#x27;</span><br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="2、讲师列表组件中调用api"><a href="#2、讲师列表组件中调用api" class="headerlink" title="2、讲师列表组件中调用api"></a>2、讲师列表组件中调用api</h2><p>pages/teacher/index.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>   import teacher from &#x27;@/api/teacher&#x27;<br> export default &#123;<br>   // 异步调用，调用一次<br>   // params : 相当于之前的this.$route.params.id 等价 params.id<br>   asyncData(&#123;params,error&#125;)&#123;<br>     return teacher.getTeacherList(1,8)<br>      .then(response =&gt;&#123;<br>        // console.log(response.data.data)<br>        return &#123; data:response.data.data &#125;<br>      &#125;)<br>   &#125;<br> &#125;;<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h2><h3 id="1、无数据提示"><a href="#1、无数据提示" class="headerlink" title="1、无数据提示"></a>1、无数据提示</h3><p>添加：v-if=”data.total==0”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;!-- /无数据提示 开始--&gt;<br>&lt;section class=&quot;no-data-wrap&quot; v-if=&quot;data.total == 0&quot;&gt;<br>  &lt;em class=&quot;icon30 no-data-ico&quot;&gt;&amp;nbsp;&lt;/em&gt;<br>  &lt;span class=&quot;c-666 fsize14 ml10 vam&quot;&gt;没有相关数据，小编正在努力整理中...&lt;/span&gt;<br>&lt;/section&gt;<br>&lt;!-- /无数据提示 结束--&gt;<br></code></pre></td></tr></table></figure>



<h3 id="2、列表"><a href="#2、列表" class="headerlink" title="2、列表"></a>2、列表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;article class=&quot;i-teacher-list&quot; v-if=&quot;data.total &gt; 0&quot;&gt;<br>             &lt;ul class=&quot;of&quot;&gt;<br>               &lt;li v-for=&quot;item in data.items&quot; :key=&quot;item.id&quot;&gt;<br>                 &lt;section class=&quot;i-teach-wrap&quot;&gt;<br>                   &lt;div class=&quot;i-teach-pic&quot;&gt;<br>                     &lt;a :href=&quot;&#x27;/teacher/&#x27;+item.id&quot; :title=&quot;item.name&quot; target=&quot;_blank&quot;&gt;<br>                       &lt;img :src=&quot;item.avatar&quot; alt&gt;<br>                     &lt;/a&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;mt10 hLh30 txtOf tac&quot;&gt;<br>                     &lt;a :href=&quot;&#x27;/teacher/&#x27;+item.id&quot; title=&quot;item.name&quot; target=&quot;_blank&quot; class=&quot;fsize18 c-666&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/a&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;hLh30 txtOf tac&quot;&gt;<br>                     &lt;span class=&quot;fsize14 c-999&quot;&gt;&#123;&#123;item.career&#125;&#125;&lt;/span&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;mt15 i-q-txt&quot;&gt;<br>                     &lt;p class=&quot;c-999 f-fA&quot;&gt;&#123;&#123;item.intro&#125;&#125;&lt;/p&gt;<br>                   &lt;/div&gt;<br>                 &lt;/section&gt;<br>               &lt;/li&gt;<br>               <br>             &lt;/ul&gt;<br>             &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>           &lt;/article&gt;<br></code></pre></td></tr></table></figure>



<h1 id="讲师分页查询"><a href="#讲师分页查询" class="headerlink" title="讲师分页查询"></a>讲师分页查询</h1><h2 id="1、分页方法"><a href="#1、分页方法" class="headerlink" title="1、分页方法"></a>1、分页方法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">methods:&#123;<br>  // 分页切换<br>  // 参数是页码数<br>  gotoPage(page)&#123;<br>    teacher.getTeacherList(page,8)<br>     .then(response =&gt;&#123;<br>       this.data = response.data.data<br>     &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="2、分页页面渲染"><a href="#2、分页页面渲染" class="headerlink" title="2、分页页面渲染"></a>2、分页页面渲染</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;!-- 公共分页 开始 --&gt;<br>          &lt;div&gt;<br>            &lt;div class=&quot;paging&quot;&gt;<br>              &lt;!-- undisable这个class是否存在，取决于数据属性hasPrevious --&gt;<br>              &lt;a<br>                :class=&quot;&#123;undisable: !data.hasPrevious&#125;&quot;<br>                href=&quot;#&quot;<br>                title=&quot;首页&quot;<br>                @click.prevent=&quot;gotoPage(1)&quot;&gt;首&lt;/a&gt;<br>              &lt;a<br>                :class=&quot;&#123;undisable: !data.hasPrevious&#125;&quot;<br>                href=&quot;#&quot;<br>                title=&quot;前一页&quot;<br>                @click.prevent=&quot;gotoPage(data.current-1)&quot;&gt;&amp;lt;&lt;/a&gt;<br>              &lt;a<br>                v-for=&quot;page in data.pages&quot;<br>                :key=&quot;page&quot;<br>                :class=&quot;&#123;current: data.current == page, undisable: data.current == page&#125;&quot;<br>                :title=&quot;&#x27;第&#x27;+page+&#x27;页&#x27;&quot;<br>                href=&quot;#&quot;<br>                @click.prevent=&quot;gotoPage(page)&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;<br>              &lt;a<br>                :class=&quot;&#123;undisable: !data.hasNext&#125;&quot;<br>                href=&quot;#&quot;<br>                title=&quot;后一页&quot;<br>                @click.prevent=&quot;gotoPage(data.current+1)&quot;&gt;&amp;gt;&lt;/a&gt;<br>              &lt;a<br>                :class=&quot;&#123;undisable: !data.hasNext&#125;&quot;<br>                href=&quot;#&quot;<br>                title=&quot;末页&quot;<br>                @click.prevent=&quot;gotoPage(data.pages)&quot;&gt;末&lt;/a&gt;<br>              &lt;div class=&quot;clear&quot;/&gt;<br>            &lt;/div&gt;<br>          &lt;/div&gt;<br>         &lt;!-- 公共分页 结束 --&gt;<br></code></pre></td></tr></table></figure>

<h1 id="讲师详情接口"><a href="#讲师详情接口" class="headerlink" title="讲师详情接口"></a>讲师详情接口</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 讲师详情的功能</span><br><span class="hljs-meta">@GetMapping(&quot;getTeacherFrontInfo/&#123;teacherId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">getTeacherFrontInfo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String teacherId)</span></span>&#123;<br>    <span class="hljs-comment">// 1.根据讲师id查询讲师基本信息</span><br>    EduTeacher eduTeacher = teacherService.getById(teacherId);<br><br>    <span class="hljs-comment">// 2.根据讲师id查询讲师所有的课程</span><br>    QueryWrapper&lt;EduCourse&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    wrapper.eq(<span class="hljs-string">&quot;teacher_id&quot;</span>,teacherId);<br>    List&lt;EduCourse&gt; courseList = courseService.list(wrapper);<br><br>    <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;teacher&quot;</span>,eduTeacher).data(<span class="hljs-string">&quot;courseList&quot;</span>,courseList);<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="讲师详情前端"><a href="#讲师详情前端" class="headerlink" title="讲师详情前端"></a>讲师详情前端</h1><h2 id="1、teacher-api"><a href="#1、teacher-api" class="headerlink" title="1、teacher api"></a>1、teacher api</h2><p>api/teacher.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 讲师详情</span><br><span class="hljs-function"><span class="hljs-title">getTeacherInfo</span>(<span class="hljs-params">id</span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> request(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/teacherfront/getTeacherFrontInfo/<span class="hljs-subst">$&#123;id&#125;</span>`</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="2、讲师详情页中调用api"><a href="#2、讲师详情页中调用api" class="headerlink" title="2、讲师详情页中调用api"></a>2、讲师详情页中调用api</h2><p>pages/teacher/_id.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>  import teacherApi from &#x27;@/api/teacher&#x27;<br>export default &#123;<br>  // 异步调用<br>  asyncData(&#123;params,error&#125;)&#123;<br>    // params.id获取路由中的id<br>    return teacherApi.getTeacherInfo(params.id)<br>     .then(response =&gt;&#123;<br>       return&#123;<br>         teacher: response.data.data.teacher,<br>         courseList : response.data.data.courseList<br>       &#125;<br>     &#125;)<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h2 id="讲师详情显示"><a href="#讲师详情显示" class="headerlink" title="讲师详情显示"></a>讲师详情显示</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;!-- 讲师基本信息 --&gt;<br>        &lt;section class=&quot;fl t-infor-box c-desc-content&quot;&gt;<br>          &lt;div class=&quot;mt20 ml20&quot;&gt;<br>            &lt;section class=&quot;t-infor-pic&quot;&gt;<br>              &lt;img :src=&quot;teacher.avatar&quot;&gt;<br>            &lt;/section&gt;<br>            &lt;h3 class=&quot;hLh30&quot;&gt;<br>              &lt;span class=&quot;fsize24 c-333&quot;&gt;&#123;&#123;teacher.name&#125;&#125;&amp;nbsp;<br>                &#123;&#123;teacher.level === 1? &#x27;高级讲师&#x27;:&#x27;首席讲师&#x27;&#125;&#125;<br>              &lt;/span&gt;<br>            &lt;/h3&gt;<br>            &lt;section class=&quot;mt10&quot;&gt;<br>              &lt;span class=&quot;t-tag-bg&quot;&gt;&#123;&#123;teacher.intro&#125;&#125;&lt;/span&gt;<br>            &lt;/section&gt;<br>            &lt;section class=&quot;t-infor-txt&quot;&gt;<br>              &lt;p<br>                class=&quot;mt20&quot;&gt;&#123;&#123;teacher.career&#125;&#125;&lt;/p&gt;<br>            &lt;/section&gt;<br>            &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>          &lt;/div&gt;<br>        &lt;/section&gt;<br></code></pre></td></tr></table></figure>

<h2 id="无数据提示"><a href="#无数据提示" class="headerlink" title="无数据提示"></a>无数据提示</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;!-- /无数据提示 开始--&gt;<br>&lt;section class=&quot;no-data-wrap&quot; v-if=&quot;courseList.length == 0&quot;&gt;<br>  &lt;em class=&quot;icon30 no-data-ico&quot;&gt;&amp;nbsp;&lt;/em&gt;<br>  &lt;span class=&quot;c-666 fsize14 ml10 vam&quot;&gt;没有相关数据，小编正在努力整理中...&lt;/span&gt;<br>&lt;/section&gt;<br>&lt;!-- /无数据提示 结束--&gt;<br></code></pre></td></tr></table></figure>

<h2 id="当前讲师课程列表"><a href="#当前讲师课程列表" class="headerlink" title="当前讲师课程列表"></a>当前讲师课程列表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;article class=&quot;comm-course-list&quot;&gt;<br>  &lt;ul class=&quot;of&quot;&gt;<br>    &lt;li v-for=&quot;course in courseList&quot; :key=&quot;course.id&quot;&gt;<br>      &lt;div class=&quot;cc-l-wrap&quot;&gt;<br>        &lt;section class=&quot;course-img&quot;&gt;<br>          &lt;img :src=&quot;course.cover&quot; class=&quot;img-responsive&quot; &gt;<br>          &lt;div class=&quot;cc-mask&quot;&gt;<br>            &lt;a href=&quot;#&quot; title=&quot;开始学习&quot; target=&quot;_blank&quot; class=&quot;comm-btn c-btn-1&quot;&gt;开始学习&lt;/a&gt;<br>          &lt;/div&gt;<br>        &lt;/section&gt;<br>        &lt;h3 class=&quot;hLh30 txtOf mt10&quot;&gt;<br>          &lt;a href=&quot;#&quot; :title=&quot;course.title&quot; target=&quot;_blank&quot; class=&quot;course-title fsize18 c-333&quot;&gt;&#123;&#123;course.title&#125;&#125;&lt;/a&gt;<br>        &lt;/h3&gt;<br>      &lt;/div&gt;<br>    &lt;/li&gt;<br>   <br>  &lt;/ul&gt;<br>  &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>&lt;/article&gt;<br></code></pre></td></tr></table></figure>

<h2 id="完整页面"><a href="#完整页面" class="headerlink" title="完整页面"></a>完整页面</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>   &lt;div id=&quot;aCoursesList&quot; class=&quot;bg-fa of&quot;&gt;<br>     &lt;!-- 讲师介绍 开始 --&gt;<br>     &lt;section class=&quot;container&quot;&gt;<br>       &lt;header class=&quot;comm-title&quot;&gt;<br>         &lt;h2 class=&quot;fl tac&quot;&gt;<br>           &lt;span class=&quot;c-333&quot;&gt;讲师介绍&lt;/span&gt;<br>         &lt;/h2&gt;<br>       &lt;/header&gt;<br>       &lt;div class=&quot;t-infor-wrap&quot;&gt;<br>         &lt;!-- 讲师基本信息 --&gt;<br>         &lt;section class=&quot;fl t-infor-box c-desc-content&quot;&gt;<br>           &lt;div class=&quot;mt20 ml20&quot;&gt;<br>             &lt;section class=&quot;t-infor-pic&quot;&gt;<br>               &lt;img :src=&quot;teacher.avatar&quot;&gt;<br>             &lt;/section&gt;<br>             &lt;h3 class=&quot;hLh30&quot;&gt;<br>               &lt;span class=&quot;fsize24 c-333&quot;&gt;&#123;&#123;teacher.name&#125;&#125;&amp;nbsp;<br>                 &#123;&#123;teacher.level === 1? &#x27;高级讲师&#x27;:&#x27;首席讲师&#x27;&#125;&#125;<br>               &lt;/span&gt;<br>             &lt;/h3&gt;<br>             &lt;section class=&quot;mt10&quot;&gt;<br>               &lt;span class=&quot;t-tag-bg&quot;&gt;&#123;&#123;teacher.intro&#125;&#125;&lt;/span&gt;<br>             &lt;/section&gt;<br>             &lt;section class=&quot;t-infor-txt&quot;&gt;<br>               &lt;p<br>                 class=&quot;mt20&quot;&gt;&#123;&#123;teacher.career&#125;&#125;&lt;/p&gt;<br>             &lt;/section&gt;<br>             &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>           &lt;/div&gt;<br>         &lt;/section&gt;<br>         &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>       &lt;/div&gt;<br>       &lt;section class=&quot;mt30&quot;&gt;<br>         &lt;div&gt;<br>           &lt;header class=&quot;comm-title all-teacher-title c-course-content&quot;&gt;<br>             &lt;h2 class=&quot;fl tac&quot;&gt;<br>               &lt;span class=&quot;c-333&quot;&gt;主讲课程&lt;/span&gt;<br>             &lt;/h2&gt;<br>             &lt;section class=&quot;c-tab-title&quot;&gt;<br>               &lt;a href=&quot;javascript: void(0)&quot;&gt;&amp;nbsp;&lt;/a&gt;<br>             &lt;/section&gt;<br>           &lt;/header&gt;<br>           &lt;!-- /无数据提示 开始--&gt;<br>           &lt;section class=&quot;no-data-wrap&quot; v-if=&quot;courseList.length == 0&quot;&gt;<br>             &lt;em class=&quot;icon30 no-data-ico&quot;&gt;&amp;nbsp;&lt;/em&gt;<br>             &lt;span class=&quot;c-666 fsize14 ml10 vam&quot;&gt;没有相关数据，小编正在努力整理中...&lt;/span&gt;<br>           &lt;/section&gt;<br>           &lt;!-- /无数据提示 结束--&gt;<br>           &lt;article class=&quot;comm-course-list&quot;&gt;<br>             &lt;ul class=&quot;of&quot;&gt;<br>               &lt;li v-for=&quot;course in courseList&quot; :key=&quot;course.id&quot;&gt;<br>                 &lt;div class=&quot;cc-l-wrap&quot;&gt;<br>                   &lt;section class=&quot;course-img&quot;&gt;<br>                     &lt;img :src=&quot;course.cover&quot; class=&quot;img-responsive&quot; &gt;<br>                     &lt;div class=&quot;cc-mask&quot;&gt;<br>                       &lt;a href=&quot;#&quot; title=&quot;开始学习&quot; target=&quot;_blank&quot; class=&quot;comm-btn c-btn-1&quot;&gt;开始学习&lt;/a&gt;<br>                     &lt;/div&gt;<br>                   &lt;/section&gt;<br>                   &lt;h3 class=&quot;hLh30 txtOf mt10&quot;&gt;<br>                     &lt;a href=&quot;#&quot; :title=&quot;course.title&quot; target=&quot;_blank&quot; class=&quot;course-title fsize18 c-333&quot;&gt;&#123;&#123;course.title&#125;&#125;&lt;/a&gt;<br>                   &lt;/h3&gt;<br>                 &lt;/div&gt;<br>               &lt;/li&gt;<br>              <br>             &lt;/ul&gt;<br>             &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>           &lt;/article&gt;<br>         &lt;/div&gt;<br>       &lt;/section&gt;<br>     &lt;/section&gt;<br>     &lt;!-- /讲师介绍 结束 --&gt;<br>   &lt;/div&gt;<br> &lt;/template&gt;<br> &lt;script&gt;<br>   import teacherApi from &#x27;@/api/teacher&#x27;<br> export default &#123;<br>   // 异步调用<br>   asyncData(&#123;params,error&#125;)&#123;<br>     // params.id获取路由中的id<br>     return teacherApi.getTeacherInfo(params.id)<br>      .then(response =&gt;&#123;<br>        return&#123;<br>          teacher: response.data.data.teacher,<br>          courseList : response.data.data.courseList<br>        &#125;<br>      &#125;)<br>   &#125;<br> &#125;;<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>



<h1 id="课程列表接口"><a href="#课程列表接口" class="headerlink" title="课程列表接口"></a>课程列表接口</h1><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><p>com.atguigu.eduservice.controller.front</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/eduservice/coursefront&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CourseFrontController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EduCourseService courseService;<br><br>    <span class="hljs-comment">// 条件分页查询课程，前台</span><br>    <span class="hljs-meta">@PostMapping(&quot;getCourseFrontList/&#123;page&#125;/&#123;limit&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">getCourseFrontList</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">long</span> page, <span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">long</span> limit,</span></span><br><span class="hljs-params"><span class="hljs-function">                                <span class="hljs-meta">@RequestBody(required = false)</span> CourseFrontVo courseFrontVo)</span></span>&#123;<br>        Page&lt;EduCourse&gt; coursePage = <span class="hljs-keyword">new</span> Page&lt;&gt;(page,limit);<br>        Map&lt;String,Object&gt; map = courseService.getCourseFrontList(coursePage,courseFrontVo);<br><br>        <span class="hljs-keyword">return</span> R.ok().data(map);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Service-1"><a href="#Service-1" class="headerlink" title="Service"></a>Service</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 条件分页查询课程，前台</span><br><span class="hljs-function">Map&lt;String, Object&gt; <span class="hljs-title">getCourseFrontList</span><span class="hljs-params">(Page&lt;EduCourse&gt; coursePage, CourseFrontVo courseFrontVo)</span></span>;<br></code></pre></td></tr></table></figure>

<h2 id="serviceImpl-1"><a href="#serviceImpl-1" class="headerlink" title="serviceImpl"></a>serviceImpl</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 条件分页查询课程，前台</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">getCourseFrontList</span><span class="hljs-params">(Page&lt;EduCourse&gt; coursePage, CourseFrontVo courseFrontVo)</span> </span>&#123;<br><br>    QueryWrapper&lt;EduCourse&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br><br>    <span class="hljs-comment">// 先判断传过来的值是否为空</span><br>    <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(courseFrontVo.getSubjectParentId()))&#123;<br>        <span class="hljs-comment">// 一级标题</span><br>        wrapper.eq(<span class="hljs-string">&quot;subject_parent_id&quot;</span>,courseFrontVo.getSubjectParentId());<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(courseFrontVo.getSubjectId()))&#123;<br>        <span class="hljs-comment">// 二级标题</span><br>        wrapper.eq(<span class="hljs-string">&quot;subject_id&quot;</span>,courseFrontVo.getSubjectId());<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(courseFrontVo.getBuyCountSort()))&#123;<br>        <span class="hljs-comment">// 销售量</span><br>        wrapper.orderByDesc(<span class="hljs-string">&quot;buy_count&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(courseFrontVo.getGmtCreateSort()))&#123;<br>        <span class="hljs-comment">// 创建时间</span><br>        wrapper.orderByDesc(<span class="hljs-string">&quot;gmt_create&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(courseFrontVo.getPriceSort()))&#123;<br>        <span class="hljs-comment">// 价格</span><br>        wrapper.orderByDesc(<span class="hljs-string">&quot;price&quot;</span>);<br>    &#125;<br><br>    baseMapper.selectPage(coursePage,wrapper);<br><br>    List&lt;EduCourse&gt; records = coursePage.getRecords();<br>    <span class="hljs-keyword">long</span> current = coursePage.getCurrent();<br>    <span class="hljs-keyword">long</span> pages = coursePage.getPages();<br>    <span class="hljs-keyword">long</span> size = coursePage.getSize();<br>    <span class="hljs-keyword">long</span> total = coursePage.getTotal();<br>    <span class="hljs-keyword">boolean</span> hasNext = coursePage.hasNext();<br>    <span class="hljs-keyword">boolean</span> hasPrevious = coursePage.hasPrevious();<br><br>    <span class="hljs-comment">// 将查询出来的封装到map</span><br>    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;items&quot;</span>,records);<br>    map.put(<span class="hljs-string">&quot;current&quot;</span>,current);<br>    map.put(<span class="hljs-string">&quot;pages&quot;</span>,pages);<br>    map.put(<span class="hljs-string">&quot;size&quot;</span>,size);<br>    map.put(<span class="hljs-string">&quot;total&quot;</span>,total);<br>    map.put(<span class="hljs-string">&quot;hasNext&quot;</span>,hasNext);<br>    map.put(<span class="hljs-string">&quot;hasPrevious&quot;</span>,hasPrevious);<br><br>    <span class="hljs-comment">// 最后返回map</span><br>    <span class="hljs-keyword">return</span> map;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="课程列表前端"><a href="#课程列表前端" class="headerlink" title="课程列表前端"></a>课程列表前端</h1><h2 id="1、定义api"><a href="#1、定义api" class="headerlink" title="1、定义api"></a>1、定义api</h2><p>api/course.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// 条件分页查询课程</span><br>  <span class="hljs-function"><span class="hljs-title">getCourseList</span>(<span class="hljs-params">page,limit,searchObj</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/coursefront/getCourseFrontList/<span class="hljs-subst">$&#123;page&#125;</span>/<span class="hljs-subst">$&#123;limit&#125;</span>`</span>,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>      <span class="hljs-attr">data</span>:searchObj<br>    &#125;)<br>  &#125;,<br><br>  <span class="hljs-comment">// 查询所有分类的方法</span><br>  <span class="hljs-function"><span class="hljs-title">getAllSubject</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/subject/findAllSubject`</span>,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>    &#125;)<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="2、页面调用接口"><a href="#2、页面调用接口" class="headerlink" title="2、页面调用接口"></a>2、页面调用接口</h2><p>pages/course/index.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>   import courseApi from &#x27;@/api/course&#x27;<br> export default &#123;<br>   data()&#123;<br>     return&#123;<br>      page:1,<br>      data:&#123;&#125;,  // 当前页的课程列表<br>      subjectNestedList: [], // 一级分类列表<br>      subSubjectList: [], // 二级分类列表<br>      searchObj: &#123;&#125;, // 查询表单对象<br>      oneIndex:-1,<br>      twoIndex:-1,<br>      buyCountSort:&quot;&quot;,<br>      gmtCreateSort:&quot;&quot;,<br>      priceSort:&quot;&quot;<br>     &#125;<br>   &#125;,<br>   created()&#123;<br>     // 初始化课程列表<br>     this.initCourse()<br>     // 初始化分类<br>     this.initSubject()<br>   &#125;,<br>   methods:&#123;<br>     //1 查询第一页课程<br>     initCourse()&#123;<br>       courseApi.getCourseList(1,8,this.searchObj)<br>        .then(response =&gt;&#123;<br>          this.data = response.data.data<br>        &#125;)<br>     &#125;,<br>     // 2查询所有一级分类<br>     initSubject()&#123;<br>       courseApi.getAllSubject()<br>        .then(response =&gt;&#123;<br>          this.subjectNestedList = response.data.data.list<br>        &#125;)<br>     &#125;,<br>     // 3条件分页查询 下一页<br>     gotoPage(page)&#123;<br>       courseApi.getCourseList(page,8,this.searchObj)<br>        .then(response =&gt;&#123;<br>          this.data = response.data.data<br>        &#125;)<br>     &#125;,<br>     // 4二级分类联动，点击一级分类，显示二级分类<br>     searchOne(subjectParentId,index)&#123;<br>      // 为了清空排序<br>      this.buyCountSort = &quot;&quot;<br>      this.gmtCreateSort = &quot;&quot;<br>      this.priceSort = &quot;&quot;<br><br>       // 选中一级分类变色，为了样式能显示<br>       this.oneIndex = index<br>       this.twoIndex = -1<br>       this.searchObj.subjectId =&#x27;&#x27;<br>       this.subSubjectList = []<br><br>       // 点击一级分类的时候，把点击的分类的id赋值给searchObj<br>       this.searchObj.subjectParentId = subjectParentId<br>       // 条件分页查询<br>       this.gotoPage(1)<br><br>       // 拿着一级分类id和所有一级分类id进行比较<br>       //遍历所有的一级分类<br>       for(let i = 0; i &lt; this.subjectNestedList.length; i++)&#123;<br>         // 取到每一个一级分类<br>         var oneSubject = this.subjectNestedList[i]<br>         // 将传进来的一级分类id和遍历出来的所有一级分类对比<br>         if(subjectParentId == oneSubject.id)&#123;<br>           // 将查询出来的二级分类赋值给subSubjectList<br>           this.subSubjectList = oneSubject.children<br>         &#125;<br>       &#125;<br>     &#125;,<br>     // 5.点击二级分类，显示课程<br>    searchTwo(subjectId,index)&#123;<br>      // 为了清空排序<br>      this.buyCountSort = &quot;&quot;<br>      this.gmtCreateSort = &quot;&quot;<br>      this.priceSort = &quot;&quot;<br><br>      // 给index赋值，为了让样式生效<br>      this.twoIndex = index<br>       // 点击二级分类的时候，把点击的分类的id赋值给searchObj<br>       this.searchObj.subjectId = subjectId<br>       // 条件分页查询<br>      this.gotoPage(1)<br>    &#125;,<br>    // 6.按照销量排序<br>    searchBuyCount() &#123;<br>      this.buyCountSort = &quot;1&quot;<br>      this.gmtCreateSort = &quot;&quot;<br>      this.priceSort = &quot;&quot;<br>      this.searchObj.buyCountSort = this.buyCountSort<br>      this.searchObj.gmtCreateSort = this.gmtCreateSort<br>      this.searchObj.priceSort = this.priceSort<br>      this.gotoPage(1)<br>    &#125;,<br>    // 7.按照时间排序<br>    searchGmtCreate()&#123;<br>      this.buyCountSort = &quot;&quot;<br>      this.gmtCreateSort = &quot;1&quot;<br>      this.priceSort = &quot;&quot;<br>      this.searchObj.buyCountSort = this.buyCountSort<br>      this.searchObj.gmtCreateSort = this.gmtCreateSort<br>      this.searchObj.priceSort = this.priceSort<br>      this.gotoPage(1)<br>    &#125;,<br>    // 8.按照价格排序<br>    searchPrice()&#123;<br>      this.buyCountSort = &quot;&quot;<br>      this.gmtCreateSort = &quot;&quot;<br>      this.priceSort = &quot;1&quot;<br>      this.searchObj.buyCountSort = this.buyCountSort<br>      this.searchObj.gmtCreateSort = this.gmtCreateSort<br>      this.searchObj.priceSort = this.priceSort<br>      this.gotoPage(1)<br><br>    &#125;<br>   &#125;<br> &#125;;<br> &lt;/script&gt;<br>// #bdbdbd;rgba(24, 223, 24, 0.514);rgba(172, 255, 47, 0.493);<br> &lt;style scoped&gt;<br>  .active &#123; <br>    background: rgba(24, 223, 24, 0.514);<br>  &#125;<br>  .hide &#123;<br>    display: none;<br>  &#125;<br>  .show &#123;<br>    display: block;<br>  &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<h2 id="3、课程类别显示"><a href="#3、课程类别显示" class="headerlink" title="3、课程类别显示"></a>3、课程类别显示</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;section class=&quot;c-s-dl&quot;&gt;<br>           &lt;dl&gt;<br>             &lt;dt&gt;<br>               &lt;span class=&quot;c-999 fsize14&quot;&gt;课程类别&lt;/span&gt;<br>             &lt;/dt&gt;<br>             &lt;dd class=&quot;c-s-dl-li&quot;&gt;<br>               &lt;ul class=&quot;clearfix&quot;&gt;<br>                 &lt;li&gt;<br>                   &lt;a title=&quot;全部&quot; href=&quot;#&quot;&gt;全部&lt;/a&gt;<br>                 &lt;/li&gt;<br>                 &lt;li v-for=&quot;(item,index) in subjectNestedList&quot; :key=&quot;index&quot;  :class=&quot;&#123;active:oneIndex==index&#125;&quot;&gt;<br>                   &lt;a :title=&quot;item.title&quot; href=&quot;#&quot; @click=&quot;searchOne(item.id,index)&quot; &gt;&#123;&#123;item.title&#125;&#125;&lt;/a&gt;<br>                 &lt;/li&gt;<br>               &lt;/ul&gt;<br>             &lt;/dd&gt;<br>           &lt;/dl&gt;<br>           &lt;dl&gt;<br>             &lt;dt&gt;<br>               &lt;span class=&quot;c-999 fsize14&quot;&gt;&lt;/span&gt;<br>             &lt;/dt&gt;<br>             &lt;dd class=&quot;c-s-dl-li&quot;&gt;<br>               &lt;ul class=&quot;clearfix&quot;&gt;<br>                 &lt;li v-for=&quot;(item,index) in subSubjectList&quot; :key=&quot;index&quot; :class=&quot;&#123;active:twoIndex==index&#125;&quot;&gt;<br>                   &lt;a :title=&quot;item.title&quot; href=&quot;#&quot; @click=&quot;searchTwo(item.id,index)&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/a&gt;<br>                 &lt;/li&gt;<br>                <br>               &lt;/ul&gt;<br>             &lt;/dd&gt;<br>           &lt;/dl&gt;<br>           &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>         &lt;/section&gt;<br></code></pre></td></tr></table></figure>



<h2 id="4、排序方式显示"><a href="#4、排序方式显示" class="headerlink" title="4、排序方式显示"></a>4、排序方式显示</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;section class=&quot;fl&quot;&gt;<br>  &lt;ol class=&quot;js-tap clearfix&quot;&gt;<br>     &lt;li :class=&quot;&#123;&#x27;current bg-orange&#x27;:buyCountSort!=&#x27;&#x27;&#125;&quot;&gt;<br>       &lt;a title=&quot;销量&quot; href=&quot;javascript:void(0);&quot; @click=&quot;searchBuyCount()&quot;&gt;销量<br>       &lt;span :class=&quot;&#123;hide:buyCountSort==&#x27;&#x27;&#125;&quot;&gt;↓&lt;/span&gt;<br>       &lt;/a&gt;<br>     &lt;/li&gt;<br>     &lt;li :class=&quot;&#123;&#x27;current bg-orange&#x27;:gmtCreateSort!=&#x27;&#x27;&#125;&quot;&gt;<br>       &lt;a title=&quot;最新&quot; href=&quot;javascript:void(0);&quot; @click=&quot;searchGmtCreate()&quot;&gt;最新<br>       &lt;span :class=&quot;&#123;hide:gmtCreateSort==&#x27;&#x27;&#125;&quot;&gt;↓&lt;/span&gt;<br>       &lt;/a&gt;<br>     &lt;/li&gt;<br>     &lt;li :class=&quot;&#123;&#x27;current bg-orange&#x27;:priceSort!=&#x27;&#x27;&#125;&quot;&gt;<br>       &lt;a title=&quot;价格&quot; href=&quot;javascript:void(0);&quot; @click=&quot;searchPrice()&quot;&gt;价格&amp;nbsp;<br>         &lt;span :class=&quot;&#123;hide:priceSort==&#x27;&#x27;&#125;&quot;&gt;↓&lt;/span&gt;<br>       &lt;/a&gt;<br>     &lt;/li&gt;<br>  &lt;/ol&gt;<br>&lt;/section&gt;<br></code></pre></td></tr></table></figure>

<h2 id="5、无数据提示"><a href="#5、无数据提示" class="headerlink" title="5、无数据提示"></a>5、无数据提示</h2><p>添加：v-if=”data.total==0”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;!-- /无数据提示 开始--&gt;<br>&lt;section class=&quot;no-data-wrap&quot; v-if=&quot;data.total == 0&quot;&gt;<br>  &lt;em class=&quot;icon30 no-data-ico&quot;&gt;&amp;nbsp;&lt;/em&gt;<br>  &lt;span class=&quot;c-666 fsize14 ml10 vam&quot;&gt;没有相关数据，小编正在努力整理中...&lt;/span&gt;<br>&lt;/section&gt;<br>&lt;!-- /无数据提示 结束--&gt;<br></code></pre></td></tr></table></figure>

<h2 id="6、列表"><a href="#6、列表" class="headerlink" title="6、列表"></a>6、列表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;article class=&quot;comm-course-list&quot;  v-if=&quot;data.total &gt; 0&quot;&gt;<br>             &lt;ul class=&quot;of&quot; id=&quot;bna&quot;&gt;<br>               &lt;li v-for=&quot;(item,index) in data.items&quot; :key=&quot;index&quot;&gt;<br>                 &lt;div class=&quot;cc-l-wrap&quot;&gt;<br>                   &lt;section class=&quot;course-img&quot;&gt;<br>                     &lt;img :src=&quot;item.cover&quot; class=&quot;img-responsive&quot; :alt=&quot;item.title&quot;&gt;<br>                     &lt;div class=&quot;cc-mask&quot;&gt;<br>                       &lt;a :href=&quot;&#x27;/course/&#x27;+item.id&quot; title=&quot;开始学习&quot; class=&quot;comm-btn c-btn-1&quot;&gt;开始学习&lt;/a&gt;<br>                     &lt;/div&gt;<br>                   &lt;/section&gt;<br>                   &lt;h3 class=&quot;hLh30 txtOf mt10&quot;&gt;<br>                     &lt;a :href=&quot;&#x27;/course/&#x27;+item.id&quot; :title=&quot;item.title&quot; class=&quot;course-title fsize18 c-333&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/a&gt;<br>                   &lt;/h3&gt;<br>                   &lt;section class=&quot;mt10 hLh20 of&quot;&gt;<br>                     &lt;span v-if=&quot;Number(item.price) == 0&quot; class=&quot;fr jgTag bg-green&quot;&gt;<br>                       &lt;i class=&quot;c-fff fsize12 f-fA&quot;&gt;免费&lt;/i&gt;<br>                     &lt;/span&gt;<br>                     &lt;span class=&quot;fl jgAttr c-ccc f-fA&quot;&gt;<br>                       &lt;i class=&quot;c-999 f-fA&quot;&gt;9634人学习&lt;/i&gt;<br>                       |<br>                       &lt;i class=&quot;c-999 f-fA&quot;&gt;9634评论&lt;/i&gt;<br>                     &lt;/span&gt;<br>                   &lt;/section&gt;<br>                 &lt;/div&gt;<br>               &lt;/li&gt;<br><br>             &lt;/ul&gt;<br>             &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>           &lt;/article&gt;<br></code></pre></td></tr></table></figure>

<h2 id="7、分页页面渲染"><a href="#7、分页页面渲染" class="headerlink" title="7、分页页面渲染"></a>7、分页页面渲染</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;!-- 公共分页 开始 --&gt;<br>          &lt;div&gt;<br>            &lt;div class=&quot;paging&quot;&gt;<br>              &lt;!-- undisable这个class是否存在，取决于数据属性hasPrevious --&gt;<br>              &lt;a<br>                :class=&quot;&#123;undisable: !data.hasPrevious&#125;&quot;<br>                href=&quot;#&quot;<br>                title=&quot;首页&quot;<br>                @click.prevent=&quot;gotoPage(1)&quot;&gt;首&lt;/a&gt;<br>              &lt;a<br>                :class=&quot;&#123;undisable: !data.hasPrevious&#125;&quot;<br>                href=&quot;#&quot;<br>                title=&quot;前一页&quot;<br>                @click.prevent=&quot;gotoPage(data.current-1)&quot;&gt;&amp;lt;&lt;/a&gt;<br>              &lt;a<br>                v-for=&quot;page in data.pages&quot;<br>                :key=&quot;page&quot;<br>                :class=&quot;&#123;current: data.current == page, undisable: data.current == page&#125;&quot;<br>                :title=&quot;&#x27;第&#x27;+page+&#x27;页&#x27;&quot;<br>                href=&quot;#&quot;<br>                @click.prevent=&quot;gotoPage(page)&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;<br>              &lt;a<br>                :class=&quot;&#123;undisable: !data.hasNext&#125;&quot;<br>                href=&quot;#&quot;<br>                title=&quot;后一页&quot;<br>                @click.prevent=&quot;gotoPage(data.current+1)&quot;&gt;&amp;gt;&lt;/a&gt;<br>              &lt;a<br>                :class=&quot;&#123;undisable: !data.hasNext&#125;&quot;<br>                href=&quot;#&quot;<br>                title=&quot;末页&quot;<br>                @click.prevent=&quot;gotoPage(data.pages)&quot;&gt;末&lt;/a&gt;<br>              &lt;div class=&quot;clear&quot;/&gt;<br>            &lt;/div&gt;<br>          &lt;/div&gt;<br>         &lt;!-- 公共分页 结束 --&gt;<br></code></pre></td></tr></table></figure>



<h1 id="课程详情功能接口"><a href="#课程详情功能接口" class="headerlink" title="课程详情功能接口"></a>课程详情功能接口</h1><h2 id="Vo"><a href="#Vo" class="headerlink" title="Vo"></a>Vo</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CourseFrontVo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;课程名称&quot;)</span><br>    <span class="hljs-keyword">private</span> String title;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;讲师id&quot;)</span><br>    <span class="hljs-keyword">private</span> String teacherId;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;一级类别id&quot;)</span><br>    <span class="hljs-keyword">private</span> String subjectParentId;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;二级类别id&quot;)</span><br>    <span class="hljs-keyword">private</span> String subjectId;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;销量排序&quot;)</span><br>    <span class="hljs-keyword">private</span> String buyCountSort;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;最新时间排序&quot;)</span><br>    <span class="hljs-keyword">private</span> String gmtCreateSort;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;价格排序&quot;)</span><br>    <span class="hljs-keyword">private</span> String priceSort;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2.课程详情的方法</span><br><span class="hljs-meta">@GetMapping(&quot;getFrontCourseInfo/&#123;courseId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">getFrontCourseInfo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String courseId)</span></span>&#123;<br>    <span class="hljs-comment">// 根据课程id，编写SQL语句查询课程信息</span><br>    CourseWebVo courseWebVo = courseService.getBaseCourseInfo(courseId);<br>    <span class="hljs-comment">// 根据课程id，查询章节和小节</span><br>    List&lt;ChapterVo&gt; chapterVideoList = chapterService.getAllChapterVideo(courseId);<br><br>    <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;courseWebVo&quot;</span>,courseWebVo).data(<span class="hljs-string">&quot;chapterVideoList&quot;</span>,chapterVideoList);<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Service-2"><a href="#Service-2" class="headerlink" title="Service"></a>Service</h2><p>package com.atguigu.eduservice.service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据课程id，编写SQL语句查询课程信息</span><br><span class="hljs-function">CourseWebVo <span class="hljs-title">getBaseCourseInfo</span><span class="hljs-params">(String courseId)</span></span>;<br></code></pre></td></tr></table></figure>

<h2 id="ServiceImpl"><a href="#ServiceImpl" class="headerlink" title="ServiceImpl"></a>ServiceImpl</h2><p>com.atguigu.eduservice.service.impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据课程id，编写SQL语句查询课程信息</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> CourseWebVo <span class="hljs-title">getBaseCourseInfo</span><span class="hljs-params">(String courseId)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> baseMapper.getBaseCourseInfo(courseId);<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h2><p>package com.atguigu.eduservice.mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据课程id，编写SQL语句查询课程信息</span><br><span class="hljs-function">CourseWebVo <span class="hljs-title">getBaseCourseInfo</span><span class="hljs-params">(String courseId)</span></span>;<br></code></pre></td></tr></table></figure>

<h2 id="Xml"><a href="#Xml" class="headerlink" title="Xml"></a>Xml</h2><p>com/atguigu/eduservice/mapper/xml/EduCourseMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--根据课程id查询课程前端详情信息--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getBaseCourseInfo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.eduservice.entity.frontvo.CourseWebVo&quot;</span>&gt;</span><br>    SELECT<br>      ec.`id`,<br>      ec.`title`,<br>      ec.`price`,<br>      ec.`lesson_num` AS lessonNum,<br>      ec.`cover`,<br>      ec.`buy_count` AS buyCount,<br>      ec.`view_count` AS viewCount,<br>      ecd.`description` AS description,<br>      et.`id` AS teacherId,<br>      et.`name` AS teacherName,<br>      et.`intro` AS intro,<br>      et.`avatar`AS avatar,<br>      es1.`id` AS subjectLevelOneId,<br>      es1.`title` AS subjectLevelOne,<br>      es2.`id` AS subjectLevelTwoId,<br>      es2.`title` AS subjectLevelTwo<br>    FROM<br>      edu_course ec<br>      LEFT OUTER JOIN edu_course_description ecd<br>        ON ec.`id` = ecd.`id`<br>      LEFT OUTER JOIN edu_teacher et<br>        ON ec.`teacher_id` = et.`id`<br>      LEFT OUTER JOIN edu_subject es1<br>        ON ec.`subject_parent_id` = es1.`id`<br>      LEFT OUTER JOIN edu_subject es2<br>        ON ec.`subject_id` = es2.`id`<br>    WHERE ec.`id` = #&#123;courseId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="课程详情功能前端"><a href="#课程详情功能前端" class="headerlink" title="课程详情功能前端"></a>课程详情功能前端</h1><h2 id="1、api-course-js"><a href="#1、api-course-js" class="headerlink" title="1、api/course.js"></a>1、api/course.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 根据id查询课程详情信息</span><br><span class="hljs-function"><span class="hljs-title">getCourseInfo</span>(<span class="hljs-params">id</span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> request(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/coursefront/getFrontCourseInfo/<span class="hljs-subst">$&#123;id&#125;</span>`</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="2、pages-course-id-vue"><a href="#2、pages-course-id-vue" class="headerlink" title="2、pages/course/_id.vue"></a>2、pages/course/_id.vue</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue"> &lt;script&gt;<br>import course from &quot;@/api/course&quot;<br> export default &#123;<br><br>   asyncData(&#123; params, error  &#125;)&#123;<br>     console.log(params.id)<br>     return course.getCourseInfo(params.id)<br>      .then(response =&gt;&#123;<br>        console.log(response)<br>        return&#123;<br>          courseWebVo: response.data.data.courseWebVo,<br>          chapterVideoList: response.data.data.chapterVideoList<br>        &#125;<br>      &#125;)<br>   &#125;<br>   <br> &#125;;<br> &lt;/scrip&gt;<br></code></pre></td></tr></table></figure>

<h2 id="课程所属分类"><a href="#课程所属分类" class="headerlink" title="课程所属分类"></a>课程所属分类</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;!-- /课程详情 开始 --&gt;<br>     &lt;section class=&quot;container&quot;&gt;<br>       &lt;section class=&quot;path-wrap txtOf hLh30&quot;&gt;<br>         &lt;a href=&quot;#&quot; title class=&quot;c-999 fsize14&quot;&gt;首页&lt;/a&gt;<br>         \<br>         &lt;a href=&quot;#&quot; title class=&quot;c-999 fsize14&quot;&gt;&#123;&#123;courseWebVo.subjectLevelOne&#125;&#125;&lt;/a&gt;<br>         \<br>         &lt;span class=&quot;c-333 fsize14&quot;&gt;&#123;&#123;courseWebVo.subjectLevelTwo&#125;&#125;&lt;/span&gt;<br>       &lt;/section&gt;<br></code></pre></td></tr></table></figure>

<h2 id="课程基本信息"><a href="#课程基本信息" class="headerlink" title="课程基本信息"></a>课程基本信息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;div&gt;<br>        &lt;article class=&quot;c-v-pic-wrap&quot; style=&quot;height: 357px;&quot;&gt;<br>          &lt;section class=&quot;p-h-video-box&quot; id=&quot;videoPlay&quot;&gt;<br>            &lt;img :src=&quot;courseWebVo.cover&quot; :alt=&quot;courseWebVo.title&quot; class=&quot;dis c-v-pic&quot;&gt;<br>          &lt;/section&gt;<br>        &lt;/article&gt;<br>        &lt;aside class=&quot;c-attr-wrap&quot;&gt;<br>          &lt;section class=&quot;ml20 mr15&quot;&gt;<br>            &lt;h2 class=&quot;hLh30 txtOf mt15&quot;&gt;<br>              &lt;span class=&quot;c-fff fsize24&quot;&gt;&#123;&#123;courseWebVo.title&#125;&#125;&lt;/span&gt;<br>            &lt;/h2&gt;<br>            &lt;section class=&quot;c-attr-jg&quot;&gt;<br>              &lt;span class=&quot;c-fff&quot;&gt;价格：&lt;/span&gt;<br>              &lt;b class=&quot;c-yellow&quot; style=&quot;font-size:24px;&quot;&gt;￥&#123;&#123;courseWebVo.price&#125;&#125;&lt;/b&gt;<br>            &lt;/section&gt;<br>            &lt;section class=&quot;c-attr-mt c-attr-undis&quot;&gt;<br>              &lt;span class=&quot;c-fff fsize14&quot;&gt;主讲： &#123;&#123;courseWebVo.teacherName&#125;&#125;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;<br>            &lt;/section&gt;<br>            &lt;section class=&quot;c-attr-mt of&quot;&gt;<br>              &lt;span class=&quot;ml10 vam&quot;&gt;<br>                &lt;em class=&quot;icon18 scIcon&quot;&gt;&lt;/em&gt;<br>                &lt;a class=&quot;c-fff vam&quot; title=&quot;收藏&quot; href=&quot;#&quot; &gt;收藏&lt;/a&gt;<br>              &lt;/span&gt;<br>            &lt;/section&gt;<br>            &lt;section class=&quot;c-attr-mt&quot;&gt;<br>              &lt;a href=&quot;#&quot; title=&quot;立即观看&quot; class=&quot;comm-btn c-btn-3&quot;&gt;立即观看&lt;/a&gt;<br>            &lt;/section&gt;<br>          &lt;/section&gt;<br>        &lt;/aside&gt;<br>        &lt;aside class=&quot;thr-attr-box&quot;&gt;<br>          &lt;ol class=&quot;thr-attr-ol clearfix&quot;&gt;<br>            &lt;li&gt;<br>              &lt;p&gt;&amp;nbsp;&lt;/p&gt;<br>              &lt;aside&gt;<br>                &lt;span class=&quot;c-fff f-fM&quot;&gt;购买数&lt;/span&gt;<br>                &lt;br&gt;<br>                &lt;h6 class=&quot;c-fff f-fM mt10&quot;&gt;&#123;&#123;courseWebVo.buyCount&#125;&#125;&#125;&lt;/h6&gt;<br>              &lt;/aside&gt;<br>            &lt;/li&gt;<br>            &lt;li&gt;<br>              &lt;p&gt;&amp;nbsp;&lt;/p&gt;<br>              &lt;aside&gt;<br>                &lt;span class=&quot;c-fff f-fM&quot;&gt;课时数&lt;/span&gt;<br>                &lt;br&gt;<br>                &lt;h6 class=&quot;c-fff f-fM mt10&quot;&gt;&#123;&#123;courseWebVo.lessonNum&#125;&#125;&lt;/h6&gt;<br>              &lt;/aside&gt;<br>            &lt;/li&gt;<br>            &lt;li&gt;<br>              &lt;p&gt;&amp;nbsp;&lt;/p&gt;<br>              &lt;aside&gt;<br>                &lt;span class=&quot;c-fff f-fM&quot;&gt;浏览数&lt;/span&gt;<br>                &lt;br&gt;<br>                &lt;h6 class=&quot;c-fff f-fM mt10&quot;&gt;&#123;&#123;courseWebVo.viewCount&#125;&#125;&lt;/h6&gt;<br>              &lt;/aside&gt;<br>            &lt;/li&gt;<br>          &lt;/ol&gt;<br>        &lt;/aside&gt;<br>        &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>      &lt;/div&gt;<br></code></pre></td></tr></table></figure>

<h2 id="课程详情介绍"><a href="#课程详情介绍" class="headerlink" title="课程详情介绍"></a>课程详情介绍</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;div&gt;<br>                  &lt;h6 class=&quot;c-i-content c-infor-title&quot;&gt;<br>                    &lt;span&gt;课程介绍&lt;/span&gt;<br>                  &lt;/h6&gt;<br>                  &lt;div class=&quot;course-txt-body-wrap&quot;&gt;<br>                    &lt;section class=&quot;course-txt-body&quot;&gt;<br>                      &lt;p v-html=&quot;courseWebVo.description&quot; &gt;&#123;&#123;courseWebVo.description&#125;&#125;&lt;/p&gt;<br>                    &lt;/section&gt;<br>                  &lt;/div&gt;<br>                &lt;/div&gt;<br></code></pre></td></tr></table></figure>

<h2 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;!-- /课程介绍 --&gt;<br>                 &lt;div class=&quot;mt50&quot;&gt;<br>                   &lt;h6 class=&quot;c-g-content c-infor-title&quot;&gt;<br>                     &lt;span&gt;课程大纲&lt;/span&gt;<br>                   &lt;/h6&gt;<br>                   &lt;section class=&quot;mt20&quot;&gt;<br>                     &lt;div class=&quot;lh-menu-wrap&quot;&gt;<br>                       &lt;menu id=&quot;lh-menu&quot; class=&quot;lh-menu mt10 mr10&quot;&gt;<br>                         &lt;ul&gt;<br>                           &lt;!-- 文件目录 --&gt;<br>                           &lt;li class=&quot;lh-menu-stair&quot; v-for=&quot;chapter in chapterVideoList&quot; :key=&quot;chapter.id&quot;&gt;<br>                             &lt;a href=&quot;javascript: void(0)&quot; :title=&quot;chapter.title&quot; class=&quot;current-1&quot;&gt;<br>                               &lt;em class=&quot;lh-menu-i-1 icon18 mr10&quot;&gt;&lt;/em&gt;&#123;&#123;chapter.title&#125;&#125;<br>                             &lt;/a&gt;<br>                             &lt;ol class=&quot;lh-menu-ol&quot; style=&quot;display: block;&quot;&gt;<br>                               &lt;li class=&quot;lh-menu-second ml30&quot; v-for=&quot;video in chapter.children&quot; :key=&quot;video.id&quot;&gt;<br>                                 &lt;a href=&quot;#&quot; title&gt;<br>                                   &lt;span class=&quot;fr&quot; v-if=&quot;Number(courseWebVo.price) == 0&quot;&gt;<br>                                     &lt;i class=&quot;free-icon vam mr10&quot; &gt;免费试听&lt;/i&gt;<br>                                   &lt;/span&gt;<br>                                   &lt;em class=&quot;lh-menu-i-2 icon16 mr5&quot;&gt;&amp;nbsp;&lt;/em&gt;&#123;&#123;video.title&#125;&#125;<br>                                 &lt;/a&gt;<br>                               &lt;/li&gt;<br>                               <br>                             &lt;/ol&gt;<br>                           &lt;/li&gt;<br>                         &lt;/ul&gt;<br>                       &lt;/menu&gt;<br>                     &lt;/div&gt;<br>                   &lt;/section&gt;<br>                 &lt;/div&gt;<br>                 &lt;!-- /课程大纲 --&gt;<br></code></pre></td></tr></table></figure>

<h2 id="主讲讲师"><a href="#主讲讲师" class="headerlink" title="主讲讲师"></a>主讲讲师</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;div class=&quot;i-box&quot;&gt;<br>             &lt;div&gt;<br>               &lt;section class=&quot;c-infor-tabTitle c-tab-title&quot;&gt;<br>                 &lt;a title href=&quot;javascript:void(0)&quot;&gt;主讲讲师&lt;/a&gt;<br>               &lt;/section&gt;<br>               &lt;section class=&quot;stud-act-list&quot;&gt;<br>                 &lt;ul style=&quot;height: auto;&quot;&gt;<br>                   &lt;li&gt;<br>                     &lt;div class=&quot;u-face&quot;&gt;<br>                       &lt;a href=&quot;#&quot;&gt;<br>                         &lt;img :src=&quot;courseWebVo.avatar&quot; width=&quot;50&quot; height=&quot;50&quot; alt&gt;<br>                       &lt;/a&gt;<br>                     &lt;/div&gt;<br>                     &lt;section class=&quot;hLh30 txtOf&quot;&gt;<br>                       &lt;a class=&quot;c-333 fsize16 fl&quot; href=&quot;#&quot;&gt;&#123;&#123;courseWebVo.teacherName&#125;&#125;&lt;/a&gt;<br>                     &lt;/section&gt;<br>                     &lt;section class=&quot;hLh20 txtOf&quot;&gt;<br>                       &lt;span class=&quot;c-999&quot;&gt;&#123;&#123;courseWebVo.intro&#125;&#125;&lt;/span&gt;<br>                     &lt;/section&gt;<br>                   &lt;/li&gt;<br>                 &lt;/ul&gt;<br>               &lt;/section&gt;<br>             &lt;/div&gt;<br>           &lt;/div&gt;<br></code></pre></td></tr></table></figure>

<h2 id="完整页面-1"><a href="#完整页面-1" class="headerlink" title="完整页面"></a>完整页面</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>   &lt;div id=&quot;aCoursesList&quot; class=&quot;bg-fa of&quot;&gt;<br>     &lt;!-- /课程详情 开始 --&gt;<br>     &lt;section class=&quot;container&quot;&gt;<br>       &lt;section class=&quot;path-wrap txtOf hLh30&quot;&gt;<br>         &lt;a href=&quot;#&quot; title class=&quot;c-999 fsize14&quot;&gt;首页&lt;/a&gt;<br>         \<br>         &lt;a href=&quot;#&quot; title class=&quot;c-999 fsize14&quot;&gt;&#123;&#123;courseWebVo.subjectLevelOne&#125;&#125;&lt;/a&gt;<br>         \<br>         &lt;span class=&quot;c-333 fsize14&quot;&gt;&#123;&#123;courseWebVo.subjectLevelTwo&#125;&#125;&lt;/span&gt;<br>       &lt;/section&gt;<br>       &lt;div&gt;<br>         &lt;article class=&quot;c-v-pic-wrap&quot; style=&quot;height: 357px;&quot;&gt;<br>           &lt;section class=&quot;p-h-video-box&quot; id=&quot;videoPlay&quot;&gt;<br>             &lt;img :src=&quot;courseWebVo.cover&quot; :alt=&quot;courseWebVo.title&quot; class=&quot;dis c-v-pic&quot;&gt;<br>           &lt;/section&gt;<br>         &lt;/article&gt;<br>         &lt;aside class=&quot;c-attr-wrap&quot;&gt;<br>           &lt;section class=&quot;ml20 mr15&quot;&gt;<br>             &lt;h2 class=&quot;hLh30 txtOf mt15&quot;&gt;<br>               &lt;span class=&quot;c-fff fsize24&quot;&gt;&#123;&#123;courseWebVo.title&#125;&#125;&lt;/span&gt;<br>             &lt;/h2&gt;<br>             &lt;section class=&quot;c-attr-jg&quot;&gt;<br>               &lt;span class=&quot;c-fff&quot;&gt;价格：&lt;/span&gt;<br>               &lt;b class=&quot;c-yellow&quot; style=&quot;font-size:24px;&quot;&gt;￥&#123;&#123;courseWebVo.price&#125;&#125;&lt;/b&gt;<br>             &lt;/section&gt;<br>             &lt;section class=&quot;c-attr-mt c-attr-undis&quot;&gt;<br>               &lt;span class=&quot;c-fff fsize14&quot;&gt;主讲： &#123;&#123;courseWebVo.teacherName&#125;&#125;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;<br>             &lt;/section&gt;<br>             &lt;section class=&quot;c-attr-mt of&quot;&gt;<br>               &lt;span class=&quot;ml10 vam&quot;&gt;<br>                 &lt;em class=&quot;icon18 scIcon&quot;&gt;&lt;/em&gt;<br>                 &lt;a class=&quot;c-fff vam&quot; title=&quot;收藏&quot; href=&quot;#&quot; &gt;收藏&lt;/a&gt;<br>               &lt;/span&gt;<br>             &lt;/section&gt;<br>             &lt;section class=&quot;c-attr-mt&quot;&gt;<br>               &lt;a href=&quot;#&quot; title=&quot;立即观看&quot; class=&quot;comm-btn c-btn-3&quot;&gt;立即观看&lt;/a&gt;<br>             &lt;/section&gt;<br>           &lt;/section&gt;<br>         &lt;/aside&gt;<br>         &lt;aside class=&quot;thr-attr-box&quot;&gt;<br>           &lt;ol class=&quot;thr-attr-ol clearfix&quot;&gt;<br>             &lt;li&gt;<br>               &lt;p&gt;&amp;nbsp;&lt;/p&gt;<br>               &lt;aside&gt;<br>                 &lt;span class=&quot;c-fff f-fM&quot;&gt;购买数&lt;/span&gt;<br>                 &lt;br&gt;<br>                 &lt;h6 class=&quot;c-fff f-fM mt10&quot;&gt;&#123;&#123;courseWebVo.buyCount&#125;&#125;&#125;&lt;/h6&gt;<br>               &lt;/aside&gt;<br>             &lt;/li&gt;<br>             &lt;li&gt;<br>               &lt;p&gt;&amp;nbsp;&lt;/p&gt;<br>               &lt;aside&gt;<br>                 &lt;span class=&quot;c-fff f-fM&quot;&gt;课时数&lt;/span&gt;<br>                 &lt;br&gt;<br>                 &lt;h6 class=&quot;c-fff f-fM mt10&quot;&gt;&#123;&#123;courseWebVo.lessonNum&#125;&#125;&lt;/h6&gt;<br>               &lt;/aside&gt;<br>             &lt;/li&gt;<br>             &lt;li&gt;<br>               &lt;p&gt;&amp;nbsp;&lt;/p&gt;<br>               &lt;aside&gt;<br>                 &lt;span class=&quot;c-fff f-fM&quot;&gt;浏览数&lt;/span&gt;<br>                 &lt;br&gt;<br>                 &lt;h6 class=&quot;c-fff f-fM mt10&quot;&gt;&#123;&#123;courseWebVo.viewCount&#125;&#125;&lt;/h6&gt;<br>               &lt;/aside&gt;<br>             &lt;/li&gt;<br>           &lt;/ol&gt;<br>         &lt;/aside&gt;<br>         &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>       &lt;/div&gt;<br>       &lt;!-- /课程封面介绍 --&gt;<br>       &lt;div class=&quot;mt20 c-infor-box&quot;&gt;<br>         &lt;article class=&quot;fl col-7&quot;&gt;<br>           &lt;section class=&quot;mr30&quot;&gt;<br>             &lt;div class=&quot;i-box&quot;&gt;<br>               &lt;div&gt;<br>                 &lt;section id=&quot;c-i-tabTitle&quot; class=&quot;c-infor-tabTitle c-tab-title&quot;&gt;<br>                   &lt;a name=&quot;c-i&quot; class=&quot;current&quot; title=&quot;课程详情&quot;&gt;课程详情&lt;/a&gt;<br>                 &lt;/section&gt;<br>               &lt;/div&gt;<br>               &lt;article class=&quot;ml10 mr10 pt20&quot;&gt;<br>                 &lt;div&gt;<br>                   &lt;h6 class=&quot;c-i-content c-infor-title&quot;&gt;<br>                     &lt;span&gt;课程介绍&lt;/span&gt;<br>                   &lt;/h6&gt;<br>                   &lt;div class=&quot;course-txt-body-wrap&quot;&gt;<br>                     &lt;section class=&quot;course-txt-body&quot;&gt;<br>                       &lt;p v-html=&quot;courseWebVo.description&quot; &gt;&#123;&#123;courseWebVo.description&#125;&#125;&lt;/p&gt;<br>                     &lt;/section&gt;<br>                   &lt;/div&gt;<br>                 &lt;/div&gt;<br>                 &lt;!-- /课程介绍 --&gt;<br>                 &lt;div class=&quot;mt50&quot;&gt;<br>                   &lt;h6 class=&quot;c-g-content c-infor-title&quot;&gt;<br>                     &lt;span&gt;课程大纲&lt;/span&gt;<br>                   &lt;/h6&gt;<br>                   &lt;section class=&quot;mt20&quot;&gt;<br>                     &lt;div class=&quot;lh-menu-wrap&quot;&gt;<br>                       &lt;menu id=&quot;lh-menu&quot; class=&quot;lh-menu mt10 mr10&quot;&gt;<br>                         &lt;ul&gt;<br>                           &lt;!-- 文件目录 --&gt;<br>                           &lt;li class=&quot;lh-menu-stair&quot; v-for=&quot;chapter in chapterVideoList&quot; :key=&quot;chapter.id&quot;&gt;<br>                             &lt;a href=&quot;javascript: void(0)&quot; :title=&quot;chapter.title&quot; class=&quot;current-1&quot;&gt;<br>                               &lt;em class=&quot;lh-menu-i-1 icon18 mr10&quot;&gt;&lt;/em&gt;&#123;&#123;chapter.title&#125;&#125;<br>                             &lt;/a&gt;<br>                             &lt;ol class=&quot;lh-menu-ol&quot; style=&quot;display: block;&quot;&gt;<br>                               &lt;li class=&quot;lh-menu-second ml30&quot; v-for=&quot;video in chapter.children&quot; :key=&quot;video.id&quot;&gt;<br>                                 &lt;a href=&quot;#&quot; title&gt;<br>                                   &lt;span class=&quot;fr&quot; v-if=&quot;Number(courseWebVo.price) == 0&quot;&gt;<br>                                     &lt;i class=&quot;free-icon vam mr10&quot; &gt;免费试听&lt;/i&gt;<br>                                   &lt;/span&gt;<br>                                   &lt;em class=&quot;lh-menu-i-2 icon16 mr5&quot;&gt;&amp;nbsp;&lt;/em&gt;&#123;&#123;video.title&#125;&#125;<br>                                 &lt;/a&gt;<br>                               &lt;/li&gt;<br>                               <br>                             &lt;/ol&gt;<br>                           &lt;/li&gt;<br>                         &lt;/ul&gt;<br>                       &lt;/menu&gt;<br>                     &lt;/div&gt;<br>                   &lt;/section&gt;<br>                 &lt;/div&gt;<br>                 &lt;!-- /课程大纲 --&gt;<br>               &lt;/article&gt;<br>             &lt;/div&gt;<br>           &lt;/section&gt;<br>         &lt;/article&gt;<br>         &lt;aside class=&quot;fl col-3&quot;&gt;<br>           &lt;div class=&quot;i-box&quot;&gt;<br>             &lt;div&gt;<br>               &lt;section class=&quot;c-infor-tabTitle c-tab-title&quot;&gt;<br>                 &lt;a title href=&quot;javascript:void(0)&quot;&gt;主讲讲师&lt;/a&gt;<br>               &lt;/section&gt;<br>               &lt;section class=&quot;stud-act-list&quot;&gt;<br>                 &lt;ul style=&quot;height: auto;&quot;&gt;<br>                   &lt;li&gt;<br>                     &lt;div class=&quot;u-face&quot;&gt;<br>                       &lt;a href=&quot;#&quot;&gt;<br>                         &lt;img :src=&quot;courseWebVo.avatar&quot; width=&quot;50&quot; height=&quot;50&quot; alt&gt;<br>                       &lt;/a&gt;<br>                     &lt;/div&gt;<br>                     &lt;section class=&quot;hLh30 txtOf&quot;&gt;<br>                       &lt;a class=&quot;c-333 fsize16 fl&quot; href=&quot;#&quot;&gt;&#123;&#123;courseWebVo.teacherName&#125;&#125;&lt;/a&gt;<br>                     &lt;/section&gt;<br>                     &lt;section class=&quot;hLh20 txtOf&quot;&gt;<br>                       &lt;span class=&quot;c-999&quot;&gt;&#123;&#123;courseWebVo.intro&#125;&#125;&lt;/span&gt;<br>                     &lt;/section&gt;<br>                   &lt;/li&gt;<br>                 &lt;/ul&gt;<br>               &lt;/section&gt;<br>             &lt;/div&gt;<br>           &lt;/div&gt;<br>         &lt;/aside&gt;<br>         &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>       &lt;/div&gt;<br>     &lt;/section&gt;<br>     &lt;!-- /课程详情 结束 --&gt;<br>   &lt;/div&gt;<br> &lt;/template&gt;<br> &lt;script&gt;<br>import course from &quot;@/api/course&quot;<br> export default &#123;<br><br>   asyncData(&#123; params, error  &#125;)&#123;<br>     console.log(params.id)<br>     return course.getCourseInfo(params.id)<br>      .then(response =&gt;&#123;<br>        console.log(response)<br>        return&#123;<br>          courseWebVo: response.data.data.courseWebVo,<br>          chapterVideoList: response.data.data.chapterVideoList<br>        &#125;<br>      &#125;)<br>   &#125;<br>   <br> &#125;;<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>

<h1 id="整合阿里云视频播放器测试"><a href="#整合阿里云视频播放器测试" class="headerlink" title="整合阿里云视频播放器测试"></a>整合阿里云视频播放器测试</h1><h2 id="视频地址播放"><a href="#视频地址播放" class="headerlink" title="视频地址播放"></a>视频地址播放</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://g.alicdn.com/de/prismplayer/2.8.1/skins/default/aliplayer-min.css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://g.alicdn.com/de/prismplayer/2.8.1/aliplayer-min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;prism-player&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;J_prismPlayer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> player = <span class="hljs-keyword">new</span> Aliplayer(&#123;</span><br><span class="javascript">                <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;J_prismPlayer&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;100%&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">autoplay</span>: <span class="hljs-literal">false</span>,</span><br><span class="javascript">                <span class="hljs-attr">cover</span>: <span class="hljs-string">&#x27;http://liveroom-img.oss-cn-qingdao.aliyuncs.com/logo.png&#x27;</span>,  </span><br><span class="javascript">                <span class="hljs-comment">//播放配置</span></span><br><span class="javascript">                <span class="hljs-comment">//播放方式一：支持播放地址播放,此播放优先级最高，此种方式不能播放加密视频</span></span><br><span class="javascript">                <span class="hljs-attr">source</span> : <span class="hljs-string">&#x27;https://outin-e7915c6967b411eca96500163e1c60dc.oss-cn-shanghai.aliyuncs.com/sv/12b862d3-17e007b353b/12b862d3-17e007b353b.mp4?Expires=1641138735&amp;OSSAccessKeyId=LTAIxSaOfEzCnBOj&amp;Signature=LZvaSss9BmRFXSrXL6DMmhmi%2BiQ%3D&#x27;</span>,</span><br><span class="javascript">            &#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">player</span>)</span>&#123;</span><br><span class="javascript">               </span><br><span class="javascript">            &#125;);</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="凭证播放"><a href="#凭证播放" class="headerlink" title="凭证播放"></a>凭证播放</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://g.alicdn.com/de/prismplayer/2.8.1/skins/default/aliplayer-min.css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://g.alicdn.com/de/prismplayer/2.8.1/aliplayer-min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;prism-player&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;J_prismPlayer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> player = <span class="hljs-keyword">new</span> Aliplayer(&#123;</span><br><span class="javascript">                <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;J_prismPlayer&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;100%&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">autoplay</span>: <span class="hljs-literal">false</span>,</span><br><span class="javascript">                <span class="hljs-attr">cover</span>: <span class="hljs-string">&#x27;http://liveroom-img.oss-cn-qingdao.aliyuncs.com/logo.png&#x27;</span>,  </span><br><span class="javascript">                <span class="hljs-comment">//播放配置</span></span><br><span class="javascript">                <span class="hljs-attr">encryptType</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-comment">//如果播放加密视频，则需设置encryptType=1，非加密视频无需设置此项</span></span><br><span class="javascript">                <span class="hljs-attr">vid</span>: <span class="hljs-string">&#x27;&#x27;</span>,		<span class="hljs-comment">// 视频id</span></span><br><span class="javascript">                <span class="hljs-attr">playauth</span> : <span class="hljs-string">&#x27;&#x27;</span>,	<span class="hljs-comment">// 授权信息</span></span><br><span class="javascript">            &#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">player</span>)</span>&#123;</span><br><span class="javascript">               </span><br><span class="javascript">            &#125;);</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>

<h1 id="整合阿里云视频播放器"><a href="#整合阿里云视频播放器" class="headerlink" title="整合阿里云视频播放器"></a>整合阿里云视频播放器</h1><h2 id="一、后端获取播放凭证"><a href="#一、后端获取播放凭证" class="headerlink" title="一、后端获取播放凭证"></a>一、后端获取播放凭证</h2><h3 id="1、VideoController"><a href="#1、VideoController" class="headerlink" title="1、VideoController"></a>1、VideoController</h3><p>service-vod微服务中创建 VideoController.java</p>
<p>controller中创建 getVideoAuth接口方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据视频id获取凭证</span><br><span class="hljs-meta">@GetMapping(&quot;getVideoAuth/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">getVideoAuth</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 创建初始化对象</span><br>        DefaultAcsClient client = InitVodClient.initVodClient(ConstantVodUtils.ACCESS_KEY_ID, ConstantVodUtils.ACCESS_KEY_SECRET);<br><br>        <span class="hljs-comment">// 创建获取凭证的request和response对象</span><br>        GetVideoPlayAuthRequest request = <span class="hljs-keyword">new</span> GetVideoPlayAuthRequest();<br><br>        <span class="hljs-comment">// 设置视频id</span><br>        request.setVideoId(id);<br><br>        <span class="hljs-comment">// 调用初始化对象获取凭证</span><br>        GetVideoPlayAuthResponse response = client.getAcsResponse(request);<br><br>        String playAuth = response.getPlayAuth();<br><br>        <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;playAuth&quot;</span>,playAuth);<br>    &#125; <span class="hljs-keyword">catch</span> (ClientException e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GuliException(<span class="hljs-number">20001</span>,<span class="hljs-string">&quot;获取凭证失败&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="二、前端播放器整合"><a href="#二、前端播放器整合" class="headerlink" title="二、前端播放器整合"></a>二、前端播放器整合</h2><h3 id="1、点击播放超链接"><a href="#1、点击播放超链接" class="headerlink" title="1、点击播放超链接"></a>1、点击播放超链接</h3><p>course/_id.vue</p>
<p>修改课时目录超链接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;a :href=&quot;&#x27;/player/&#x27;+video.videoSourceId&quot; :title=&quot;video.title&quot; target=&quot;_blank&quot;&gt;<br>    &lt;span class=&quot;fr&quot; v-if=&quot;Number(courseWebVo.price) == 0&quot;&gt;<br>        &lt;i class=&quot;free-icon vam mr10&quot; &gt;免费试听&lt;/i&gt;<br>    &lt;/span&gt;<br>    &lt;em class=&quot;lh-menu-i-2 icon16 mr5&quot;&gt;&amp;nbsp;&lt;/em&gt;&#123;&#123;video.title&#125;&#125;<br>&lt;/a&gt;<br></code></pre></td></tr></table></figure>

<h3 id="2、layout"><a href="#2、layout" class="headerlink" title="2、layout"></a>2、layout</h3><p>因为播放器的布局和其他页面的基本布局不一致，因此创建新的布局容器 layouts/video.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;guli-player&quot;&gt;<br>    &lt;div class=&quot;head&quot;&gt;<br>      &lt;a href=&quot;#&quot; title=&quot;谷粒学院&quot;&gt;<br>        &lt;img class=&quot;logo&quot; src=&quot;~/assets/img/logo.png&quot; lt=&quot;谷粒学院&quot;&gt;<br>    &lt;/a&gt;&lt;/div&gt;<br>    &lt;div class=&quot;body&quot;&gt;<br>      &lt;div class=&quot;content&quot;&gt;&lt;nuxt/&gt;&lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;&#125;<br>&lt;/script&gt;<br>&lt;style&gt;<br>html,body&#123;<br>  height:100%;<br>&#125;<br>&lt;/style&gt;<br>&lt;style scoped&gt;<br>.head &#123;<br>  height: 50px;<br>  position: absolute;<br>  top: 0;<br>  left: 0;<br>  width: 100%;<br>&#125;<br>.head .logo&#123;<br>  height: 50px;<br>  margin-left: 10px;<br>&#125;<br>.body &#123;<br>  position: absolute;<br>  top: 50px;<br>  left: 0;<br>  right: 0;<br>  bottom: 0;<br>  overflow: hidden;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>

<h3 id="3、api"><a href="#3、api" class="headerlink" title="3、api"></a>3、api</h3><p>创建api模块 api/vod.js，从后端获取播放凭证</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-function"><span class="hljs-title">getPlayAuth</span>(<span class="hljs-params">vid</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduvod/video/getVideoAuth/<span class="hljs-subst">$&#123;vid&#125;</span>`</span>,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="4、播放组件相关文档"><a href="#4、播放组件相关文档" class="headerlink" title="4、播放组件相关文档"></a>4、播放组件相关文档</h3><p><strong>集成文档：</strong><a href="https://help.aliyun.com/document_detail/51991.html?spm=a2c4g.11186623.2.39.478e192b8VSdEn">https://help.aliyun.com/document_detail/51991.html?spm=a2c4g.11186623.2.39.478e192b8VSdEn</a></p>
<p><strong>在线配置：</strong><a href="https://player.alicdn.com/aliplayer/setting/setting.html">https://player.alicdn.com/aliplayer/setting/setting.html</a></p>
<p><strong>功能展示：</strong><a href="https://player.alicdn.com/aliplayer/presentation/index.html">https://player.alicdn.com/aliplayer/presentation/index.html</a></p>
<h3 id="5、创建播放页面"><a href="#5、创建播放页面" class="headerlink" title="5、创建播放页面"></a>5、创建播放页面</h3><p>创建 pages/player/_vid.vue</p>
<p>（1）引入播放器js库和css样式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;!-- 阿里云视频播放器样式 --&gt;<br>    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://g.alicdn.com/de/prismplayer/2.8.1/skins/default/aliplayer-min.css&quot; &gt;<br>    &lt;!-- 阿里云视频播放器脚本 --&gt;<br>    &lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;https://g.alicdn.com/de/prismplayer/2.8.1/aliplayer-min.js&quot; /&gt;<br>    &lt;!-- 定义播放器dom --&gt;<br>    &lt;div id=&quot;J_prismPlayer&quot; class=&quot;prism-player&quot; /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>

<p>（2）获取播放凭证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>import vod from &#x27;@/api/vod&#x27;<br>export default &#123;<br>    layout: &#x27;video&#x27;,//应用video布局<br>    asyncData(&#123; params, error &#125;) &#123;<br>        return vod.getPlayAuth(params.vid)<br>            .then(response =&gt;&#123;<br>                console.log(response.data.data.playAuth)<br>                return&#123;<br>                    playAuth: response.data.data.playAuth,<br>                    vid:params.vid<br>                &#125;<br>            &#125;)<br>    &#125;,<br>    <br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>

<p>（3）创建播放器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">/**<br> * 页面渲染完成时：此时js脚本已加载，Aliplayer已定义，可以使用<br> * 如果在created生命周期函数中使用，Aliplayer is not defined错误<br> */<br>// 在页面渲染之后执行<br>mounted() &#123;<br>    new Aliplayer(&#123;<br>        id: &#x27;J_prismPlayer&#x27;,<br>        vid: this.vid, // 视频id<br>        playauth: this.playAuth, // 播放凭证<br>        encryptType: &#x27;1&#x27;, // 如果播放加密视频，则需设置encryptType=1，非加密视频无需设置此项<br>        width: &#x27;100%&#x27;,<br>        height: &#x27;500px&#x27;<br>    &#125;, function(player) &#123;<br>        //console.log(&#x27;播放器创建成功&#x27;)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>

<p>（4）其他常见的可选配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">    // 以下可选设置<br>    cover: &#x27;http://guli.shop/photo/banner/1525939573202.jpg&#x27;, // 封面<br>    qualitySort: &#x27;asc&#x27;, // 清晰度排序<br>    mediaType: &#x27;video&#x27;, // 返回音频还是视频<br>    autoplay: false, // 自动播放<br>    isLive: false, // 直播<br>    rePlay: false, // 循环播放<br>    preload: true,<br>    controlBarVisibility: &#x27;hover&#x27;, // 控制条的显示方式：鼠标悬停<br>    useH5Prism: true, // 播放器类型：html5<br>&#125;, function(player) &#123;<br>    //console.log(&#x27;播放器创建成功&#x27;)<br></code></pre></td></tr></table></figure>

<h3 id="6、加入播放组件"><a href="#6、加入播放组件" class="headerlink" title="6、加入播放组件"></a>6、加入播放组件</h3><p><strong>功能展示：</strong><a href="https://player.alicdn.com/aliplayer/presentation/index.html">https://player.alicdn.com/aliplayer/presentation/index.html</a></p>
]]></content>
      <categories>
        <category>项目|谷粒学院|笔记</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/myBlog/Redis/</url>
    <content><![CDATA[<h1 id="Redis笔记"><a href="#Redis笔记" class="headerlink" title="Redis笔记"></a>Redis笔记</h1><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。</p>
<span id="more"></span>

<p>官网：<a href="https://redis.io/">https://redis.io/</a></p>
<p>中文网：<a href="http://www.redis.cn/">http://www.redis.cn/</a></p>
<h1 id="Nosql概述"><a href="#Nosql概述" class="headerlink" title="Nosql概述"></a>Nosql概述</h1><h2 id="为什么用Nosql"><a href="#为什么用Nosql" class="headerlink" title="为什么用Nosql"></a>为什么用Nosql</h2><ol>
<li><p>单击MySQL的年代</p>
<ul>
<li><p>数据量如果太大，一个机器内存放不了</p>
</li>
<li><p>数据的索引（B+Tree），一个机器内存也放不下</p>
</li>
<li><p>访问量（读写混合），一个服务器承受不来</p>
</li>
</ul>
<p><img src="/myBlog/Redis/image-20211105143145272-1636731322211.png" alt="image-20211105143145272"></p>
</li>
<li><p>memcached（缓存）+MySQL+垂直拆分（读写分离）</p>
<ul>
<li>发展过程：优化数据结构和索引–&gt;文件缓存（IO）–&gt; Memcached（当时最热门的技术）</li>
</ul>
<p><img src="/myBlog/Redis/image-20211105143507833-1636731322212.png" alt="image-20211105143507833"></p>
</li>
<li><p>分库分表+水平拆分+mysql集群</p>
<ul>
<li>==本质：数据库（读、写）==</li>
</ul>
<p><img src="/myBlog/Redis/image-20211105144556574-1636731322212.png" alt="image-20211105144556574"></p>
</li>
<li><p>如今</p>
<p><img src="/myBlog/Redis/image-20211105151219429-1636731322212.png" alt="image-20211105151219429"></p>
</li>
<li><p>为什么用Nosql</p>
<p>用户的个人信息，社交网络，地理位置。用户自己产生的数据，用户日志等等爆发式的增长</p>
</li>
</ol>
<h2 id="什么是NoSQL"><a href="#什么是NoSQL" class="headerlink" title="什么是NoSQL"></a>什么是NoSQL</h2><p>NoSQL = Not Only SQL</p>
<p>泛指非关系型数据库，传统的关系型数据库难以对付web2.0时代！，NoSQL在当今大数据时代环境下迅速发展，Redis。</p>
<p>关系型数据库：表格，行，列</p>
<h2 id="NoSQL特点"><a href="#NoSQL特点" class="headerlink" title="NoSQL特点"></a>NoSQL特点</h2><ol>
<li><p>方便扩展（数据之间没有关系，很好扩展）</p>
</li>
<li><p>大数据量高性能（Redis一秒抄写8万次，读取11万，Nosql的缓存记录集，是一种细粒度的缓存，性能较高）</p>
</li>
<li><p>数据类型，多样性 </p>
</li>
<li><p>传统的RDBMS和Nosql</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">传统的RDBMS<br><span class="hljs-bullet">- </span>结构化组织<br><span class="hljs-bullet">- </span>SQL<br><span class="hljs-bullet">- </span>数据和关系都存在单独的表中<br><span class="hljs-bullet">- </span>操作，数据定义语言<br><span class="hljs-bullet">- </span>严格的一致性<br><span class="hljs-bullet">- </span>基础的事务<br></code></pre></td></tr></table></figure>

<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">Nosql<br><span class="hljs-bullet">- </span>不仅仅是数据<br><span class="hljs-bullet">- </span>没有固定的查询语言<br><span class="hljs-bullet">- </span>键值对存储，列存储，文档存储，图形数据库（社交关系）<br><span class="hljs-bullet">- </span>最终一致性<br><span class="hljs-bullet">- </span>CAP定理和BASE(异地多活)<br><span class="hljs-bullet">- </span>高性能，高可用，高并发<br></code></pre></td></tr></table></figure></li>
</ol>
<p>了解：3v+3高</p>
<p><strong>3v：</strong></p>
<ol>
<li>海量volume</li>
<li>多样variety</li>
<li>实时velocity</li>
</ol>
<p><strong>3高：</strong></p>
<ol>
<li>高并发</li>
<li>高可用(或者高可扩，随时水平拆分，机器不够了，可用扩展机器)</li>
<li>高性能</li>
</ol>
<h2 id="NoSQL的四大分类"><a href="#NoSQL的四大分类" class="headerlink" title="NoSQL的四大分类"></a>NoSQL的四大分类</h2><p><strong>KV键值对：</strong></p>
<ul>
<li>redis</li>
</ul>
<p><strong>文档类型数据库(bson格式和json一样)：</strong></p>
<ul>
<li>MongoDB（一般必须掌握）<ul>
<li>MongoDB是一个基于分布式文件存储的数据库，主要用来处理大量的文档</li>
<li>MongoDB是一个介于关系型数据库和非关系型数据中间的产品 ，MongoDB是非关系型数据库中功能最丰富，最像关系型数据库的</li>
</ul>
</li>
</ul>
<p><strong>列存储数据库</strong></p>
<ul>
<li>HBase</li>
<li>分布式文件系统</li>
</ul>
<p><strong>图关系数据库</strong></p>
<ul>
<li>存关系，比如朋友圈社交网络，广告推荐</li>
<li>Neo4j， InfoGrid</li>
</ul>
<h1 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Redis （Remote Dictionnary Server）,即远程字典服务。 是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p>
<h2 id="Redis能干嘛"><a href="#Redis能干嘛" class="headerlink" title="Redis能干嘛"></a>Redis能干嘛</h2><ol>
<li>内存存储、持久化，内存中是断点即失，所以说持久化很重要（rdb，aof）</li>
<li>效率高，可以用于高速缓存</li>
<li>发布订阅系统</li>
<li>地图信息分析</li>
<li>计时器、计数器（浏览量） </li>
<li>….</li>
</ol>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol>
<li>多样的数据类型</li>
<li>持久化</li>
<li>集群</li>
<li>事务</li>
<li>…</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>wsl（Windows下的Linux子系统）</p>
<h3 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a><strong>Windows安装</strong></h3><h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a><strong>Linux安装</strong></h3><ol>
<li><p>下载安装包</p>
</li>
<li><p>解压到/opt目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@localhost opt]<span class="hljs-comment"># ls </span><br>redis-6.2.6  redis-6.2.6.tar.gz<br>[root@localhost opt]<span class="hljs-comment"># </span><br><br></code></pre></td></tr></table></figure></li>
<li><p>进到redis目录下，下载yum</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yum install gcc-c++<br></code></pre></td></tr></table></figure>

<p>结果报了以下错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@localhost redis-6.2.6]<span class="hljs-comment"># yum install gcc-c++</span><br>Loaded plugins: fastestmirror, langpacks<br>Loading mirror speeds from cached hostfile<br>Could not retrieve mirrorlist http://mirrorlist.centos.org/?release=7&amp;arch=x86_64&amp;repo=os&amp;infra=stock error was<br>14: curl<span class="hljs-comment">#6 - &quot;Could not resolve host: mirrorlist.centos.org; Unknown error&quot;</span><br><br><br> One of the configured repositories failed (Unknown),<br> and yum doesn<span class="hljs-string">&#x27;t have enough cached data to continue. At this point the only</span><br><span class="hljs-string"> safe thing yum can do is fail. There are a few ways to work &quot;fix&quot; this:</span><br><span class="hljs-string"></span><br><span class="hljs-string">     1. Contact the upstream for the repository and get them to fix the problem.</span><br><span class="hljs-string"></span><br><span class="hljs-string">     2. Reconfigure the baseurl/etc. for the repository, to point to a working</span><br><span class="hljs-string">        upstream. This is most often useful if you are using a newer</span><br><span class="hljs-string">        distribution release than is supported by the repository (and the</span><br><span class="hljs-string">        packages for the previous distribution release still work).</span><br><span class="hljs-string"></span><br><span class="hljs-string">     3. Run the command with the repository temporarily disabled</span><br><span class="hljs-string">            yum --disablerepo=&lt;repoid&gt; ...</span><br><span class="hljs-string"></span><br><span class="hljs-string">     4. Disable the repository permanently, so yum won&#x27;</span>t use it by default. Yum<br>        will <span class="hljs-keyword">then</span> just ignore the repository until you permanently <span class="hljs-built_in">enable</span> it<br>        again or use --enablerepo <span class="hljs-keyword">for</span> temporary usage:<br><br>            yum-config-manager --<span class="hljs-built_in">disable</span> &lt;repoid&gt;<br>        or<br>            subscription-manager repos --<span class="hljs-built_in">disable</span>=&lt;repoid&gt;<br><br>     5. Configure the failing repository to be skipped, <span class="hljs-keyword">if</span> it is unavailable.<br>        Note that yum will try to contact the repo. when it runs most commands,<br>        so will have to try and fail each time (and thus. yum will be be much<br>        slower). If it is a very temporary problem though, this is often a nice<br>        compromise:<br><br>            yum-config-manager --save --<span class="hljs-built_in">setopt</span>=&lt;repoid&gt;.skip_if_unavailable=<span class="hljs-literal">true</span><br><br>Cannot find a valid baseurl <span class="hljs-keyword">for</span> repo: base/7/x86_64<br><br></code></pre></td></tr></table></figure>

<p>解决方案：</p>
<ul>
<li>检查网络，发现ping不通，网络有问题</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[admin@localhost ~]$ ping baidu.com<br>ping: baidu.com: Name or service not known<br>[admin@localhost ~]$ <br></code></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">BOOTPROTO=static<br>DEFROUTE=yes<br>IPADDR=192.168.242.3<br>NETMSAK=255.255.255.0<br>GATEWAY=192.168.242.2<br>ONBOOT=yes<br>DNS1=192.168.242.2				<span class="hljs-comment"># 原来是之前配置网络的时候，这一行忘记配置了</span><br><br></code></pre></td></tr></table></figure>

<ul>
<li>配置好，重启服务器，即可</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">service network restart<br></code></pre></td></tr></table></figure>

<ul>
<li><p>重新执行安装yum的命令。建议使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yum install -y gcc-c++		<span class="hljs-comment"># -y表示出现的询问都同意</span><br></code></pre></td></tr></table></figure></li>
</ul>
<p>检查是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">gcc -v<br></code></pre></td></tr></table></figure></li>
<li><p>在redis的目录下执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">make<br>make install<br></code></pre></td></tr></table></figure></li>
<li><p>redis安装默认路径<code>/usr/local/bin</code></p>
</li>
<li><p>拷贝/opt下面的redis的中的conf文件到/usr/local/bin/myredisconfig文件夹下面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">cp /opt/redis-6.2.6/redis.conf ./myredisconfig<br></code></pre></td></tr></table></figure></li>
<li><p>redis默认不是后台运行，键daemonize处的no改为yes</p>
<p><img src="/myBlog/Redis/image-20211105214415132-1636731341803.png" alt="image-20211105214415132"></p>
</li>
<li><p>设置密码，找到# requirepass foobared，另起一行（除了设置这些之外，还可以设置redis开机自启等等，具体可以网上搜索）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">requirepass xxx			<span class="hljs-comment"># xxx是你的密码</span><br></code></pre></td></tr></table></figure></li>
<li><p>启动redis，但是没有信息出来，所以使用 <code>ps -ef |gref redis</code>查看6379端口号是否在使用，接着启动客户端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@localhost bin]<span class="hljs-comment"># pwd</span><br>/usr/<span class="hljs-built_in">local</span>/bin<br>[root@localhost bin]<span class="hljs-comment"># ./redis-server myredisconfig/redis.conf </span><br>[root@localhost bin]<span class="hljs-comment"># ps -ef |grep redis</span><br>root      10525      1  0 21:53 ?        00:00:00 ./redis-server 127.0.0.1:6379<br>root      10539   3057  0 21:54 pts/0    00:00:00 grep --color=auto redis<br>[root@localhost bin]<span class="hljs-comment"># </span><br><br></code></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@localhost bin]<span class="hljs-comment"># ./redis-cli -p 6379</span><br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure></li>
<li><p>测试，发现值存不进去</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> name Ten<br>(error) NOAUTH Authentication required.<br></code></pre></td></tr></table></figure>

<p>经过查找，原来是上一步我们设置了密码，需要认证，输入密码就可以了<code>auth &quot;xxx&quot;</code>，xxx是你的密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; auth xxx<br>OK<br>127.0.0.1:6379&gt;<br></code></pre></td></tr></table></figure></li>
<li><p>关闭redis服务<code>shutdown</code>，再次使用ps -ef |grep redis 查看，redis进程已经被关闭</p>
</li>
</ol>
<h2 id="测试性能"><a href="#测试性能" class="headerlink" title="测试性能"></a>测试性能</h2><p><strong>redis-benchmark</strong>：是一个官方自带的压力测试工具！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 测试：100个并发连接 100000请求</span><br>redis-benchmark -h localhost -p 6379 -c 100 -n 100000 <br></code></pre></td></tr></table></figure>

<p>如果redis设置了密码认证，可以先去redis.conf将密码暂时去掉</p>
<p>来自菜鸟教程的表格</p>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left"></th>
<th align="left"></th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">序号</td>
<td align="left">选项</td>
<td align="left">描述</td>
<td align="left">默认值</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left"><strong>-h</strong></td>
<td align="left">指定服务器主机名</td>
<td align="left">127.0.0.1</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><strong>-p</strong></td>
<td align="left">指定服务器端口</td>
<td align="left">6379</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><strong>-s</strong></td>
<td align="left">指定服务器 socket</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><strong>-c</strong></td>
<td align="left">指定并发连接数</td>
<td align="left">50</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left"><strong>-n</strong></td>
<td align="left">指定请求数</td>
<td align="left">10000</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left"><strong>-d</strong></td>
<td align="left">以字节的形式指定 SET/GET 值的数据大小</td>
<td align="left">2</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left"><strong>-k</strong></td>
<td align="left">1=keep alive 0=reconnect</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left"><strong>-r</strong></td>
<td align="left">SET/GET/INCR 使用随机 key, SADD 使用随机值</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">9</td>
<td align="left"><strong>-P</strong></td>
<td align="left">通过管道传输 <numreq> 请求</numreq></td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left"><strong>-q</strong></td>
<td align="left">强制退出 redis。仅显示 query/sec 值</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">11</td>
<td align="left"><strong>–csv</strong></td>
<td align="left">以 CSV 格式输出</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">12</td>
<td align="left">***-l*（L 的小写字母）**</td>
<td align="left">生成循环，永久执行测试</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">13</td>
<td align="left"><strong>-t</strong></td>
<td align="left">仅运行以逗号分隔的测试命令列表。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">14</td>
<td align="left">***-I*（i 的大写字母）**</td>
<td align="left">Idle 模式。仅打开 N 个 idle 连接并等待。</td>
<td align="left"></td>
</tr>
</tbody></table>
<p><img src="/myBlog/Redis/image-20211106002032827-1636731341803.png" alt="image-20211106002032827"></p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>redis默认有16个数据库</p>
<p><img src="/myBlog/Redis/image-20211106150331202-1636731341803.png" alt="image-20211106150331202"></p>
<p>默认使用第0个</p>
<p>可以使用<code>select 2</code>切换第2个数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">select 2	<span class="hljs-comment"># 切换到2号数据库</span><br>dbsize		<span class="hljs-comment"># 查看当前数据库的大小</span><br>keys *		<span class="hljs-comment"># 查询所有的key</span><br>flushdb		<span class="hljs-comment"># 清除当前的数据库</span><br>flushall	<span class="hljs-comment"># 清空所有的数据库</span><br></code></pre></td></tr></table></figure>



<p><strong>redis是单线程</strong>（redis6.0之后是多线程）</p>
<p><strong>redis为什么单线程还这么快？</strong></p>
<p>误区1：高性能的服务器一定是多线程的？</p>
<p>误区2：多线程（CPU上下文会切换）一定比单线程效率高</p>
<p>核心：redis是将所有的数据全部放在内存中的，所以说使用单线程去操作效率是最高的，多线程（CPU上下文会切换：耗时的操作），对于内存系统来说，如果没有上下文切换效率就是最高的。多次读写都是在一个CPU上的，在内存情况下，这个就是最佳方案！</p>
<h1 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h1><h2 id="Redis-Key"><a href="#Redis-Key" class="headerlink" title="Redis-Key"></a>Redis-Key</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">exists name			<span class="hljs-comment"># 判断是否存在name</span><br>move name 1			<span class="hljs-comment"># 移动当前的数据库的name到1号数据库</span><br>del name			<span class="hljs-comment"># 删除name</span><br>expire name 10  	<span class="hljs-comment"># 设置name 10秒后过期 </span><br>ttl name			<span class="hljs-comment"># 查看剩余时间</span><br><span class="hljs-built_in">type</span> name			<span class="hljs-comment"># 查看当前的name的类型 </span><br></code></pre></td></tr></table></figure>



<h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">append key1 <span class="hljs-string">&quot;hello&quot;</span>			<span class="hljs-comment"># 在key1后面追加“hello”，如果当前key1不存在，则新建</span><br>strlen key1					<span class="hljs-comment"># 获取当前key1的字符长度</span><br></code></pre></td></tr></table></figure>



<p><strong>incr自增，计数器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> views 0			<span class="hljs-comment"># 设置一个值为0的views</span><br>OK<br>127.0.0.1:6379&gt; get views<br><span class="hljs-string">&quot;0&quot;</span><br>127.0.0.1:6379&gt; INCR views			<span class="hljs-comment"># 将views的值加一</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; get views<br><span class="hljs-string">&quot;1&quot;</span><br>127.0.0.1:6379&gt; <br><br></code></pre></td></tr></table></figure>



<p><strong>decr自减</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; get views<br><span class="hljs-string">&quot;2&quot;</span><br>127.0.0.1:6379&gt; DECR views			<span class="hljs-comment"># 将views减一</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; get views<br><span class="hljs-string">&quot;1&quot;</span><br>127.0.0.1:6379&gt; <br><br></code></pre></td></tr></table></figure>



<p><strong>INCRBY views 10</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; get views<span class="hljs-string">&quot;1&quot;</span>127.0.0.1:6379&gt; INCRBY views 10		<span class="hljs-comment"># 一次性加10(integer) 11127.0.0.1:6379&gt; </span><br></code></pre></td></tr></table></figure>



<p><strong>DECRBY views 5</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; INCRBY views 10<br>(<span class="hljs-built_in">integer</span>) 11<br>127.0.0.1:6379&gt; DECRBY views 5		<span class="hljs-comment"># 一次性减5</span><br>(<span class="hljs-built_in">integer</span>) 6<br>127.0.0.1:6379&gt; <br><br></code></pre></td></tr></table></figure>



<p><strong>getrange</strong>:取一个字符串范围，取全部为0 -1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> key1 <span class="hljs-string">&quot;hello,Ten&quot;</span><br>OK<br>127.0.0.1:6379&gt; GETRANGE key1 1 3<br><span class="hljs-string">&quot;ell&quot;</span><br>127.0.0.1:6379&gt; GETRANGE key1 0 3<br><span class="hljs-string">&quot;hell&quot;</span><br>127.0.0.1:6379&gt; GETRANGE key1 0 -1<br><span class="hljs-string">&quot;hello,Ten&quot;</span><br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>



<p><strong>setrange</strong>:替换某范围的字符串 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> key2 abcdefg<br>OK<br>127.0.0.1:6379&gt; get key2<br><span class="hljs-string">&quot;abcdefg&quot;</span><br>127.0.0.1:6379&gt; SETRANGE key2 1 xx<br>(<span class="hljs-built_in">integer</span>) 7<br>127.0.0.1:6379&gt; get key2<br><span class="hljs-string">&quot;axxdefg&quot;</span><br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>



<p>**setex:**设置过期时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; setex key3 30 <span class="hljs-string">&quot;hello&quot;</span>OK127.0.0.1:6379&gt; ttl key3(<span class="hljs-built_in">integer</span>) 21<br></code></pre></td></tr></table></figure>



<p><strong>setnx</strong>：不存在再设置，如果存在则不设置（在分布式锁中会常用到）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; setnx mykey <span class="hljs-string">&quot;redis&quot;</span>(<span class="hljs-built_in">integer</span>) 1127.0.0.1:6379&gt; get mykey<span class="hljs-string">&quot;redis&quot;</span>127.0.0.1:6379&gt; setnx mykey <span class="hljs-string">&quot;Mongodb&quot;</span>(<span class="hljs-built_in">integer</span>) 0127.0.0.1:6379&gt; get mykey<span class="hljs-string">&quot;redis&quot;</span>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>



<p><strong>mset，mget，批量存值和取值</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3OK127.0.0.1:6379&gt; keys *1) <span class="hljs-string">&quot;k2&quot;</span>2) <span class="hljs-string">&quot;k3&quot;</span>3) <span class="hljs-string">&quot;k1&quot;</span>127.0.0.1:6379&gt; mget k1 k2 k31) <span class="hljs-string">&quot;v1&quot;</span>2) <span class="hljs-string">&quot;v2&quot;</span>3) <span class="hljs-string">&quot;v3&quot;</span>127.0.0.1:6379&gt; keys *1) <span class="hljs-string">&quot;k2&quot;</span>2) <span class="hljs-string">&quot;k3&quot;</span>3) <span class="hljs-string">&quot;k1&quot;</span>127.0.0.1:6379&gt; msetnx k1 v1 k4 v4			<span class="hljs-comment"># msetnx是原子性操作，要不成功，要不失败(integer) 0127.0.0.1:6379&gt; </span><br></code></pre></td></tr></table></figure>



<p><strong>key的巧妙设置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># set user:1 &#123;name:zhangsan,age:2&#125;	# 设置一个user:1 对象，值为json字符来保存一个对象# 这里的key是以巧妙的设计： user:&#123;id&#125;:&#123;filed&#125;127.0.0.1:6379&gt; mset user:1:name zhangsan user:1:age 2OK127.0.0.1:6379&gt; mget user:1:name user:1:age1) &quot;zhangsan&quot;2) &quot;2&quot;127.0.0.1:6379&gt; </span><br></code></pre></td></tr></table></figure>



<p><strong>getset</strong>，先get，再set，如果不存在值，则返回null，再设置新的值进入。如果存在先取出，再设置进去。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; getset db redis(nil)127.0.0.1:6379&gt; get db<span class="hljs-string">&quot;redis&quot;</span>127.0.0.1:6379&gt; getset db mongodb<span class="hljs-string">&quot;redis&quot;</span>127.0.0.1:6379&gt; get db<span class="hljs-string">&quot;mongodb&quot;</span>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>

<p>String类似的使用场景：value除了我们的字符串还可以是数字。</p>
<ul>
<li>计数器</li>
<li>统计多单位的数量</li>
<li>粉丝数</li>
<li>对象缓存存储</li>
</ul>
<h2 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h2><p>在redis里面，我们可以把list玩成，栈、队列、阻塞队列。</p>
<p><strong>lpush list one</strong>：往list中存入一个one的值（头部）</p>
<p><strong>lrange list 0 -1</strong>：取出list中所有的值</p>
<p> <strong>RPUSH list right</strong>：在右边加入right的值（尾部）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; lpush list one(<span class="hljs-built_in">integer</span>) 1127.0.0.1:6379&gt; lpush list two(<span class="hljs-built_in">integer</span>) 2127.0.0.1:6379&gt; keys *1) <span class="hljs-string">&quot;list&quot;</span>127.0.0.1:6379&gt; LRANGE list 0 -11) <span class="hljs-string">&quot;two&quot;</span>2) <span class="hljs-string">&quot;one&quot;</span>127.0.0.1:6379&gt; RPUSH list right(<span class="hljs-built_in">integer</span>) 3127.0.0.1:6379&gt; LRANGE list 0 -11) <span class="hljs-string">&quot;two&quot;</span>2) <span class="hljs-string">&quot;one&quot;</span>3) <span class="hljs-string">&quot;right&quot;</span>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>



<p><img src="/myBlog/Redis/image-20211107113912628-1636731341803.png" alt="image-20211107113912628"></p>
<p><strong>lpop</strong>：从左边移除</p>
<p><strong>rpop</strong>：从右边移除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; LRANGE list 0 -11) <span class="hljs-string">&quot;two&quot;</span>2) <span class="hljs-string">&quot;one&quot;</span>3) <span class="hljs-string">&quot;right&quot;</span>127.0.0.1:6379&gt; LPOP list<span class="hljs-string">&quot;two&quot;</span>127.0.0.1:6379&gt; RPOP list<span class="hljs-string">&quot;right&quot;</span>127.0.0.1:6379&gt; LRANGE list 0 -11) <span class="hljs-string">&quot;one&quot;</span>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>



<p><strong>lindex list 0</strong> ：获取list索引为0的元素</p>
<p><strong>llen list</strong> ：查看当前list的长度 </p>
<p><strong>lrem list 2 one</strong>：移除list中的两个one（list中的值可以重复，如果超过最大数量，只移除存在的最大数量）</p>
<p><strong>ltrim mylist 1 2</strong>：截取mylist中的索引为1 和2的值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; LRANGE list 0 -11) <span class="hljs-string">&quot;1&quot;</span>2) <span class="hljs-string">&quot;2&quot;</span>3) <span class="hljs-string">&quot;3&quot;</span>127.0.0.1:6379&gt; LTRIM list 0 1OK127.0.0.1:6379&gt; LRANGE list 0 -11) <span class="hljs-string">&quot;1&quot;</span>2) <span class="hljs-string">&quot;2&quot;</span>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>



<p><strong>rpoplpush list otherlist</strong>：移除list中最后一个元素，并加到otherlist中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; LRANGE list 0 -11) <span class="hljs-string">&quot;1&quot;</span>2) <span class="hljs-string">&quot;2&quot;</span>3) <span class="hljs-string">&quot;3&quot;</span>127.0.0.1:6379&gt; rpoplpush list otherlist<span class="hljs-string">&quot;3&quot;</span>127.0.0.1:6379&gt; LRANGE list 0 -11) <span class="hljs-string">&quot;1&quot;</span>2) <span class="hljs-string">&quot;2&quot;</span>127.0.0.1:6379&gt; LRANGE otherlist 0 -11) <span class="hljs-string">&quot;3&quot;</span>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>



<p><strong>lset list 0 item：</strong>将list中索引为0的值改成item（前提是，list中相对应的索引存在）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; lpush list 0				<span class="hljs-comment"># 插入元素(integer) 1127.0.0.1:6379&gt; LRANGE list 0 0				# 查看是否存在相对应的元素1) &quot;0&quot;127.0.0.1:6379&gt; lset list 0 itemOK127.0.0.1:6379&gt; LRANGE list 0 01) &quot;item&quot;127.0.0.1:6379&gt; lset list 1 other			# 索引为1的元素不存在，所以报错(error) ERR index out of range127.0.0.1:6379&gt; </span><br></code></pre></td></tr></table></figure>



<p>**linsert list before|after “world” “my”**：在list中的world之前（之后）加上my</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; clear127.0.0.1:6379&gt; rpush list <span class="hljs-string">&quot;hello&quot;</span>(<span class="hljs-built_in">integer</span>) 1127.0.0.1:6379&gt; rpush list <span class="hljs-string">&quot;world&quot;</span>(<span class="hljs-built_in">integer</span>) 2127.0.0.1:6379&gt; LINSERT list before <span class="hljs-string">&quot;world&quot;</span> <span class="hljs-string">&quot;my&quot;</span>		<span class="hljs-comment"># 在list中的world之前插入my(integer) 3127.0.0.1:6379&gt; LRANGE list 0 -11) &quot;hello&quot;2) &quot;my&quot;3) &quot;world&quot;127.0.0.1:6379&gt; </span><br></code></pre></td></tr></table></figure>



<h2 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h2><p>set中的值是不可以重复的，无序的</p>
<p>**sadd myset “hello”**：往myset中添加一个字符串hello</p>
<p><strong>smembers myset：</strong>取出myset中的值</p>
<p><strong>sismembers myset hello：</strong>判断myset里面是否有这个hello，如果有返回1，没有返回0</p>
<p><strong>scard myset</strong>：获取myset中的个数</p>
<p><strong>srem myset hello：</strong>移除myset中的hello元素</p>
<p><strong>srandmember myset 2：</strong>在myset中随机抽取两个数字，不要数字就是默认取一个</p>
<p><strong>spop myset：</strong>随机弹出myset中的一个元素</p>
<p><strong>smove myset myset2 holle：</strong>将myset中的hello元素移动到myset2中</p>
<p><strong>sdiff key1 key2：</strong>key1集合减去key2集合（==差集==）</p>
<p><strong>sinter key1 key2:</strong> key1和key2的==交集==</p>
<p><strong>sunion key1 key2</strong>：key1和key2的==并集==</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; sadd key1 1<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd key1 2<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd key1 3<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd key2 3<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd key2 4<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; sadd key2 5<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; SDIFF key1 key2			<span class="hljs-comment"># 差集</span><br>1) <span class="hljs-string">&quot;1&quot;</span><br>2) <span class="hljs-string">&quot;2&quot;</span><br>127.0.0.1:6379&gt; SINTER key1 key2		<span class="hljs-comment"># 交集（共同好友）</span><br>1) <span class="hljs-string">&quot;3&quot;</span><br>127.0.0.1:6379&gt; SUNION key1 key2		<span class="hljs-comment"># 并集</span><br>1) <span class="hljs-string">&quot;1&quot;</span><br>2) <span class="hljs-string">&quot;2&quot;</span><br>3) <span class="hljs-string">&quot;3&quot;</span><br>4) <span class="hljs-string">&quot;4&quot;</span><br>5) <span class="hljs-string">&quot;5&quot;</span><br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>

<p>微博，A用户将所有关注的人放在一个set集合中，将它的粉丝也放在一个集合中</p>
<p>共同关注，共同爱好，推荐好友</p>
<h2 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h2><p>Map集合，key-Map集合，key-<key-value></key-value></p>
<p>hset myhash field1 hello:</p>
<p>hget</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; hset myhash field1 hello<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; hget myhash field1<br><span class="hljs-string">&quot;hello&quot;</span><br>127.0.0.1:6379&gt;<br></code></pre></td></tr></table></figure>

<p><strong>hmset</strong>:一次存多个值，如果重复会自动覆盖（redis4.0后已被官方弃用，建议使用hset）</p>
<p><strong>hmget</strong>:一次取多个值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; hmset myhash field1 hello field2 world<br>OK<br>127.0.0.1:6379&gt; hmget myhash field1 field2<br>1) <span class="hljs-string">&quot;hello&quot;</span><br>2) <span class="hljs-string">&quot;world&quot;</span><br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>

<p><strong>hgetall</strong>：获取hash中所有的键值对 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; hgetall myhash<br>1) <span class="hljs-string">&quot;field1&quot;</span><br>2) <span class="hljs-string">&quot;hello&quot;</span><br>3) <span class="hljs-string">&quot;field2&quot;</span><br>4) <span class="hljs-string">&quot;world&quot;</span><br><br></code></pre></td></tr></table></figure>

<p><strong>hdel myhash field1</strong>：删除myhash 中的field1，即删除hash中指定的key，对应的value值也被删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; hdel myhash field1<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; HGETALL myhash<br>1) <span class="hljs-string">&quot;field2&quot;</span><br>2) <span class="hljs-string">&quot;world&quot;</span><br>127.0.0.1:6379&gt;<br></code></pre></td></tr></table></figure>

<p><strong>hlen myhash：</strong>查看myhash中key的个数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; hgetall myhash<br>1) <span class="hljs-string">&quot;field2&quot;</span><br>2) <span class="hljs-string">&quot;world&quot;</span><br>3) <span class="hljs-string">&quot;field1&quot;</span><br>4) <span class="hljs-string">&quot;hello&quot;</span><br>127.0.0.1:6379&gt; hlen myhash<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>

<p><strong>hexists</strong>：判断hash中的某一个字段是否存在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; hexists myhash field1<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; hexists myhash field3<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; <br><br></code></pre></td></tr></table></figure>

<p><strong>hkeys myhash：</strong>获取myhash中所有的key</p>
<p><strong>hvals myhash：</strong>获取myhash中所有的value</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; hkeys myhash<br>1) <span class="hljs-string">&quot;field2&quot;</span><br>2) <span class="hljs-string">&quot;field1&quot;</span><br>127.0.0.1:6379&gt; hvals myhash<br>1) <span class="hljs-string">&quot;world&quot;</span><br>2) <span class="hljs-string">&quot;hello&quot;</span><br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>

<p><strong>hincrby：</strong>自增</p>
<p><strong>hsetnx：</strong>判断是否存在，如果存在则不创建，不存在则新建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; hset myhash field3 5(<span class="hljs-built_in">integer</span>) 1127.0.0.1:6379&gt; hincrby myhash field3 1				<span class="hljs-comment"># 自增1(integer) 6127.0.0.1:6379&gt; hincrby myhash field3 -1(integer) 5127.0.0.1:6379&gt; hsetnx myhash field4 hello			# field4不存在，新建(integer) 1127.0.0.1:6379&gt; HGETALL myhash1) &quot;field2&quot;2) &quot;world&quot;3) &quot;field1&quot;4) &quot;hello&quot;5) &quot;field3&quot;6) &quot;5&quot;7) &quot;field4&quot;8) &quot;hello&quot;127.0.0.1:6379&gt; hsetnx myhash field4 hello			# field4已经存在，创建失败(integer) 0127.0.0.1:6379&gt; </span><br></code></pre></td></tr></table></figure>

<p>hash变更的数据 user name age ，尤其是用户信息之类的，经常变动的信息。hash更适合对象的存储，String更加适合字符串。 </p>
<h2 id="Zset-有序集合"><a href="#Zset-有序集合" class="headerlink" title="Zset(有序集合)"></a>Zset(有序集合)</h2><p>在set的基础上，增加了一个值，set k1 v1 ，zset k1 score1 v1</p>
<p><strong>zadd</strong>:添加</p>
<p><strong>zrange</strong>:查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; zadd zset 1 one(<span class="hljs-built_in">integer</span>) 1127.0.0.1:6379&gt; zadd zset 2 two(<span class="hljs-built_in">integer</span>) 1127.0.0.1:6379&gt; zadd zset 3 three(<span class="hljs-built_in">integer</span>) 1127.0.0.1:6379&gt; ZRANGE zset 0 -11) <span class="hljs-string">&quot;one&quot;</span>2) <span class="hljs-string">&quot;two&quot;</span>3) <span class="hljs-string">&quot;three&quot;</span>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>



<p><strong>zrangebyscore：</strong>通过score排序</p>
<p><strong>zrevrange</strong>:降序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; zadd salary 2500 xiaohong<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; zadd salary 5000 zhangsan<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; zadd salary 200 Ten<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; zrangebyscore salary -inf +inf				<span class="hljs-comment"># 显示所有用户，从小到大排序，不带score排序</span><br>1) <span class="hljs-string">&quot;Ten&quot;</span><br>2) <span class="hljs-string">&quot;xiaohong&quot;</span><br>3) <span class="hljs-string">&quot;zhangsan&quot;</span><br>127.0.0.1:6379&gt; zrangebyscore salary -inf +inf withscores	<span class="hljs-comment"># 带有score排序</span><br>1) <span class="hljs-string">&quot;Ten&quot;</span><br>2) <span class="hljs-string">&quot;200&quot;</span><br>3) <span class="hljs-string">&quot;xiaohong&quot;</span><br>4) <span class="hljs-string">&quot;2500&quot;</span><br>5) <span class="hljs-string">&quot;zhangsan&quot;</span><br>6) <span class="hljs-string">&quot;5000&quot;</span><br>127.0.0.1:6379&gt; ZRANGE salary 0 -1<br>1) <span class="hljs-string">&quot;Ten&quot;</span><br>2) <span class="hljs-string">&quot;zhangsan&quot;</span><br>127.0.0.1:6379&gt; ZREVRANGE salary 0 -1						<span class="hljs-comment"># 降序，从高到底</span><br>1) <span class="hljs-string">&quot;zhangsan&quot;</span><br>2) <span class="hljs-string">&quot;Ten&quot;</span><br>127.0.0.1:6379&gt; ZREVRANGE salary 0 -1 withscores<br>1) <span class="hljs-string">&quot;zhangsan&quot;</span><br>2) <span class="hljs-string">&quot;5000&quot;</span><br>3) <span class="hljs-string">&quot;Ten&quot;</span><br>4) <span class="hljs-string">&quot;200&quot;</span><br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>

<p><strong>zrem：</strong>移除元素</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; ZRANGE salary 0 -1<br>1) <span class="hljs-string">&quot;Ten&quot;</span><br>2) <span class="hljs-string">&quot;xiaohong&quot;</span><br>3) <span class="hljs-string">&quot;zhangsan&quot;</span><br>127.0.0.1:6379&gt; zrem salary xiaohong<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; ZRANGE salary 0 -1<br>1) <span class="hljs-string">&quot;Ten&quot;</span><br>2) <span class="hljs-string">&quot;zhangsan&quot;</span><br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>

<p><strong>zcard</strong>:获取有序集合中的个数</p>
<p><strong>zcount</strong>：获取指范围之间的个数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; zadd myzset 1 hello 2 world 3 Ten<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; zcount myzset 1 3<br>(<span class="hljs-built_in">integer</span>) 3<br>127.0.0.1:6379&gt; zcount myzset 1 2<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; zcount myzset 0 1<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; zcount myzset 0 2<br>(<span class="hljs-built_in">integer</span>) 2<br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>

<p>案例思路：set 排序，存储班级成绩表，工资表排序</p>
<p>普通消息 1 ，重要消息 2 ，带权重进行判断！</p>
<p>排行榜应用实现，取Top N测试。</p>
<h1 id="三种特殊数据类型"><a href="#三种特殊数据类型" class="headerlink" title="三种特殊数据类型"></a>三种特殊数据类型</h1><h2 id="geospatail-地理位置"><a href="#geospatail-地理位置" class="headerlink" title="geospatail 地理位置"></a>geospatail 地理位置</h2><p>朋友的定位，附近的人，打车的距离计算</p>
<p>redis的geo在redis3.2版本就推出了。这个功能可以推算地理位置的信息，两地之间的距离，方圆几里的人。</p>
<p><strong>geoadd</strong>：添加地址位置</p>
<p>规则：两极无法直接添加，我们一般会下载城市数据，直接通过java程序一次性导入</p>
<p>有效的经度从-180度到180度</p>
<p>有效的纬度从-85.05112878到85.05112878度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; geoadd china:city 116.40 39.90 beijing(<span class="hljs-built_in">integer</span>) 1127.0.0.1:6379&gt; geoadd china:city 121.47 31.23 shanghai(<span class="hljs-built_in">integer</span>) 1127.0.0.1:6379&gt; geoadd china:city 106.20 29.53 chongqin 114.05 22.52 shengzhen(<span class="hljs-built_in">integer</span>) 2127.0.0.1:6379&gt; geoadd china:city 120.16 30.24 hangzhou 108.96 34.26 xian(<span class="hljs-built_in">integer</span>) 2127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>

<p><strong>geopos</strong>：获取位置信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; geopos china:city beijing1) 1) <span class="hljs-string">&quot;116.39999896287918091&quot;</span>   2) <span class="hljs-string">&quot;39.90000009167092543&quot;</span>127.0.0.1:6379&gt; geopos china:city chongqin1) 1) <span class="hljs-string">&quot;106.19999796152114868&quot;</span>   2) <span class="hljs-string">&quot;29.52999957900659211&quot;</span>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>

<p><strong>geodist</strong>：</p>
<p>两人之间的距离</p>
<p>单位：</p>
<ul>
<li><strong>m</strong>表示单位为米</li>
<li><strong>km</strong>表示单位为千米</li>
<li><strong>mi</strong>表示单位为英里</li>
<li><strong>ft</strong>表示单位为英尺</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; GEODIST china:city beijing shanghai<span class="hljs-string">&quot;1067378.7564&quot;</span>127.0.0.1:6379&gt; GEODIST china:city beijing shanghai km<span class="hljs-string">&quot;1067.3788&quot;</span>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>

<p><strong>georedius</strong>：以给定的经纬度为中心，找出某一半径的元素</p>
<p>附近的人？（获得所有附近的地址，定位！）通过半径来查询。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">27.0.0.1:6379&gt; GEORADIUS china:city 110 30 100000 km	 <span class="hljs-comment"># 以110，30 这个经纬度为中心，寻找方圆1000km内的城市</span><br>1) <span class="hljs-string">&quot;chongqin&quot;</span><br>2) <span class="hljs-string">&quot;xian&quot;</span><br>3) <span class="hljs-string">&quot;shengzhen&quot;</span><br>4) <span class="hljs-string">&quot;hangzhou&quot;</span><br>5) <span class="hljs-string">&quot;shanghai&quot;</span><br>6) <span class="hljs-string">&quot;beijing</span><br><span class="hljs-string">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 1000 km</span><br><span class="hljs-string">1) &quot;</span>chongqin<span class="hljs-string">&quot;</span><br><span class="hljs-string">2) &quot;</span>xian<span class="hljs-string">&quot;</span><br><span class="hljs-string">3) &quot;</span>shengzhen<span class="hljs-string">&quot;</span><br><span class="hljs-string">4) &quot;</span>hangzhou<span class="hljs-string">&quot;</span><br><span class="hljs-string">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist		# 带有直线距离</span><br><span class="hljs-string">1) 1) &quot;</span>chongqin<span class="hljs-string">&quot;</span><br><span class="hljs-string">   2) &quot;</span>370.5852<span class="hljs-string">&quot;</span><br><span class="hljs-string">2) 1) &quot;</span>xian<span class="hljs-string">&quot;</span><br><span class="hljs-string">   2) &quot;</span>483.8340<span class="hljs-string">&quot;</span><br><span class="hljs-string">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withcoord	# 带有经纬度</span><br><span class="hljs-string">1) 1) &quot;</span>chongqin<span class="hljs-string">&quot;</span><br><span class="hljs-string">   2) 1) &quot;</span>106.19999796152114868<span class="hljs-string">&quot;</span><br><span class="hljs-string">      2) &quot;</span>29.52999957900659211<span class="hljs-string">&quot;</span><br><span class="hljs-string">2) 1) &quot;</span>xian<span class="hljs-string">&quot;</span><br><span class="hljs-string">   2) 1) &quot;</span>108.96000176668167114<span class="hljs-string">&quot;</span><br><span class="hljs-string">      2) &quot;</span>34.25999964418929977<span class="hljs-string">&quot;</span><br><span class="hljs-string">127.0.0.1:6379&gt; </span><br></code></pre></td></tr></table></figure>

<p>获得指定的个数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist withcoord count 1<br>1) 1) <span class="hljs-string">&quot;chongqin&quot;</span><br>   2) <span class="hljs-string">&quot;370.5852&quot;</span><br>   3) 1) <span class="hljs-string">&quot;106.19999796152114868&quot;</span><br>      2) <span class="hljs-string">&quot;29.52999957900659211&quot;</span><br>127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist withcoord count 2<br>1) 1) <span class="hljs-string">&quot;chongqin&quot;</span><br>   2) <span class="hljs-string">&quot;370.5852&quot;</span><br>   3) 1) <span class="hljs-string">&quot;106.19999796152114868&quot;</span><br>      2) <span class="hljs-string">&quot;29.52999957900659211&quot;</span><br>2) 1) <span class="hljs-string">&quot;xian&quot;</span><br>   2) <span class="hljs-string">&quot;483.8340&quot;</span><br>   3) 1) <span class="hljs-string">&quot;108.96000176668167114&quot;</span><br>      2) <span class="hljs-string">&quot;34.25999964418929977&quot;</span><br>127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist withcoord count 3<br>1) 1) <span class="hljs-string">&quot;chongqin&quot;</span><br>   2) <span class="hljs-string">&quot;370.5852&quot;</span><br>   3) 1) <span class="hljs-string">&quot;106.19999796152114868&quot;</span><br>      2) <span class="hljs-string">&quot;29.52999957900659211&quot;</span><br>2) 1) <span class="hljs-string">&quot;xian&quot;</span><br>   2) <span class="hljs-string">&quot;483.8340&quot;</span><br>   3) 1) <span class="hljs-string">&quot;108.96000176668167114&quot;</span><br>      2) <span class="hljs-string">&quot;34.25999964418929977&quot;</span><br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>



<p><strong>georediusbymember</strong>：以某个城市为中心，搜索方圆1000km的地方</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city beijing 1000 km<br>1) <span class="hljs-string">&quot;beijing&quot;</span><br>2) <span class="hljs-string">&quot;xian&quot;</span><br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>



<p><strong>geohash</strong>：返回一个或多个位置元素的geohash字符串,将二维的经纬度转换为一维的字符串</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; geohash china:city beijing chongqin<br>1) <span class="hljs-string">&quot;wx4fbxxfke0&quot;</span><br>2) <span class="hljs-string">&quot;wm5xbxu2xq0&quot;</span><br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>

<p><strong>geo 底层的实现原是Zset ，我们可以使用Zset命名来操作</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; zrange china:city 0 -1<br>1) <span class="hljs-string">&quot;chongqin&quot;</span><br>2) <span class="hljs-string">&quot;xian&quot;</span><br>3) <span class="hljs-string">&quot;shengzhen&quot;</span><br>4) <span class="hljs-string">&quot;hangzhou&quot;</span><br>5) <span class="hljs-string">&quot;shanghai&quot;</span><br>6) <span class="hljs-string">&quot;beijing&quot;</span><br>127.0.0.1:6379&gt; zrem china:city chongqin<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; zrange china:city 0 -1<br>1) <span class="hljs-string">&quot;xian&quot;</span><br>2) <span class="hljs-string">&quot;shengzhen&quot;</span><br>3) <span class="hljs-string">&quot;hangzhou&quot;</span><br>4) <span class="hljs-string">&quot;shanghai&quot;</span><br>5) <span class="hljs-string">&quot;beijing&quot;</span><br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>



<h2 id="Hyperloglog"><a href="#Hyperloglog" class="headerlink" title="Hyperloglog"></a>Hyperloglog</h2><p><strong>什么是基数？</strong>一个集合中的元素不重复元素的数量</p>
<p>A{1,3,5,7,8,7}</p>
<p>B{1,3,5,7,8}</p>
<p>基数（不重复的元素） = 5个 ，可以接收误差！</p>
<p><strong>简介</strong></p>
<p>redis 2.8.9版本就更新了Hyperloglog 数据结构！</p>
<p>Redis Hyperloglog 基数统计的算法！</p>
<p>优点：占用的内存是固定的，2^64不同的元素的技术，只需要12kb内存！如果要从内存角度来比较的话Hyperloglog首选</p>
<p><strong>网页的UV（一个人访问一个网站多次，但是还是算作一个人）</strong></p>
<p>传统的方式，set保存用户的id，然后就可以统计set中的元素数量作为标准判断！</p>
<p>这个方式如果保存大量的用户id，就会比较麻烦，我们的目的是为计数，而不是保存用户id。</p>
<p><strong>pfadd</strong>：添加</p>
<p><strong>pfcount：</strong>统计个数</p>
<p><strong>pfmerge</strong>：将两个集合合并，去除重复的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; pfadd mykey a b c d e f g h i j<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; PFCOUNT mykey<br>(<span class="hljs-built_in">integer</span>) 10<br>127.0.0.1:6379&gt; pfadd mykey2 i j z x c v b n m<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; PFCOUNT mykey2<br>(<span class="hljs-built_in">integer</span>) 9<br>127.0.0.1:6379&gt; PFMERGE mykey3 mykey mykey2<br>OK<br>127.0.0.1:6379&gt; PFCOUNT mykey3<br>(<span class="hljs-built_in">integer</span>) 15<br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>

<p>如果允许容错，那么一定可以使用Hyperloglog。</p>
<p>如果不允许容错，就使用set或者自己的数据类型即可。</p>
<h2 id="Bitmap"><a href="#Bitmap" class="headerlink" title="Bitmap"></a>Bitmap</h2><p><strong>位存储</strong></p>
<p>统计用户信息，活跃，不活跃！登录、未登录！打卡，两个状态的，都可以使用Bitmap！</p>
<p>Bitmap位图，数据结构！都是操作二进制位来进行记录，就是只有0和1两个状态！</p>
<p><strong>setbit</strong>：存</p>
<p><strong>getbit</strong>：取</p>
<p><strong>bitcount</strong>:统计打卡天数</p>
<p>记录一周是否打卡，0未打卡，1已打卡</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; setbit sign 0 1<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; setbit sign 1 0<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; setbit sign 2 0<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; setbit sign 3 1<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; setbit sign 4 1<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; setbit sign 5 1<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; setbit sign 6 0<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; getbit sign 4<br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; getbit sign 6<br>(<span class="hljs-built_in">integer</span>) 0<br>127.0.0.1:6379&gt; BITCOUNT sign <br>(<span class="hljs-built_in">integer</span>) 4<br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>



<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>redis事务本质：一组命令的集合！一个事务中所有命令都会被序列化，在事务执行过程中，会按照顺序执行！</p>
<p>一次性、顺序性、排他性！执行一些列的命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">---- 队列 <span class="hljs-built_in">set</span> <span class="hljs-built_in">set</span> <span class="hljs-built_in">set</span> <span class="hljs-built_in">set</span> 执行 ----<br></code></pre></td></tr></table></figure>

<p>==redis事务没有隔离级别的概念==</p>
<p>所有的命令在事务中，并没有直接被执行，只有发起执行命令的时候才会执行！Exec</p>
<p>==redis单条命名是保证原子性的，但是事务不保证原子性==</p>
<p>redis的事务：</p>
<ul>
<li>开启事务（multi）</li>
<li>命令入队（…）</li>
<li>执行事务（exec）</li>
</ul>
<p><strong>正常执行事务：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; multi				<span class="hljs-comment"># 开启事务</span><br>OK<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k1 v1		<span class="hljs-comment"># 命令</span><br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k2 v2<br>QUEUED<br>127.0.0.1:6379(TX)&gt; get k2<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k3 v3<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">exec</span>			<span class="hljs-comment"># 执行事务</span><br>1) OK<br>2) OK<br>3) <span class="hljs-string">&quot;v2&quot;</span><br>4) OK<br>127.0.0.1:6379&gt;<br></code></pre></td></tr></table></figure>

<p><strong>放弃事务：</strong>discard</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k1 v1<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k2 v2<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k4 v4<br>QUEUED<br>127.0.0.1:6379(TX)&gt; DISCARD			<span class="hljs-comment"># 放弃事务</span><br>OK<br>127.0.0.1:6379&gt; get k4				<span class="hljs-comment"># 事务没有被执行到，所以找不到</span><br>(nil)<br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>



<p><strong>编译型异常</strong>（代码有问题！命令有错），事务中所有的命令都不会被执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k1 v1<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k2 v2<br>QUEUED<br>127.0.0.1:6379(TX)&gt; getset k3<br>(error) ERR wrong number of arguments <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;getset&#x27;</span> <span class="hljs-built_in">command</span><br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k4 v4<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">exec</span><br>(error) EXECABORT Transaction discarded because of previous errors.<br>127.0.0.1:6379&gt; get k4<br>(nil)<br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>



<p><strong>运行时异常</strong>（1/0），如果事务队列中存在语法性错误，那么执行命令的时候，其他命令是可以正常执行的，错误命令抛出异常。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k1 <span class="hljs-string">&quot;v1&quot;</span><br>OK<br>127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379(TX)&gt; incr k1				<span class="hljs-comment"># 让字符串加一，语法没问题，但是实际结果会报错</span><br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k2 v2<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">set</span> k3 v3<br>QUEUED<br>127.0.0.1:6379(TX)&gt; get k3<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">exec</span><br>1) (error) ERR value is not an <span class="hljs-built_in">integer</span> or out of range<br>2) OK<br>3) OK<br>4) <span class="hljs-string">&quot;v3&quot;</span><br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>



<h1 id="监控-Watch（面试常问）"><a href="#监控-Watch（面试常问）" class="headerlink" title="监控 Watch（面试常问）"></a>监控 Watch（面试常问）</h1><p><strong>悲观锁</strong></p>
<ul>
<li>很悲观，认为什么时候都会出问题，无论做什么都会加锁。</li>
</ul>
<p><strong>乐观锁</strong>：</p>
<ul>
<li>很乐观，认为什么时候都不会出问题，所以不上锁！更新数据的时候去判断一下，在此期间是否有人修改过这个数据</li>
<li>获取version</li>
<li>更新的时候比较version</li>
</ul>
<p><strong>redis监视测试</strong></p>
<p>正常执行成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> money 100<br>OK<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> out 0<br>OK<br>127.0.0.1:6379&gt; watch money			<span class="hljs-comment"># 监视money</span><br>OK<br>127.0.0.1:6379&gt; multi				<span class="hljs-comment"># 事务正常结束，数据期间没有发生变动，这个时候就正常执行成功</span><br>OK<br>127.0.0.1:6379(TX)&gt; DECRBY money 20<br>QUEUED<br>127.0.0.1:6379(TX)&gt; INCRBY out 20<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">exec</span><br>1) (<span class="hljs-built_in">integer</span>) 80<br>2) (<span class="hljs-built_in">integer</span>) 20<br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>



<p>测试多线程修改值，使用watch可以当做redis的乐观锁操作！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; watch money					<span class="hljs-comment"># 监视 money</span><br>OK<br>127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379(TX)&gt; DECRBY money 10<br>QUEUED<br>127.0.0.1:6379(TX)&gt; INCRBY out 10			<span class="hljs-comment"># 执行到这一行的时候，突然下面的线程二将money的值改变了</span><br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">exec</span>					<span class="hljs-comment"># 执行失败，因为money加了watch乐观锁</span><br>(nil)<br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>



<p>线程二：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; get money<br><span class="hljs-string">&quot;80&quot;</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> money 1000<br>OK<br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>



<p>如何解决？</p>
<p>先解锁，再去做其他的操作（事务执行结束之后，redis会自动解锁）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; unwatch					<span class="hljs-comment"># 解锁</span><br>OK<br>127.0.0.1:6379&gt; watch money				<span class="hljs-comment"># 获取最新的值，再次加监视</span><br>OK<br>127.0.0.1:6379&gt; multi<br>OK<br>127.0.0.1:6379(TX)&gt; DECRBY money 1<br>QUEUED<br>127.0.0.1:6379(TX)&gt; INCRBY out 1		<br>QUEUED<br>127.0.0.1:6379(TX)&gt; <span class="hljs-built_in">exec</span>				<span class="hljs-comment"># 对比监视的值是否发生了变化，如果没有，则执行成功</span><br>1) (<span class="hljs-built_in">integer</span>) 99<br>2) (<span class="hljs-built_in">integer</span>) 1<br></code></pre></td></tr></table></figure>



<h1 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h1><p>我们要使用java来操作redis</p>
<p>什么是Jedis？ 是redis官方推荐的java连接开发工具！使用java操作redis的<strong>中间件</strong>！如果你要使用java操作redis，那么一定要对Jedis十分熟悉。</p>
<p><strong>常用的API</strong></p>
<p>String</p>
<p>List</p>
<p>Set</p>
<p>Hash</p>
<p>Zset</p>
<p>所有的API命令，就是我们对应的上面学习的命令，一个都没有变化！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.0-beta2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.78<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestTX</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">&quot;192.168.242.3&quot;</span>, <span class="hljs-number">6379</span>);<br><br>        jedis.auth(<span class="hljs-string">&quot;123456&quot;</span>);<br><br>        JSONObject jsonObject = <span class="hljs-keyword">new</span> JSONObject();<br>        jsonObject.put(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;world&quot;</span>);<br>        jsonObject.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;Ten&quot;</span>);<br><br>        <span class="hljs-comment">// 开启事务</span><br>        Transaction multi = jedis.multi();<br><br>        String result = jsonObject.toJSONString();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            multi.set(<span class="hljs-string">&quot;user1&quot;</span>,result);<br>            multi.set(<span class="hljs-string">&quot;user2&quot;</span>,result);<br><br>            multi.exec();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// 放弃事务</span><br>            multi.discard();<br>            e.printStackTrace();<br><br>            System.out.println(jedis.get(<span class="hljs-string">&quot;user1&quot;</span>));<br>            System.out.println(jedis.get(<span class="hljs-string">&quot;user2&quot;</span>));<br><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            jedis.close();<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="SpringBoot-整合"><a href="#SpringBoot-整合" class="headerlink" title="SpringBoot 整合"></a>SpringBoot 整合</h1><p>SpringBoot操作数据：spring-data ,jpa,jdbc,mongodb,redis!</p>
<p>SpringData 也就是和SpringBoot齐名的项目</p>
<p>说明：在SpringBoot2.x之后，原来使用的jedis被替换为了lettuce。</p>
<p>jedis：采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全的，使用jedis pool 连接池！BIO</p>
<p>lettuce：采用netty，实例可以在多个线程中进行共享，不存在线程不安全的情况！可以减少线程数据了。更像NIO模式</p>
<p>源码分析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br> <span class="hljs-meta">@ConditionalOnMissingBean(			// 我们可以自己定义一个redisTemplate来替换这个默认的</span><br><span class="hljs-meta">     name = &#123;&quot;redisTemplate&quot;&#125;</span><br><span class="hljs-meta"> )</span><br> <span class="hljs-meta">@ConditionalOnSingleCandidate(RedisConnectionFactory.class)</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="hljs-title">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;<br>     <span class="hljs-comment">// 默认的RedisTemplate没有过多的设置，redis对象都是需要序列化</span><br>     <span class="hljs-comment">// 两个泛型都是Object, Object 的类型，我们后面使用需要强制转换&lt;String , Object&gt;</span><br>     RedisTemplate&lt;Object, Object&gt; template = <span class="hljs-keyword">new</span> RedisTemplate();<br>     template.setConnectionFactory(redisConnectionFactory);<br>     <span class="hljs-keyword">return</span> template;<br> &#125;<br><br> <span class="hljs-meta">@Bean</span><br> <span class="hljs-meta">@ConditionalOnMissingBean</span> 			<span class="hljs-comment">// 由于String是redis中最常用的使用类型，所以也单独提出来了一个bean</span><br> <span class="hljs-meta">@ConditionalOnSingleCandidate(RedisConnectionFactory.class)</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> StringRedisTemplate <span class="hljs-title">stringRedisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;<br>     StringRedisTemplate template = <span class="hljs-keyword">new</span> StringRedisTemplate();<br>     template.setConnectionFactory(redisConnectionFactory);<br>     <span class="hljs-keyword">return</span> template;<br> &#125;<br></code></pre></td></tr></table></figure>



<ol>
<li><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.ten<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>02-redis-springboot<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>02-redis-springboot<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- redis整合SpringBoot --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li>
<li><p>配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 配置redis</span><br><span class="hljs-meta">spring.redis.host</span>=<span class="hljs-string">192.168.242.3</span><br><span class="hljs-meta">spring.redis.port</span>=<span class="hljs-string">6379</span><br><span class="hljs-meta">spring.redis.password</span>=<span class="hljs-string">123456			# redis设置了密码的需加这一行配置</span><br></code></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplicationTests</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">// opsForValue 操作字符串 类似String</span><br>        <span class="hljs-comment">// opsForList 操作list 类似list</span><br>        <span class="hljs-comment">// redisTemplate.opsForList();</span><br><br>        <span class="hljs-comment">// 除了基本的操作，我们常用的方法都可以直接通过RedisTemplate操作，比如事务，和基本的CRUD</span><br><br>        <span class="hljs-comment">// 获取redis的连接对象</span><br>        <span class="hljs-comment">// RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span><br>        <span class="hljs-comment">// connection.flushDb();</span><br><br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;mykey&quot;</span>,<span class="hljs-string">&quot;hello,world&quot;</span>);<br>        System.out.println(redisTemplate.opsForValue().get(<span class="hljs-string">&quot;mykey&quot;</span>));<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>关于数据的保存</p>
</li>
</ol>
<p><img src="/myBlog/Redis/image-20211109161652248-1636731414340.png" alt="image-20211109161652248"></p>
<p>编写自己序列化配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">// 编写我们自己的配置类</span><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 我们为了自己开发方便，一般直接使用&lt;String, Object&gt;</span><br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> RedisTemplate&lt;String, Object&gt; ();<br>        template.setConnectionFactory(redisConnectionFactory);<br><br>        <span class="hljs-comment">// json序列化配置</span><br>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="hljs-keyword">new</span> Jackson2JsonRedisSerializer(Object.class);<br>        ObjectMapper om = <span class="hljs-keyword">new</span> ObjectMapper();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br><br>        <span class="hljs-comment">// String序列化</span><br>        StringRedisSerializer stringRedisSerializer = <span class="hljs-keyword">new</span> StringRedisSerializer();<br><br>        <span class="hljs-comment">// key采用string的序列化方式</span><br>        template.setKeySerializer(stringRedisSerializer);<br><br>        <span class="hljs-comment">// hash的key也采用String的序列化方式</span><br>        template.setHashKeySerializer(stringRedisSerializer);<br><br>        <span class="hljs-comment">// value序列化方式采用Jackson</span><br>        template.setValueSerializer(jackson2JsonRedisSerializer);<br><br>        <span class="hljs-comment">// hash的value序列化方式采用jackson</span><br>        template.setHashKeySerializer(jackson2JsonRedisSerializer);<br><br>        template.afterPropertiesSet();<br><br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<p>实际开发，为了方便，可以将这些方法抽取成工具类。（网上搜索RedisUtils有很多，具体结合实际项目）</p>
<p>思路：</p>
<ol>
<li>导入依赖</li>
<li>编写配置文件</li>
<li>测试</li>
<li>根据实际要求，编写自己需要的序列化配置文件</li>
<li>将redis中的方法抽取出来，做成工具类，以便后期开发使用。</li>
</ol>
<h1 id="Redis-conf详解"><a href="#Redis-conf详解" class="headerlink" title="Redis.conf详解"></a>Redis.conf详解</h1><ol>
<li><p>配置文件unit单位对大小写不敏感。</p>
<p><img src="/myBlog/Redis/image-20211109193951137-1636731414341.png" alt="image-20211109193951137"></p>
</li>
<li><p>包含，就好比我们学习Spring、import，include</p>
<p><img src="/myBlog/Redis/image-20211109194709896-1636731414341.png" alt="image-20211109194709896"></p>
</li>
<li><p>网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">bind</span> 127.0.0.1 -::1		<span class="hljs-comment"># 绑定的ip</span><br>protected-mode yes		<span class="hljs-comment"># 保护模式</span><br>port 6379				<span class="hljs-comment"># 端口设置</span><br></code></pre></td></tr></table></figure></li>
<li><p>通用GENERAL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">daemonize yes						<span class="hljs-comment"># 以守护进程的方式运行（后台运行），默认是no，需要修改为yes</span><br>pidfile /var/run/redis_6379.pid		<span class="hljs-comment"># 如果以后台的方式运行，我们就需要指定一个pid文件</span><br><br><span class="hljs-comment"># 日志</span><br><span class="hljs-comment"># Specify the server verbosity level.</span><br><span class="hljs-comment"># This can be one of:</span><br><span class="hljs-comment"># debug (a lot of information, useful for development/testing)</span><br><span class="hljs-comment"># verbose (many rarely useful info, but not a mess like the debug level)</span><br><span class="hljs-comment"># notice (moderately verbose, what you want in production probably)				生产环境</span><br><span class="hljs-comment"># warning (only very important / critical messages are logged)</span><br>loglevel notice<br>logfile <span class="hljs-string">&quot;&quot;</span>					<span class="hljs-comment"># 日志生成的文件位置名，如果为空，则为默认的位置输出</span><br>databases 16				<span class="hljs-comment"># 默认数据库数量为16个</span><br>always-show-logo no			<span class="hljs-comment"># 是否总是显示logo（开启服务时，数据库的logo）</span><br><br></code></pre></td></tr></table></figure></li>
<li><p>快照</p>
<p>持久化，在规定的时间内，执行了多少次操作，则会持久化到文件 .rdb .aof</p>
<p>redis是内存数据库，如果没有持久化，那么数据断点就会丢失！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">save 3600 1							<span class="hljs-comment"># 如果900秒内，至少有1个key进行了修改，我们就进行持久化操作</span><br>save 300 100						<span class="hljs-comment"># 如果300秒内，至少有100个key进行了修改，我们就进行持久化操作</span><br>save 60 10000						<span class="hljs-comment"># 如果60秒内，至少有10000个key进行了修改，我们就进行持久化操作</span><br><br><span class="hljs-comment"># 我们后面学习持久化，会自己定义这个测试</span><br><br>stop-writes-on-bgsave-error yes		<span class="hljs-comment"># 当bgsave快照操作出错时停止写数据到磁盘</span><br><br>rdbcompression yes					<span class="hljs-comment"># 是否压缩rdb文件，需要消耗一些cpu资源</span><br>rdbchecksum yes						<span class="hljs-comment"># 保存rdb文件的时候，进行错误的检查校验</span><br>dir ./								<span class="hljs-comment"># rdb持久化保存文件的目录</span><br></code></pre></td></tr></table></figure></li>
<li><p>REPLICATION 复制，我们后面讲解主从复制的时候再讲解</p>
</li>
<li><p>SECURITY 安全</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">config <span class="hljs-built_in">set</span> requirepass <span class="hljs-string">&quot;123456&quot;</span>		<span class="hljs-comment"># 设置redis密码</span><br>config get requirepass				<span class="hljs-comment"># 获得密码</span><br>auth 123456							<span class="hljs-comment"># 使用密码登录认证</span><br></code></pre></td></tr></table></figure>

</li>
<li><p>限制CLIENTS</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">maxclients 10000					<span class="hljs-comment"># 设置能连接上redis的客户端的最大数量</span><br>maxmemory &lt;bytes&gt;					<span class="hljs-comment"># redis 配置最大的内存容量</span><br>maxmemory-policy noeviction			<span class="hljs-comment"># 内存到达上限之后的处理策略</span><br><br>1、volatile-lru：只对设置了过期时间的key进行LRU（默认值） <br>2、allkeys-lru ： 删除lru算法的key   <br>3、volatile-random：随机删除即将过期key   <br>4、allkeys-random：随机删除   <br>5、volatile-ttl ： 删除即将过期的   <br>6、noeviction ： 永不过期，返回错误<br></code></pre></td></tr></table></figure></li>
<li><p>APPEND ONLY 模式 aof配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">appendonly no						<span class="hljs-comment"># 默认是不开启aof模式的，默认使用rdb方式持久化的，在大部分情况下，rdb够用了</span><br>appendfilename <span class="hljs-string">&quot;appendonly.aof&quot;</span> 	<span class="hljs-comment"># 持久化文件的名字</span><br><br><span class="hljs-comment"># appendfsync always				# 每次修改都会sync。消耗性能</span><br>appendfsync everysec				<span class="hljs-comment"># 每秒执行一次 sync ，可能会丢失这1s的数据！</span><br><span class="hljs-comment"># appendfsync no					# 不执行sync，这个时候操作系统自己同步数据，速度最快</span><br><br></code></pre></td></tr></table></figure></li>
</ol>
<h1 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h1><p>面试和工作，持久化都是重点！</p>
<p>Redis是内存数据库，如果不将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以Redis提供了持久化功能！</p>
<h2 id="RDB（RedisDataBase）"><a href="#RDB（RedisDataBase）" class="headerlink" title="RDB（RedisDataBase）"></a>RDB（RedisDataBase）</h2><p>什么是RDB？ </p>
<p><img src="/myBlog/Redis/image-20211110111343837-1636731446157.png" alt="image-20211110111343837"></p>
<p>在指定的时间间隔内将内存中的数据极快写入磁盘，也就是行话说Snapshot快照，他恢复时是将快照文件直接读到内存里。</p>
<p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的。这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常灵敏，那RDB方法要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能会丢失。我们默认的就是RDB，一般情况下不需要修改这个配置！</p>
<p>==rdb保存的文件是dump.rdb==,都是在配置文件中的快照选项中配置的。</p>
<p><img src="/myBlog/Redis/image-20211110115128561-1636731446157.png" alt="image-20211110115128561"></p>
<p><strong>触发机制</strong></p>
<ol>
<li>save的规则满足的情况下，会自动触发rdb规则</li>
<li>执行flushall命令，也会触发我们的rdb规则</li>
<li>退出redis，也会产生rdb文件 </li>
</ol>
<p>备份完就自动生成一个dump.rdb</p>
<p><strong>如何恢复rdb文件</strong></p>
<ol>
<li><p>只需要将rdb文件放在我们redis启动目录就可以，redis启动的时候会自动检查dump.rdb恢复其中的数据。</p>
</li>
<li><p>查看需要存放的位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; config get dir<br>1) <span class="hljs-string">&quot;dir&quot;</span><br>2) <span class="hljs-string">&quot;/usr/local/bin&quot;</span>					<span class="hljs-comment"># 如果在这个目录下存在dump.rdb文件，启动就会自动恢复其中的数据。</span><br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">appendonly no						<span class="hljs-comment"># 默认是不开启aof模式的，默认使用rdb方式持久化的，在大部分情况下，rdb够用了</span><br>appendfilename <span class="hljs-string">&quot;appendonly.aof&quot;</span> 	<span class="hljs-comment"># 持久化文件的名字</span><br><br><span class="hljs-comment"># appendfsync always				# 每次修改都会sync。消耗性能</span><br>appendfsync everysec				<span class="hljs-comment"># 每秒执行一次 sync ，可能会丢失这1s的数据！</span><br><span class="hljs-comment"># appendfsync no					# 不执行sync，这个时候操作系统自己同步数据，速度最快</span><br><br></code></pre></td></tr></table></figure></li>
</ol>
<p><strong>重写规则说明</strong></p>
<p>aof默认的是无限追加，文件会越来远大。</p>
<p><img src="/myBlog/Redis/image-20211110125255401-1636731446158.png" alt="image-20211110125255401"></p>
<p><img src="/myBlog/Redis/image-20211110125322034-1636731446158.png" alt="image-20211110125322034"></p>
<p>如果aof文件大于64m，将fork一个新的进程来将我们的文件进行重写。</p>
<p><strong>优点：</strong></p>
<ol>
<li>适合大规模的数据恢复！dump.rdb</li>
<li>对数据的完整性要求不高</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>需要一定的时间间隔进行操作。如果redis意外宕机了，这个最后的一次修改数据就没了。</li>
<li>fork进程的时候，会占用一定的内容空间。</li>
</ol>
<h2 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h2><p>将我们所有的命令都记录下来，history，恢复的时候就把这个文件全部在执行一遍。</p>
<p>以日志形式来记录每个写操作，将redis执行过的执行记录下来（读操作不记录），只 许追加文件不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p>
<p>aof保存的是appendonly.aof 文件</p>
<p><strong>append</strong></p>
<p><img src="/myBlog/Redis/image-20211110122837901-1636731446158.png" alt="image-20211110122837901"></p>
<p>默认是不开启的，我们需要手动进行配置。我们只需要将appendonly改为yes就可以开启aof了</p>
<p>重启，redis就可以生效了。</p>
<p><img src="/myBlog/Redis/image-20211110123055770-1636731446158.png" alt="image-20211110123055770"></p>
<p>如果这个aof文件有错误，这时候redis是启动不起来的，我们需要修复这个aof文件，redis给我们提供了这样一个工具<code>redis-check-aof</code> （删掉错误的代码）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># redis-check-aof --fix appendonly.aof</span><br><br>[root@localhost bin]<span class="hljs-comment"># ./redis-check-aof --fix appendonly.aof </span><br>0x              87: Expected \r\n, got: 6661<br>AOF analyzed: size=153, ok_up_to=110, ok_up_to_line=33, diff=43<br>This will shrink the AOF from 153 bytes, with 43 bytes, to 110 bytes<br>Continue? [y/N]: y<br>Successfully truncated AOF<br>[root@localhost bin]<span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure>

<p>如果文件正常了，启动redis就可以恢复了。</p>
<p>优点：</p>
<ol>
<li>每次修改都会同步，文件的完整会更加好！</li>
<li>每秒同步一次，可能会丢失一秒的数据</li>
<li>从不同步，效率最高。</li>
</ol>
<p>缺点：</p>
<ol>
<li>相对于数据文件来说，aof远远大于rdb，修复的速度也被rdb慢。</li>
<li>aof运行效率也要比rdb慢，所以我们redis默认的配置就是rdb持久化！</li>
</ol>
<h1 id="Redis发布订阅"><a href="#Redis发布订阅" class="headerlink" title="Redis发布订阅"></a>Redis发布订阅</h1><p>Redis发布订阅（pub/sub)是一种==消息通信模式==：发送者(pub)发送消息，订阅者(sub)接收消息。微信、微博、关注系统。</p>
<p>Redis客户端可以订阅任意数量的频道</p>
<p>订阅/发布消息图：</p>
<p>第一个：消息发送者，第二个：频道，第三个：消息订阅者</p>
<p><img src="/myBlog/Redis/image-20211110141642042-1636731446158.png" alt="image-20211110141642042"></p>
<p>下图展示了频道channel1，以及订阅这个频道的三个客户端——client2、client5、client1之间的关系：</p>
<p><img src="/myBlog/Redis/image-20211110142031866-1636731446158.png" alt="image-20211110142031866"></p>
<p>当有新消息通过publish命令发送到频道channel1时，这个消息会被发送给订阅他的三个客户端：</p>
<p><img src="/myBlog/Redis/image-20211110142125541-1636731446169.png" alt="image-20211110142125541"></p>
<p><strong>命令</strong></p>
<p>这些命令被广泛用于构建即时通信应用，比如网络聊天室（chatroom)和实时广播、实时提醒等。</p>
<p><img src="/myBlog/Redis/image-20211110142435094-1636731446169.png" alt="image-20211110142435094"></p>
<p><strong>测试</strong></p>
<p>先订阅一个频道Ten</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; SUBSCRIBE Ten<br>Reading messages... (press Ctrl-C to quit)<br>1) <span class="hljs-string">&quot;subscribe&quot;</span><br>2) <span class="hljs-string">&quot;Ten&quot;</span><br>3) (<span class="hljs-built_in">integer</span>) 1<br></code></pre></td></tr></table></figure>

<p>再开一个进程，发布消息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; PUBLISH Ten <span class="hljs-string">&quot;hello Ten&quot;</span><br>(<span class="hljs-built_in">integer</span>) 1<br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>

<p>最后频道这么就会自动更新内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; SUBSCRIBE Ten<br>Reading messages... (press Ctrl-C to quit)<br>1) <span class="hljs-string">&quot;subscribe&quot;</span><br>2) <span class="hljs-string">&quot;Ten&quot;</span><br>3) (<span class="hljs-built_in">integer</span>) 1<br>1) <span class="hljs-string">&quot;message&quot;</span><br>2) <span class="hljs-string">&quot;Ten&quot;</span><br>3) <span class="hljs-string">&quot;hello Ten&quot;</span><br></code></pre></td></tr></table></figure>



<h1 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>主从复制,是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master/leader)，后者称为从节点(slave/follower)；==数据的复制是单向的，只能由主节点到从节点==。Master以写为主 ，Slave以读为主。</p>
<p>==默认情况下，每台Redis服务器都是主节点==；且一个主节点可以有多个从节点(或没有从节点) ，但一个从节点只能有一个主节点。</p>
<p>主从复制的作用主要包括：</p>
<ol>
<li><p>数据冗余：主从复制实现了数据的热备份,是持久化之外的一种数据冗余方式。</p>
</li>
<li><p>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</p>
</li>
<li><p>负载均衡：在主从复制的基础，上配合读写分离，可以由主节点提供写服务，由从节点提供读服务(即写Redis数据时应用连接</p>
<p>主节点，读Redis数据时应用连接从节点) ， 分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大</p>
<p>大提高Redis服务器的并发量。</p>
</li>
<li><p>高可用（集群）基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</p>
</li>
</ol>
<p>一般来说,要将Redis运用于工程项目中，只使用一台Redis是万万不能的（宕机），原因如下：</p>
<ol>
<li>从结构上，单个Redis服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大；</li>
<li>从容量上，单个Redis服务器内存容量有限，就算一台Redis服务器内存容量为256G ，也不能将所有内存用作Redis存储内存，一般来说，==单台Redis最大使用内存不应该超过20G==。</li>
</ol>
<p>电商网站上的商品，一般都是一次上传，无数次浏览的，说专业点也就是”多读少写”。</p>
<p>对于这种场景我们可以使如下这种架构 ：</p>
<p><img src="/myBlog/Redis/image-20211110160627503-1636731465018.png" alt="image-20211110160627503"></p>
<p>主从复制，读写分离！80%的情况下都是在进行读操作！减缓服务器的压力。架构中经常使用。一主二从。</p>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>只配置从库，不用配置主库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; info replication							<span class="hljs-comment"># 查看当前库的信息</span><br><span class="hljs-comment"># Replication												</span><br>role:master													<span class="hljs-comment"># 角色master</span><br>connected_slaves:0											<span class="hljs-comment"># 没有从机	</span><br>master_failover_state:no-failover<br>master_replid:c24b4990216f9f43edd239880dd084fb611f24d6<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:0<br>second_repl_offset:-1<br>repl_backlog_active:0<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:0<br>repl_backlog_histlen:0<br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>

<p>复制三个文件，修改对应的信息</p>
<ol>
<li>端口</li>
<li>pid名字</li>
<li>log文件名字</li>
<li>dump.rdb名字</li>
</ol>
<p><img src="/myBlog/Redis/image-20211110164938440-1636731465018.png" alt="image-20211110164938440"></p>
<h3 id="一主二从"><a href="#一主二从" class="headerlink" title="一主二从"></a>一主二从</h3><p>==默认情况下，每台Redis服务器都是主节点==；我们一般情况下只用配置从机就好了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">slaveof 127.0.0.1 6379			<span class="hljs-comment"># 找主机</span><br><br></code></pre></td></tr></table></figure>

<p>主机有密码的，在从机的配置文件conf里加上：masterpass 密码</p>
<p>主机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; info replication<br><span class="hljs-comment"># Replication</span><br>role:master<br>connected_slaves:2<br>slave0:ip=127.0.0.1,port=6381,state=online,offset=56,lag=1<br>slave1:ip=127.0.0.1,port=6380,state=online,offset=56,lag=0<br>master_failover_state:no-failover<br>master_replid:9a9b9c66882dedab9eeacbc42faaea7da17252c5<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:56<br>second_repl_offset:-1<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:1<br>repl_backlog_histlen:56<br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>

<p>从机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; info replication<br><span class="hljs-comment"># Replication</span><br>role:slave<br>master_host:127.0.0.1<br>master_port:6379<br>master_link_status:up<br>master_last_io_seconds_ago:10<br>master_sync_in_progress:0<br>slave_read_repl_offset:28<br>slave_repl_offset:28<br>slave_priority:100<br>slave_read_only:1<br>replica_announced:1<br>connected_slaves:0<br>master_failover_state:no-failover<br>master_replid:9a9b9c66882dedab9eeacbc42faaea7da17252c5<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:28<br>second_repl_offset:-1<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:1<br>repl_backlog_histlen:28<br>127.0.0.1:6380&gt; <br></code></pre></td></tr></table></figure>



<p><strong>细节</strong></p>
<p>主机可以写，从机不可以写，只能读！主机中的所有信息和数据，都会自动被从机保存。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6379&gt; keys *<br>(empty array)<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> k1 v1<br>OK<br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure>

<p>从机只读</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">127.0.0.1:6380&gt; keys *<br>1) <span class="hljs-string">&quot;k1&quot;</span><br>127.0.0.1:6380&gt; get k1<br><span class="hljs-string">&quot;v1&quot;</span><br>127.0.0.1:6380&gt; <span class="hljs-built_in">set</span> k2 v2<br>(error) READONLY You can<span class="hljs-string">&#x27;t write against a read only replica.</span><br><span class="hljs-string">127.0.0.1:6380&gt;</span><br></code></pre></td></tr></table></figure>

<p>测试：主机断开连接，从机依旧连接到主机的，但是没有写操作了，这个时候，主机如果回来了依旧可以获取到主机写的信息！</p>
<p>如果是使用命令行，来配置的主从，这个时候如果重启了，就会变成主机！只要变为从机，立马就会从主机中获取值！</p>
<p><strong>复制原理</strong></p>
<p>Slave启动成功连接到master后会发送一个sync命令</p>
<p>Master接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，==master将传送整个数据文件到slave，并完成一次完全同步==。</p>
<p>==全量复制==：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</p>
<p>==增量复制==：Master继续将新的所有收集到的修改命令依次传给slave，完成同步</p>
<p>但是只要是重新连接master，一次完全同步（全量复制）将被自动执行。</p>
<p><strong>层层链路</strong></p>
<p>上一个M链接下一个S,也可以完成主从复制。</p>
<p><img src="/myBlog/Redis/image-20211110193759690-1636731465019.png" alt="image-20211110193759690"></p>
<p>如果主机断开了连接，我们可以使用<code>SLAVEOF no one</code>手动变成主机。其他节点就可以手动连接到这个最新的主机 </p>
<h3 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h3><p>（自动选举主机的模式）</p>
<p><strong>概述</strong></p>
<p>主从切换技术的方法是：当主服务器宕机后，需要手动把一台服务器切换为主服务器，这就需要人工干预，费时费力，还会造成一段时间内服务不可用。这不是推荐的方式，更多的时候，我们优先考虑哨兵模式。Redis从2.8开始正式提供了Sentinel（哨兵）架构来解决这个问题。</p>
<p>自动版，能够后台监控主机是否故障，如果故障了根据投票数==自动将从库转换为主库==。</p>
<p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</p>
<p><img src="/myBlog/Redis/image-20211110200036007-1636731465018.png" alt="image-20211110200036007"></p>
<p>这里的哨兵的两个作用</p>
<ul>
<li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。</li>
<li>当哨兵检测到了master宕机，会自动将slave切换成master，然后通过==发布订阅模式==通知其他的从服务器，修改配置文件，让它们切换主机</li>
</ul>
<p>然而一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还回进行监控，这样就行程了多哨兵的模式。</p>
<p><img src="/myBlog/Redis/image-20211110202645563-1636731465019.png" alt="image-20211110202645563"></p>
<p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象为<strong>主观下线</strong>。当后面的哨兵也检测到主服务器不可用，并且达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover（故障转移）操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong>客观下线</strong>。</p>
<p><strong>测试</strong></p>
<ol>
<li><p>配置哨兵配置文件sentinel.config</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># sentinel monitor 被监视的名称 host port 1sentinel monitor myredis 127.0.0.1 6379 1</span><br></code></pre></td></tr></table></figure>

<p>后面的1，代表主机挂了之后，slave投票看让谁接替成为主机。</p>
</li>
<li><p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@localhost bin]<span class="hljs-comment"># ./redis-sentinel ./myredisconf/sentinel.conf		# 启动</span><br></code></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@localhost bin]<span class="hljs-comment"># ./redis-sentinel ./myredisconf/sentinel.conf </span><br>8463:X 10 Nov 2021 20:38:26.820 <span class="hljs-comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br>8463:X 10 Nov 2021 20:38:26.820 <span class="hljs-comment"># Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=8463, just started</span><br>8463:X 10 Nov 2021 20:38:26.820 <span class="hljs-comment"># Configuration loaded</span><br>8463:X 10 Nov 2021 20:38:26.821 * Increased maximum number of open files to 10032 (it was originally <span class="hljs-built_in">set</span> to 1024).<br>8463:X 10 Nov 2021 20:38:26.821 * monotonic clock: POSIX clock_gettime<br>                _._                                                  <br>           _.-``__ <span class="hljs-string">&#x27;&#x27;</span>-._                                             <br>      _.-``    `.  `_.  <span class="hljs-string">&#x27;&#x27;</span>-._           Redis 6.2.6 (00000000/0) 64 bit<br>  .-`` .-```.  ```\/    _.,_ <span class="hljs-string">&#x27;&#x27;</span>-._                                  <br> (    <span class="hljs-string">&#x27;      ,       .-`  | `,    )     Running in sentinel mode</span><br><span class="hljs-string"> |`-._`-...-` __...-.``-._|&#x27;</span>` _.-<span class="hljs-string">&#x27;|     Port: 26379</span><br><span class="hljs-string"> |    `-._   `._    /     _.-&#x27;</span>    |     PID: 8463<br>  `-._    `-._  `-./  _.-<span class="hljs-string">&#x27;    _.-&#x27;</span>                                   <br> |`-._`-._    `-.__.-<span class="hljs-string">&#x27;    _.-&#x27;</span>_.-<span class="hljs-string">&#x27;|                                  </span><br><span class="hljs-string"> |    `-._`-._        _.-&#x27;</span>_.-<span class="hljs-string">&#x27;    |           https://redis.io       </span><br><span class="hljs-string">  `-._    `-._`-.__.-&#x27;</span>_.-<span class="hljs-string">&#x27;    _.-&#x27;</span>                                   <br> |`-._`-._    `-.__.-<span class="hljs-string">&#x27;    _.-&#x27;</span>_.-<span class="hljs-string">&#x27;|                                  </span><br><span class="hljs-string"> |    `-._`-._        _.-&#x27;</span>_.-<span class="hljs-string">&#x27;    |                                  </span><br><span class="hljs-string">  `-._    `-._`-.__.-&#x27;</span>_.-<span class="hljs-string">&#x27;    _.-&#x27;</span>                                   <br>      `-._    `-.__.-<span class="hljs-string">&#x27;    _.-&#x27;</span>                                       <br>          `-._        _.-<span class="hljs-string">&#x27;                                           </span><br><span class="hljs-string">              `-.__.-&#x27;</span>                                               <br><br>8463:X 10 Nov 2021 20:38:26.822 <span class="hljs-comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br>8463:X 10 Nov 2021 20:38:26.837 <span class="hljs-comment"># Sentinel ID is bd3c3a2017d9d9c4ee03c810ae071661cd4be1d7</span><br>8463:X 10 Nov 2021 20:38:26.837 <span class="hljs-comment"># +monitor master myredis 127.0.0.1 6379 quorum 1</span><br>8463:X 10 Nov 2021 20:38:26.838 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6379<br>8463:X 10 Nov 2021 20:39:37.137 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6379<br></code></pre></td></tr></table></figure>

<p>如果主机挂了，哨兵会自动投票选举出新的主机。</p>
<p>哨兵日志</p>
<p><img src="/myBlog/Redis/image-20211110204544847-1636731465019.png" alt="image-20211110204544847"></p>
</li>
</ol>
<p>如果主机再次恢复过来，也只能是归并到新的主机下，当做从机，这就是哨兵模式的规则。</p>
<p><strong>哨兵模式</strong></p>
<p>优点：</p>
<ol>
<li>哨兵集群，基于主从复制模式，所有的主从配置优点，他全有。</li>
<li>主从可以切换，故障可以转移，系统的可用性就会更好。</li>
<li>哨兵模式就是主从模式的升级，手动到自动，更加健壮。</li>
</ol>
<p>缺点：</p>
<ol>
<li>Redis不好在线扩容，集群容量一旦到达上限，在线扩容级十分麻烦。</li>
<li>实现哨兵模式的配置其实是很麻烦的，里面有很多选择。</li>
</ol>
<p><strong>哨兵模式的全部配置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Example sentinel.conf  </span><br>  <br><span class="hljs-comment"># 哨兵sentinel实例运行的端口 默认26379  </span><br>port 26379  <br>  <br><span class="hljs-comment"># 哨兵sentinel的工作目录  </span><br>dir /tmp  <br>  <br><span class="hljs-comment"># 哨兵sentinel监控的redis主节点的 ip port   </span><br><span class="hljs-comment"># master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符&quot;.-_&quot;组成。  </span><br><span class="hljs-comment"># quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了  </span><br><span class="hljs-comment"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;  </span><br>  sentinel monitor mymaster 127.0.0.1 6379 2  <br>  <br><span class="hljs-comment"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码  </span><br><span class="hljs-comment"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码  </span><br><span class="hljs-comment"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;  </span><br>sentinel auth-pass mymaster MySUPER--secret-0123passw0rd  <br>  <br>  <br><span class="hljs-comment"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒  </span><br><span class="hljs-comment"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;  </span><br>sentinel down-after-milliseconds mymaster 30000  <br>  <br><span class="hljs-comment"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，  </span><br>这个数字越小，完成failover所需的时间就越长，  <br>但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。  <br>可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。  <br><span class="hljs-comment"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;  </span><br>sentinel parallel-syncs mymaster 1  <br>  <br>  <br>  <br><span class="hljs-comment"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面：   </span><br><span class="hljs-comment">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。  </span><br><span class="hljs-comment">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。  </span><br><span class="hljs-comment">#3.当想要取消一个正在进行的failover所需要的时间。    </span><br><span class="hljs-comment">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了  </span><br><span class="hljs-comment"># 默认三分钟  </span><br><span class="hljs-comment"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;  </span><br>sentinel failover-timeout mymaster 180000  <br>  <br><span class="hljs-comment"># SCRIPTS EXECUTION  </span><br>  <br><span class="hljs-comment">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。  </span><br><span class="hljs-comment">#对于脚本的运行结果有以下规则：  </span><br><span class="hljs-comment">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10  </span><br><span class="hljs-comment">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。  </span><br><span class="hljs-comment">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。  </span><br><span class="hljs-comment">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。  </span><br>  <br><span class="hljs-comment">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，  </span><br>这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，  <br>一个是事件的类型，  <br>一个是事件的描述。  <br>如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。  <br><span class="hljs-comment">#通知脚本  </span><br><span class="hljs-comment"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;  </span><br>  sentinel notification-script mymaster /var/redis/notify.sh  <br>  <br><span class="hljs-comment"># 客户端重新配置主节点参数脚本  </span><br><span class="hljs-comment"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。  </span><br><span class="hljs-comment"># 以下参数将会在调用脚本时传给脚本:  </span><br><span class="hljs-comment"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;  </span><br><span class="hljs-comment"># 目前&lt;state&gt;总是“failover”,  </span><br><span class="hljs-comment"># &lt;role&gt;是“leader”或者“observer”中的一个。   </span><br><span class="hljs-comment"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的  </span><br><span class="hljs-comment"># 这个脚本应该是通用的，能被多次调用，不是针对性的。  </span><br><span class="hljs-comment"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;  </span><br> sentinel client-reconfig-script mymaster /var/redis/reconfig.sh<br></code></pre></td></tr></table></figure>



<h1 id="Redis缓存穿透、击穿和雪崩"><a href="#Redis缓存穿透、击穿和雪崩" class="headerlink" title="Redis缓存穿透、击穿和雪崩"></a>Redis缓存穿透、击穿和雪崩</h1><p>面试高频，工作常用。服务的高可用问题。</p>
<p>Redis缓存的使用，极大的提升了应用程序的性能和效率，特别是数据查询方面。但同时，他也带来了一些问题。其中，最要害的问题，就是数据的一致性问题，从严格意义上讲，这个问题无解。如果对数据的一致性要求很高，那么就不能使用缓存。</p>
<p>另外的一些典型问题就是，缓存穿透、缓存雪崩和缓存击穿。目录，业界也都有比较流行的解决方案。</p>
<p><img src="/myBlog/Redis/image-20211110212837552-1636731483147.png" alt="image-20211110212837552"></p>
<h2 id="缓存穿透（查不到）"><a href="#缓存穿透（查不到）" class="headerlink" title="缓存穿透（查不到）"></a>缓存穿透（查不到）</h2><p><strong>概念</strong></p>
<p>缓存穿透的概念很简单，用户想要查询一个数据，发现redis内存数据库中没有，也就是缓存没有命中，于是向持久层数据库查询。发现也没有，本次查询失败。当用户很多的时候，缓存都没有命中（秒杀），都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于缓存穿透。</p>
<p><strong>布隆过滤器</strong></p>
<p>布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力；</p>
<p><img src="/myBlog/Redis/image-20211110214237579-1636731483147.png" alt="image-20211110214237579"></p>
<p><strong>缓存空对象</strong></p>
<p>当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源。</p>
<p><img src="/myBlog/Redis/image-20211110214533317-1636731483148.png" alt="image-20211110214533317"></p>
<p>但是这种方法会存在两个问题：</p>
<ol>
<li>如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多的空值的键；</li>
<li>即使对空值设置了过期时间，还是会存在缓冲层和存储层的数据会有一段时间窗口的不一致，这对于需要保存一致性的业务会有影响。</li>
</ol>
<h2 id="缓存击穿（量太大，缓存过期）"><a href="#缓存击穿（量太大，缓存过期）" class="headerlink" title="缓存击穿（量太大，缓存过期）"></a>缓存击穿（量太大，缓存过期）</h2><p><strong>概述</strong></p>
<p>这里需要注意和缓存穿透的区别，缓存击穿是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发级穿透缓存，直接请求数据库，就像在一个屏幕上凿开了一个洞。</p>
<p>当某个key在过期瞬间，有大量的请求并发访问，这类数据一般都是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导致数据库瞬间压力过大。</p>
<p><strong>解决方案</strong></p>
<p><strong>设置热点数据永不过期</strong></p>
<p>从缓存层面来看，没有设置过期时间，所以不会出现热点key过期后产生的问题。</p>
<p><strong>加互斥锁</strong></p>
<p>分布式锁：使用分布式锁，保证对于每个key同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到分布式锁，因此对分布式锁的考验很大。</p>
<p><img src="/myBlog/Redis/image-20211110220805289-1636731483148.png" alt="image-20211110220805289"></p>
<h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p><strong>概念</strong></p>
<p>缓存雪崩，是指在某一个时间段，缓存集中过期失效。Redis宕机！</p>
<p>产生雪崩的原因之一，比如双十一零点抢购，这波商品时间比较集中的放入了缓存，假设缓存一个小时。那么到凌晨一点的时候，这批商品的缓存就过期了。而这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用会暴增，造成存储层也会挂掉的情况。</p>
<p><img src="/myBlog/Redis/image-20211110221746510-1636731483148.png" alt="image-20211110221746510"></p>
<p>其实集中过期倒不是非常致命，比较致命的缓存雪崩是缓存服务器某个节点宕机或者断网。因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，这个时候数据库也是可以顶住压力的。无非就是对数据库产生周期性的压力而已。而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，很有可能瞬间就把数据库压垮。</p>
<p><strong>解决方案</strong></p>
<p><strong>redis高可用</strong></p>
<p>这个思想的含义是，既然redis有可能挂掉，那我就多增设几台redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群（异地多活）。</p>
<p><strong>限流降级</strong></p>
<p>这个解决方案的思想就是在缓存失效后，通过加锁或者队列来控制读数据库缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p>
<p><strong>数据预热</strong></p>
<p>数据预热的含义就是在正式部署之前，先把可能的数据预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间尽量均匀。</p>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>day11-首页数据显示</title>
    <url>/myBlog/day11-%E9%A6%96%E9%A1%B5%E6%95%B0%E6%8D%AE%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[

#  day11-首页数据显示 







<img src="/myBlog/day11-%E9%A6%96%E9%A1%B5%E6%95%B0%E6%8D%AE%E6%98%BE%E7%A4%BA/image-20220106234709803.png" alt="image-20220106234709803">

 {{% raw %}}

# 搭建项目前台环境NUXT {{ sensitive }} 

{{%  endraw %}}

## 下载压缩包

https://github.com/nuxt-community/starter-template/archive/master.zip

## 解压

将template中的内容复制到 guli

## 修改package.json

name、description、author（必须修改这里，否则项目无法安装）

<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;guli&quot;</span>,<br>  <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;谷粒学院前台网站&quot;</span>,<br>  <span class="hljs-string">&quot;author&quot;</span>: <span class="hljs-string">&quot;Helen &lt;111111111@qq.com&gt;&quot;</span>,<br></code></pre></td></tr></table></figure>

## 修改nuxt.config.js

修改title: '{{ name }}'、content: '{{escape description }}'

这里的设置最后会显示在页面标题栏和meta数据中

<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">head: &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;谷粒学院 - Java视频|HTML5视频|前端视频|Python视频|大数据视频-自学拿1万+月薪的IT在线视频课程，谷粉力挺，老学员为你推荐&#x27;</span>,<br>    <span class="hljs-attr">meta</span>: [<br>      &#123; <span class="hljs-attr">charset</span>: <span class="hljs-string">&#x27;utf-8&#x27;</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;viewport&#x27;</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;width=device-width, initial-scale=1&#x27;</span> &#125;,<br>      &#123; <span class="hljs-attr">hid</span>: <span class="hljs-string">&#x27;keywords&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;keywords&#x27;</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;谷粒学院,IT在线视频教程,Java视频,HTML5视频,前端视频,Python视频,大数据视频&#x27;</span> &#125;,<br>      &#123; <span class="hljs-attr">hid</span>: <span class="hljs-string">&#x27;description&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;description&#x27;</span>, <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;谷粒学院是国内领先的IT在线视频学习平台、职业教育平台。截止目前,谷粒学院线上、线下学习人次数以万计！会同上百个知名开发团队联合制定的Java、HTML5前端、大数据、Python等视频课程，被广大学习者及IT工程师誉为：业界最适合自学、代码量最大、案例最多、实战性最强、技术最前沿的IT系列视频课程！&#x27;</span> &#125;<br>    ],<br>    <span class="hljs-attr">link</span>: [<br>      &#123; <span class="hljs-attr">rel</span>: <span class="hljs-string">&#x27;icon&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;image/x-icon&#x27;</span>, <span class="hljs-attr">href</span>: <span class="hljs-string">&#x27;/favicon.ico&#x27;</span> &#125;<br>    ]<br>  &#125;,<br><br></code></pre></td></tr></table></figure>

## 安装依赖

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure>

## 测试运行

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm run dev<br></code></pre></td></tr></table></figure>

## 幻灯片插件

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm install vue-awesome-swiper<br></code></pre></td></tr></table></figure>

在 plugins 文件夹下新建文件 nuxt-swiper-plugin.js，内容是

<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> VueAwesomeSwiper <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-awesome-swiper/dist/ssr&#x27;</span><br><br>Vue.use(VueAwesomeSwiper)<br></code></pre></td></tr></table></figure>

 

在 nuxt.config.js 文件中配置插件

将 plugins 和 css节点 复制到 module.exports节点下

<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    &#123; <span class="hljs-attr">src</span>: <span class="hljs-string">&#x27;~/plugins/nuxt-swiper-plugin.js&#x27;</span>, <span class="hljs-attr">ssr</span>: <span class="hljs-literal">false</span> &#125;<br>  ],<br>  <span class="hljs-attr">css</span>: [<br>    <span class="hljs-string">&#x27;swiper/dist/css/swiper.css&#x27;</span><br>  ],<br></code></pre></td></tr></table></figure>



# NUXT框架介绍

## 目录介绍

![image-20220106234951219](day11-首页数据显示/image-20220106234951219.png)

## 页面加载方式

![image-20220106235005937](day11-首页数据显示/image-20220106235005937.png)



# 整合项目首页面

## 页面布局

## 复制静态资源

将静态原型中的css、img、js、photo目录拷贝至assets目录下 

将favicon.ico复制到static目录下

## 定义布局

我们可以把页头和页尾提取出来，形成布局页

修改layouts目录下default.vue，从静态页面中复制首页，修改了原始文件中的资源路径为~/assets/，将主内容区域的内容替换成<nuxt>

内容如下：

完整的内容如下

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>   &lt;div class=&quot;in-wrap&quot;&gt;<br>     &lt;!-- 公共头引入 --&gt;<br>     &lt;header id=&quot;header&quot;&gt;<br>       &lt;section class=&quot;container&quot;&gt;<br>         &lt;h1 id=&quot;logo&quot;&gt;<br>           &lt;a href=&quot;#&quot; title=&quot;谷粒学院&quot;&gt;<br>             &lt;img src=&quot;~/assets/img/logo.png&quot; width=&quot;100%&quot; alt=&quot;谷粒学院&quot;&gt;<br>           &lt;/a&gt;<br>         &lt;/h1&gt;<br>         &lt;div class=&quot;h-r-nsl&quot;&gt;<br>           &lt;ul class=&quot;nav&quot;&gt;<br>             &lt;router-link to=&quot;/&quot; tag=&quot;li&quot; active-class=&quot;current&quot; exact&gt;<br>               &lt;a&gt;首页&lt;/a&gt;<br>             &lt;/router-link&gt;<br>             &lt;router-link to=&quot;/course&quot; tag=&quot;li&quot; active-class=&quot;current&quot;&gt;<br>               &lt;a&gt;课程&lt;/a&gt;<br>             &lt;/router-link&gt;<br>             &lt;router-link to=&quot;/teacher&quot; tag=&quot;li&quot; active-class=&quot;current&quot;&gt;<br>               &lt;a&gt;名师&lt;/a&gt;<br>             &lt;/router-link&gt;<br>             &lt;router-link to=&quot;/article&quot; tag=&quot;li&quot; active-class=&quot;current&quot;&gt;<br>               &lt;a&gt;文章&lt;/a&gt;<br>             &lt;/router-link&gt;<br>             &lt;router-link to=&quot;/qa&quot; tag=&quot;li&quot; active-class=&quot;current&quot;&gt;<br>               &lt;a&gt;问答&lt;/a&gt;<br>             &lt;/router-link&gt;<br>           &lt;/ul&gt;<br>           &lt;!-- / nav --&gt;<br>           &lt;ul class=&quot;h-r-login&quot;&gt;<br>             &lt;li id=&quot;no-login&quot;&gt;<br>               &lt;a href=&quot;/sing_in&quot; title=&quot;登录&quot;&gt;<br>                 &lt;em class=&quot;icon18 login-icon&quot;&gt;&amp;nbsp;&lt;/em&gt;<br>                 &lt;span class=&quot;vam ml5&quot;&gt;登录&lt;/span&gt;<br>               &lt;/a&gt;<br>               |<br>               &lt;a href=&quot;/sign_up&quot; title=&quot;注册&quot;&gt;<br>                 &lt;span class=&quot;vam ml5&quot;&gt;注册&lt;/span&gt;<br>               &lt;/a&gt;<br>             &lt;/li&gt;<br>             &lt;li class=&quot;mr10 undis&quot; id=&quot;is-login-one&quot;&gt;<br>               &lt;a href=&quot;#&quot; title=&quot;消息&quot; id=&quot;headerMsgCountId&quot;&gt;<br>                 &lt;em class=&quot;icon18 news-icon&quot;&gt;&amp;nbsp;&lt;/em&gt;<br>               &lt;/a&gt;<br>               &lt;q class=&quot;red-point&quot; style=&quot;display: none&quot;&gt;&amp;nbsp;&lt;/q&gt;<br>             &lt;/li&gt;<br>             &lt;li class=&quot;h-r-user undis&quot; id=&quot;is-login-two&quot;&gt;<br>               &lt;a href=&quot;#&quot; title&gt;<br>                 &lt;img<br>                   src=&quot;~/assets/img/avatar-boy.gif&quot;<br>                   width=&quot;30&quot;<br>                   height=&quot;30&quot;<br>                   class=&quot;vam picImg&quot;<br>                   alt<br>                 &gt;<br>                 &lt;span class=&quot;vam disIb&quot; id=&quot;userName&quot;&gt;&lt;/span&gt;<br>               &lt;/a&gt;<br>               &lt;a href=&quot;javascript:void(0)&quot; title=&quot;退出&quot; onclick=&quot;exit();&quot; class=&quot;ml5&quot;&gt;退出&lt;/a&gt;<br>             &lt;/li&gt;<br>             &lt;!-- /未登录显示第1 li；登录后显示第2，3 li --&gt;<br>           &lt;/ul&gt;<br>           &lt;aside class=&quot;h-r-search&quot;&gt;<br>             &lt;form action=&quot;#&quot; method=&quot;post&quot;&gt;<br>               &lt;label class=&quot;h-r-s-box&quot;&gt;<br>                 &lt;input type=&quot;text&quot; placeholder=&quot;输入你想学的课程&quot; name=&quot;queryCourse.courseName&quot; value&gt;<br>                 &lt;button type=&quot;submit&quot; class=&quot;s-btn&quot;&gt;<br>                   &lt;em class=&quot;icon18&quot;&gt;&amp;nbsp;&lt;/em&gt;<br>                 &lt;/button&gt;<br>               &lt;/label&gt;<br>             &lt;/form&gt;<br>           &lt;/aside&gt;<br>         &lt;/div&gt;<br>         &lt;aside class=&quot;mw-nav-btn&quot;&gt;<br>           &lt;div class=&quot;mw-nav-icon&quot;&gt;&lt;/div&gt;<br>         &lt;/aside&gt;<br>         &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>       &lt;/section&gt;<br>     &lt;/header&gt;<br>     &lt;!-- /公共头引入 --&gt;<br>     &lt;nuxt/&gt;<br>     &lt;!-- 公共底引入 --&gt;<br>     &lt;footer id=&quot;footer&quot;&gt;<br>       &lt;section class=&quot;container&quot;&gt;<br>         &lt;div class&gt;<br>           &lt;h4 class=&quot;hLh30&quot;&gt;<br>             &lt;span class=&quot;fsize18 f-fM c-999&quot;&gt;友情链接&lt;/span&gt;<br>           &lt;/h4&gt;<br>           &lt;ul class=&quot;of flink-list&quot;&gt;<br>             &lt;li&gt;<br>               &lt;a href=&quot;http://www.atguigu.com/&quot; title=&quot;尚硅谷&quot; target=&quot;_blank&quot;&gt;尚硅谷&lt;/a&gt;<br>             &lt;/li&gt;<br>           &lt;/ul&gt;<br>           &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>         &lt;/div&gt;<br>         &lt;div class=&quot;b-foot&quot;&gt;<br>           &lt;section class=&quot;fl col-7&quot;&gt;<br>             &lt;section class=&quot;mr20&quot;&gt;<br>               &lt;section class=&quot;b-f-link&quot;&gt;<br>                 &lt;a href=&quot;#&quot; title=&quot;关于我们&quot; target=&quot;_blank&quot;&gt;关于我们&lt;/a&gt;|<br>                 &lt;a href=&quot;#&quot; title=&quot;联系我们&quot; target=&quot;_blank&quot;&gt;联系我们&lt;/a&gt;|<br>                 &lt;a href=&quot;#&quot; title=&quot;帮助中心&quot; target=&quot;_blank&quot;&gt;帮助中心&lt;/a&gt;|<br>                 &lt;a href=&quot;#&quot; title=&quot;资源下载&quot; target=&quot;_blank&quot;&gt;资源下载&lt;/a&gt;|<br>                 &lt;span&gt;服务热线：010-56253825(北京) 0755-85293825(深圳)&lt;/span&gt;<br>                 &lt;span&gt;Email：info@atguigu.com&lt;/span&gt;<br>               &lt;/section&gt;<br>               &lt;section class=&quot;b-f-link mt10&quot;&gt;<br>                 &lt;span&gt;©2018课程版权均归谷粒学院所有 京ICP备17055252号&lt;/span&gt;<br>               &lt;/section&gt;<br>             &lt;/section&gt;<br>           &lt;/section&gt;<br>           &lt;aside class=&quot;fl col-3 tac mt15&quot;&gt;<br>             &lt;section class=&quot;gf-tx&quot;&gt;<br>               &lt;span&gt;<br>                 &lt;img src=&quot;~/assets/img/wx-icon.png&quot; alt&gt;<br>               &lt;/span&gt;<br>             &lt;/section&gt;<br>             &lt;section class=&quot;gf-tx&quot;&gt;<br>               &lt;span&gt;<br>                 &lt;img src=&quot;~/assets/img/wb-icon.png&quot; alt&gt;<br>               &lt;/span&gt;<br>             &lt;/section&gt;<br>           &lt;/aside&gt;<br>           &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>         &lt;/div&gt;<br>       &lt;/section&gt;<br>     &lt;/footer&gt;<br>     &lt;!-- /公共底引入 --&gt;<br>   &lt;/div&gt;<br> &lt;/template&gt;<br> &lt;script&gt;<br> import &quot;~/assets/css/reset.css&quot;;<br> import &quot;~/assets/css/theme.css&quot;;<br> import &quot;~/assets/css/global.css&quot;;<br> import &quot;~/assets/css/web.css&quot;;<br> export default &#123;&#125;;<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>

## 定义首页面

（不包含幻灯片）

修改pages/index.vue：

修改了原始文件中的资源路径为~/assets/

内容如下：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>   &lt;div&gt;<br>      &lt;!-- 幻灯片 开始 --&gt;<br>      <br>      &lt;!-- 幻灯片 结束 --&gt;<br><br>      &lt;div id=&quot;aCoursesList&quot;&gt;<br>       &lt;!-- 网校课程 开始 --&gt;<br>       &lt;div&gt;<br>         &lt;section class=&quot;container&quot;&gt;<br>           &lt;header class=&quot;comm-title&quot;&gt;<br>             &lt;h2 class=&quot;tac&quot;&gt;<br>               &lt;span class=&quot;c-333&quot;&gt;热门课程&lt;/span&gt;<br>             &lt;/h2&gt;<br>           &lt;/header&gt;<br>           &lt;div&gt;<br>             &lt;article class=&quot;comm-course-list&quot;&gt;<br>               &lt;ul class=&quot;of&quot; id=&quot;bna&quot;&gt;<br>                 &lt;li&gt;<br>                   &lt;div class=&quot;cc-l-wrap&quot;&gt;<br>                     &lt;section class=&quot;course-img&quot;&gt;<br>                       &lt;img<br>                         src=&quot;~/assets/photo/course/1442295592705.jpg&quot;<br>                         class=&quot;img-responsive&quot;<br>                         alt=&quot;听力口语&quot;<br>                       &gt;<br>                       &lt;div class=&quot;cc-mask&quot;&gt;<br>                         &lt;a href=&quot;#&quot; title=&quot;开始学习&quot; class=&quot;comm-btn c-btn-1&quot;&gt;开始学习&lt;/a&gt;<br>                       &lt;/div&gt;<br>                     &lt;/section&gt;<br>                     &lt;h3 class=&quot;hLh30 txtOf mt10&quot;&gt;<br>                       &lt;a href=&quot;#&quot; title=&quot;听力口语&quot; class=&quot;course-title fsize18 c-333&quot;&gt;听力口语&lt;/a&gt;<br>                     &lt;/h3&gt;<br>                     &lt;section class=&quot;mt10 hLh20 of&quot;&gt;<br>                       &lt;span class=&quot;fr jgTag bg-green&quot;&gt;<br>                         &lt;i class=&quot;c-fff fsize12 f-fA&quot;&gt;免费&lt;/i&gt;<br>                       &lt;/span&gt;<br>                       &lt;span class=&quot;fl jgAttr c-ccc f-fA&quot;&gt;<br>                         &lt;i class=&quot;c-999 f-fA&quot;&gt;9634人学习&lt;/i&gt;<br>                         |<br>                         &lt;i class=&quot;c-999 f-fA&quot;&gt;9634评论&lt;/i&gt;<br>                       &lt;/span&gt;<br>                     &lt;/section&gt;<br>                   &lt;/div&gt;<br>                 &lt;/li&gt;<br>                 &lt;li&gt;<br>                   &lt;div class=&quot;cc-l-wrap&quot;&gt;<br>                     &lt;section class=&quot;course-img&quot;&gt;<br>                       &lt;img<br>                         src=&quot;~/assets/photo/course/1442295581911.jpg&quot;<br>                         class=&quot;img-responsive&quot;<br>                         alt=&quot;Java精品课程&quot;<br>                       &gt;<br>                       &lt;div class=&quot;cc-mask&quot;&gt;<br>                         &lt;a href=&quot;#&quot; title=&quot;开始学习&quot; class=&quot;comm-btn c-btn-1&quot;&gt;开始学习&lt;/a&gt;<br>                       &lt;/div&gt;<br>                     &lt;/section&gt;<br>                     &lt;h3 class=&quot;hLh30 txtOf mt10&quot;&gt;<br>                       &lt;a href=&quot;#&quot; title=&quot;Java精品课程&quot; class=&quot;course-title fsize18 c-333&quot;&gt;Java精品课程&lt;/a&gt;<br>                     &lt;/h3&gt;<br>                     &lt;section class=&quot;mt10 hLh20 of&quot;&gt;<br>                       &lt;span class=&quot;fr jgTag bg-green&quot;&gt;<br>                         &lt;i class=&quot;c-fff fsize12 f-fA&quot;&gt;免费&lt;/i&gt;<br>                       &lt;/span&gt;<br>                       &lt;span class=&quot;fl jgAttr c-ccc f-fA&quot;&gt;<br>                         &lt;i class=&quot;c-999 f-fA&quot;&gt;501人学习&lt;/i&gt;<br>                         |<br>                         &lt;i class=&quot;c-999 f-fA&quot;&gt;501评论&lt;/i&gt;<br>                       &lt;/span&gt;<br>                     &lt;/section&gt;<br>                   &lt;/div&gt;<br>                 &lt;/li&gt;<br>                 &lt;li&gt;<br>                   &lt;div class=&quot;cc-l-wrap&quot;&gt;<br>                     &lt;section class=&quot;course-img&quot;&gt;<br>                       &lt;img<br>                         src=&quot;~/assets/photo/course/1442295604295.jpg&quot;<br>                         class=&quot;img-responsive&quot;<br>                         alt=&quot;C4D零基础&quot;<br>                       &gt;<br>                       &lt;div class=&quot;cc-mask&quot;&gt;<br>                         &lt;a href=&quot;#&quot; title=&quot;开始学习&quot; class=&quot;comm-btn c-btn-1&quot;&gt;开始学习&lt;/a&gt;<br>                       &lt;/div&gt;<br>                     &lt;/section&gt;<br>                     &lt;h3 class=&quot;hLh30 txtOf mt10&quot;&gt;<br>                       &lt;a href=&quot;#&quot; title=&quot;C4D零基础&quot; class=&quot;course-title fsize18 c-333&quot;&gt;C4D零基础&lt;/a&gt;<br>                     &lt;/h3&gt;<br>                     &lt;section class=&quot;mt10 hLh20 of&quot;&gt;<br>                       &lt;span class=&quot;fr jgTag bg-green&quot;&gt;<br>                         &lt;i class=&quot;c-fff fsize12 f-fA&quot;&gt;免费&lt;/i&gt;<br>                       &lt;/span&gt;<br>                       &lt;span class=&quot;fl jgAttr c-ccc f-fA&quot;&gt;<br>                         &lt;i class=&quot;c-999 f-fA&quot;&gt;300人学习&lt;/i&gt;<br>                         |<br>                         &lt;i class=&quot;c-999 f-fA&quot;&gt;300评论&lt;/i&gt;<br>                       &lt;/span&gt;<br>                     &lt;/section&gt;<br>                   &lt;/div&gt;<br>                 &lt;/li&gt;<br>                 &lt;li&gt;<br>                   &lt;div class=&quot;cc-l-wrap&quot;&gt;<br>                     &lt;section class=&quot;course-img&quot;&gt;<br>                       &lt;img<br>                         src=&quot;~/assets/photo/course/1442302831779.jpg&quot;<br>                         class=&quot;img-responsive&quot;<br>                         alt=&quot;数学给宝宝带来的兴趣&quot;<br>                       &gt;<br>                       &lt;div class=&quot;cc-mask&quot;&gt;<br>                         &lt;a href=&quot;#&quot; title=&quot;开始学习&quot; class=&quot;comm-btn c-btn-1&quot;&gt;开始学习&lt;/a&gt;<br>                       &lt;/div&gt;<br>                     &lt;/section&gt;<br>                     &lt;h3 class=&quot;hLh30 txtOf mt10&quot;&gt;<br>                       &lt;a href=&quot;#&quot; title=&quot;数学给宝宝带来的兴趣&quot; class=&quot;course-title fsize18 c-333&quot;&gt;数学给宝宝带来的兴趣&lt;/a&gt;<br>                     &lt;/h3&gt;<br>                     &lt;section class=&quot;mt10 hLh20 of&quot;&gt;<br>                       &lt;span class=&quot;fr jgTag bg-green&quot;&gt;<br>                         &lt;i class=&quot;c-fff fsize12 f-fA&quot;&gt;免费&lt;/i&gt;<br>                       &lt;/span&gt;<br>                       &lt;span class=&quot;fl jgAttr c-ccc f-fA&quot;&gt;<br>                         &lt;i class=&quot;c-999 f-fA&quot;&gt;256人学习&lt;/i&gt;<br>                         |<br>                         &lt;i class=&quot;c-999 f-fA&quot;&gt;256评论&lt;/i&gt;<br>                       &lt;/span&gt;<br>                     &lt;/section&gt;<br>                   &lt;/div&gt;<br>                 &lt;/li&gt;<br>                 &lt;li&gt;<br>                   &lt;div class=&quot;cc-l-wrap&quot;&gt;<br>                     &lt;section class=&quot;course-img&quot;&gt;<br>                       &lt;img<br>                         src=&quot;~/assets/photo/course/1442295455437.jpg&quot;<br>                         class=&quot;img-responsive&quot;<br>                         alt=&quot;零基础入门学习Python课程学习&quot;<br>                       &gt;<br>                       &lt;div class=&quot;cc-mask&quot;&gt;<br>                         &lt;a href=&quot;#&quot; title=&quot;开始学习&quot; class=&quot;comm-btn c-btn-1&quot;&gt;开始学习&lt;/a&gt;<br>                       &lt;/div&gt;<br>                     &lt;/section&gt;<br>                     &lt;h3 class=&quot;hLh30 txtOf mt10&quot;&gt;<br>                       &lt;a<br>                         href=&quot;#&quot;<br>                         title=&quot;零基础入门学习Python课程学习&quot;<br>                         class=&quot;course-title fsize18 c-333&quot;<br>                       &gt;零基础入门学习Python课程学习&lt;/a&gt;<br>                     &lt;/h3&gt;<br>                     &lt;section class=&quot;mt10 hLh20 of&quot;&gt;<br>                       &lt;span class=&quot;fr jgTag bg-green&quot;&gt;<br>                         &lt;i class=&quot;c-fff fsize12 f-fA&quot;&gt;免费&lt;/i&gt;<br>                       &lt;/span&gt;<br>                       &lt;span class=&quot;fl jgAttr c-ccc f-fA&quot;&gt;<br>                         &lt;i class=&quot;c-999 f-fA&quot;&gt;137人学习&lt;/i&gt;<br>                         |<br>                         &lt;i class=&quot;c-999 f-fA&quot;&gt;137评论&lt;/i&gt;<br>                       &lt;/span&gt;<br>                     &lt;/section&gt;<br>                   &lt;/div&gt;<br>                 &lt;/li&gt;<br>                 &lt;li&gt;<br>                   &lt;div class=&quot;cc-l-wrap&quot;&gt;<br>                     &lt;section class=&quot;course-img&quot;&gt;<br>                       &lt;img<br>                         src=&quot;~/assets/photo/course/1442295570359.jpg&quot;<br>                         class=&quot;img-responsive&quot;<br>                         alt=&quot;MySql从入门到精通&quot;<br>                       &gt;<br>                       &lt;div class=&quot;cc-mask&quot;&gt;<br>                         &lt;a href=&quot;#&quot; title=&quot;开始学习&quot; class=&quot;comm-btn c-btn-1&quot;&gt;开始学习&lt;/a&gt;<br>                       &lt;/div&gt;<br>                     &lt;/section&gt;<br>                     &lt;h3 class=&quot;hLh30 txtOf mt10&quot;&gt;<br>                       &lt;a href=&quot;#&quot; title=&quot;MySql从入门到精通&quot; class=&quot;course-title fsize18 c-333&quot;&gt;MySql从入门到精通&lt;/a&gt;<br>                     &lt;/h3&gt;<br>                     &lt;section class=&quot;mt10 hLh20 of&quot;&gt;<br>                       &lt;span class=&quot;fr jgTag bg-green&quot;&gt;<br>                         &lt;i class=&quot;c-fff fsize12 f-fA&quot;&gt;免费&lt;/i&gt;<br>                       &lt;/span&gt;<br>                       &lt;span class=&quot;fl jgAttr c-ccc f-fA&quot;&gt;<br>                         &lt;i class=&quot;c-999 f-fA&quot;&gt;125人学习&lt;/i&gt;<br>                         |<br>                         &lt;i class=&quot;c-999 f-fA&quot;&gt;125评论&lt;/i&gt;<br>                       &lt;/span&gt;<br>                     &lt;/section&gt;<br>                   &lt;/div&gt;<br>                 &lt;/li&gt;<br>                 &lt;li&gt;<br>                   &lt;div class=&quot;cc-l-wrap&quot;&gt;<br>                     &lt;section class=&quot;course-img&quot;&gt;<br>                       &lt;img<br>                         src=&quot;~/assets/photo/course/1442302852837.jpg&quot;<br>                         class=&quot;img-responsive&quot;<br>                         alt=&quot;搜索引擎优化技术&quot;<br>                       &gt;<br>                       &lt;div class=&quot;cc-mask&quot;&gt;<br>                         &lt;a href=&quot;#&quot; title=&quot;开始学习&quot; class=&quot;comm-btn c-btn-1&quot;&gt;开始学习&lt;/a&gt;<br>                       &lt;/div&gt;<br>                     &lt;/section&gt;<br>                     &lt;h3 class=&quot;hLh30 txtOf mt10&quot;&gt;<br>                       &lt;a href=&quot;#&quot; title=&quot;搜索引擎优化技术&quot; class=&quot;course-title fsize18 c-333&quot;&gt;搜索引擎优化技术&lt;/a&gt;<br>                     &lt;/h3&gt;<br>                     &lt;section class=&quot;mt10 hLh20 of&quot;&gt;<br>                       &lt;span class=&quot;fr jgTag bg-green&quot;&gt;<br>                         &lt;i class=&quot;c-fff fsize12 f-fA&quot;&gt;免费&lt;/i&gt;<br>                       &lt;/span&gt;<br>                       &lt;span class=&quot;fl jgAttr c-ccc f-fA&quot;&gt;<br>                         &lt;i class=&quot;c-999 f-fA&quot;&gt;123人学习&lt;/i&gt;<br>                         |<br>                         &lt;i class=&quot;c-999 f-fA&quot;&gt;123评论&lt;/i&gt;<br>                       &lt;/span&gt;<br>                     &lt;/section&gt;<br>                   &lt;/div&gt;<br>                 &lt;/li&gt;<br>                 &lt;li&gt;<br>                   &lt;div class=&quot;cc-l-wrap&quot;&gt;<br>                     &lt;section class=&quot;course-img&quot;&gt;<br>                       &lt;img<br>                         src=&quot;~/assets/photo/course/1442295379715.jpg&quot;<br>                         class=&quot;img-responsive&quot;<br>                         alt=&quot;20世纪西方音乐&quot;<br>                       &gt;<br>                       &lt;div class=&quot;cc-mask&quot;&gt;<br>                         &lt;a href=&quot;#&quot; title=&quot;开始学习&quot; class=&quot;comm-btn c-btn-1&quot;&gt;开始学习&lt;/a&gt;<br>                       &lt;/div&gt;<br>                     &lt;/section&gt;<br>                     &lt;h3 class=&quot;hLh30 txtOf mt10&quot;&gt;<br>                       &lt;a href=&quot;#&quot; title=&quot;20世纪西方音乐&quot; class=&quot;course-title fsize18 c-333&quot;&gt;20世纪西方音乐&lt;/a&gt;<br>                     &lt;/h3&gt;<br>                     &lt;section class=&quot;mt10 hLh20 of&quot;&gt;<br>                       &lt;span class=&quot;fr jgTag bg-green&quot;&gt;<br>                         &lt;i class=&quot;c-fff fsize12 f-fA&quot;&gt;免费&lt;/i&gt;<br>                       &lt;/span&gt;<br>                       &lt;span class=&quot;fl jgAttr c-ccc f-fA&quot;&gt;<br>                         &lt;i class=&quot;c-999 f-fA&quot;&gt;34人学习&lt;/i&gt;<br>                         |<br>                         &lt;i class=&quot;c-999 f-fA&quot;&gt;34评论&lt;/i&gt;<br>                       &lt;/span&gt;<br>                     &lt;/section&gt;<br>                   &lt;/div&gt;<br>                 &lt;/li&gt;<br>               &lt;/ul&gt;<br>               &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>             &lt;/article&gt;<br>             &lt;section class=&quot;tac pt20&quot;&gt;<br>               &lt;a href=&quot;#&quot; title=&quot;全部课程&quot; class=&quot;comm-btn c-btn-2&quot;&gt;全部课程&lt;/a&gt;<br>             &lt;/section&gt;<br>           &lt;/div&gt;<br>         &lt;/section&gt;<br>       &lt;/div&gt;<br>       &lt;!-- /网校课程 结束 --&gt;<br>       &lt;!-- 网校名师 开始 --&gt;<br>       &lt;div&gt;<br>         &lt;section class=&quot;container&quot;&gt;<br>           &lt;header class=&quot;comm-title&quot;&gt;<br>             &lt;h2 class=&quot;tac&quot;&gt;<br>               &lt;span class=&quot;c-333&quot;&gt;名师大咖&lt;/span&gt;<br>             &lt;/h2&gt;<br>           &lt;/header&gt;<br>           &lt;div&gt;<br>             &lt;article class=&quot;i-teacher-list&quot;&gt;<br>               &lt;ul class=&quot;of&quot;&gt;<br>                 &lt;li&gt;<br>                   &lt;section class=&quot;i-teach-wrap&quot;&gt;<br>                     &lt;div class=&quot;i-teach-pic&quot;&gt;<br>                       &lt;a href=&quot;/teacher/1&quot; title=&quot;姚晨&quot;&gt;<br>                         &lt;img alt=&quot;姚晨&quot; src=&quot;~/assets/photo/teacher/1442297885942.jpg&quot;&gt;<br>                       &lt;/a&gt;<br>                     &lt;/div&gt;<br>                     &lt;div class=&quot;mt10 hLh30 txtOf tac&quot;&gt;<br>                       &lt;a href=&quot;/teacher/1&quot; title=&quot;姚晨&quot; class=&quot;fsize18 c-666&quot;&gt;姚晨&lt;/a&gt;<br>                     &lt;/div&gt;<br>                     &lt;div class=&quot;hLh30 txtOf tac&quot;&gt;<br>                       &lt;span class=&quot;fsize14 c-999&quot;&gt;北京师范大学法学院副教授&lt;/span&gt;<br>                     &lt;/div&gt;<br>                     &lt;div class=&quot;mt15 i-q-txt&quot;&gt;<br>                       &lt;p<br>                         class=&quot;c-999 f-fA&quot;<br>                       &gt;北京师范大学法学院副教授、清华大学法学博士。自2004年至今已有9年的司法考试培训经验。长期从事司法考试辅导，深知命题规律，了解解题技巧。内容把握准确，授课重点明确，层次分明，调理清晰，将法条法理与案例有机融合，强调综合，深入浅出。&lt;/p&gt;<br>                     &lt;/div&gt;<br>                   &lt;/section&gt;<br>                 &lt;/li&gt;<br>                 &lt;li&gt;<br>                   &lt;section class=&quot;i-teach-wrap&quot;&gt;<br>                     &lt;div class=&quot;i-teach-pic&quot;&gt;<br>                       &lt;a href=&quot;/teacher/1&quot; title=&quot;谢娜&quot;&gt;<br>                         &lt;img alt=&quot;谢娜&quot; src=&quot;~/assets/photo/teacher/1442297919077.jpg&quot;&gt;<br>                       &lt;/a&gt;<br>                     &lt;/div&gt;<br>                     &lt;div class=&quot;mt10 hLh30 txtOf tac&quot;&gt;<br>                       &lt;a href=&quot;/teacher/1&quot; title=&quot;谢娜&quot; class=&quot;fsize18 c-666&quot;&gt;谢娜&lt;/a&gt;<br>                     &lt;/div&gt;<br>                     &lt;div class=&quot;hLh30 txtOf tac&quot;&gt;<br>                       &lt;span class=&quot;fsize14 c-999&quot;&gt;资深课程设计专家，专注10年AACTP美国培训协会认证导师&lt;/span&gt;<br>                     &lt;/div&gt;<br>                     &lt;div class=&quot;mt15 i-q-txt&quot;&gt;<br>                       &lt;p<br>                         class=&quot;c-999 f-fA&quot;<br>                       &gt;十年课程研发和培训咨询经验，曾任国企人力资源经理、大型外企培训经理，负责企业大学和培训体系搭建；曾任专业培训机构高级顾问、研发部总监，为包括广东移动、东莞移动、深圳移动、南方电网、工商银行、农业银行、民生银行、邮储银行、TCL集团、清华大学继续教育学院、中天路桥、广西扬翔股份等超过200家企业提供过培训与咨询服务，并担任近50个大型项目的总负责人。&lt;/p&gt;<br>                     &lt;/div&gt;<br>                   &lt;/section&gt;<br>                 &lt;/li&gt;<br>                 &lt;li&gt;<br>                   &lt;section class=&quot;i-teach-wrap&quot;&gt;<br>                     &lt;div class=&quot;i-teach-pic&quot;&gt;<br>                       &lt;a href=&quot;/teacher/1&quot; title=&quot;刘德华&quot;&gt;<br>                         &lt;img alt=&quot;刘德华&quot; src=&quot;~/assets/photo/teacher/1442297927029.jpg&quot;&gt;<br>                       &lt;/a&gt;<br>                     &lt;/div&gt;<br>                     &lt;div class=&quot;mt10 hLh30 txtOf tac&quot;&gt;<br>                       &lt;a href=&quot;/teacher/1&quot; title=&quot;刘德华&quot; class=&quot;fsize18 c-666&quot;&gt;刘德华&lt;/a&gt;<br>                     &lt;/div&gt;<br>                     &lt;div class=&quot;hLh30 txtOf tac&quot;&gt;<br>                       &lt;span class=&quot;fsize14 c-999&quot;&gt;上海师范大学法学院副教授&lt;/span&gt;<br>                     &lt;/div&gt;<br>                     &lt;div class=&quot;mt15 i-q-txt&quot;&gt;<br>                       &lt;p<br>                         class=&quot;c-999 f-fA&quot;<br>                       &gt;上海师范大学法学院副教授、清华大学法学博士。自2004年至今已有9年的司法考试培训经验。长期从事司法考试辅导，深知命题规律，了解解题技巧。内容把握准确，授课重点明确，层次分明，调理清晰，将法条法理与案例有机融合，强调综合，深入浅出。&lt;/p&gt;<br>                     &lt;/div&gt;<br>                   &lt;/section&gt;<br>                 &lt;/li&gt;<br>                 &lt;li&gt;<br>                   &lt;section class=&quot;i-teach-wrap&quot;&gt;<br>                     &lt;div class=&quot;i-teach-pic&quot;&gt;<br>                       &lt;a href=&quot;/teacher/1&quot; title=&quot;周润发&quot;&gt;<br>                         &lt;img alt=&quot;周润发&quot; src=&quot;~/assets/photo/teacher/1442297935589.jpg&quot;&gt;<br>                       &lt;/a&gt;<br>                     &lt;/div&gt;<br>                     &lt;div class=&quot;mt10 hLh30 txtOf tac&quot;&gt;<br>                       &lt;a href=&quot;/teacher/1&quot; title=&quot;周润发&quot; class=&quot;fsize18 c-666&quot;&gt;周润发&lt;/a&gt;<br>                     &lt;/div&gt;<br>                     &lt;div class=&quot;hLh30 txtOf tac&quot;&gt;<br>                       &lt;span class=&quot;fsize14 c-999&quot;&gt;考研政治辅导实战派专家，全国考研政治命题研究组核心成员。&lt;/span&gt;<br>                     &lt;/div&gt;<br>                     &lt;div class=&quot;mt15 i-q-txt&quot;&gt;<br>                       &lt;p<br>                         class=&quot;c-999 f-fA&quot;<br>                       &gt;法学博士，北京师范大学马克思主义学院副教授，专攻毛泽东思想概论、邓小平理论，长期从事考研辅导。出版著作两部，发表学术论文30余篇，主持国家社会科学基金项目和教育部重大课题子课题各一项，参与中央实施马克思主义理论研究和建设工程项目。&lt;/p&gt;<br>                     &lt;/div&gt;<br>                   &lt;/section&gt;<br>                 &lt;/li&gt;<br>               &lt;/ul&gt;<br>               &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>             &lt;/article&gt;<br>             &lt;section class=&quot;tac pt20&quot;&gt;<br>               &lt;a href=&quot;#&quot; title=&quot;全部讲师&quot; class=&quot;comm-btn c-btn-2&quot;&gt;全部讲师&lt;/a&gt;<br>             &lt;/section&gt;<br>           &lt;/div&gt;<br>         &lt;/section&gt;<br>       &lt;/div&gt;<br>       &lt;!-- /网校名师 结束 --&gt;<br>     &lt;/div&gt;<br>   &lt;/div&gt;<br> &lt;/template&gt;<br> &lt;script&gt;<br> export default &#123;<br> &#125;<br> &lt;/script&gt;<br>  &lt;script&gt;<br> export default &#123;<br>   data () &#123;<br>     return &#123;<br>       swiperOption: &#123;<br>         //配置分页<br>         pagination: &#123;<br>           el: &#x27;.swiper-pagination&#x27;//分页的dom节点<br>         &#125;,<br>         //配置导航<br>         navigation: &#123;<br>           nextEl: &#x27;.swiper-button-next&#x27;,//下一页dom节点<br>           prevEl: &#x27;.swiper-button-prev&#x27;//前一页dom节点<br>         &#125;<br>       &#125;<br>     &#125;<br>   &#125;<br> &#125;<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>

## 幻灯片插件

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;!-- 幻灯片 开始 --&gt;<br>      &lt;div v-swiper:mySwiper=&quot;swiperOption&quot;&gt;<br>          &lt;div class=&quot;swiper-wrapper&quot;&gt;<br>              &lt;div class=&quot;swiper-slide&quot; style=&quot;background: #040B1B;&quot;&gt;<br>                  &lt;a target=&quot;_blank&quot; href=&quot;/&quot;&gt;<br>                      &lt;img src=&quot;~/assets/photo/banner/1525939573202.jpg&quot; alt=&quot;首页banner&quot;&gt;<br>                  &lt;/a&gt;<br>              &lt;/div&gt;<br>              &lt;div class=&quot;swiper-slide&quot; style=&quot;background: #040B1B;&quot;&gt;<br>                  &lt;a target=&quot;_blank&quot; href=&quot;/&quot;&gt;<br>                      &lt;img src=&quot;~/assets/photo/banner/1525939573202.jpg&quot; alt=&quot;首页banner&quot;&gt;<br>                  &lt;/a&gt;<br>              &lt;/div&gt;<br>          &lt;/div&gt;<br>          &lt;div class=&quot;swiper-pagination swiper-pagination-white&quot;&gt;&lt;/div&gt;<br>          &lt;div class=&quot;swiper-button-prev swiper-button-white&quot; slot=&quot;button-prev&quot;&gt;&lt;/div&gt;<br>          &lt;div class=&quot;swiper-button-next swiper-button-white&quot; slot=&quot;button-next&quot;&gt;&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;!-- 幻灯片 结束 --&gt;<br><br></code></pre></td></tr></table></figure>

Script

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br> export default &#123;<br>   data () &#123;<br>     return &#123;<br>       swiperOption: &#123;<br>         //配置分页<br>         pagination: &#123;<br>           el: &#x27;.swiper-pagination&#x27;//分页的dom节点<br>         &#125;,<br>         //配置导航<br>         navigation: &#123;<br>           nextEl: &#x27;.swiper-button-next&#x27;,//下一页dom节点<br>           prevEl: &#x27;.swiper-button-prev&#x27;//前一页dom节点<br>         &#125;<br>       &#125;<br>     &#125;<br>   &#125;<br> &#125;<br> &lt;/script&gt;<br><br></code></pre></td></tr></table></figure>

## 启动项目报错解决方案

Could not compile template.......swiper\dist\css\swiper.css

<figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">P168报错:ERROR Could not <span class="hljs-keyword">compile</span> template.......swiper\dist\css\swiper.css<br><br>因为我们导入的`<span class="hljs-keyword">import</span> swiper<span class="hljs-regexp">/css/</span>swiper.css`在低版本中有，Swiper <span class="hljs-number">6.0</span>.<span class="hljs-number">0</span>或者更高版本就不是这个导入地址了，所以解决方案有两种：<br><br>方案一：<br>导入`<span class="hljs-keyword">import</span> swiper<span class="hljs-regexp">/swiper-bundle.css`， 同时删除`import swiper/</span>css/swiper.css`<br><br>方案二：<br>把安装的vue-awesome-swiper版本回退到低版本，这样就可以保留`<span class="hljs-keyword">import</span> swiper<span class="hljs-regexp">/css/</span>swiper.css`:<br>指令为: `npm i vue-awesome-swiper@<span class="hljs-number">3.1</span>.<span class="hljs-number">3</span> --save`<br><br>或者 将<span class="hljs-keyword">package</span>.js里面的<span class="hljs-keyword">dependencies</span>下的vue-awesome-swiper: ^<span class="hljs-number">4</span>.x.x改为<span class="hljs-number">3.1</span>.<span class="hljs-number">3</span>,然后npm install 在之后启动还会报一个错:<br><br>potentially fixable with the `--fix` option<br><br>解决办法:<br><br>找到 nuxt.config.js在extend (config, &#123; isDev, isClient &#125;) &#123;&#125;括号内最后面添加<span class="hljs-keyword">options</span>: &#123;<br><br>fix: <span class="hljs-keyword">true</span><br><br>&#125;<br><br>也就是:extend (config, &#123; isDev, isClient &#125;) &#123;<br><span class="hljs-keyword">if</span> (isDev &amp;&amp; isClient) &#123;<br>config.module.rules.<span class="hljs-keyword">push</span>(&#123;<br>enforce: pre,<br>test: <span class="hljs-regexp">/\.(js|vue)$/</span>,<br>loader: eslint-loader,<br><span class="hljs-keyword">exclude</span>: <span class="hljs-regexp">/(node_modules)/</span>,<br><span class="hljs-keyword">options</span>: &#123;<br>fix: <span class="hljs-keyword">true</span><br>&#125;<br>&#125;)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

# 整合课程和名师页面

## 课程列表页面

创建 pages/course/index.vue

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>   &lt;div id=&quot;aCoursesList&quot; class=&quot;bg-fa of&quot;&gt;<br>     &lt;!-- /课程列表 开始 --&gt;<br>     &lt;section class=&quot;container&quot;&gt;<br>       &lt;header class=&quot;comm-title&quot;&gt;<br>         &lt;h2 class=&quot;fl tac&quot;&gt;<br>           &lt;span class=&quot;c-333&quot;&gt;全部课程&lt;/span&gt;<br>         &lt;/h2&gt;<br>       &lt;/header&gt;<br>       &lt;section class=&quot;c-sort-box&quot;&gt;<br>         &lt;section class=&quot;c-s-dl&quot;&gt;<br>           &lt;dl&gt;<br>             &lt;dt&gt;<br>               &lt;span class=&quot;c-999 fsize14&quot;&gt;课程类别&lt;/span&gt;<br>             &lt;/dt&gt;<br>             &lt;dd class=&quot;c-s-dl-li&quot;&gt;<br>               &lt;ul class=&quot;clearfix&quot;&gt;<br>                 &lt;li&gt;<br>                   &lt;a title=&quot;全部&quot; href=&quot;#&quot;&gt;全部&lt;/a&gt;<br>                 &lt;/li&gt;<br>                 &lt;li&gt;<br>                   &lt;a title=&quot;数据库&quot; href=&quot;#&quot;&gt;数据库&lt;/a&gt;<br>                 &lt;/li&gt;<br>                 &lt;li class=&quot;current&quot;&gt;<br>                   &lt;a title=&quot;外语考试&quot; href=&quot;#&quot;&gt;外语考试&lt;/a&gt;<br>                 &lt;/li&gt;<br>                 &lt;li&gt;<br>                   &lt;a title=&quot;教师资格证&quot; href=&quot;#&quot;&gt;教师资格证&lt;/a&gt;<br>                 &lt;/li&gt;<br>                 &lt;li&gt;<br>                   &lt;a title=&quot;公务员&quot; href=&quot;#&quot;&gt;公务员&lt;/a&gt;<br>                 &lt;/li&gt;<br>                 &lt;li&gt;<br>                   &lt;a title=&quot;移动开发&quot; href=&quot;#&quot;&gt;移动开发&lt;/a&gt;<br>                 &lt;/li&gt;<br>                 &lt;li&gt;<br>                   &lt;a title=&quot;操作系统&quot; href=&quot;#&quot;&gt;操作系统&lt;/a&gt;<br>                 &lt;/li&gt;<br>               &lt;/ul&gt;<br>             &lt;/dd&gt;<br>           &lt;/dl&gt;<br>           &lt;dl&gt;<br>             &lt;dt&gt;<br>               &lt;span class=&quot;c-999 fsize14&quot;&gt;&lt;/span&gt;<br>             &lt;/dt&gt;<br>             &lt;dd class=&quot;c-s-dl-li&quot;&gt;<br>               &lt;ul class=&quot;clearfix&quot;&gt;<br>                 &lt;li&gt;<br>                   &lt;a title=&quot;职称英语&quot; href=&quot;#&quot;&gt;职称英语&lt;/a&gt;<br>                 &lt;/li&gt;<br>                 &lt;li&gt;<br>                   &lt;a title=&quot;英语四级&quot; href=&quot;#&quot;&gt;英语四级&lt;/a&gt;<br>                 &lt;/li&gt;<br>                 &lt;li&gt;<br>                   &lt;a title=&quot;英语六级&quot; href=&quot;#&quot;&gt;英语六级&lt;/a&gt;<br>                 &lt;/li&gt;<br>               &lt;/ul&gt;<br>             &lt;/dd&gt;<br>           &lt;/dl&gt;<br>           &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>         &lt;/section&gt;<br>         &lt;div class=&quot;js-wrap&quot;&gt;<br>           &lt;section class=&quot;fr&quot;&gt;<br>             &lt;span class=&quot;c-ccc&quot;&gt;<br>               &lt;i class=&quot;c-master f-fM&quot;&gt;1&lt;/i&gt;/<br>               &lt;i class=&quot;c-666 f-fM&quot;&gt;1&lt;/i&gt;<br>             &lt;/span&gt;<br>           &lt;/section&gt;<br>           &lt;section class=&quot;fl&quot;&gt;<br>             &lt;ol class=&quot;js-tap clearfix&quot;&gt;<br>               &lt;li&gt;<br>                 &lt;a title=&quot;关注度&quot; href=&quot;#&quot;&gt;关注度&lt;/a&gt;<br>               &lt;/li&gt;<br>               &lt;li&gt;<br>                 &lt;a title=&quot;最新&quot; href=&quot;#&quot;&gt;最新&lt;/a&gt;<br>               &lt;/li&gt;<br>               &lt;li class=&quot;current bg-orange&quot;&gt;<br>                 &lt;a title=&quot;价格&quot; href=&quot;#&quot;&gt;价格&amp;nbsp;<br>                   &lt;span&gt;↓&lt;/span&gt;<br>                 &lt;/a&gt;<br>               &lt;/li&gt;<br>             &lt;/ol&gt;<br>           &lt;/section&gt;<br>         &lt;/div&gt;<br>         &lt;div class=&quot;mt40&quot;&gt;<br>           &lt;!-- /无数据提示 开始--&gt;<br>           &lt;section class=&quot;no-data-wrap&quot;&gt;<br>             &lt;em class=&quot;icon30 no-data-ico&quot;&gt;&amp;nbsp;&lt;/em&gt;<br>             &lt;span class=&quot;c-666 fsize14 ml10 vam&quot;&gt;没有相关数据，小编正在努力整理中...&lt;/span&gt;<br>           &lt;/section&gt;<br>           &lt;!-- /无数据提示 结束--&gt;<br>           &lt;article class=&quot;comm-course-list&quot;&gt;<br>             &lt;ul class=&quot;of&quot; id=&quot;bna&quot;&gt;<br>               &lt;li&gt;<br>                 &lt;div class=&quot;cc-l-wrap&quot;&gt;<br>                   &lt;section class=&quot;course-img&quot;&gt;<br>                     &lt;img src=&quot;~/assets/photo/course/1442295592705.jpg&quot; class=&quot;img-responsive&quot; alt=&quot;听力口语&quot;&gt;<br>                     &lt;div class=&quot;cc-mask&quot;&gt;<br>                       &lt;a href=&quot;/course/1&quot; title=&quot;开始学习&quot; class=&quot;comm-btn c-btn-1&quot;&gt;开始学习&lt;/a&gt;<br>                     &lt;/div&gt;<br>                   &lt;/section&gt;<br>                   &lt;h3 class=&quot;hLh30 txtOf mt10&quot;&gt;<br>                     &lt;a href=&quot;/course/1&quot; title=&quot;听力口语&quot; class=&quot;course-title fsize18 c-333&quot;&gt;听力口语&lt;/a&gt;<br>                   &lt;/h3&gt;<br>                   &lt;section class=&quot;mt10 hLh20 of&quot;&gt;<br>                     &lt;span class=&quot;fr jgTag bg-green&quot;&gt;<br>                       &lt;i class=&quot;c-fff fsize12 f-fA&quot;&gt;免费&lt;/i&gt;<br>                     &lt;/span&gt;<br>                     &lt;span class=&quot;fl jgAttr c-ccc f-fA&quot;&gt;<br>                       &lt;i class=&quot;c-999 f-fA&quot;&gt;9634人学习&lt;/i&gt;<br>                       |<br>                       &lt;i class=&quot;c-999 f-fA&quot;&gt;9634评论&lt;/i&gt;<br>                     &lt;/span&gt;<br>                   &lt;/section&gt;<br>                 &lt;/div&gt;<br>               &lt;/li&gt;<br>               &lt;li&gt;<br>                 &lt;div class=&quot;cc-l-wrap&quot;&gt;<br>                   &lt;section class=&quot;course-img&quot;&gt;<br>                     &lt;img src=&quot;~/assets/photo/course/1442295581911.jpg&quot; class=&quot;img-responsive&quot; alt=&quot;Java精品课程&quot;&gt;<br>                     &lt;div class=&quot;cc-mask&quot;&gt;<br>                       &lt;a href=&quot;/course/1&quot; title=&quot;开始学习&quot; class=&quot;comm-btn c-btn-1&quot;&gt;开始学习&lt;/a&gt;<br>                     &lt;/div&gt;<br>                   &lt;/section&gt;<br>                   &lt;h3 class=&quot;hLh30 txtOf mt10&quot;&gt;<br>                     &lt;a href=&quot;/course/1&quot; title=&quot;Java精品课程&quot; class=&quot;course-title fsize18 c-333&quot;&gt;Java精品课程&lt;/a&gt;<br>                   &lt;/h3&gt;<br>                   &lt;section class=&quot;mt10 hLh20 of&quot;&gt;<br>                     &lt;span class=&quot;fr jgTag bg-green&quot;&gt;<br>                       &lt;i class=&quot;c-fff fsize12 f-fA&quot;&gt;免费&lt;/i&gt;<br>                     &lt;/span&gt;<br>                     &lt;span class=&quot;fl jgAttr c-ccc f-fA&quot;&gt;<br>                       &lt;i class=&quot;c-999 f-fA&quot;&gt;501人学习&lt;/i&gt;<br>                       |<br>                       &lt;i class=&quot;c-999 f-fA&quot;&gt;501评论&lt;/i&gt;<br>                     &lt;/span&gt;<br>                   &lt;/section&gt;<br>                 &lt;/div&gt;<br>               &lt;/li&gt;<br>               &lt;li&gt;<br>                 &lt;div class=&quot;cc-l-wrap&quot;&gt;<br>                   &lt;section class=&quot;course-img&quot;&gt;<br>                     &lt;img src=&quot;~/assets/photo/course/1442295604295.jpg&quot; class=&quot;img-responsive&quot; alt=&quot;C4D零基础&quot;&gt;<br>                     &lt;div class=&quot;cc-mask&quot;&gt;<br>                       &lt;a href=&quot;/course/1&quot; title=&quot;开始学习&quot; class=&quot;comm-btn c-btn-1&quot;&gt;开始学习&lt;/a&gt;<br>                     &lt;/div&gt;<br>                   &lt;/section&gt;<br>                   &lt;h3 class=&quot;hLh30 txtOf mt10&quot;&gt;<br>                     &lt;a href=&quot;/course/1&quot; title=&quot;C4D零基础&quot; class=&quot;course-title fsize18 c-333&quot;&gt;C4D零基础&lt;/a&gt;<br>                   &lt;/h3&gt;<br>                   &lt;section class=&quot;mt10 hLh20 of&quot;&gt;<br>                     &lt;span class=&quot;fr jgTag bg-green&quot;&gt;<br>                       &lt;i class=&quot;c-fff fsize12 f-fA&quot;&gt;免费&lt;/i&gt;<br>                     &lt;/span&gt;<br>                     &lt;span class=&quot;fl jgAttr c-ccc f-fA&quot;&gt;<br>                       &lt;i class=&quot;c-999 f-fA&quot;&gt;300人学习&lt;/i&gt;<br>                       |<br>                       &lt;i class=&quot;c-999 f-fA&quot;&gt;300评论&lt;/i&gt;<br>                     &lt;/span&gt;<br>                   &lt;/section&gt;<br>                 &lt;/div&gt;<br>               &lt;/li&gt;<br>               &lt;li&gt;<br>                 &lt;div class=&quot;cc-l-wrap&quot;&gt;<br>                   &lt;section class=&quot;course-img&quot;&gt;<br>                     &lt;img<br>                       src=&quot;~/assets/photo/course/1442302831779.jpg&quot;<br>                       class=&quot;img-responsive&quot;<br>                       alt=&quot;数学给宝宝带来的兴趣&quot;<br>                     &gt;<br>                     &lt;div class=&quot;cc-mask&quot;&gt;<br>                       &lt;a href=&quot;/course/1&quot; title=&quot;开始学习&quot; class=&quot;comm-btn c-btn-1&quot;&gt;开始学习&lt;/a&gt;<br>                     &lt;/div&gt;<br>                   &lt;/section&gt;<br>                   &lt;h3 class=&quot;hLh30 txtOf mt10&quot;&gt;<br>                     &lt;a href=&quot;/course/1&quot; title=&quot;数学给宝宝带来的兴趣&quot; class=&quot;course-title fsize18 c-333&quot;&gt;数学给宝宝带来的兴趣&lt;/a&gt;<br>                   &lt;/h3&gt;<br>                   &lt;section class=&quot;mt10 hLh20 of&quot;&gt;<br>                     &lt;span class=&quot;fr jgTag bg-green&quot;&gt;<br>                       &lt;i class=&quot;c-fff fsize12 f-fA&quot;&gt;免费&lt;/i&gt;<br>                     &lt;/span&gt;<br>                     &lt;span class=&quot;fl jgAttr c-ccc f-fA&quot;&gt;<br>                       &lt;i class=&quot;c-999 f-fA&quot;&gt;256人学习&lt;/i&gt;<br>                       |<br>                       &lt;i class=&quot;c-999 f-fA&quot;&gt;256评论&lt;/i&gt;<br>                     &lt;/span&gt;<br>                   &lt;/section&gt;<br>                 &lt;/div&gt;<br>               &lt;/li&gt;<br>               &lt;li&gt;<br>                 &lt;div class=&quot;cc-l-wrap&quot;&gt;<br>                   &lt;section class=&quot;course-img&quot;&gt;<br>                     &lt;img<br>                       src=&quot;~/assets/photo/course/1442295455437.jpg&quot;<br>                       class=&quot;img-responsive&quot;<br>                       alt=&quot;零基础入门学习Python课程学习&quot;<br>                     &gt;<br>                     &lt;div class=&quot;cc-mask&quot;&gt;<br>                       &lt;a href=&quot;/course/1&quot; title=&quot;开始学习&quot; class=&quot;comm-btn c-btn-1&quot;&gt;开始学习&lt;/a&gt;<br>                     &lt;/div&gt;<br>                   &lt;/section&gt;<br>                   &lt;h3 class=&quot;hLh30 txtOf mt10&quot;&gt;<br>                     &lt;a<br>                       href=&quot;/course/1&quot;<br>                       title=&quot;零基础入门学习Python课程学习&quot;<br>                       class=&quot;course-title fsize18 c-333&quot;<br>                     &gt;零基础入门学习Python课程学习&lt;/a&gt;<br>                   &lt;/h3&gt;<br>                   &lt;section class=&quot;mt10 hLh20 of&quot;&gt;<br>                     &lt;span class=&quot;fr jgTag bg-green&quot;&gt;<br>                       &lt;i class=&quot;c-fff fsize12 f-fA&quot;&gt;免费&lt;/i&gt;<br>                     &lt;/span&gt;<br>                     &lt;span class=&quot;fl jgAttr c-ccc f-fA&quot;&gt;<br>                       &lt;i class=&quot;c-999 f-fA&quot;&gt;137人学习&lt;/i&gt;<br>                       |<br>                       &lt;i class=&quot;c-999 f-fA&quot;&gt;137评论&lt;/i&gt;<br>                     &lt;/span&gt;<br>                   &lt;/section&gt;<br>                 &lt;/div&gt;<br>               &lt;/li&gt;<br>               &lt;li&gt;<br>                 &lt;div class=&quot;cc-l-wrap&quot;&gt;<br>                   &lt;section class=&quot;course-img&quot;&gt;<br>                     &lt;img<br>                       src=&quot;~/assets/photo/course/1442295570359.jpg&quot;<br>                       class=&quot;img-responsive&quot;<br>                       alt=&quot;MySql从入门到精通&quot;<br>                     &gt;<br>                     &lt;div class=&quot;cc-mask&quot;&gt;<br>                       &lt;a href=&quot;/course/1&quot; title=&quot;开始学习&quot; class=&quot;comm-btn c-btn-1&quot;&gt;开始学习&lt;/a&gt;<br>                     &lt;/div&gt;<br>                   &lt;/section&gt;<br>                   &lt;h3 class=&quot;hLh30 txtOf mt10&quot;&gt;<br>                     &lt;a href=&quot;/course/1&quot; title=&quot;MySql从入门到精通&quot; class=&quot;course-title fsize18 c-333&quot;&gt;MySql从入门到精通&lt;/a&gt;<br>                   &lt;/h3&gt;<br>                   &lt;section class=&quot;mt10 hLh20 of&quot;&gt;<br>                     &lt;span class=&quot;fr jgTag bg-green&quot;&gt;<br>                       &lt;i class=&quot;c-fff fsize12 f-fA&quot;&gt;免费&lt;/i&gt;<br>                     &lt;/span&gt;<br>                     &lt;span class=&quot;fl jgAttr c-ccc f-fA&quot;&gt;<br>                       &lt;i class=&quot;c-999 f-fA&quot;&gt;125人学习&lt;/i&gt;<br>                       |<br>                       &lt;i class=&quot;c-999 f-fA&quot;&gt;125评论&lt;/i&gt;<br>                     &lt;/span&gt;<br>                   &lt;/section&gt;<br>                 &lt;/div&gt;<br>               &lt;/li&gt;<br>               &lt;li&gt;<br>                 &lt;div class=&quot;cc-l-wrap&quot;&gt;<br>                   &lt;section class=&quot;course-img&quot;&gt;<br>                     &lt;img src=&quot;~/assets/photo/course/1442302852837.jpg&quot; class=&quot;img-responsive&quot; alt=&quot;搜索引擎优化技术&quot;&gt;<br>                     &lt;div class=&quot;cc-mask&quot;&gt;<br>                       &lt;a href=&quot;/course/1&quot; title=&quot;开始学习&quot; class=&quot;comm-btn c-btn-1&quot;&gt;开始学习&lt;/a&gt;<br>                     &lt;/div&gt;<br>                   &lt;/section&gt;<br>                   &lt;h3 class=&quot;hLh30 txtOf mt10&quot;&gt;<br>                     &lt;a href=&quot;/course/1&quot; title=&quot;搜索引擎优化技术&quot; class=&quot;course-title fsize18 c-333&quot;&gt;搜索引擎优化技术&lt;/a&gt;<br>                   &lt;/h3&gt;<br>                   &lt;section class=&quot;mt10 hLh20 of&quot;&gt;<br>                     &lt;span class=&quot;fr jgTag bg-green&quot;&gt;<br>                       &lt;i class=&quot;c-fff fsize12 f-fA&quot;&gt;免费&lt;/i&gt;<br>                     &lt;/span&gt;<br>                     &lt;span class=&quot;fl jgAttr c-ccc f-fA&quot;&gt;<br>                       &lt;i class=&quot;c-999 f-fA&quot;&gt;123人学习&lt;/i&gt;<br>                       |<br>                       &lt;i class=&quot;c-999 f-fA&quot;&gt;123评论&lt;/i&gt;<br>                     &lt;/span&gt;<br>                   &lt;/section&gt;<br>                 &lt;/div&gt;<br>               &lt;/li&gt;<br>               &lt;li&gt;<br>                 &lt;div class=&quot;cc-l-wrap&quot;&gt;<br>                   &lt;section class=&quot;course-img&quot;&gt;<br>                     &lt;img src=&quot;~/assets/photo/course/1442295379715.jpg&quot; class=&quot;img-responsive&quot; alt=&quot;20世纪西方音乐&quot;&gt;<br>                     &lt;div class=&quot;cc-mask&quot;&gt;<br>                       &lt;a href=&quot;/course/1&quot; title=&quot;开始学习&quot; class=&quot;comm-btn c-btn-1&quot;&gt;开始学习&lt;/a&gt;<br>                     &lt;/div&gt;<br>                   &lt;/section&gt;<br>                   &lt;h3 class=&quot;hLh30 txtOf mt10&quot;&gt;<br>                     &lt;a href=&quot;/course/1&quot; title=&quot;20世纪西方音乐&quot; class=&quot;course-title fsize18 c-333&quot;&gt;20世纪西方音乐&lt;/a&gt;<br>                   &lt;/h3&gt;<br>                   &lt;section class=&quot;mt10 hLh20 of&quot;&gt;<br>                     &lt;span class=&quot;fr jgTag bg-green&quot;&gt;<br>                       &lt;i class=&quot;c-fff fsize12 f-fA&quot;&gt;免费&lt;/i&gt;<br>                     &lt;/span&gt;<br>                     &lt;span class=&quot;fl jgAttr c-ccc f-fA&quot;&gt;<br>                       &lt;i class=&quot;c-999 f-fA&quot;&gt;34人学习&lt;/i&gt;<br>                       |<br>                       &lt;i class=&quot;c-999 f-fA&quot;&gt;34评论&lt;/i&gt;<br>                     &lt;/span&gt;<br>                   &lt;/section&gt;<br>                 &lt;/div&gt;<br>               &lt;/li&gt;<br>             &lt;/ul&gt;<br>             &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>           &lt;/article&gt;<br>         &lt;/div&gt;<br>         &lt;!-- 公共分页 开始 --&gt;<br>         &lt;div&gt;<br>           &lt;div class=&quot;paging&quot;&gt;<br>             &lt;a class=&quot;undisable&quot; title&gt;首&lt;/a&gt;<br>             &lt;a id=&quot;backpage&quot; class=&quot;undisable&quot; href=&quot;#&quot; title&gt;&amp;lt;&lt;/a&gt;<br>             &lt;a href=&quot;#&quot; title class=&quot;current undisable&quot;&gt;1&lt;/a&gt;<br>             &lt;a href=&quot;#&quot; title&gt;2&lt;/a&gt;<br>             &lt;a id=&quot;nextpage&quot; href=&quot;#&quot; title&gt;&amp;gt;&lt;/a&gt;<br>             &lt;a href=&quot;#&quot; title&gt;末&lt;/a&gt;<br>             &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>           &lt;/div&gt;<br>         &lt;/div&gt;<br>         &lt;!-- 公共分页 结束 --&gt;<br>       &lt;/section&gt;<br>     &lt;/section&gt;<br>     &lt;!-- /课程列表 结束 --&gt;<br>   &lt;/div&gt;<br> &lt;/template&gt;<br> &lt;script&gt;<br> export default &#123;&#125;;<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>

## 课程详情页面

创建 pages/course/_id.vue

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>   &lt;div id=&quot;aCoursesList&quot; class=&quot;bg-fa of&quot;&gt;<br>     &lt;!-- /课程详情 开始 --&gt;<br>     &lt;section class=&quot;container&quot;&gt;<br>       &lt;section class=&quot;path-wrap txtOf hLh30&quot;&gt;<br>         &lt;a href=&quot;#&quot; title class=&quot;c-999 fsize14&quot;&gt;首页&lt;/a&gt;<br>         \<br>         &lt;a href=&quot;#&quot; title class=&quot;c-999 fsize14&quot;&gt;课程列表&lt;/a&gt;<br>         \<br>         &lt;span class=&quot;c-333 fsize14&quot;&gt;Java精品课程&lt;/span&gt;<br>       &lt;/section&gt;<br>       &lt;div&gt;<br>         &lt;article class=&quot;c-v-pic-wrap&quot; style=&quot;height: 357px;&quot;&gt;<br>           &lt;section class=&quot;p-h-video-box&quot; id=&quot;videoPlay&quot;&gt;<br>             &lt;img src=&quot;~/assets/photo/course/1442295581911.jpg&quot; alt=&quot;Java精品课程&quot; class=&quot;dis c-v-pic&quot;&gt;<br>           &lt;/section&gt;<br>         &lt;/article&gt;<br>         &lt;aside class=&quot;c-attr-wrap&quot;&gt;<br>           &lt;section class=&quot;ml20 mr15&quot;&gt;<br>             &lt;h2 class=&quot;hLh30 txtOf mt15&quot;&gt;<br>               &lt;span class=&quot;c-fff fsize24&quot;&gt;Java精品课程&lt;/span&gt;<br>             &lt;/h2&gt;<br>             &lt;section class=&quot;c-attr-jg&quot;&gt;<br>               &lt;span class=&quot;c-fff&quot;&gt;价格：&lt;/span&gt;<br>               &lt;b class=&quot;c-yellow&quot; style=&quot;font-size:24px;&quot;&gt;￥0.00&lt;/b&gt;<br>             &lt;/section&gt;<br>             &lt;section class=&quot;c-attr-mt c-attr-undis&quot;&gt;<br>               &lt;span class=&quot;c-fff fsize14&quot;&gt;主讲： 唐嫣&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;<br>             &lt;/section&gt;<br>             &lt;section class=&quot;c-attr-mt of&quot;&gt;<br>               &lt;span class=&quot;ml10 vam&quot;&gt;<br>                 &lt;em class=&quot;icon18 scIcon&quot;&gt;&lt;/em&gt;<br>                 &lt;a class=&quot;c-fff vam&quot; title=&quot;收藏&quot; href=&quot;#&quot; &gt;收藏&lt;/a&gt;<br>               &lt;/span&gt;<br>             &lt;/section&gt;<br>             &lt;section class=&quot;c-attr-mt&quot;&gt;<br>               &lt;a href=&quot;#&quot; title=&quot;立即观看&quot; class=&quot;comm-btn c-btn-3&quot;&gt;立即观看&lt;/a&gt;<br>             &lt;/section&gt;<br>           &lt;/section&gt;<br>         &lt;/aside&gt;<br>         &lt;aside class=&quot;thr-attr-box&quot;&gt;<br>           &lt;ol class=&quot;thr-attr-ol clearfix&quot;&gt;<br>             &lt;li&gt;<br>               &lt;p&gt;&amp;nbsp;&lt;/p&gt;<br>               &lt;aside&gt;<br>                 &lt;span class=&quot;c-fff f-fM&quot;&gt;购买数&lt;/span&gt;<br>                 &lt;br&gt;<br>                 &lt;h6 class=&quot;c-fff f-fM mt10&quot;&gt;150&lt;/h6&gt;<br>               &lt;/aside&gt;<br>             &lt;/li&gt;<br>             &lt;li&gt;<br>               &lt;p&gt;&amp;nbsp;&lt;/p&gt;<br>               &lt;aside&gt;<br>                 &lt;span class=&quot;c-fff f-fM&quot;&gt;课时数&lt;/span&gt;<br>                 &lt;br&gt;<br>                 &lt;h6 class=&quot;c-fff f-fM mt10&quot;&gt;20&lt;/h6&gt;<br>               &lt;/aside&gt;<br>             &lt;/li&gt;<br>             &lt;li&gt;<br>               &lt;p&gt;&amp;nbsp;&lt;/p&gt;<br>               &lt;aside&gt;<br>                 &lt;span class=&quot;c-fff f-fM&quot;&gt;浏览数&lt;/span&gt;<br>                 &lt;br&gt;<br>                 &lt;h6 class=&quot;c-fff f-fM mt10&quot;&gt;501&lt;/h6&gt;<br>               &lt;/aside&gt;<br>             &lt;/li&gt;<br>           &lt;/ol&gt;<br>         &lt;/aside&gt;<br>         &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>       &lt;/div&gt;<br>       &lt;!-- /课程封面介绍 --&gt;<br>       &lt;div class=&quot;mt20 c-infor-box&quot;&gt;<br>         &lt;article class=&quot;fl col-7&quot;&gt;<br>           &lt;section class=&quot;mr30&quot;&gt;<br>             &lt;div class=&quot;i-box&quot;&gt;<br>               &lt;div&gt;<br>                 &lt;section id=&quot;c-i-tabTitle&quot; class=&quot;c-infor-tabTitle c-tab-title&quot;&gt;<br>                   &lt;a name=&quot;c-i&quot; class=&quot;current&quot; title=&quot;课程详情&quot;&gt;课程详情&lt;/a&gt;<br>                 &lt;/section&gt;<br>               &lt;/div&gt;<br>               &lt;article class=&quot;ml10 mr10 pt20&quot;&gt;<br>                 &lt;div&gt;<br>                   &lt;h6 class=&quot;c-i-content c-infor-title&quot;&gt;<br>                     &lt;span&gt;课程介绍&lt;/span&gt;<br>                   &lt;/h6&gt;<br>                   &lt;div class=&quot;course-txt-body-wrap&quot;&gt;<br>                     &lt;section class=&quot;course-txt-body&quot;&gt;<br>                       &lt;p&gt;<br>                         Java的发展历史，可追溯到1990年。当时Sun&amp;nbsp;Microsystem公司为了发展消费性电子产品而进行了一个名为Green的项目计划。该计划<br>                         负责人是James&amp;nbsp;Gosling。起初他以C++来写一种内嵌式软件，可以放在烤面包机或PAD等小型电子消费设备里，使得机器更聪明，具有人工智<br>                         能。但他发现C++并不适合完成这类任务！因为C++常会有使系统失效的程序错误，尤其是内存管理，需要程序设计师记录并管理内存资源。这给设计师们造成<br>                         极大的负担，并可能产生许多bugs。&amp;nbsp;<br>                         &lt;br&gt;为了解决所遇到的问题，Gosling决定要发展一种新的语言，来解决C++的潜在性危险问题，这个语言名叫Oak。Oak是一种可移植性语言，也就是一种平台独立语言，能够在各种芯片上运行。<br>                         &lt;br&gt;1994年，Oak技术日趋成熟，这时网络正开始蓬勃发展。Oak研发小组发现Oak很适合作为一种网络程序语言。因此发展了一个能与Oak配合的浏<br>                         览器--WebRunner，后更名为HotJava，它证明了Oak是一种能在网络上发展的程序语言。由于Oak商标已被注册，工程师们便想到以自己常<br>                         享用的咖啡(Java)来重新命名，并于Sun&amp;nbsp;World&amp;nbsp;95中被发表出来。<br>                       &lt;/p&gt;<br>                     &lt;/section&gt;<br>                   &lt;/div&gt;<br>                 &lt;/div&gt;<br>                 &lt;!-- /课程介绍 --&gt;<br>                 &lt;div class=&quot;mt50&quot;&gt;<br>                   &lt;h6 class=&quot;c-g-content c-infor-title&quot;&gt;<br>                     &lt;span&gt;课程大纲&lt;/span&gt;<br>                   &lt;/h6&gt;<br>                   &lt;section class=&quot;mt20&quot;&gt;<br>                     &lt;div class=&quot;lh-menu-wrap&quot;&gt;<br>                       &lt;menu id=&quot;lh-menu&quot; class=&quot;lh-menu mt10 mr10&quot;&gt;<br>                         &lt;ul&gt;<br>                           &lt;!-- 文件目录 --&gt;<br>                           &lt;li class=&quot;lh-menu-stair&quot;&gt;<br>                             &lt;a href=&quot;javascript: void(0)&quot; title=&quot;第一章&quot; class=&quot;current-1&quot;&gt;<br>                               &lt;em class=&quot;lh-menu-i-1 icon18 mr10&quot;&gt;&lt;/em&gt;第一章<br>                             &lt;/a&gt;<br>                             &lt;ol class=&quot;lh-menu-ol&quot; style=&quot;display: block;&quot;&gt;<br>                               &lt;li class=&quot;lh-menu-second ml30&quot;&gt;<br>                                 &lt;a href=&quot;#&quot; title&gt;<br>                                   &lt;span class=&quot;fr&quot;&gt;<br>                                     &lt;i class=&quot;free-icon vam mr10&quot;&gt;免费试听&lt;/i&gt;<br>                                   &lt;/span&gt;<br>                                   &lt;em class=&quot;lh-menu-i-2 icon16 mr5&quot;&gt;&amp;nbsp;&lt;/em&gt;第一节<br>                                 &lt;/a&gt;<br>                               &lt;/li&gt;<br>                               &lt;li class=&quot;lh-menu-second ml30&quot;&gt;<br>                                 &lt;a href=&quot;#&quot; title class=&quot;current-2&quot;&gt;<br>                                   &lt;em class=&quot;lh-menu-i-2 icon16 mr5&quot;&gt;&amp;nbsp;&lt;/em&gt;第二节<br>                                 &lt;/a&gt;<br>                               &lt;/li&gt;<br>                             &lt;/ol&gt;<br>                           &lt;/li&gt;<br>                         &lt;/ul&gt;<br>                       &lt;/menu&gt;<br>                     &lt;/div&gt;<br>                   &lt;/section&gt;<br>                 &lt;/div&gt;<br>                 &lt;!-- /课程大纲 --&gt;<br>               &lt;/article&gt;<br>             &lt;/div&gt;<br>           &lt;/section&gt;<br>         &lt;/article&gt;<br>         &lt;aside class=&quot;fl col-3&quot;&gt;<br>           &lt;div class=&quot;i-box&quot;&gt;<br>             &lt;div&gt;<br>               &lt;section class=&quot;c-infor-tabTitle c-tab-title&quot;&gt;<br>                 &lt;a title href=&quot;javascript:void(0)&quot;&gt;主讲讲师&lt;/a&gt;<br>               &lt;/section&gt;<br>               &lt;section class=&quot;stud-act-list&quot;&gt;<br>                 &lt;ul style=&quot;height: auto;&quot;&gt;<br>                   &lt;li&gt;<br>                     &lt;div class=&quot;u-face&quot;&gt;<br>                       &lt;a href=&quot;#&quot;&gt;<br>                         &lt;img src=&quot;~/assets/photo/teacher/1442297969808.jpg&quot; width=&quot;50&quot; height=&quot;50&quot; alt&gt;<br>                       &lt;/a&gt;<br>                     &lt;/div&gt;<br>                     &lt;section class=&quot;hLh30 txtOf&quot;&gt;<br>                       &lt;a class=&quot;c-333 fsize16 fl&quot; href=&quot;#&quot;&gt;周杰伦&lt;/a&gt;<br>                     &lt;/section&gt;<br>                     &lt;section class=&quot;hLh20 txtOf&quot;&gt;<br>                       &lt;span class=&quot;c-999&quot;&gt;毕业于北京大学数学系&lt;/span&gt;<br>                     &lt;/section&gt;<br>                   &lt;/li&gt;<br>                 &lt;/ul&gt;<br>               &lt;/section&gt;<br>             &lt;/div&gt;<br>           &lt;/div&gt;<br>         &lt;/aside&gt;<br>         &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>       &lt;/div&gt;<br>     &lt;/section&gt;<br>     &lt;!-- /课程详情 结束 --&gt;<br>   &lt;/div&gt;<br> &lt;/template&gt;<br> &lt;script&gt;<br> export default &#123;&#125;;<br> &lt;/script&gt;<br> <br></code></pre></td></tr></table></figure>



## 名师列表页面

创建 pages/teacher/index.vue

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>   &lt;div id=&quot;aCoursesList&quot; class=&quot;bg-fa of&quot;&gt;<br>     &lt;!-- 讲师列表 开始 --&gt;<br>     &lt;section class=&quot;container&quot;&gt;<br>       &lt;header class=&quot;comm-title all-teacher-title&quot;&gt;<br>         &lt;h2 class=&quot;fl tac&quot;&gt;<br>           &lt;span class=&quot;c-333&quot;&gt;全部讲师&lt;/span&gt;<br>         &lt;/h2&gt;<br>         &lt;section class=&quot;c-tab-title&quot;&gt;<br>           &lt;a id=&quot;subjectAll&quot; title=&quot;全部&quot; href=&quot;#&quot;&gt;全部&lt;/a&gt;<br>           &lt;!-- &lt;c:forEach var=&quot;subject&quot; items=&quot;$&#123;subjectList &#125;&quot;&gt;<br>                             &lt;a id=&quot;$&#123;subject.subjectId&#125;&quot; title=&quot;$&#123;subject.subjectName &#125;&quot; href=&quot;javascript:void(0)&quot; onclick=&quot;submitForm($&#123;subject.subjectId&#125;)&quot;&gt;$&#123;subject.subjectName &#125;&lt;/a&gt;<br>           &lt;/c:forEach&gt;--&gt;<br>         &lt;/section&gt;<br>       &lt;/header&gt;<br>       &lt;section class=&quot;c-sort-box unBr&quot;&gt;<br>         &lt;div&gt;<br>           &lt;!-- /无数据提示 开始--&gt;<br>           &lt;section class=&quot;no-data-wrap&quot;&gt;<br>             &lt;em class=&quot;icon30 no-data-ico&quot;&gt;&amp;nbsp;&lt;/em&gt;<br>             &lt;span class=&quot;c-666 fsize14 ml10 vam&quot;&gt;没有相关数据，小编正在努力整理中...&lt;/span&gt;<br>           &lt;/section&gt;<br>           &lt;!-- /无数据提示 结束--&gt;<br>           &lt;article class=&quot;i-teacher-list&quot;&gt;<br>             &lt;ul class=&quot;of&quot;&gt;<br>               &lt;li&gt;<br>                 &lt;section class=&quot;i-teach-wrap&quot;&gt;<br>                   &lt;div class=&quot;i-teach-pic&quot;&gt;<br>                     &lt;a href=&quot;/teacher/1&quot; title=&quot;姚晨&quot; target=&quot;_blank&quot;&gt;<br>                       &lt;img src=&quot;~/assets/photo/teacher/1442297885942.jpg&quot; alt&gt;<br>                     &lt;/a&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;mt10 hLh30 txtOf tac&quot;&gt;<br>                     &lt;a href=&quot;/teacher/1&quot; title=&quot;姚晨&quot; target=&quot;_blank&quot; class=&quot;fsize18 c-666&quot;&gt;姚晨&lt;/a&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;hLh30 txtOf tac&quot;&gt;<br>                     &lt;span class=&quot;fsize14 c-999&quot;&gt;北京师范大学法学院副教授、清华大学法学博士。自2004年至今已有9年的司法考试培训经验。长期从事司法考试辅导，深知命题规律，了解解题技巧。内容把握准确，授课重点明确，层次分明，调理清晰，将法条法理与案例有机融合，强调综合，深入浅出。&lt;/span&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;mt15 i-q-txt&quot;&gt;<br>                     &lt;p class=&quot;c-999 f-fA&quot;&gt;北京师范大学法学院副教授&lt;/p&gt;<br>                   &lt;/div&gt;<br>                 &lt;/section&gt;<br>               &lt;/li&gt;<br>               &lt;li&gt;<br>                 &lt;section class=&quot;i-teach-wrap&quot;&gt;<br>                   &lt;div class=&quot;i-teach-pic&quot;&gt;<br>                     &lt;a href=&quot;/teacher/1&quot; title=&quot;谢娜&quot; target=&quot;_blank&quot;&gt;<br>                       &lt;img src=&quot;~/assets/photo/teacher/1442297919077.jpg&quot; alt&gt;<br>                     &lt;/a&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;mt10 hLh30 txtOf tac&quot;&gt;<br>                     &lt;a href=&quot;/teacher/1&quot; title=&quot;谢娜&quot; target=&quot;_blank&quot; class=&quot;fsize18 c-666&quot;&gt;谢娜&lt;/a&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;hLh30 txtOf tac&quot;&gt;<br>                     &lt;span class=&quot;fsize14 c-999&quot;&gt;十年课程研发和培训咨询经验，曾任国企人力资源经理、大型外企培训经理，负责企业大学和培训体系搭建；曾任专业培训机构高级顾问、研发部总监，为包括广东移动、东莞移动、深圳移动、南方电网、工商银行、农业银行、民生银行、邮储银行、TCL集团、清华大学继续教育学院、中天路桥、广西扬翔股份等超过200家企业提供过培训与咨询服务，并担任近50个大型项目的总负责人。&lt;/span&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;mt15 i-q-txt&quot;&gt;<br>                     &lt;p class=&quot;c-999 f-fA&quot;&gt;资深课程设计专家，专注10年AACTP美国培训协会认证导师&lt;/p&gt;<br>                   &lt;/div&gt;<br>                 &lt;/section&gt;<br>               &lt;/li&gt;<br>               &lt;li&gt;<br>                 &lt;section class=&quot;i-teach-wrap&quot;&gt;<br>                   &lt;div class=&quot;i-teach-pic&quot;&gt;<br>                     &lt;a href=&quot;/teacher/1&quot; title=&quot;刘德华&quot; target=&quot;_blank&quot;&gt;<br>                       &lt;img src=&quot;~/assets/photo/teacher/1442297927029.jpg&quot; alt&gt;<br>                     &lt;/a&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;mt10 hLh30 txtOf tac&quot;&gt;<br>                     &lt;a href=&quot;/teacher/1&quot; title=&quot;刘德华&quot; target=&quot;_blank&quot; class=&quot;fsize18 c-666&quot;&gt;刘德华&lt;/a&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;hLh30 txtOf tac&quot;&gt;<br>                     &lt;span class=&quot;fsize14 c-999&quot;&gt;上海师范大学法学院副教授、清华大学法学博士。自2004年至今已有9年的司法考试培训经验。长期从事司法考试辅导，深知命题规律，了解解题技巧。内容把握准确，授课重点明确，层次分明，调理清晰，将法条法理与案例有机融合，强调综合，深入浅出。&lt;/span&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;mt15 i-q-txt&quot;&gt;<br>                     &lt;p class=&quot;c-999 f-fA&quot;&gt;上海师范大学法学院副教授&lt;/p&gt;<br>                   &lt;/div&gt;<br>                 &lt;/section&gt;<br>               &lt;/li&gt;<br>               &lt;li&gt;<br>                 &lt;section class=&quot;i-teach-wrap&quot;&gt;<br>                   &lt;div class=&quot;i-teach-pic&quot;&gt;<br>                     &lt;a href=&quot;/teacher/1&quot; title=&quot;周润发&quot; target=&quot;_blank&quot;&gt;<br>                       &lt;img src=&quot;~/assets/photo/teacher/1442297935589.jpg&quot; alt&gt;<br>                     &lt;/a&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;mt10 hLh30 txtOf tac&quot;&gt;<br>                     &lt;a href=&quot;/teacher/1&quot; title=&quot;周润发&quot; target=&quot;_blank&quot; class=&quot;fsize18 c-666&quot;&gt;周润发&lt;/a&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;hLh30 txtOf tac&quot;&gt;<br>                     &lt;span class=&quot;fsize14 c-999&quot;&gt;法学博士，北京师范大学马克思主义学院副教授，专攻毛泽东思想概论、邓小平理论，长期从事考研辅导。出版著作两部，发表学术论文30余篇，主持国家社会科学基金项目和教育部重大课题子课题各一项，参与中央实施马克思主义理论研究和建设工程项目。&lt;/span&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;mt15 i-q-txt&quot;&gt;<br>                     &lt;p class=&quot;c-999 f-fA&quot;&gt;考研政治辅导实战派专家，全国考研政治命题研究组核心成员。&lt;/p&gt;<br>                   &lt;/div&gt;<br>                 &lt;/section&gt;<br>               &lt;/li&gt;<br>               &lt;li&gt;<br>                 &lt;section class=&quot;i-teach-wrap&quot;&gt;<br>                   &lt;div class=&quot;i-teach-pic&quot;&gt;<br>                     &lt;a href=&quot;/teacher/1&quot; title=&quot;钟汉良&quot; target=&quot;_blank&quot;&gt;<br>                       &lt;img src=&quot;~/assets/photo/teacher/1442298121626.jpg&quot; alt&gt;<br>                     &lt;/a&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;mt10 hLh30 txtOf tac&quot;&gt;<br>                     &lt;a href=&quot;/teacher/1&quot; title=&quot;钟汉良&quot; target=&quot;_blank&quot; class=&quot;fsize18 c-666&quot;&gt;钟汉良&lt;/a&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;hLh30 txtOf tac&quot;&gt;<br>                     &lt;span class=&quot;fsize14 c-999&quot;&gt;具备深厚的数学思维功底、丰富的小学教育经验，授课风格生动活泼，擅长用形象生动的比喻帮助理解、简单易懂的语言讲解难题，深受学生喜欢&lt;/span&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;mt15 i-q-txt&quot;&gt;<br>                     &lt;p class=&quot;c-999 f-fA&quot;&gt;毕业于师范大学数学系，热爱教育事业，执教数学思维6年有余&lt;/p&gt;<br>                   &lt;/div&gt;<br>                 &lt;/section&gt;<br>               &lt;/li&gt;<br>               &lt;li&gt;<br>                 &lt;section class=&quot;i-teach-wrap&quot;&gt;<br>                   &lt;div class=&quot;i-teach-pic&quot;&gt;<br>                     &lt;a href=&quot;/teacher/1&quot; title=&quot;唐嫣&quot; target=&quot;_blank&quot;&gt;<br>                       &lt;img src=&quot;~/assets/photo/teacher/1442297957332.jpg&quot; alt&gt;<br>                     &lt;/a&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;mt10 hLh30 txtOf tac&quot;&gt;<br>                     &lt;a href=&quot;/teacher/1&quot; title=&quot;唐嫣&quot; target=&quot;_blank&quot; class=&quot;fsize18 c-666&quot;&gt;唐嫣&lt;/a&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;hLh30 txtOf tac&quot;&gt;<br>                     &lt;span class=&quot;fsize14 c-999&quot;&gt;中国科学院数学与系统科学研究院应用数学专业博士，研究方向为数字图像处理，中国工业与应用数学学会会员。参与全国教育科学“十五”规划重点课题“信息化进程中的教育技术发展研究”的子课题“基与课程改革的资源开发与应用”，以及全国“十五”科研规划全国重点项目“掌上型信息技术产品在教学中的运用和开发研究”的子课题“用技术学数学”。&lt;/span&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;mt15 i-q-txt&quot;&gt;<br>                     &lt;p class=&quot;c-999 f-fA&quot;&gt;中国人民大学附属中学数学一级教师&lt;/p&gt;<br>                   &lt;/div&gt;<br>                 &lt;/section&gt;<br>               &lt;/li&gt;<br>               &lt;li&gt;<br>                 &lt;section class=&quot;i-teach-wrap&quot;&gt;<br>                   &lt;div class=&quot;i-teach-pic&quot;&gt;<br>                     &lt;a href=&quot;/teacher/1&quot; title=&quot;周杰伦&quot; target=&quot;_blank&quot;&gt;<br>                       &lt;img src=&quot;~/assets/photo/teacher/1442297969808.jpg&quot; alt&gt;<br>                     &lt;/a&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;mt10 hLh30 txtOf tac&quot;&gt;<br>                     &lt;a href=&quot;/teacher/1&quot; title=&quot;周杰伦&quot; target=&quot;_blank&quot; class=&quot;fsize18 c-666&quot;&gt;周杰伦&lt;/a&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;hLh30 txtOf tac&quot;&gt;<br>                     &lt;span class=&quot;fsize14 c-999&quot;&gt;中教一级职称。讲课极具亲和力。&lt;/span&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;mt15 i-q-txt&quot;&gt;<br>                     &lt;p class=&quot;c-999 f-fA&quot;&gt;毕业于北京大学数学系&lt;/p&gt;<br>                   &lt;/div&gt;<br>                 &lt;/section&gt;<br>               &lt;/li&gt;<br>               &lt;li&gt;<br>                 &lt;section class=&quot;i-teach-wrap&quot;&gt;<br>                   &lt;div class=&quot;i-teach-pic&quot;&gt;<br>                     &lt;a href=&quot;/teacher/1&quot; title=&quot;陈伟霆&quot; target=&quot;_blank&quot;&gt;<br>                       &lt;img src=&quot;~/assets/photo/teacher/1442297977255.jpg&quot; alt&gt;<br>                     &lt;/a&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;mt10 hLh30 txtOf tac&quot;&gt;<br>                     &lt;a href=&quot;/teacher/1&quot; title=&quot;陈伟霆&quot; target=&quot;_blank&quot; class=&quot;fsize18 c-666&quot;&gt;陈伟霆&lt;/a&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;hLh30 txtOf tac&quot;&gt;<br>                     &lt;span<br>                       class=&quot;fsize14 c-999&quot;<br>                     &gt;政治学博士、管理学博士后，北京师范大学马克思主义学院副教授。多年来总结出了一套行之有效的应试技巧与答题方法，针对性和实用性极强，能帮助考生在轻松中应考，在激励的竞争中取得高分，脱颖而出。&lt;/span&gt;<br>                   &lt;/div&gt;<br>                   &lt;div class=&quot;mt15 i-q-txt&quot;&gt;<br>                     &lt;p class=&quot;c-999 f-fA&quot;&gt;长期从事考研政治课讲授和考研命题趋势与应试对策研究。考研辅导新锐派的代表。&lt;/p&gt;<br>                   &lt;/div&gt;<br>                 &lt;/section&gt;<br>               &lt;/li&gt;<br>             &lt;/ul&gt;<br>             &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>           &lt;/article&gt;<br>         &lt;/div&gt;<br>         &lt;!-- 公共分页 开始 --&gt;<br>         &lt;div&gt;<br>           &lt;div class=&quot;paging&quot;&gt;<br>             &lt;!-- undisable这个class是否存在，取决于数据属性hasPrevious --&gt;<br>             &lt;a href=&quot;#&quot; title=&quot;首页&quot;&gt;首&lt;/a&gt;<br>             &lt;a href=&quot;#&quot; title=&quot;前一页&quot;&gt;&amp;lt;&lt;/a&gt;<br>             &lt;a href=&quot;#&quot; title=&quot;第1页&quot; class=&quot;current undisable&quot;&gt;1&lt;/a&gt;<br>             &lt;a href=&quot;#&quot; title=&quot;第2页&quot;&gt;2&lt;/a&gt;<br>             &lt;a href=&quot;#&quot; title=&quot;后一页&quot;&gt;&amp;gt;&lt;/a&gt;<br>             &lt;a href=&quot;#&quot; title=&quot;末页&quot;&gt;末&lt;/a&gt;<br>             &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>           &lt;/div&gt;<br>         &lt;/div&gt;<br>         &lt;!-- 公共分页 结束 --&gt;<br>       &lt;/section&gt;<br>     &lt;/section&gt;<br>     &lt;!-- /讲师列表 结束 --&gt;<br>   &lt;/div&gt;<br> &lt;/template&gt;<br> &lt;script&gt;<br> export default &#123;&#125;;<br> &lt;/script&gt;<br><br></code></pre></td></tr></table></figure>

## 名师详情页面

创建 pages/teacher/_id.vue

修改资源路径为~/assets/

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>   &lt;div id=&quot;aCoursesList&quot; class=&quot;bg-fa of&quot;&gt;<br>     &lt;!-- 讲师介绍 开始 --&gt;<br>     &lt;section class=&quot;container&quot;&gt;<br>       &lt;header class=&quot;comm-title&quot;&gt;<br>         &lt;h2 class=&quot;fl tac&quot;&gt;<br>           &lt;span class=&quot;c-333&quot;&gt;讲师介绍&lt;/span&gt;<br>         &lt;/h2&gt;<br>       &lt;/header&gt;<br>       &lt;div class=&quot;t-infor-wrap&quot;&gt;<br>         &lt;!-- 讲师基本信息 --&gt;<br>         &lt;section class=&quot;fl t-infor-box c-desc-content&quot;&gt;<br>           &lt;div class=&quot;mt20 ml20&quot;&gt;<br>             &lt;section class=&quot;t-infor-pic&quot;&gt;<br>               &lt;img src=&quot;~/assets/photo/teacher/1442297885942.jpg&quot;&gt;<br>             &lt;/section&gt;<br>             &lt;h3 class=&quot;hLh30&quot;&gt;<br>               &lt;span class=&quot;fsize24 c-333&quot;&gt;姚晨&amp;nbsp;高级讲师&lt;/span&gt;<br>             &lt;/h3&gt;<br>             &lt;section class=&quot;mt10&quot;&gt;<br>               &lt;span class=&quot;t-tag-bg&quot;&gt;北京师范大学法学院副教授&lt;/span&gt;<br>             &lt;/section&gt;<br>             &lt;section class=&quot;t-infor-txt&quot;&gt;<br>               &lt;p<br>                 class=&quot;mt20&quot;<br>               &gt;北京师范大学法学院副教授、清华大学法学博士。自2004年至今已有9年的司法考试培训经验。长期从事司法考试辅导，深知命题规律，了解解题技巧。内容把握准确，授课重点明确，层次分明，调理清晰，将法条法理与案例有机融合，强调综合，深入浅出。&lt;/p&gt;<br>             &lt;/section&gt;<br>             &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>           &lt;/div&gt;<br>         &lt;/section&gt;<br>         &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>       &lt;/div&gt;<br>       &lt;section class=&quot;mt30&quot;&gt;<br>         &lt;div&gt;<br>           &lt;header class=&quot;comm-title all-teacher-title c-course-content&quot;&gt;<br>             &lt;h2 class=&quot;fl tac&quot;&gt;<br>               &lt;span class=&quot;c-333&quot;&gt;主讲课程&lt;/span&gt;<br>             &lt;/h2&gt;<br>             &lt;section class=&quot;c-tab-title&quot;&gt;<br>               &lt;a href=&quot;javascript: void(0)&quot;&gt;&amp;nbsp;&lt;/a&gt;<br>             &lt;/section&gt;<br>           &lt;/header&gt;<br>           &lt;!-- /无数据提示 开始--&gt;<br>           &lt;section class=&quot;no-data-wrap&quot;&gt;<br>             &lt;em class=&quot;icon30 no-data-ico&quot;&gt;&amp;nbsp;&lt;/em&gt;<br>             &lt;span class=&quot;c-666 fsize14 ml10 vam&quot;&gt;没有相关数据，小编正在努力整理中...&lt;/span&gt;<br>           &lt;/section&gt;<br>           &lt;!-- /无数据提示 结束--&gt;<br>           &lt;article class=&quot;comm-course-list&quot;&gt;<br>             &lt;ul class=&quot;of&quot;&gt;<br>               &lt;li&gt;<br>                 &lt;div class=&quot;cc-l-wrap&quot;&gt;<br>                   &lt;section class=&quot;course-img&quot;&gt;<br>                     &lt;img src=&quot;~/assets/photo/course/1442295455437.jpg&quot; class=&quot;img-responsive&quot; &gt;<br>                     &lt;div class=&quot;cc-mask&quot;&gt;<br>                       &lt;a href=&quot;#&quot; title=&quot;开始学习&quot; target=&quot;_blank&quot; class=&quot;comm-btn c-btn-1&quot;&gt;开始学习&lt;/a&gt;<br>                     &lt;/div&gt;<br>                   &lt;/section&gt;<br>                   &lt;h3 class=&quot;hLh30 txtOf mt10&quot;&gt;<br>                     &lt;a href=&quot;#&quot; title=&quot;零基础入门学习Python课程学习&quot; target=&quot;_blank&quot; class=&quot;course-title fsize18 c-333&quot;&gt;零基础入门学习Python课程学习&lt;/a&gt;<br>                   &lt;/h3&gt;<br>                 &lt;/div&gt;<br>               &lt;/li&gt;<br>               &lt;li&gt;<br>                 &lt;div class=&quot;cc-l-wrap&quot;&gt;<br>                   &lt;section class=&quot;course-img&quot;&gt;<br>                     &lt;img src=&quot;~/assets/photo/course/1442295472860.jpg&quot; class=&quot;img-responsive&quot; &gt;<br>                     &lt;div class=&quot;cc-mask&quot;&gt;<br>                       &lt;a href=&quot;#&quot; title=&quot;开始学习&quot; target=&quot;_blank&quot; class=&quot;comm-btn c-btn-1&quot;&gt;开始学习&lt;/a&gt;<br>                     &lt;/div&gt;<br>                   &lt;/section&gt;<br>                   &lt;h3 class=&quot;hLh30 txtOf mt10&quot;&gt;<br>                     &lt;a href=&quot;#&quot; title=&quot;影想力摄影小课堂&quot; target=&quot;_blank&quot; class=&quot;course-title fsize18 c-333&quot;&gt;影想力摄影小课堂&lt;/a&gt;<br>                   &lt;/h3&gt;<br>                 &lt;/div&gt;<br>               &lt;/li&gt;<br>               &lt;li&gt;<br>                 &lt;div class=&quot;cc-l-wrap&quot;&gt;<br>                   &lt;section class=&quot;course-img&quot;&gt;<br>                     &lt;img src=&quot;~/assets/photo/course/1442302831779.jpg&quot; class=&quot;img-responsive&quot; &gt;<br>                     &lt;div class=&quot;cc-mask&quot;&gt;<br>                       &lt;a href=&quot;#&quot; title=&quot;开始学习&quot; target=&quot;_blank&quot; class=&quot;comm-btn c-btn-1&quot;&gt;开始学习&lt;/a&gt;<br>                     &lt;/div&gt;<br>                   &lt;/section&gt;<br>                   &lt;h3 class=&quot;hLh30 txtOf mt10&quot;&gt;<br>                     &lt;a href=&quot;#&quot; title=&quot;数学给宝宝带来的兴趣&quot; target=&quot;_blank&quot; class=&quot;course-title fsize18 c-333&quot;&gt;数学给宝宝带来的兴趣&lt;/a&gt;<br>                   &lt;/h3&gt;<br>                 &lt;/div&gt;<br>               &lt;/li&gt;<br>               &lt;li&gt;<br>                 &lt;div class=&quot;cc-l-wrap&quot;&gt;<br>                   &lt;section class=&quot;course-img&quot;&gt;<br>                     &lt;img src=&quot;~/assets/photo/course/1442295506745.jpg&quot; class=&quot;img-responsive&quot; &gt;<br>                     &lt;div class=&quot;cc-mask&quot;&gt;<br>                       &lt;a href=&quot;#&quot; title=&quot;开始学习&quot; target=&quot;_blank&quot; class=&quot;comm-btn c-btn-1&quot;&gt;开始学习&lt;/a&gt;<br>                     &lt;/div&gt;<br>                   &lt;/section&gt;<br>                   &lt;h3 class=&quot;hLh30 txtOf mt10&quot;&gt;<br>                     &lt;a href=&quot;#&quot; title=&quot;国家教师资格考试专用&quot; target=&quot;_blank&quot; class=&quot;course-title fsize18 c-333&quot;&gt;国家教师资格考试专用&lt;/a&gt;<br>                   &lt;/h3&gt;<br>                 &lt;/div&gt;<br>               &lt;/li&gt;<br>             &lt;/ul&gt;<br>             &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>           &lt;/article&gt;<br>         &lt;/div&gt;<br>       &lt;/section&gt;<br>     &lt;/section&gt;<br>     &lt;!-- /讲师介绍 结束 --&gt;<br>   &lt;/div&gt;<br> &lt;/template&gt;<br> &lt;script&gt;<br> export default &#123;&#125;;<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>



# 首页数据显示-banner接口

## 在service模块下创建子模块service-cms

### 使用代码生成器生成banner代码

（1）创建crm_banner表

（2）生成代码

 

### 配置application.properties

<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 服务端口</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8004</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 服务名</span><br><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">service-cms</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># mysql数据库连接</span><br><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/guli?serverTimezone=GMT%2B8</span><br><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">root</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#返回json的全局时间格式</span><br><span class="hljs-meta">spring.jackson.date-format</span>=<span class="hljs-string">yyyy-MM-dd HH:mm:ss</span><br><span class="hljs-meta">spring.jackson.time-zone</span>=<span class="hljs-string">GMT+8</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#配置mapper xml文件的路径</span><br><span class="hljs-meta">mybatis-plus.mapper-locations</span>=<span class="hljs-string">classpath:com/atguigu/educms/mapper/xml/*.xml</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#mybatis日志</span><br><span class="hljs-meta">mybatis-plus.configuration.log-impl</span>=<span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br><br></code></pre></td></tr></table></figure>

### 创建启动类

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.atguigu&quot;&#125;)</span>  <span class="hljs-comment">// 指定扫描位置</span><br><span class="hljs-meta">@MapperScan(&quot;com.atguigu.educms.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CmsApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(CmsApplication.class,args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

## 创建banner服务接口

### 1、创建banner后台管理接口

**banner****后台分页查询、添加、修改、删除接口**

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/educms/banneradmin&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BannerAdminController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CrmBannerService crmBannerService;<br><br>    <span class="hljs-comment">// 获取分页列表</span><br>    <span class="hljs-meta">@GetMapping(&quot;pageBanner/&#123;page&#125;/&#123;limit&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">pageBanner</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">long</span> page,<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">long</span> limit)</span></span>&#123;<br>        Page&lt;CrmBanner&gt; bannerPage = <span class="hljs-keyword">new</span> Page&lt;&gt;(page, limit);<br>        crmBannerService.page(bannerPage, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;list&quot;</span>,bannerPage.getRecords()).data(<span class="hljs-string">&quot;total&quot;</span>,bannerPage.getTotal());<br>    &#125;<br><br>    <span class="hljs-comment">// 根据id查询banner</span><br>    <span class="hljs-meta">@GetMapping(&quot;getBannerById/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">getBannerById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>        CrmBanner banner = crmBannerService.getById(id);<br>        <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;banner&quot;</span>,banner);<br>    &#125;<br><br>    <span class="hljs-comment">// 添加banner</span><br>    <span class="hljs-meta">@PostMapping(&quot;addBanner&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">addBanner</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> CrmBanner banner)</span></span>&#123;<br>        crmBannerService.save(banner);<br>        <span class="hljs-keyword">return</span> R.ok();<br>    &#125;<br><br>    <span class="hljs-comment">// 修改</span><br>    <span class="hljs-meta">@PostMapping(&quot;updateBanner&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">updateBanner</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> CrmBanner banner)</span></span>&#123;<br>        crmBannerService.updateById(banner);<br>        <span class="hljs-keyword">return</span> R.ok();<br>    &#125;<br><br>    <span class="hljs-comment">// 删除</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;deleteBanner/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">deleteBanner</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>        crmBannerService.removeById(id);<br>        <span class="hljs-keyword">return</span> R.ok();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

### 创建banner前台查询接口

**首页获取banner数据接口**

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/educms/ bannerfront&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BannerFrontController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CrmBannerService crmBannerService;<br><br>    <span class="hljs-comment">// 显示所有banner</span><br>    <span class="hljs-meta">@GetMapping(&quot;getAllBanner&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">getAllBanner</span><span class="hljs-params">()</span></span>&#123;<br>        List&lt;CrmBanner&gt; list = crmBannerService.list(<span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;list&quot;</span>,list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

修改前台banner查询所有的方法

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/educms/bannerfront&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BannerFrontController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CrmBannerService crmBannerService;<br><br>    <span class="hljs-comment">// 显示所有banner</span><br>    <span class="hljs-meta">@GetMapping(&quot;getAllBanner&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">getAllBanner</span><span class="hljs-params">()</span></span>&#123;<br>        List&lt;CrmBanner&gt; list = crmBannerService.selectAllBanner();<br>        <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;list&quot;</span>,list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

Impl

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CrmBannerServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceImpl</span>&lt;<span class="hljs-title">CrmBannerMapper</span>, <span class="hljs-title">CrmBanner</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">CrmBannerService</span> </span>&#123;<br><br>    <span class="hljs-comment">// 显示所有banner</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;CrmBanner&gt; <span class="hljs-title">selectAllBanner</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 根据id降序，查询前2两条记录</span><br>        QueryWrapper&lt;CrmBanner&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        wrapper.orderByDesc(<span class="hljs-string">&quot;id&quot;</span>);<br>        wrapper.last(<span class="hljs-string">&quot;limit 2&quot;</span>);<br>        List&lt;CrmBanner&gt; list = baseMapper.selectList(wrapper);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



# 首页数据显示-热门课程和名师接口

为了调用方便，直接在eduservice中写com.atguigu.eduservice.controller.front;

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;eduservice/index&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EduTeacherService teacherService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EduCourseService courseService;<br><br>    <span class="hljs-comment">// 根据id降序查询出前8个热门课程，前4个名师</span><br><br>    <span class="hljs-meta">@GetMapping(&quot;index&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">index</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 课程</span><br>        QueryWrapper&lt;EduCourse&gt; CourseWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        CourseWrapper.orderByDesc(<span class="hljs-string">&quot;id&quot;</span>);<br>        CourseWrapper.last(<span class="hljs-string">&quot;limit 8&quot;</span>);<br>        List&lt;EduCourse&gt; courseList = courseService.list(CourseWrapper);<br><br>        <span class="hljs-comment">// 名师</span><br>        QueryWrapper&lt;EduTeacher&gt; teacherWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        teacherWrapper.orderByDesc(<span class="hljs-string">&quot;id&quot;</span>);<br>        teacherWrapper.last(<span class="hljs-string">&quot;limit 4&quot;</span>);<br>        List&lt;EduTeacher&gt; teacherList = teacherService.list(teacherWrapper);<br><br>        <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;courseList&quot;</span>,courseList).data(<span class="hljs-string">&quot;teacherList&quot;</span>,teacherList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



# 首页数据显示-banner显示前端

## 封装axios

我们可以参考guli-admin将axios操作封装起来

下载axios ，使用命令 **npm install axios**

创建utils文件夹，utils下创建request.js

<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-comment">// 创建axios实例</span><br><span class="hljs-keyword">const</span> service = axios.create(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;http://localhost:9001&#x27;</span>, <span class="hljs-comment">// api的base_url</span><br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">20000</span> <span class="hljs-comment">// 请求超时时间</span><br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> service<br></code></pre></td></tr></table></figure>

## 首页banner数据显示

### 创建api文件夹，创建banner.js文件

**banner.js**

<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-comment">// 查询前两条banner，幻灯片</span><br>  <span class="hljs-function"><span class="hljs-title">getListBanner</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">`/educms/bannerfront/getAllBanner`</span>,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>    &#125;)<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

### 在首页面引入，调用实现

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br><br>import banner from &quot;@/api/banner&quot;<br><br> export default &#123;<br>   data () &#123;<br>     return &#123;<br>       swiperOption: &#123;<br>         //配置分页<br>         pagination: &#123;<br>           el: &#x27;.swiper-pagination&#x27;//分页的dom节点<br>         &#125;,<br>         //配置导航<br>         navigation: &#123;<br>           nextEl: &#x27;.swiper-button-next&#x27;,//下一页dom节点<br>           prevEl: &#x27;.swiper-button-prev&#x27;//前一页dom节点<br>         &#125;<br>       &#125;,<br>       // 定义banner数组<br>        bannerList: &#123;&#125;<br>     &#125;<br>   &#125;,<br>   created()&#123;<br>     this.getAllBanner()<br>   &#125;,<br>   methods:&#123;<br>     getAllBanner()&#123;<br>       banner.getListBanner()<br>        .then(response =&gt;&#123;<br>          this.bannerList = response.data.data.list<br>        &#125;)<br>     &#125;<br>   &#125;<br> &#125;<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure>



### 在页面遍历显示banner

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;!-- 幻灯片 开始 --&gt;<br>&lt;div v-swiper:mySwiper=&quot;swiperOption&quot;&gt;<br>    &lt;div class=&quot;swiper-wrapper&quot;&gt;<br><br>        &lt;div v-for=&quot;banner in bannerList&quot; :key=&quot;banner.id&quot; class=&quot;swiper-slide&quot; style=&quot;background: #040B1B;&quot;&gt;<br>            &lt;a target=&quot;_blank&quot; :href=&quot;banner.linkUrl&quot;&gt;<br>                &lt;img :src=&quot;banner.imageUrl&quot; :alt=&quot;banner.title&quot;&gt;<br>            &lt;/a&gt;<br>        &lt;/div&gt;<br><br>    &lt;/div&gt;<br>    &lt;div class=&quot;swiper-pagination swiper-pagination-white&quot;&gt;&lt;/div&gt;<br>    &lt;div class=&quot;swiper-button-prev swiper-button-white&quot; slot=&quot;button-prev&quot;&gt;&lt;/div&gt;<br>    &lt;div class=&quot;swiper-button-next swiper-button-white&quot; slot=&quot;button-next&quot;&gt;&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;!-- 幻灯片 结束 --&gt;<br><br></code></pre></td></tr></table></figure>



# 首页数据显示-热门课程和名师列表前端

Api/index.js

<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-comment">// 首页数据</span><br>  <span class="hljs-function"><span class="hljs-title">getIndexdata</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> request(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/indexfront/index`</span>,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

Pages/index.vue

导入依赖

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">import index from &#x27;@/api/index&#x27;<br></code></pre></td></tr></table></figure>

初始化数组

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">teacherList:[],<br> courseList:[]<br></code></pre></td></tr></table></figure>

调用方法

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">methods:&#123;<br>  // 得到首页数据<br>  getIndexDate()&#123;<br>    index.getIndexdata()<br>     .then(response =&gt;&#123;<br>       this.courseList = response.data.data.courseList<br>       this.teacherList = response.data.data.teacherList<br>     &#125;)<br>  &#125;,<br></code></pre></td></tr></table></figure>

Templates，遍历和名师

<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;!-- 网校课程 开始 --&gt;<br>      &lt;div&gt;<br>        &lt;section class=&quot;container&quot;&gt;<br>          &lt;header class=&quot;comm-title&quot;&gt;<br>            &lt;h2 class=&quot;tac&quot;&gt;<br>              &lt;span class=&quot;c-333&quot;&gt;热门课程&lt;/span&gt;<br>            &lt;/h2&gt;<br>          &lt;/header&gt;<br>          &lt;div&gt;<br>            &lt;article class=&quot;comm-course-list&quot;&gt;<br>              &lt;ul class=&quot;of&quot; id=&quot;bna&quot;&gt;<br>                &lt;li v-for=&quot;course in courseList&quot; :key=&quot;course.id&quot;&gt;<br>                  &lt;div class=&quot;cc-l-wrap&quot;&gt;<br>                    &lt;section class=&quot;course-img&quot;&gt;<br>                      &lt;img<br>                        :src=&quot;course.cover&quot;<br>                        class=&quot;img-responsive&quot;<br>                        :alt=&quot;course.title&quot;<br>                      &gt;<br>                      &lt;div class=&quot;cc-mask&quot;&gt;<br>                        &lt;a href=&quot;#&quot; title=&quot;开始学习&quot; class=&quot;comm-btn c-btn-1&quot;&gt;开始学习&lt;/a&gt;<br>                      &lt;/div&gt;<br>                    &lt;/section&gt;<br>                    &lt;h3 class=&quot;hLh30 txtOf mt10&quot;&gt;<br>                      &lt;a href=&quot;#&quot; :title=&quot;course.title&quot; class=&quot;course-title fsize18 c-333&quot;&gt;&#123;&#123;course.title&#125;&#125;&lt;/a&gt;<br>                    &lt;/h3&gt;<br>                    &lt;section class=&quot;mt10 hLh20 of&quot;&gt;<br>                      &lt;span class=&quot;fr jgTag bg-green&quot; :v-if=&quot;Number(course.price === 0)&quot;&gt;<br>                        &lt;i class=&quot;c-fff fsize12 f-fA&quot;&gt;免费&lt;/i&gt;<br>                      &lt;/span&gt;<br>                      &lt;span class=&quot;fl jgAttr c-ccc f-fA&quot;&gt;<br>                        &lt;i class=&quot;c-999 f-fA&quot;&gt;9634人学习&lt;/i&gt;<br>                        |<br>                        &lt;i class=&quot;c-999 f-fA&quot;&gt;9634评论&lt;/i&gt;<br>                      &lt;/span&gt;<br>                    &lt;/section&gt;<br>                  &lt;/div&gt;<br>                &lt;/li&gt;<br>                <br>              &lt;/ul&gt;<br>              &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>            &lt;/article&gt;<br>            &lt;section class=&quot;tac pt20&quot;&gt;<br>              &lt;a href=&quot;#&quot; title=&quot;全部课程&quot; class=&quot;comm-btn c-btn-2&quot;&gt;全部课程&lt;/a&gt;<br>            &lt;/section&gt;<br>          &lt;/div&gt;<br>        &lt;/section&gt;<br>      &lt;/div&gt;<br>      &lt;!-- /网校课程 结束 --&gt;<br>      &lt;!-- 网校名师 开始 --&gt;<br>      &lt;div&gt;<br>        &lt;section class=&quot;container&quot;&gt;<br>          &lt;header class=&quot;comm-title&quot;&gt;<br>            &lt;h2 class=&quot;tac&quot;&gt;<br>              &lt;span class=&quot;c-333&quot;&gt;名师大咖&lt;/span&gt;<br>            &lt;/h2&gt;<br>          &lt;/header&gt;<br>          &lt;div&gt;<br>            &lt;article class=&quot;i-teacher-list&quot;&gt;<br>              &lt;ul class=&quot;of&quot;&gt;<br>                &lt;li v-for=&quot;teacher in teacherList&quot; :key=&quot;teacher.id&quot;&gt;<br>                  &lt;section class=&quot;i-teach-wrap&quot;&gt;<br>                    &lt;div class=&quot;i-teach-pic&quot;&gt;<br>                      &lt;a href=&quot;/teacher/1&quot; :title=&quot;teacher.name&quot;&gt;<br>                        &lt;img :alt=&quot;teacher.name&quot; :src=&quot;teacher.avatar&quot;&gt;<br>                      &lt;/a&gt;<br>                    &lt;/div&gt;<br>                    &lt;div class=&quot;mt10 hLh30 txtOf tac&quot;&gt;<br>                      &lt;a href=&quot;/teacher/1&quot; title=&quot;teacher.name&quot; class=&quot;fsize18 c-666&quot;&gt;&#123;&#123;teacher.name&#125;&#125;&lt;/a&gt;<br>                    &lt;/div&gt;<br>                    &lt;div class=&quot;hLh30 txtOf tac&quot;&gt;<br>                      &lt;span class=&quot;fsize14 c-999&quot;&gt;&#123;&#123;teacher.level&#125;&#125;&lt;/span&gt;<br>                    &lt;/div&gt;<br>                    &lt;div class=&quot;mt15 i-q-txt&quot;&gt;<br>                      &lt;p<br>                        class=&quot;c-999 f-fA&quot;<br>                      &gt;&#123;&#123;teacher.intro&#125;&#125;&lt;/p&gt;<br>                    &lt;/div&gt;<br>                  &lt;/section&gt;<br>                &lt;/li&gt;<br>                <br>              &lt;/ul&gt;<br>              &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;<br>            &lt;/article&gt;<br>            &lt;section class=&quot;tac pt20&quot;&gt;<br>              &lt;a href=&quot;#&quot; title=&quot;全部讲师&quot; class=&quot;comm-btn c-btn-2&quot;&gt;全部讲师&lt;/a&gt;<br>            &lt;/section&gt;<br>          &lt;/div&gt;<br>        &lt;/section&gt;<br>      &lt;/div&gt;<br>      &lt;!-- /网校名师 结束 --&gt;<br></code></pre></td></tr></table></figure>



# 首页数据显示-redis回顾

![image-20220106235934903](day11-首页数据显示/image-20220106235934903.png)



# 首页数据显示-添加redis缓存

## 在common模块添加依赖

由于redis缓存是公共应用，所以我们把依赖与配置添加到了common模块下面，在common模块pom.xml下添加以下依赖

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- redis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- spring2.X集成redis所需common-pool2--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>&lt;/dependency<br></code></pre></td></tr></table></figure>

## 在service-base模块添加redis配置类

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableCaching</span>  <span class="hljs-comment">// 开启缓存</span><br><span class="hljs-meta">@Configuration</span>  <span class="hljs-comment">// 配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisConfig</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory factory)</span> </span>&#123;<br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> RedisTemplate&lt;&gt;();<br>        RedisSerializer&lt;String&gt; redisSerializer = <span class="hljs-keyword">new</span> StringRedisSerializer();<br>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="hljs-keyword">new</span> Jackson2JsonRedisSerializer(Object.class);<br>        ObjectMapper om = <span class="hljs-keyword">new</span> ObjectMapper();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br>        template.setConnectionFactory(factory);<br>        <span class="hljs-comment">//key序列化方式</span><br>        template.setKeySerializer(redisSerializer);<br>        <span class="hljs-comment">//value序列化</span><br>        template.setValueSerializer(jackson2JsonRedisSerializer);<br>        <span class="hljs-comment">//value hashmap序列化</span><br>        template.setHashValueSerializer(jackson2JsonRedisSerializer);<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CacheManager <span class="hljs-title">cacheManager</span><span class="hljs-params">(RedisConnectionFactory factory)</span> </span>&#123;<br>        RedisSerializer&lt;String&gt; redisSerializer = <span class="hljs-keyword">new</span> StringRedisSerializer();<br>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="hljs-keyword">new</span> Jackson2JsonRedisSerializer(Object.class);<br>        <span class="hljs-comment">//解决查询缓存转换异常的问题</span><br>        ObjectMapper om = <span class="hljs-keyword">new</span> ObjectMapper();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br>        <span class="hljs-comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span><br>        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()<br>                .entryTtl(Duration.ofSeconds(<span class="hljs-number">600</span>))<br>                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))<br>                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))<br>                .disableCachingNullValues();<br>        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)<br>                .cacheDefaults(config)<br>                .build();<br>        <span class="hljs-keyword">return</span> cacheManager;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



## 在接口中添加redis缓存

由于首页数据变化不是很频繁，而且首页访问量相对较大，所以我们有必要把首页接口数据缓存到redis缓存中，减少数据库压力和提高访问速度。

改造service-cms模块首页banner接口，首页课程与讲师接口类似

**Spring Boot****缓存注解**


### （1）缓存@Cacheable

根据方法对其返回结果进行缓存，下次请求时，如果缓存存在，则直接读取缓存数据返回；如果缓存不存在，则执行方法，并把返回的结果存入缓存中。一般用在查询方法上。

查看源码，属性值如下：

| **属性/****方法名** | **解释**                                         |
| ------------------- | ------------------------------------------------ |
| value               | 缓存名，必填，它指定了你的缓存存放在哪块命名空间 |
| cacheNames          | 与 value 差不多，二选一即可                      |
| key                 | 可选属性，可以使用 SpEL 标签自定义缓存的key      |

### （2）缓存@CachePut

使用该注解标志的方法，每次都会执行，并将结果存入指定的缓存中。其他方法可以直接从响应的缓存中读取缓存数据，而不需要再去查询数据库。一般用在新增方法上。

查看源码，属性值如下：

| **属性/****方法名** | **解释**                                         |
| ------------------- | ------------------------------------------------ |
| value               | 缓存名，必填，它指定了你的缓存存放在哪块命名空间 |
| cacheNames          | 与 value 差不多，二选一即可                      |
| key                 | 可选属性，可以使用 SpEL 标签自定义缓存的key      |

### （3）缓存@CacheEvict

使用该注解标志的方法，会清空指定的缓存。一般用在更新或者删除方法上

查看源码，属性值如下：

| **属性/****方法名** | **解释**                                                     |
| ------------------- | ------------------------------------------------------------ |
| value               | 缓存名，必填，它指定了你的缓存存放在哪块命名空间             |
| cacheNames          | 与 value 差不多，二选一即可                                  |
| key                 | 可选属性，可以使用 SpEL 标签自定义缓存的key                  |
| allEntries          | 是否清空所有缓存，默认为 false。如果指定为 true，则方法调用后将立即清空所有的缓存 |
| beforeInvocation    | 是否在方法执行前就清空，默认为 false。如果指定为 true，则在方法执行前就会清空缓存 |

 

添加@Cacheable注解在查询banner的方法上

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CrmBannerServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceImpl</span>&lt;<span class="hljs-title">CrmBannerMapper</span>, <span class="hljs-title">CrmBanner</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">CrmBannerService</span> </span>&#123;<br><br>    <span class="hljs-comment">// 显示所有banner</span><br>    <span class="hljs-meta">@Cacheable(value = &quot;banner&quot;,key = &quot;&#x27;selectIndexList&#x27;&quot;)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;CrmBanner&gt; <span class="hljs-title">selectAllBanner</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 根据id降序，查询前2两条记录</span><br>        QueryWrapper&lt;CrmBanner&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        wrapper.orderByDesc(<span class="hljs-string">&quot;id&quot;</span>);<br>        wrapper.last(<span class="hljs-string">&quot;limit 2&quot;</span>);<br>        List&lt;CrmBanner&gt; list = baseMapper.selectList(wrapper);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



## 启动redis服务

### 连接redis服务可能遇到的问题

连接redis服务可能遇到的问题

（1）关闭liunx防火墙

service firewalld stop

（2）找到redis配置文件， 注释一行配置

![img](day11-首页数据显示/clip_image001.png)

（3）如果出现下面错误提示

![image-20220107000054865](day11-首页数据显示/image-20220107000054865.png)



修改 protected-mode yes

改为

protected-mode no



### banner接口改造

**在service-cms模块配置文件添加redis配置**

<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.redis.host</span>=<span class="hljs-string">192.168.242.3</span><br><span class="hljs-meta">spring.redis.port</span>=<span class="hljs-string">6379</span><br><span class="hljs-meta">spring.redis.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-meta">spring.redis.database</span>= <span class="hljs-string">0</span><br><span class="hljs-meta">spring.redis.timeout</span>=<span class="hljs-string">1800000</span><br><span class="hljs-meta">spring.redis.lettuce.pool.max-active</span>=<span class="hljs-string">20</span><br><span class="hljs-meta">spring.redis.lettuce.pool.max-wait</span>=<span class="hljs-string">-1</span><br><span class="hljs-comment">#最大阻塞等待时间(负数表示没限制)</span><br><span class="hljs-meta">spring.redis.lettuce.pool.max-idle</span>=<span class="hljs-string">5</span><br><span class="hljs-meta">spring.redis.lettuce.pool.min-idle</span>=<span class="hljs-string">0</span><br></code></pre></td></tr></table></figure>

启动测试，在redis中添加了key

![image-20220107000133155](day11-首页数据显示/image-20220107000133155.png)

**通过源码查看到key生成的规则**

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.data.redis.cache;<br><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CacheKeyPrefix</span> </span>&#123;<br>    <span class="hljs-function">String <span class="hljs-title">compute</span><span class="hljs-params">(String var1)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> CacheKeyPrefix <span class="hljs-title">simple</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (name) -&gt; &#123;<br>            <span class="hljs-keyword">return</span> name + <span class="hljs-string">&quot;::&quot;</span>;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



</nuxt>]]></content>
      <categories>
        <category>项目|谷粒学院|笔记</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis</title>
    <url>/myBlog/mybatis/</url>
    <content><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><p>环境：</p>
<ul>
<li>jdk 8 +</li>
<li>MySQL 5.7.19</li>
<li>maven-3.6.1</li>
<li>IDEA</li>
</ul>
<p>回顾：</p>
<ul>
<li>JDBC</li>
<li>MySQL</li>
<li>Java 基础</li>
<li>Maven</li>
<li>Junit</li>
</ul>
<p>SSM框架：配置文件的。最好的方式：看官网文档；</p>
<h1 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h1><h2 id="1-1什么是MyBatis"><a href="#1-1什么是MyBatis" class="headerlink" title="1.1什么是MyBatis"></a>1.1什么是MyBatis</h2><ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。</li>
<li>MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到<strong>Github</strong> .</li>
</ul>
<p>如何获得Mybatis？</p>
<ul>
<li>maven仓库：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<ul>
<li>Mybatis官方文档 : <a href="http://www.mybatis.org/mybatis-3/zh/index.html">http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
<li>GitHub : <a href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a></li>
</ul>
<h2 id="1-2、持久层"><a href="#1-2、持久层" class="headerlink" title="1.2、持久层"></a>1.2、持久层</h2><p><strong>数据持久化</strong></p>
<ul>
<li>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</li>
<li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li>
<li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li>
<li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li>
</ul>
<p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p>
<ul>
<li><p>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</p>
</li>
<li><p>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</p>
</li>
</ul>
<h2 id="1-3、持久层"><a href="#1-3、持久层" class="headerlink" title="1.3、持久层"></a>1.3、持久层</h2><p><strong>什么是持久层？</strong></p>
<ul>
<li>完成持久化工作的代码块 .  —-&gt;  dao层 【DAO (Data Access Object)  数据访问对象】</li>
<li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li>
<li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专注于数据持久化逻辑的实现.</li>
<li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。【说白了就是用来操作数据库存在的！】</li>
</ul>
<h2 id="1-4、为什么需要Mybatis"><a href="#1-4、为什么需要Mybatis" class="headerlink" title="1.4、为什么需要Mybatis"></a>1.4、为什么需要Mybatis</h2><ul>
<li><p>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 </p>
</li>
<li><p>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等… , 通过框架可以减少重复代码,提高开发效率 .</p>
</li>
<li><p>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) –&gt;对象关系映射</strong></p>
</li>
<li><p>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></p>
</li>
<li><p>MyBatis的优点</p>
</li>
<li><ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li>
<li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供xml标签，支持编写动态sql。</li>
<li>…….</li>
</ul>
</li>
<li><p><strong>最重要的一点，使用的人多！公司需要！</strong></p>
</li>
</ul>
<h1 id="2、第一Mybatis程序"><a href="#2、第一Mybatis程序" class="headerlink" title="2、第一Mybatis程序"></a>2、第一Mybatis程序</h1><p>思路：搭建环境 –&gt; 导入Mybatis –&gt; 编写代码 –&gt; 测试！</p>
<h2 id="2-1、搭建实验数据库"><a href="#2-1、搭建实验数据库" class="headerlink" title="2.1、搭建实验数据库"></a>2.1、搭建实验数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">CREATE DATABASE `mybatis`;<br><br>USE `mybatis`;<br><br>DROP TABLE IF EXISTS `user`;<br><br>CREATE TABLE `user` (<br>    `id` int(20) NOT NULL,<br>    `name` varchar(30) DEFAULT NULL,<br>    `pwd` varchar(30) DEFAULT NULL,<br>    PRIMARY KEY (`id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8;<br><br>insert  into `user`(`id`,`name`,`pwd`) values (1,&#x27;狂神&#x27;,&#x27;123456&#x27;),(2,&#x27;张三&#x27;,&#x27;abcdef&#x27;),(3,&#x27;李四&#x27;,&#x27;987654&#x27;);<br></code></pre></td></tr></table></figure>

<p>新建项目</p>
<ol>
<li><p>新建一个普通的maven项目</p>
</li>
<li><p>删除src目录</p>
</li>
<li><p>导入maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--导入依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mysql驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.46<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--mybatis--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Junit--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
</ol>
<h2 id="2-2、创建一个模块"><a href="#2-2、创建一个模块" class="headerlink" title="2.2、创建一个模块"></a>2.2、创建一个模块</h2><ul>
<li><p>编写MyBatis核心配置文件</p>
</li>
<li><p>查看帮助文档</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">       <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">       <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="hljs-symbol">&amp;amp;</span>useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/kuang/dao/userMapper.xml&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>



<ul>
<li><p>编写MyBatis工具类</p>
</li>
<li><p>查看帮助文档</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisUtils</span> </span>&#123;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br><br>   <span class="hljs-keyword">static</span> &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>           InputStream inputStream = Resources.getResourceAsStream(resource);<br>           sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>      &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>           e.printStackTrace();<br>      &#125;<br>  &#125;<br><br>   <span class="hljs-comment">//获取SqlSession连接</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSession</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="2-3、编写代码"><a href="#2-3、编写代码" class="headerlink" title="2.3、编写代码"></a>2.3、编写代码</h2><ul>
<li>实体类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>   <br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;  <span class="hljs-comment">//id</span><br>   <span class="hljs-keyword">private</span> String name;   <span class="hljs-comment">//姓名</span><br>   <span class="hljs-keyword">private</span> String pwd;   <span class="hljs-comment">//密码</span><br>   <br>   <span class="hljs-comment">//构造,有参,无参</span><br>   <span class="hljs-comment">//set/get</span><br>   <span class="hljs-comment">//toString()</span><br>   <br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li><p>编写Mapper接口类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.kuang.pojo.User;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br>   <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">selectUser</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>编写Mapper.xml配置文件</p>
</li>
<li><p>namespace 十分重要，不能写错！</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">       <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">       <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.kuang.dao.UserMapper&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span><br>  select * from user<br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure>

<ul>
<li><p>编写测试类</p>
</li>
<li><p>Junit 包测试</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectUser</span><span class="hljs-params">()</span> </span>&#123;<br>       SqlSession session = MybatisUtils.getSession();<br>       <span class="hljs-comment">//方法一:</span><br>       <span class="hljs-comment">//List&lt;User&gt; users = session.selectList(&quot;com.kuang.mapper.UserMapper.selectUser&quot;);</span><br>       <span class="hljs-comment">//方法二:</span><br>       UserMapper mapper = session.getMapper(UserMapper.class);<br>       List&lt;User&gt; users = mapper.selectUser();<br><br>       <span class="hljs-keyword">for</span> (User user: users)&#123;<br>           System.out.println(user);<br>      &#125;<br>       session.close();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h2><p><strong>可能出现问题说明：Maven静态资源过滤问题</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><br></code></pre></td></tr></table></figure>

<h1 id="3、CRUD"><a href="#3、CRUD" class="headerlink" title="3、CRUD"></a>3、CRUD</h1><h2 id="3-1、namespace"><a href="#3-1、namespace" class="headerlink" title="3.1、namespace"></a>3.1、namespace</h2><ol>
<li>将上面案例中的UserMapper接口改名为 UserDao；</li>
<li>将UserMapper.xml中的namespace改为为UserDao的路径 .</li>
<li>再次测试</li>
</ol>
<p><strong>结论：</strong></p>
<p>配置文件中namespace中的名称为对应Mapper接口或者Dao接口的完整包名,必须一致！</p>
<h2 id="3-2、select"><a href="#3-2、select" class="headerlink" title="3.2、select"></a>3.2、select</h2><ul>
<li><p>select标签是mybatis中最常用的标签之一</p>
</li>
<li><p>select语句有很多属性可以详细配置每一条SQL语句</p>
</li>
<li><ul>
<li>SQL语句返回值类型。【完整的类名或者别名】</li>
<li>传入SQL语句的参数类型 。【万能的Map，可以多尝试使用】</li>
<li>命名空间中唯一的标识符</li>
<li>接口中的方法名与映射文件中的SQL语句ID 一一对应</li>
<li>id：就是对应的namespace中的方法名</li>
<li>parameterType：参数类型！</li>
<li>resultType：Sql语句执行的返回值！</li>
</ul>
</li>
</ul>
<p><strong>需求：根据id查询用户</strong></p>
<ol>
<li><p>在UserMapper中添加对应方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br>   <span class="hljs-comment">//查询全部用户</span><br>   <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">selectUser</span><span class="hljs-params">()</span></span>;<br>   <span class="hljs-comment">//根据id查询用户</span><br>   <span class="hljs-function">User <span class="hljs-title">selectUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>在UserMapper.xml中添加Select语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span><br>select * from user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>测试类中测试</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">tsetSelectUserById</span><span class="hljs-params">()</span> </span>&#123;<br>   SqlSession session = MybatisUtils.getSession();  <span class="hljs-comment">//获取SqlSession连接</span><br>   UserMapper mapper = session.getMapper(UserMapper.class);<br>   User user = mapper.selectUserById(<span class="hljs-number">1</span>);<br>   System.out.println(user);<br>   session.close();<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>课堂练习</strong>：根据 密码 和 名字 查询用户</p>
<p>思路一：直接在方法中传递参数</p>
<ol>
<li>在接口方法的参数前加 @Param属性</li>
<li>Sql语句编写的时候，直接取@Param中设置的值即可，不需要单独设置参数类型</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过密码和名字查询用户</span><br><span class="hljs-function">User <span class="hljs-title">selectUserByNP</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username,<span class="hljs-meta">@Param(&quot;pwd&quot;)</span> String pwd)</span></span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   &lt;select id=&quot;selectUserByNP&quot; resultType=&quot;com.kuang.pojo.User&quot;&gt;</span><br><span class="hljs-comment">     select * from user where name = #&#123;username&#125; and pwd = #&#123;pwd&#125;</span><br><span class="hljs-comment">   &lt;/select&gt;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>

<p>思路二：使用万能的Map</p>
<ol>
<li><p>在接口方法中，参数直接传递Map；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function">User <span class="hljs-title">selectUserByNP2</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span></span>;<br></code></pre></td></tr></table></figure></li>
<li><p>编写sql语句的时候，需要传递参数类型，参数类型为map</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserByNP2&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span><br>select * from user where name = #&#123;username&#125; and pwd = #&#123;pwd&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>在使用方法的时候，Map的 key 为 sql中取的值即可，没有顺序要求！</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br>map.put(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;小明&quot;</span>);<br>map.put(<span class="hljs-string">&quot;pwd&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br>User user = mapper.selectUserByNP2(map);<br></code></pre></td></tr></table></figure>

<p>总结：如果参数过多，我们可以考虑直接使用Map实现，如果参数比较少，直接传递参数即可</p>
<h2 id="3-3、insert"><a href="#3-3、insert" class="headerlink" title="3.3、insert"></a>3.3、insert</h2><p>我们一般使用insert标签进行插入操作，它的配置和select标签差不多！</p>
<p><strong>需求：给数据库增加一个用户</strong></p>
<ol>
<li><p>在UserMapper接口中添加对应的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加一个用户</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;<br></code></pre></td></tr></table></figure></li>
<li><p>在UserMapper.xml中添加insert语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span><br>    insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>测试</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAddUser</span><span class="hljs-params">()</span> </span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br>   UserMapper mapper = session.getMapper(UserMapper.class);<br>   User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-string">&quot;zxcvbn&quot;</span>);<br>   <span class="hljs-keyword">int</span> i = mapper.addUser(user);<br>   System.out.println(i);<br>   session.commit(); <span class="hljs-comment">//提交事务,重点!不写的话不会提交到数据库</span><br>   session.close();<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>注意点：增、删、改操作需要提交事务！</strong></p>
<h2 id="3-4、update"><a href="#3-4、update" class="headerlink" title="3.4、update"></a>3.4、update</h2><p>我们一般使用update标签进行更新操作，它的配置和select标签差不多！</p>
<p><strong>需求：修改用户的信息</strong></p>
<ol>
<li><p>同理，编写接口方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//修改一个用户</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<br></code></pre></td></tr></table></figure></li>
<li><p>编写对应的配置文件SQL</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span><br>  update user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>测试</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdateUser</span><span class="hljs-params">()</span> </span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br>   UserMapper mapper = session.getMapper(UserMapper.class);<br>   User user = mapper.selectUserById(<span class="hljs-number">1</span>);<br>   user.setPwd(<span class="hljs-string">&quot;asdfgh&quot;</span>);<br>   <span class="hljs-keyword">int</span> i = mapper.updateUser(user);<br>   System.out.println(i);<br>   session.commit(); <span class="hljs-comment">//提交事务,重点!不写的话不会提交到数据库</span><br>   session.close();<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="3-5、delete"><a href="#3-5、delete" class="headerlink" title="3.5、delete"></a>3.5、delete</h2><p>我们一般使用delete标签进行删除操作，它的配置和select标签差不多！</p>
<p><strong>需求：根据id删除一个用户</strong></p>
<ol>
<li><p>同理，编写接口方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据id删除用户</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br></code></pre></td></tr></table></figure></li>
<li><p>编写对应的配置文件SQL</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>  delete from user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>测试</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteUser</span><span class="hljs-params">()</span> </span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br>   UserMapper mapper = session.getMapper(UserMapper.class);<br>   <span class="hljs-keyword">int</span> i = mapper.deleteUser(<span class="hljs-number">5</span>);<br>   System.out.println(i);<br>   session.commit(); <span class="hljs-comment">//提交事务,重点!不写的话不会提交到数据库</span><br>   session.close();<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>小结：</strong></p>
<ul>
<li>所有的增删改操作都需要提交事务！</li>
<li>接口所有的普通参数，尽量都写上@Param参数，尤其是多个参数时，必须写上！</li>
<li>有时候根据业务的需求，可以考虑使用map传递参数！</li>
<li>为了规范操作，在SQL的配置文件中，我们尽量将Parameter参数和resultType都写上！</li>
</ul>
<h2 id="3-6、思考题"><a href="#3-6、思考题" class="headerlink" title="3.6、思考题"></a>3.6、思考题</h2><p><strong>模糊查询like语句该怎么写?</strong></p>
<ol>
<li><p>在Java代码中添加sql通配符。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">string wildcardname = “%smi%”;<br>list<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span> names = mapper.selectlike(wildcardname);<br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">”selectlike”</span>&gt;</span><br>select * from foo where bar like #&#123;value&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>在sql语句中拼接通配符，会引起sql注入</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">string wildcardname = “smi”;<br>list<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span> names = mapper.selectlike(wildcardname);<br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">”selectlike”</span>&gt;</span><br>    select * from foo where bar like &quot;%&quot;#&#123;value&#125;&quot;%&quot;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="4、配置解析"><a href="#4、配置解析" class="headerlink" title="4、配置解析"></a>4、配置解析</h1><h2 id="4-1、核心配置文件"><a href="#4-1、核心配置文件" class="headerlink" title="4.1、核心配置文件"></a>4.1、核心配置文件</h2><ul>
<li>mybatis-config.xml 系统核心配置文件</li>
<li>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。</li>
<li>能配置的内容如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">configuration（配置）<br>properties（属性）<br>settings（设置）<br>typeAliases（类型别名）<br>typeHandlers（类型处理器）<br>objectFactory（对象工厂）<br>plugins（插件）<br>environments（环境配置）<br>environment（环境变量）<br>transactionManager（事务管理器）<br>dataSource（数据源）<br>databaseIdProvider（数据库厂商标识）<br>mappers（映射器）<br><span class="hljs-comment">&lt;!-- 注意元素节点的顺序！顺序不对会报错 --&gt;</span><br></code></pre></td></tr></table></figure>

<p>我们可以阅读 mybatis-config.xml 上面的dtd的头文件！</p>
<h2 id="4-2、environments元素"><a href="#4-2、environments元素" class="headerlink" title="4.2、environments元素"></a>4.2、environments元素</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;...&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br></code></pre></td></tr></table></figure>

<ul>
<li><p>配置MyBatis的多套运行环境，将SQL映射到多个不同的数据库上，必须指定其中一个为默认运行环境（通过default指定）</p>
</li>
<li><p>子元素节点：<strong>environment</strong></p>
</li>
<li><ul>
<li><p>dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。</p>
</li>
<li><p>数据源是必须配置的。</p>
</li>
<li><p>有三种内建的数据源类型</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">type</span>=<span class="hljs-string">&quot;[UNPOOLED|POOLED|JNDI]&quot;</span>）<br></code></pre></td></tr></table></figure></li>
<li><p>unpooled：这个数据源的实现只是每次被请求时打开和关闭连接。</p>
</li>
<li><p><strong>pooled</strong>：这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来 , 这是一种使得并发 Web 应用快速响应请求的流行处理方式。</p>
</li>
<li><p>jndi：这个数据源的实现是为了能在如 Spring 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。</p>
</li>
<li><p>数据源也有很多第三方的实现，比如dbcp，c3p0，druid等等….</p>
</li>
<li><p>详情：点击查看官方文档</p>
</li>
<li><p>这两种事务管理器类型都不需要设置任何属性。</p>
</li>
<li><p>具体的一套环境，通过设置id进行区别，id保证唯一！</p>
</li>
<li><p>子元素节点：transactionManager - [ 事务管理器 ]</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 语法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;[ JDBC | MANAGED ]&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="4-3、mappers元素"><a href="#4-3、mappers元素" class="headerlink" title="4.3、mappers元素"></a>4.3、mappers元素</h2><p><strong>mappers</strong></p>
<ul>
<li>映射器 : 定义映射SQL语句文件</li>
<li>既然 MyBatis 的行为其他元素已经配置完了，我们现在就要定义 SQL 映射语句了。但是首先我们需要告诉 MyBatis 到哪里去找到这些语句。Java 在自动查找这方面没有提供一个很好的方法，所以最佳的方式是告诉 MyBatis 到哪里去找映射文件。你可以使用相对于类路径的资源引用， 或完全限定资源定位符（包括 <code>file:///</code> 的 URL），或类名和包名等。映射器是MyBatis中最核心的组件之一，在MyBatis 3之前，只支持xml映射器，即：所有的SQL语句都必须在xml文件中配置。而从MyBatis 3开始，还支持接口映射器，这种映射器方式允许以Java代码的方式注解定义SQL语句，非常简洁。</li>
</ul>
<p><strong>引入资源方式</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">使用映射器接口实现类的完全限定类名</span><br><span class="hljs-comment">需要配置文件名称和接口名称一致，并且位于同一目录下</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">将包内的映射器接口实现全部注册为映射器</span><br><span class="hljs-comment">但是需要配置文件名称和接口名称一致，并且位于同一目录下</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.mybatis.builder&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>Mapper文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">       <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">       <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.kuang.mapper.UserMapper&quot;</span>&gt;</span><br>   <br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure>

<ul>
<li><p>namespace中文意思：命名空间，作用如下：</p>
</li>
<li><ul>
<li>namespace的命名必须跟某个接口同名</li>
<li>接口中的方法与映射文件中sql语句id应该一一对应</li>
</ul>
</li>
<li><ol>
<li>namespace和子元素的id联合保证唯一  , 区别不同的mapper</li>
<li>绑定DAO接口</li>
<li>namespace命名规则 : 包名+类名</li>
</ol>
</li>
</ul>
<p>MyBatis 的真正强大在于它的映射语句，这是它的魔力所在。由于它的异常强大，映射器的 XML 文件就显得相对简单。如果拿它跟具有相同功能的 JDBC 代码进行对比，你会立即发现省掉了将近 95% 的代码。MyBatis 为聚焦于 SQL 而构建，以尽可能地为你减少麻烦。</p>
<h2 id="4-4、Properties优化"><a href="#4-4、Properties优化" class="headerlink" title="4.4、Properties优化"></a>4.4、Properties优化</h2><p>数据库这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递。具体的官方文档</p>
<p>我们来优化我们的配置文件</p>
<ol>
<li><p>在资源目录下新建一个db.properties</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">driver=com.mysql.jdbc.Driver<br>url=jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8<br>username=root<br>password=123456<br></code></pre></td></tr></table></figure></li>
<li><p>将文件导入properties 配置文件</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--导入properties文件--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mapper/UserMapper.xml&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>更多操作，可以查看官方文档！【演示带领学习】</p>
<ul>
<li>配置文件优先级问题</li>
<li>新特性：使用占位符</li>
</ul>
<h2 id="4-5、typeAliases优化"><a href="#4-5、typeAliases优化" class="headerlink" title="4.5、typeAliases优化"></a>4.5、typeAliases优化</h2><p>类型别名是为 Java 类型设置一个短的名字。它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置别名,注意顺序--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;User&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>当这样配置时，<code>User</code>可以用在任何使用<code>com.kuang.pojo.User</code>的地方。</p>
<p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.kuang.pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>每一个在包 <code>com.kuang.pojo</code> 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。</p>
<p>若有注解，则别名为其注解值。见下面的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Alias(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure>

<p>去官网查看一下Mybatis默认的一些类型别名！</p>
<h2 id="4-6、其他配置浏览"><a href="#4-6、其他配置浏览" class="headerlink" title="4.6、其他配置浏览"></a>4.6、其他配置浏览</h2><p><strong>设置</strong></p>
<ul>
<li><p>设置（settings）相关 =&gt; 查看帮助文档</p>
</li>
<li><ul>
<li>懒加载</li>
<li>日志实现</li>
<li>缓存开启关闭</li>
</ul>
</li>
<li><p>一个配置完整的 settings 元素的示例如下：</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;multipleResultSetsEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;useColumnLabel&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;useGeneratedKeys&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoMappingBehavior&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;PARTIAL&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;WARNING&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultExecutorType&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SIMPLE&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultStatementTimeout&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;25&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultFetchSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;100&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;safeRowBoundsEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localCacheScope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SESSION&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcTypeForNull&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;OTHER&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>类型处理器</strong></p>
<ul>
<li>无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型。</li>
<li>你可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。【了解即可】</li>
</ul>
<p><strong>对象工厂</strong></p>
<ul>
<li>MyBatis 每次创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成。</li>
<li>默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过有参构造方法来实例化。</li>
<li>如果想覆盖对象工厂的默认行为，则可以通过创建自己的对象工厂来实现。【了解即可】</li>
</ul>
<h2 id="4-7、生命周期和作用域"><a href="#4-7、生命周期和作用域" class="headerlink" title="4.7、生命周期和作用域"></a>4.7、生命周期和作用域</h2><p><strong>作用域（Scope）和生命周期</strong></p>
<p>理解我们目前已经讨论过的不同作用域和生命周期类是至关重要的，因为错误的使用会导致非常严重的并发问题。</p>
<p>我们可以先画一个流程图，分析一下Mybatis的执行过程！</p>
<p><img src="/myBlog/mybatis/image-20210621140626109.png" alt="image-20210621140626109"></p>
<p><strong>作用域理解</strong></p>
<ul>
<li>SqlSessionFactoryBuilder 的作用在于创建 SqlSessionFactory，创建成功后，SqlSessionFactoryBuilder 就失去了作用，所以它只能存在于创建 SqlSessionFactory 的方法中，而不要让其长期存在。因此 <strong>SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域</strong>（也就是局部方法变量）。</li>
<li>SqlSessionFactory 可以被认为是一个数据库连接池，它的作用是创建 SqlSession 接口对象。因为 MyBatis 的本质就是 Java 对数据库的操作，所以 SqlSessionFactory 的生命周期存在于整个 MyBatis 的应用之中，所以一旦创建了 SqlSessionFactory，就要长期保存它，直至不再使用 MyBatis 应用，所以可以认为 SqlSessionFactory 的生命周期就等同于 MyBatis 的应用周期。</li>
<li>由于 SqlSessionFactory 是一个对数据库的连接池，所以它占据着数据库的连接资源。如果创建多个 SqlSessionFactory，那么就存在多个数据库连接池，这样不利于对数据库资源的控制，也会导致数据库连接资源被消耗光，出现系统宕机等情况，所以尽量避免发生这样的情况。</li>
<li>因此在一般的应用中我们往往希望 SqlSessionFactory 作为一个单例，让它在应用中被共享。所以说 <strong>SqlSessionFactory 的最佳作用域是应用作用域。</strong></li>
<li>如果说 SqlSessionFactory 相当于数据库连接池，那么 SqlSession 就相当于一个数据库连接（Connection 对象），你可以在一个事务里面执行多条 SQL，然后通过它的 commit、rollback 等方法，提交或者回滚事务。所以它应该存活在一个业务请求中，处理完整个请求后，应该关闭这条连接，让它归还给 SqlSessionFactory，否则数据库资源就很快被耗费精光，系统就会瘫痪，所以用 try…catch…finally… 语句来保证其正确关闭。</li>
<li><strong>所以 SqlSession 的最佳的作用域是请求或方法作用域。</strong></li>
</ul>
<p><img src="/myBlog/mybatis/image-20210621140705877.png" alt="image-20210621140705877"></p>
<p>学会了Crud，和基本的配置及原理，后面就可以学习些业务开发</p>
<h1 id="5、ResultMap"><a href="#5、ResultMap" class="headerlink" title="5、ResultMap"></a>5、ResultMap</h1><h2 id="5-1、查询为null问题"><a href="#5-1、查询为null问题" class="headerlink" title="5.1、查询为null问题"></a>5.1、查询为null问题</h2><p><strong>要解决的问题：属性名和字段名不一致</strong></p>
<p>环境：新建一个项目，将之前的项目拷贝过来</p>
<ol>
<li><p>查看之前的数据库的字段名</p>
<p><img src="/myBlog/mybatis/image-20210621141030263.png" alt="image-20210621141030263"></p>
</li>
<li><p>Java中的实体类设计</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;  <span class="hljs-comment">//id</span><br>   <span class="hljs-keyword">private</span> String name;   <span class="hljs-comment">//姓名</span><br>   <span class="hljs-keyword">private</span> String password;   <span class="hljs-comment">//密码和数据库不一样！</span><br>   <br>   <span class="hljs-comment">//构造</span><br>   <span class="hljs-comment">//set/get</span><br>   <span class="hljs-comment">//toString()</span><br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据id查询用户</span><br><span class="hljs-function">User <span class="hljs-title">selectUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br></code></pre></td></tr></table></figure></li>
<li><p>mapper映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>  select * from user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>测试</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectUserById</span><span class="hljs-params">()</span> </span>&#123;<br>   SqlSession session = MybatisUtils.getSession();  <span class="hljs-comment">//获取SqlSession连接</span><br>   UserMapper mapper = session.getMapper(UserMapper.class);<br>   User user = mapper.selectUserById(<span class="hljs-number">1</span>);<br>   System.out.println(user);<br>   session.close();<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>结果:</strong></p>
<ul>
<li>User{id=1, name=’狂神’, password=’null’}</li>
<li>查询出来发现 password 为空 . 说明出现了问题！</li>
</ul>
<p><strong>分析：</strong></p>
<ul>
<li><p>select * from user where id = #{id} 可以看做</p>
<p>select  id,name,pwd  from user where id = #{id}</p>
</li>
<li><p>mybatis会根据这些查询的列名(会将列名转化为小写,数据库不区分大小写) , 去对应的实体类中查找相应列名的set方法设值 , 由于找不到setPwd() , 所以password返回null ; 【自动映射】</p>
</li>
</ul>
<p><strong>解决方案</strong></p>
<p>方案一：为列名指定别名 , 别名和java实体类的属性名一致 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>  select id , name , pwd as password from user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>方案二：使用结果集映射-&gt;ResultMap</strong> 【推荐】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- id为主键 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>   <span class="hljs-comment">&lt;!-- column是数据库表的列名 , property是对应实体类的属性名 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>  select id , name , pwd from user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="5-2、ResultMap"><a href="#5-2、ResultMap" class="headerlink" title="5.2、ResultMap"></a>5.2、ResultMap</h2><p><strong>自动映射</strong></p>
<ul>
<li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。它可以让你从 90% 的 JDBC <code>ResultSets</code> 数据提取代码中解放出来。</li>
<li>实际上，在为一些比如连接的复杂语句编写映射代码的时候，一份 <code>resultMap</code> 能够代替实现同等功能的长达数千行的代码。</li>
<li>ResultMap 的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。</li>
</ul>
<p>你已经见过简单映射语句的示例了，但并没有显式指定 <code>resultMap</code>。比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>select id , name , pwd<br>  from user<br>  where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>上述语句只是简单地将所有的列映射到 <code>HashMap</code> 的键上，这由 <code>resultType</code> 属性指定。虽然在大部分情况下都够用，但是 HashMap 不是一个很好的模型。你的程序更可能会使用 JavaBean 或 POJO（Plain Old Java Objects，普通老式 Java 对象）作为模型。</p>
<p><code>ResultMap</code> 最优秀的地方在于，虽然你已经对它相当了解了，但是根本就不需要显式地用到他们。</p>
<p><strong>手动映射</strong></p>
<ol>
<li><p>返回值类型为resultMap</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span>  select id , name , pwd from user where id = #&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>编写resultMap，实现手动映射！</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- id为主键 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>   <span class="hljs-comment">&lt;!-- column是数据库表的列名 , property是对应实体类的属性名 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>如果世界总是这么简单就好了。但是肯定不是的，数据库中，存在一对多，多对一的情况，我们之后会使用到一些高级的结果集映射，association，collection这些，我们将在之后讲解，今天你们需要把这些知识都消化掉才是最重要的！理解结果集映射的这个概念！</p>
<h1 id="6、日志"><a href="#6、日志" class="headerlink" title="6、日志"></a>6、日志</h1><h2 id="6-1日志工厂"><a href="#6-1日志工厂" class="headerlink" title="6.1日志工厂"></a>6.1日志工厂</h2><p>思考：我们在测试SQL的时候，要是能够在控制台输出 SQL 的话，是不是就能够有更快的排错效率？</p>
<p>如果一个 数据库相关的操作出现了问题，我们可以根据输出的SQL语句快速排查问题。</p>
<p>对于以往的开发过程，我们会经常使用到debug模式来调节，跟踪我们的代码执行过程。但是现在使用Mybatis是基于接口，配置文件的源代码执行过程。因此，我们必须选择日志工具来作为我们开发，调节程序的工具。</p>
<p>Mybatis内置的日志工厂提供日志功能，具体的日志实现有以下几种工具：</p>
<ul>
<li>SLF4J</li>
<li>Apache Commons Logging</li>
<li>Log4j 2</li>
<li>Log4j</li>
<li>JDK logging</li>
</ul>
<p>具体选择哪个日志实现工具由MyBatis的内置日志工厂确定。它会使用最先找到的（按上文列举的顺序查找）。如果一个都未找到，日志功能就会被禁用。</p>
<p><strong>标准日志实现</strong></p>
<p>指定 MyBatis 应该使用哪个日志记录实现。如果此设置不存在，则会自动发现日志记录实现。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>测试，可以看到控制台有大量的输出！我们可以通过这些输出来判断程序到底哪里出了Bug</p>
<h2 id="6-2、Log4j"><a href="#6-2、Log4j" class="headerlink" title="6.2、Log4j"></a>6.2、Log4j</h2><p><strong>简介：</strong></p>
<ul>
<li>Log4j是Apache的一个开源项目</li>
<li>通过使用Log4j，我们可以控制日志信息输送的目的地：控制台，文本，GUI组件….</li>
<li>我们也可以控制每一条日志的输出格式；</li>
<li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</li>
</ul>
<ol>
<li><p><strong>使用步骤：</strong></p>
<ol>
<li><p>导入log4j的包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>配置文件编写</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><br><span class="hljs-meta">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,console,file</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#控制台输出的相关设置</span><br><span class="hljs-meta">log4j.appender.console</span> = <span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-meta">log4j.appender.console.Target</span> = <span class="hljs-string">System.out</span><br><span class="hljs-meta">log4j.appender.console.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.appender.console.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="hljs-string">[%c]-%m%n</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#文件输出的相关设置</span><br><span class="hljs-meta">log4j.appender.file</span> = <span class="hljs-string">org.apache.log4j.RollingFileAppender</span><br><span class="hljs-meta">log4j.appender.file.File</span>=<span class="hljs-string">./log/kuang.log</span><br><span class="hljs-meta">log4j.appender.file.MaxFileSize</span>=<span class="hljs-string">10mb</span><br><span class="hljs-meta">log4j.appender.file.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.appender.file.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="hljs-string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#日志输出级别</span><br><span class="hljs-meta">log4j.logger.org.mybatis</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql.Statement</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql.ResultSet</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="hljs-string">DEBUG</span><br></code></pre></td></tr></table></figure></li>
<li><p>setting设置日志实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;LOG4J&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>在程序中使用Log4j进行输出！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注意导包：org.apache.log4j.Logger</span><br><span class="hljs-keyword">static</span> Logger logger = Logger.getLogger(MyTest.class);<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectUser</span><span class="hljs-params">()</span> </span>&#123;<br>   logger.info(<span class="hljs-string">&quot;info：进入selectUser方法&quot;</span>);<br>   logger.debug(<span class="hljs-string">&quot;debug：进入selectUser方法&quot;</span>);<br>   logger.error(<span class="hljs-string">&quot;error: 进入selectUser方法&quot;</span>);<br>   SqlSession session = MybatisUtils.getSession();<br>   UserMapper mapper = session.getMapper(UserMapper.class);<br>   List&lt;User&gt; users = mapper.selectUser();<br>   <span class="hljs-keyword">for</span> (User user: users)&#123;<br>       System.out.println(user);<br>  &#125;<br>   session.close();<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>测试，看控制台输出！</p>
</li>
</ol>
<ul>
<li>使用Log4j 输出日志</li>
<li>可以看到还生成了一个日志的文件 【需要修改file的日志级别】</li>
</ul>
</li>
</ol>
<h1 id="7、分页"><a href="#7、分页" class="headerlink" title="7、分页"></a>7、分页</h1><h2 id="7-1、limit实现分页"><a href="#7-1、limit实现分页" class="headerlink" title="7.1、limit实现分页"></a>7.1、limit实现分页</h2><p><strong>思考：为什么需要分页？</strong></p>
<p>在学习mybatis等持久层框架的时候，会经常对数据进行增删改查操作，使用最多的是对数据库进行查询操作，如果查询大量数据的时候，我们往往使用分页进行查询，也就是每次处理小部分数据，这样对数据库压力就在可控范围内。</p>
<p><strong>使用Limit实现分页</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">#语法<br>SELECT * FROM table LIMIT stratIndex，pageSize<br><br>SELECT * FROM table LIMIT 5,10; // 检索记录行 6-15  <br><br>#为了检索从某一个偏移量到记录集的结束所有的记录行，可以指定第二个参数为 -1：   <br>SELECT * FROM table LIMIT 95,-1; // 检索记录行 96-last.  <br><br>#如果只给定一个参数，它表示返回最大的记录行数目：   <br>SELECT * FROM table LIMIT 5; //检索前 5 个记录行  <br><br>#换句话说，LIMIT n 等价于 LIMIT 0,n。 <br></code></pre></td></tr></table></figure>

<p><strong>步骤：</strong></p>
<ol>
<li><p>修改Mapper文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>  select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>Mapper接口，参数为map</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//选择全部用户实现分页</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">selectUser</span><span class="hljs-params">(Map&lt;String,Integer&gt; map)</span></span>;<br></code></pre></td></tr></table></figure></li>
<li><p>在测试类中传入参数测试</p>
<ul>
<li>  推断：起始位置 =  （当前页面 - 1 ） * 页面大小</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分页查询 , 两个参数startIndex , pageSize</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectUser</span><span class="hljs-params">()</span> </span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br>   UserMapper mapper = session.getMapper(UserMapper.class);<br><br>   <span class="hljs-keyword">int</span> currentPage = <span class="hljs-number">1</span>;  <span class="hljs-comment">//第几页</span><br>   <span class="hljs-keyword">int</span> pageSize = <span class="hljs-number">2</span>;  <span class="hljs-comment">//每页显示几个</span><br>   Map&lt;String,Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String,Integer&gt;();<br>   map.put(<span class="hljs-string">&quot;startIndex&quot;</span>,(currentPage-<span class="hljs-number">1</span>)*pageSize);<br>   map.put(<span class="hljs-string">&quot;pageSize&quot;</span>,pageSize);<br><br>   List&lt;User&gt; users = mapper.selectUser(map);<br><br>   <span class="hljs-keyword">for</span> (User user: users)&#123;<br>       System.out.println(user);<br>  &#125;<br><br>   session.close();<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="7-2、RowBounds分页"><a href="#7-2、RowBounds分页" class="headerlink" title="7.2、RowBounds分页"></a>7.2、RowBounds分页</h2><p>我们除了使用Limit在SQL层面实现分页，也可以使用RowBounds在Java代码层面实现分页，当然此种方式作为了解即可。我们来看下如何实现的！</p>
<p><strong>步骤：</strong></p>
<ol>
<li><p>mapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//选择全部用户RowBounds实现分页</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserByRowBounds</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure></li>
<li><p>mapper文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByRowBounds&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>select * from user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>测试类</p>
</li>
</ol>
<p>在这里，我们需要使用RowBounds类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUserByRowBounds</span><span class="hljs-params">()</span> </span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br><br>   <span class="hljs-keyword">int</span> currentPage = <span class="hljs-number">2</span>;  <span class="hljs-comment">//第几页</span><br>   <span class="hljs-keyword">int</span> pageSize = <span class="hljs-number">2</span>;  <span class="hljs-comment">//每页显示几个</span><br>   RowBounds rowBounds = <span class="hljs-keyword">new</span> RowBounds((currentPage-<span class="hljs-number">1</span>)*pageSize,pageSize);<br><br>   <span class="hljs-comment">//通过session.**方法进行传递rowBounds，[此种方式现在已经不推荐使用了]</span><br>   List&lt;User&gt; users = session.selectList(<span class="hljs-string">&quot;com.kuang.mapper.UserMapper.getUserByRowBounds&quot;</span>, <span class="hljs-keyword">null</span>, rowBounds);<br><br>   <span class="hljs-keyword">for</span> (User user: users)&#123;<br>       System.out.println(user);<br>  &#125;<br>   session.close();<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h1><h2 id="8-1、面向接口编程"><a href="#8-1、面向接口编程" class="headerlink" title="8.1、面向接口编程"></a>8.1、面向接口编程</h2><ul>
<li>大家之前都学过面向对象编程，也学习过接口，但在真正的开发中，很多时候我们会选择面向接口编程</li>
<li><strong>根本原因 :  解耦 , 可拓展 , 提高复用 , 分层开发中 , 上层不用管具体的实现 , 大家都遵守共同的标准 , 使得开发变得容易 , 规范性更好</strong></li>
<li>在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重要了；</li>
<li>而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</li>
</ul>
<p><strong>关于接口的理解</strong></p>
<ul>
<li><p>接口从更深层次的理解，应是定义（规范，约束）与实现（名实分离的原则）的分离。</p>
</li>
<li><p>接口的本身反映了系统设计人员对系统的抽象理解。</p>
</li>
<li><p>接口应有两类：</p>
</li>
<li><ul>
<li>第一类是对一个个体的抽象，它可对应为一个抽象体(abstract class)；</li>
<li>第二类是对一个个体某一方面的抽象，即形成一个抽象面（interface）；</li>
</ul>
</li>
<li><p>一个体有可能有多个抽象面。抽象体与抽象面是有区别的。</p>
</li>
</ul>
<p><strong>三个面向区别</strong></p>
<ul>
<li><p>面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法 .</p>
</li>
<li><p>面向过程是指，我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现 .</p>
</li>
<li><p>接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题.更多的体现就是对系统整体的架构</p>
</li>
</ul>
<h2 id="8-2、利用注解开发"><a href="#8-2、利用注解开发" class="headerlink" title="8.2、利用注解开发"></a>8.2、利用注解开发</h2><ul>
<li><p><strong>mybatis最初配置信息是基于 XML ,映射语句(SQL)也是定义在 XML 中的。而到MyBatis 3提供了新的基于注解的配置。不幸的是，Java 注解的的表达力和灵活性十分有限。最强大的 MyBatis 映射并不能用注解来构建</strong></p>
</li>
<li><p>sql 类型主要分成 :</p>
</li>
<li><ul>
<li>@select ()</li>
<li>@update ()</li>
<li>@Insert ()</li>
<li>@delete ()</li>
</ul>
</li>
</ul>
<p><strong>注意：</strong>利用注解开发就不需要mapper.xml映射文件了 .</p>
<ol>
<li><p>我们在我们的接口中添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询全部用户</span><br><span class="hljs-meta">@Select(&quot;select id,name,pwd password from user&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getAllUser</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure></li>
<li><p>在mybatis的核心配置文件中注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--使用class绑定接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.mapper.UserMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>我们去进行测试</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetAllUser</span><span class="hljs-params">()</span> </span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br>   <span class="hljs-comment">//本质上利用了jvm的动态代理机制</span><br>   UserMapper mapper = session.getMapper(UserMapper.class);<br><br>   List&lt;User&gt; users = mapper.getAllUser();<br>   <span class="hljs-keyword">for</span> (User user : users)&#123;<br>       System.out.println(user);<br>  &#125;<br><br>   session.close();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>  4.利用Debug查看本质</p>
<p><img src="/myBlog/mybatis/image-20210621161958604.png" alt="image-20210621161958604"></p>
<p>5.本质上利用了jvm的动态代理机制</p>
<p><img src="/myBlog/mybatis/image-20210621162015063.png" alt="image-20210621162015063"></p>
<p>6.Mybatis详细的执行流程</p>
<p><img src="/myBlog/mybatis/image-20210621162031523.png" alt="image-20210621162031523"></p>
<h2 id="8-3、注解增删改"><a href="#8-3、注解增删改" class="headerlink" title="8.3、注解增删改"></a>8.3、注解增删改</h2><p>改造MybatisUtils工具类的getSession( ) 方法，重载实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取SqlSession连接</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSession</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> getSession(<span class="hljs-keyword">true</span>); <span class="hljs-comment">//事务自动提交</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSession</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> flag)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> sqlSessionFactory.openSession(flag);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>【注意】确保实体类和数据库字段对应</p>
<p><strong>查询：</strong></p>
<ol>
<li><p>编写接口方法注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据id查询用户</span><br><span class="hljs-meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-function">User <span class="hljs-title">selectUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br></code></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectUserById</span><span class="hljs-params">()</span> </span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br>   UserMapper mapper = session.getMapper(UserMapper.class);<br><br>   User user = mapper.selectUserById(<span class="hljs-number">1</span>);<br>   System.out.println(user);<br><br>   session.close();<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<p><strong>新增：</strong></p>
<ol>
<li><p>编写接口方法注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加一个用户</span><br><span class="hljs-meta">@Insert(&quot;insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;<br></code></pre></td></tr></table></figure></li>
<li><p>测试</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAddUser</span><span class="hljs-params">()</span> </span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br>   UserMapper mapper = session.getMapper(UserMapper.class);<br><br>   User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">6</span>, <span class="hljs-string">&quot;秦疆&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>   mapper.addUser(user);<br><br>   session.close();<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>修改：</strong></p>
<ol>
<li><p>编写接口方法注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//修改一个用户</span><br><span class="hljs-meta">@Update(&quot;update user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<br></code></pre></td></tr></table></figure></li>
<li><p>测试</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdateUser</span><span class="hljs-params">()</span> </span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br>   UserMapper mapper = session.getMapper(UserMapper.class);<br><br>   User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">6</span>, <span class="hljs-string">&quot;秦疆&quot;</span>, <span class="hljs-string">&quot;zxcvbn&quot;</span>);<br>   mapper.updateUser(user);<br><br>   session.close();<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>删除：</strong></p>
<ol>
<li><p>编写接口方法注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据id删除用</span><br><span class="hljs-meta">@Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span><span class="hljs-keyword">int</span> id)</span></span>;<br></code></pre></td></tr></table></figure></li>
<li><p>测试</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteUser</span><span class="hljs-params">()</span> </span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br>   UserMapper mapper = session.getMapper(UserMapper.class);<br><br>   mapper.deleteUser(<span class="hljs-number">6</span>);<br>   <br>   session.close();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>【注意点：增删改一定记得对事务的处理】</p>
<h2 id="8-4、关于-Param"><a href="#8-4、关于-Param" class="headerlink" title="8.4、关于@Param"></a>8.4、关于@Param</h2><p>@Param注解用于给方法参数起一个名字。以下是总结的使用原则：</p>
<ul>
<li>在方法只接受一个参数的情况下，可以不使用@Param。</li>
<li>在方法接受多个参数的情况下，建议一定要使用@Param注解给参数命名。</li>
<li>如果参数是 JavaBean ， 则不能使用@Param。</li>
<li>不使用@Param注解时，参数只能有一个，并且是Javabean。</li>
</ul>
<h2 id="8-5、-与-的区别"><a href="#8-5、-与-的区别" class="headerlink" title="8.5、#与$的区别"></a>8.5、#与$的区别</h2><ul>
<li><p>#{} 的作用主要是替换预编译语句(PrepareStatement)中的占位符? 【推荐使用】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function">INSERT INTO <span class="hljs-title">user</span> <span class="hljs-params">(name)</span> <span class="hljs-title">VALUES</span> <span class="hljs-params">(#&#123;name&#125;)</span></span>;<br><span class="hljs-function">INSERT INTO <span class="hljs-title">user</span> <span class="hljs-params">(name)</span> <span class="hljs-title">VALUES</span> <span class="hljs-params">(?)</span></span>;<br></code></pre></td></tr></table></figure></li>
<li><p>${} 的作用是直接进行字符串替换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function">INSERT INTO <span class="hljs-title">user</span> <span class="hljs-params">(name)</span> <span class="hljs-title">VALUES</span> <span class="hljs-params">(<span class="hljs-string">&#x27;$&#123;name&#125;&#x27;</span>)</span></span>;<br><span class="hljs-function">INSERT INTO <span class="hljs-title">user</span> <span class="hljs-params">(name)</span> <span class="hljs-title">VALUES</span> <span class="hljs-params">(<span class="hljs-string">&#x27;kuangshen&#x27;</span>)</span></span>;<br></code></pre></td></tr></table></figure>

<p><strong>使用注解和配置文件协同开发，才是MyBatis的最佳实践！</strong></p>
<p>使用注解开发可以提高我们的开发效率，可以合理使用哦！</p>
</li>
</ul>
<h1 id="9、Lombok"><a href="#9、Lombok" class="headerlink" title="9、Lombok"></a>9、Lombok</h1><p>使用步骤：</p>
<ol>
<li><p>在IDEA安装Lombok插件！</p>
</li>
<li><p>在项目中导入Lombok的jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>在实体类上加注解即可！</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">@Getter and @Setter<br>@FieldNameConstants<br>@ToString<br>@EqualsAndHashCode<br>@AllArgsConstructor, @RequiredArgsConstructor and @NoArgsConstructor<br>@Log, @Log4j, @Log4j2, @Slf4j, @XSlf4j, @CommonsLog, @JBossLog, @Flogger, @CustomLog<br>@Data<br>@Builder<br>@SuperBuilder<br>@Singular<br>@Delegate<br>@Value<br>@Accessors<br>@Wither<br>@With<br>@SneakyThrows<br>@val<br>@var<br>experimental @var<br>@UtilityClass<br>@ExtensionMethod (Experimental, activate manually in plugin settings)<br></code></pre></td></tr></table></figure>

<p>说明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Date</span>：无参构造，get、set、tostring、hashcode、equals<br><span class="hljs-meta">@NoArgsConstructor</span>  <span class="hljs-comment">//无参构造</span><br><span class="hljs-meta">@AllArgsConstructor</span>  <span class="hljs-comment">//有参构造</span><br></code></pre></td></tr></table></figure>

<h1 id="10、多对一处理"><a href="#10、多对一处理" class="headerlink" title="10、多对一处理"></a>10、多对一处理</h1><h2 id="10-1、测试环境搭建"><a href="#10-1、测试环境搭建" class="headerlink" title="10.1、测试环境搭建"></a>10.1、测试环境搭建</h2><ol>
<li>导入Lombok</li>
<li>新建实体类Teacher，Student</li>
<li>建立Mapper接口</li>
<li>建立Mapper.XML文件</li>
<li>在核心配置文件中绑定注册我们的Mapper接口或者文件！【方式很多，随心选】</li>
<li>测试查询是否能够成功！</li>
</ol>
<p><strong>多对一的处理</strong></p>
<p>多对一的理解：</p>
<ul>
<li>多个学生对应一个老师</li>
<li>如果对于学生这边，就是一个多对一的现象，即从学生这边关联一个老师！</li>
</ul>
<p><strong>数据库设计</strong></p>
<p><img src="/myBlog/mybatis/image-20210622005224017.png" alt="image-20210622005224017"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">CREATE TABLE `teacher` (<br>`id` INT(10) NOT NULL,<br>`name` VARCHAR(30) DEFAULT NULL,<br>PRIMARY KEY (`id`)<br>) ENGINE=INNODB DEFAULT CHARSET=utf8<br><br>INSERT INTO teacher(`id`, `name`) VALUES (1, &#x27;秦老师&#x27;);<br><br>CREATE TABLE `student` (<br>`id` INT(10) NOT NULL,<br>`name` VARCHAR(30) DEFAULT NULL,<br>`tid` INT(10) DEFAULT NULL,<br>PRIMARY KEY (`id`),<br>KEY `fktid` (`tid`),<br>CONSTRAINT `fktid` FOREIGN KEY (`tid`) REFERENCES `teacher` (`id`)<br>) ENGINE=INNODB DEFAULT CHARSET=utf8<br><br><br>INSERT INTO `student` (`id`, `name`, `tid`) VALUES (&#x27;1&#x27;, &#x27;小明&#x27;, &#x27;1&#x27;);<br>INSERT INTO `student` (`id`, `name`, `tid`) VALUES (&#x27;2&#x27;, &#x27;小红&#x27;, &#x27;1&#x27;);<br>INSERT INTO `student` (`id`, `name`, `tid`) VALUES (&#x27;3&#x27;, &#x27;小张&#x27;, &#x27;1&#x27;);<br>INSERT INTO `student` (`id`, `name`, `tid`) VALUES (&#x27;4&#x27;, &#x27;小李&#x27;, &#x27;1&#x27;);<br>INSERT INTO `student` (`id`, `name`, `tid`) VALUES (&#x27;5&#x27;, &#x27;小王&#x27;, &#x27;1&#x27;);<br></code></pre></td></tr></table></figure>

<p><strong>搭建测试环境</strong></p>
<ol>
<li><p>IDEA安装Lombok插件</p>
</li>
<li><p>引入Maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.16.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>s<br></code></pre></td></tr></table></figure></li>
<li><p>在代码中增加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span> <span class="hljs-comment">//GET,SET,ToString，有参，无参构造</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>   <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>   <span class="hljs-keyword">private</span> String name;<br>   <span class="hljs-comment">//多个学生可以是同一个老师，即多对一</span><br>   <span class="hljs-keyword">private</span> Teacher teacher;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>编写实体类对应的Mapper接口 【两个】</p>
<p><strong>无论有没有需求，都应该写上，以备后来之需！</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentMapper</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TeacherMapper</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>编写Mapper接口对应的 mapper.xml配置文件 【两个】</p>
<p><strong>无论有没有需求，都应该写上，以备后来之需！</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">           <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">           <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.kuang.mapper.StudentMapper&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">           <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">           <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.kuang.mapper.TeacherMapper&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
</ol>
<h2 id="10-2、按查询嵌套处理"><a href="#10-2、按查询嵌套处理" class="headerlink" title="10.2、按查询嵌套处理"></a>10.2、按查询嵌套处理</h2><ol>
<li><p>给StudentMapper接口增加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取所有学生及对应老师的信息</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title">getStudents</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure></li>
<li><p>编写对应的Mapper文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">       <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">       <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.kuang.mapper.StudentMapper&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">   需求：获取所有学生及对应老师的信息</span><br><span class="hljs-comment">   思路：</span><br><span class="hljs-comment">       1. 获取所有学生的信息</span><br><span class="hljs-comment">       2. 根据获取的学生信息的老师ID-&gt;获取该老师的信息</span><br><span class="hljs-comment">       3. 思考问题，这样学生的结果集中应该包含老师，该如何处理呢，数据库中我们一般使用关联查询？</span><br><span class="hljs-comment">           1. 做一个结果集映射：StudentTeacher</span><br><span class="hljs-comment">           2. StudentTeacher结果集的类型为 Student</span><br><span class="hljs-comment">           3. 学生中老师的属性为teacher，对应数据库中为tid。</span><br><span class="hljs-comment">              多个 [1,...）学生关联一个老师=&gt; 一对一，一对多</span><br><span class="hljs-comment">           4. 查看官网找到：association – 一个复杂类型的关联；使用它来处理关联查询</span><br><span class="hljs-comment">   --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudents&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;StudentTeacher&quot;</span>&gt;</span><br>    select * from student<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StudentTeacher&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--association关联属性 property属性名 javaType属性类型 column在多的一方的表中的列名--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span>  <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getTeacher&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">   这里传递过来的id，只有一个属性的时候，下面可以写任何值</span><br><span class="hljs-comment">   association中column多参数配置：</span><br><span class="hljs-comment">       column=&quot;&#123;key=value,key=value&#125;&quot;</span><br><span class="hljs-comment">       其实就是键值对的形式，key是传给下个sql的取值名称，value是片段一中sql查询的字段名。</span><br><span class="hljs-comment">   --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;teacher&quot;</span>&gt;</span><br>      select * from teacher where id = #&#123;id&#125;<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>编写完毕去Mybatis配置文件中，注册Mapper！</p>
</li>
<li><p>注意点说明：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StudentTeacher&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--association关联属性 property属性名 javaType属性类型 column在多的一方的表中的列名--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span>  <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;&#123;id=tid,name=tid&#125;&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getTeacher&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">这里传递过来的id，只有一个属性的时候，下面可以写任何值</span><br><span class="hljs-comment">association中column多参数配置：</span><br><span class="hljs-comment">   column=&quot;&#123;key=value,key=value&#125;&quot;</span><br><span class="hljs-comment">   其实就是键值对的形式，key是传给下个sql的取值名称，value是片段一中sql查询的字段名。</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;teacher&quot;</span>&gt;</span><br>  select * from teacher where id = #&#123;id&#125; and name = #&#123;name&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>测试</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetStudents</span><span class="hljs-params">()</span></span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br>   StudentMapper mapper = session.getMapper(StudentMapper.class);<br><br>   List&lt;Student&gt; students = mapper.getStudents();<br><br>   <span class="hljs-keyword">for</span> (Student student : students)&#123;<br>       System.out.println(<br>               <span class="hljs-string">&quot;学生名:&quot;</span>+ student.getName()<br>                       +<span class="hljs-string">&quot;\t老师:&quot;</span>+student.getTeacher().getName());<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="10-3、按结果嵌套处理"><a href="#10-3、按结果嵌套处理" class="headerlink" title="10.3、按结果嵌套处理"></a>10.3、按结果嵌套处理</h2><p>除了上面这种方式，还有其他思路吗？</p>
<p>我们还可以按照结果进行嵌套处理；</p>
<ol>
<li><p>接口方法编写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title">getStudents2</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure></li>
<li><p>编写对应的mapper文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">按查询结果嵌套处理</span><br><span class="hljs-comment">思路：</span><br><span class="hljs-comment">   1. 直接查询出结果，进行结果集的映射</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudents2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;StudentTeacher2&quot;</span> &gt;</span><br>  select s.id sid, s.name sname , t.name tname<br>  from student s,teacher t<br>  where s.tid = t.id<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StudentTeacher2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span>/&gt;</span><br>   <span class="hljs-comment">&lt;!--关联对象property 关联对象在Student实体类中的属性--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>去mybatis-config文件中注入【此处应该处理过了】</p>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetStudents2</span><span class="hljs-params">()</span></span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br>   StudentMapper mapper = session.getMapper(StudentMapper.class);<br><br>   List&lt;Student&gt; students = mapper.getStudents2();<br><br>   <span class="hljs-keyword">for</span> (Student student : students)&#123;<br>       System.out.println(<br>               <span class="hljs-string">&quot;学生名:&quot;</span>+ student.getName()<br>                       +<span class="hljs-string">&quot;\t老师:&quot;</span>+student.getTeacher().getName());<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<p><strong>小结</strong></p>
<p>按照查询进行嵌套处理就像SQL中的子查询</p>
<p>按照结果进行嵌套处理就像SQL中的联表查询</p>
<h1 id="11、一对多处理"><a href="#11、一对多处理" class="headerlink" title="11、一对多处理"></a>11、一对多处理</h1><p>一对多的理解：</p>
<ul>
<li>一个老师拥有多个学生</li>
<li>如果对于老师这边，就是一个一对多的现象，即从一个老师下面拥有一群学生（集合）！</li>
</ul>
<p><strong>实体类编写</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>   <span class="hljs-keyword">private</span> String name;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> tid;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>   <span class="hljs-keyword">private</span> String name;<br>   <span class="hljs-comment">//一个老师多个学生</span><br>   <span class="hljs-keyword">private</span> List&lt;Student&gt; students;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>….. 和之前一样，搭建测试的环境！</p>
<h2 id="11-1、按结果嵌套处理"><a href="#11-1、按结果嵌套处理" class="headerlink" title="11.1、按结果嵌套处理"></a>11.1、按结果嵌套处理</h2><ol>
<li><p>TeacherMapper接口编写方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取指定老师，及老师下的所有学生</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Teacher <span class="hljs-title">getTeacher</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br></code></pre></td></tr></table></figure></li>
<li><p>编写接口对应的Mapper配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.kuang.mapper.TeacherMapper&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">   思路:</span><br><span class="hljs-comment">       1. 从学生表和老师表中查出学生id，学生姓名，老师姓名</span><br><span class="hljs-comment">       2. 对查询出来的操作做结果集映射</span><br><span class="hljs-comment">           1. 集合的话，使用collection！</span><br><span class="hljs-comment">               JavaType和ofType都是用来指定对象类型的</span><br><span class="hljs-comment">               JavaType是用来指定pojo中属性的类型</span><br><span class="hljs-comment">               ofType指定的是映射到list集合属性中pojo的类型。</span><br><span class="hljs-comment">   --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;TeacherStudent&quot;</span>&gt;</span><br>      select s.id sid, s.name sname , t.name tname, t.id tid<br>      from student s,teacher t<br>      where s.tid = t.id and t.id=#&#123;id&#125;<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TeacherStudent&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">result</span>  <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span> /&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span> /&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> /&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>将Mapper文件注册到MyBatis-config文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mapper/TeacherMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>测试</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetTeacher</span><span class="hljs-params">()</span></span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br>   TeacherMapper mapper = session.getMapper(TeacherMapper.class);<br>   Teacher teacher = mapper.getTeacher(<span class="hljs-number">1</span>);<br>   System.out.println(teacher.getName());<br>   System.out.println(teacher.getStudents());<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="11-2、按查询嵌套处理"><a href="#11-2、按查询嵌套处理" class="headerlink" title="11.2、按查询嵌套处理"></a>11.2、按查询嵌套处理</h2><ol>
<li><p>TeacherMapper接口编写方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Teacher <span class="hljs-title">getTeacher2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br></code></pre></td></tr></table></figure></li>
<li><p>编写接口对应的Mapper配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;TeacherStudent2&quot;</span>&gt;</span><br>select * from teacher where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TeacherStudent2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--column是一对多的外键 , 写的是一的主键的列名--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;ArrayList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getStudentByTeacherId&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudentByTeacherId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>  select * from student where tid = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>将Mapper文件注册到MyBatis-config文件中</p>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetTeacher2</span><span class="hljs-params">()</span></span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br>   TeacherMapper mapper = session.getMapper(TeacherMapper.class);<br>   Teacher teacher = mapper.getTeacher2(<span class="hljs-number">1</span>);<br>   System.out.println(teacher.getName());<br>   System.out.println(teacher.getStudents());<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<p><strong>小结</strong></p>
<ol>
<li>关联-association</li>
<li>集合-collection</li>
<li>所以association是用于一对一和多对一，而collection是用于一对多的关系</li>
<li>JavaType和ofType都是用来指定对象类型的<ul>
<li>JavaType是用来指定pojo中属性的类型</li>
<li>ofType指定的是映射到list集合属性中pojo的类型。</li>
</ul>
</li>
</ol>
<p><strong>注意说明：</strong></p>
<ol>
<li>保证SQL的可读性，尽量通俗易懂</li>
<li>根据实际要求，尽量编写性能更高的SQL语句</li>
<li>注意属性名和字段不一致的问题</li>
<li>注意一对多和多对一 中：字段和属性对应的问题</li>
<li>尽量使用Log4j，通过日志来查看自己的错误</li>
</ol>
<p>一对多和多对一对于很多人来说是难点，一定要大量的做练习理解</p>
<h1 id="12、动态SQL"><a href="#12、动态SQL" class="headerlink" title="12、动态SQL"></a>12、动态SQL</h1><h2 id="12-1、介绍"><a href="#12-1、介绍" class="headerlink" title="12.1、介绍"></a>12.1、介绍</h2><p>什么是动态SQL：<strong>动态SQL指的是根据不同的查询条件 , 生成不同的Sql语句.</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">官网描述：<br>MyBatis 的强大特性之一便是它的动态 SQL。如果你有使用 JDBC 或其它类似框架的经验，你就能体会到根据不同条件拼接 SQL 语句的痛苦。例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL 这一特性可以彻底摆脱这种痛苦。<br>虽然在以前使用动态 SQL 并非一件易事，但正是 MyBatis 提供了可以被用在任意 SQL 映射语句中的强大的动态 SQL 语言得以改进这种情形。<br>动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis <span class="hljs-number">3</span> 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。<br><br>  -------------------------------<br>  - <span class="hljs-keyword">if</span><br>  - choose (when, otherwise)<br>  - trim (where, set)<br>  - foreach<br>  -------------------------------<br></code></pre></td></tr></table></figure>

<p>我们之前写的 SQL 语句都比较简单，如果有比较复杂的业务，我们需要写复杂的 SQL 语句，往往需要拼接，而拼接 SQL ，稍微不注意，由于引号，空格等缺失可能都会导致错误。</p>
<p>那么怎么去解决这个问题呢？这就要使用 mybatis 动态SQL，通过 if, choose, when, otherwise, trim, where, set, foreach等标签，可组合成非常灵活的SQL语句，从而在提高 SQL 语句的准确性的同时，也大大提高了开发人员的效率。</p>
<h2 id="12-2、搭建环境"><a href="#12-2、搭建环境" class="headerlink" title="12.2、搭建环境"></a>12.2、搭建环境</h2><p><strong>新建一个数据库表：blog</strong></p>
<p>字段：id，title，author，create_time，views</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">CREATE TABLE `blog` (<br>`id` varchar(50) NOT NULL COMMENT &#x27;博客id&#x27;,<br>`title` varchar(100) NOT NULL COMMENT &#x27;博客标题&#x27;,<br>`author` varchar(30) NOT NULL COMMENT &#x27;博客作者&#x27;,<br>`create_time` datetime NOT NULL COMMENT &#x27;创建时间&#x27;,<br>`views` int(30) NOT NULL COMMENT &#x27;浏览量&#x27;<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8<br></code></pre></td></tr></table></figure>

<ol>
<li><p>创建Mybatis基础工程</p>
</li>
<li><p>IDutil工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IDUtil</span> </span>&#123;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">genId</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> UUID.randomUUID().toString().replaceAll(<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>实体类编写  【注意set方法作用】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Blog</span> </span>&#123;<br><br>   <span class="hljs-keyword">private</span> String id;<br>   <span class="hljs-keyword">private</span> String title;<br>   <span class="hljs-keyword">private</span> String author;<br>   <span class="hljs-keyword">private</span> Date createTime;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> views;<br>   <span class="hljs-comment">//set，get....</span><br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>编写Mapper接口及xml文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BlogMapper</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">       <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">       <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.kuang.mapper.BlogMapper&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>插入初始数据</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-comment">&lt;!--注册Mapper.xml--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mapper/BlogMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>插入初始数据</p>
</li>
</ol>
<p>编写接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//新增一个博客</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addBlog</span><span class="hljs-params">(Blog blog)</span></span>;<br></code></pre></td></tr></table></figure>

<p>sql配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addBlog&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>  insert into blog (id, title, author, create_time, views)<br>  values (#&#123;id&#125;,#&#123;title&#125;,#&#123;author&#125;,#&#123;createTime&#125;,#&#123;views&#125;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>初始化博客方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInitBlog</span><span class="hljs-params">()</span></span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br>   BlogMapper mapper = session.getMapper(BlogMapper.class);<br><br>   Blog blog = <span class="hljs-keyword">new</span> Blog();<br>   blog.setId(IDUtil.genId());<br>   blog.setTitle(<span class="hljs-string">&quot;Mybatis如此简单&quot;</span>);<br>   blog.setAuthor(<span class="hljs-string">&quot;狂神说&quot;</span>);<br>   blog.setCreateTime(<span class="hljs-keyword">new</span> Date());<br>   blog.setViews(<span class="hljs-number">9999</span>);<br><br>   mapper.addBlog(blog);<br><br>   blog.setId(IDUtil.genId());<br>   blog.setTitle(<span class="hljs-string">&quot;Java如此简单&quot;</span>);<br>   mapper.addBlog(blog);<br><br>   blog.setId(IDUtil.genId());<br>   blog.setTitle(<span class="hljs-string">&quot;Spring如此简单&quot;</span>);<br>   mapper.addBlog(blog);<br><br>   blog.setId(IDUtil.genId());<br>   blog.setTitle(<span class="hljs-string">&quot;微服务如此简单&quot;</span>);<br>   mapper.addBlog(blog);<br><br>   session.close();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>初始化数据完毕！</p>
<h2 id="12-3、if-语句"><a href="#12-3、if-语句" class="headerlink" title="12.3、if 语句"></a>12.3、if 语句</h2><p><strong>需求：根据作者名字和博客名字来查询博客！如果作者名字为空，那么只根据博客名字查询，反之，则根据作者名来查询</strong></p>
<ol>
<li><p>编写接口类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//需求1</span><br><span class="hljs-function">List&lt;Blog&gt; <span class="hljs-title">queryBlogIf</span><span class="hljs-params">(Map map)</span></span>;<br></code></pre></td></tr></table></figure></li>
<li><p>编写SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--需求1：</span><br><span class="hljs-comment">根据作者名字和博客名字来查询博客！</span><br><span class="hljs-comment">如果作者名字为空，那么只根据博客名字查询，反之，则根据作者名来查询</span><br><span class="hljs-comment">select * from blog where title = #&#123;title&#125; and author = #&#123;author&#125;</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIf&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>  select * from blog where<br>   <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>      title = #&#123;title&#125;<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>      and author = #&#123;author&#125;<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryBlogIf</span><span class="hljs-params">()</span></span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br>   BlogMapper mapper = session.getMapper(BlogMapper.class);<br><br>   HashMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;();<br>   map.put(<span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-string">&quot;Mybatis如此简单&quot;</span>);<br>   map.put(<span class="hljs-string">&quot;author&quot;</span>,<span class="hljs-string">&quot;狂神说&quot;</span>);<br>   List&lt;Blog&gt; blogs = mapper.queryBlogIf(map);<br><br>   System.out.println(blogs);<br><br>   session.close();<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<p>这样写我们可以看到，如果 author 等于 null，那么查询语句为 select * from user where title=#{title},但是如果title为空呢？那么查询语句为 select * from user where and author=#{author}，这是错误的 SQL 语句，如何解决呢？请看下面的 where 语句！</p>
<h2 id="12-4、Where"><a href="#12-4、Where" class="headerlink" title="12.4、Where"></a>12.4、Where</h2><p>修改上面的SQL语句；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIf&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>  select * from blog<br>   <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>          title = #&#123;title&#125;<br>       <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>          and author = #&#123;author&#125;<br>       <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>这个“where”标签会知道如果它包含的标签中有返回值的话，它就插入一个‘where’。此外，如果标签返回的内容是以AND 或OR 开头的，则它会剔除掉。</p>
<h2 id="12-5、Set"><a href="#12-5、Set" class="headerlink" title="12.5、Set"></a>12.5、Set</h2><p>同理，上面的对于查询 SQL 语句包含 where 关键字，如果在进行更新操作的时候，含有 set 关键词，我们怎么处理呢？</p>
<ol>
<li><p>编写接口方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateBlog</span><span class="hljs-params">(Map map)</span></span>;<br></code></pre></td></tr></table></figure></li>
<li><p>sql配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注意set是用的逗号隔开--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateBlog&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>  update blog<br>     <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>            title = #&#123;title&#125;,<br>         <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>            author = #&#123;author&#125;<br>         <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>  where id = #&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdateBlog</span><span class="hljs-params">()</span></span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br>   BlogMapper mapper = session.getMapper(BlogMapper.class);<br><br>   HashMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;();<br>   map.put(<span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-string">&quot;动态SQL&quot;</span>);<br>   map.put(<span class="hljs-string">&quot;author&quot;</span>,<span class="hljs-string">&quot;秦疆&quot;</span>);<br>   map.put(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-string">&quot;9d6a763f5e1347cebda43e2a32687a77&quot;</span>);<br><br>   mapper.updateBlog(map);<br><br><br>   session.close();<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="11-6、choose语句"><a href="#11-6、choose语句" class="headerlink" title="11.6、choose语句"></a>11.6、choose语句</h2></li>
</ol>
<p>有时候，我们不想用到所有的查询条件，只想选择其中的一个，查询条件有一个满足即可，使用 choose 标签可以解决此类问题，类似于 Java 的 switch 语句</p>
<ol>
<li><p>编写接口方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function">List&lt;Blog&gt; <span class="hljs-title">queryBlogChoose</span><span class="hljs-params">(Map map)</span></span>;<br></code></pre></td></tr></table></figure></li>
<li><p>sql配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogChoose&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>  select * from blog<br>   <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>                title = #&#123;title&#125;<br>           <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>              and author = #&#123;author&#125;<br>           <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>              and views = #&#123;views&#125;<br>           <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryBlogChoose</span><span class="hljs-params">()</span></span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br>   BlogMapper mapper = session.getMapper(BlogMapper.class);<br><br>   HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br>   map.put(<span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-string">&quot;Java如此简单&quot;</span>);<br>   map.put(<span class="hljs-string">&quot;author&quot;</span>,<span class="hljs-string">&quot;狂神说&quot;</span>);<br>   map.put(<span class="hljs-string">&quot;views&quot;</span>,<span class="hljs-number">9999</span>);<br>   List&lt;Blog&gt; blogs = mapper.queryBlogChoose(map);<br><br>   System.out.println(blogs);<br><br>   session.close();<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<h2 id="12-6、SQL片段"><a href="#12-6、SQL片段" class="headerlink" title="12.6、SQL片段"></a>12.6、SQL片段</h2><p>有时候可能某个 sql 语句我们用的特别多，为了增加代码的重用性，简化代码，我们需要将这些代码抽取出来，然后使用时直接调用。</p>
<p><strong>提取SQL片段：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;if-title-author&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>      title = #&#123;title&#125;<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>      and author = #&#123;author&#125;<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>引用SQL片段：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIf&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>  select * from blog<br>   <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 引用 sql 片段，如果refid 指定的不在本文件中，那么需要在前面加上 namespace --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;if-title-author&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 在这里还可以引用其他的 sql 片段 --&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>注意：</p>
<p>①、最好基于 单表来定义 sql 片段，提高片段的可重用性</p>
<p>②、在 sql 片段中不要包括 where</p>
<h2 id="12-7、Foreach"><a href="#12-7、Foreach" class="headerlink" title="12.7、Foreach"></a>12.7、Foreach</h2><p>将数据库中前三个数据的id修改为1,2,3；</p>
<p>需求：我们需要查询 blog 表中 id 分别为1,2,3的博客信息</p>
<ol>
<li><p>编写接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function">List&lt;Blog&gt; <span class="hljs-title">queryBlogForeach</span><span class="hljs-params">(Map map)</span></span>;<br></code></pre></td></tr></table></figure></li>
<li><p>编写SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogForeach&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>  select * from blog<br>   <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">       collection:指定输入对象中的集合属性</span><br><span class="hljs-comment">       item:每次遍历生成的对象</span><br><span class="hljs-comment">       open:开始遍历时的拼接字符串</span><br><span class="hljs-comment">       close:结束时拼接的字符串</span><br><span class="hljs-comment">       separator:遍历对象之间需要拼接的字符串</span><br><span class="hljs-comment">       select * from blog where 1=1 and (id=1 or id=2 or id=3)</span><br><span class="hljs-comment">     --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span>  <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;and (&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;or&quot;</span>&gt;</span><br>          id=#&#123;id&#125;<br>       <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryBlogForeach</span><span class="hljs-params">()</span></span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br>   BlogMapper mapper = session.getMapper(BlogMapper.class);<br><br>   HashMap map = <span class="hljs-keyword">new</span> HashMap();<br>   List&lt;Integer&gt; ids = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>   ids.add(<span class="hljs-number">1</span>);<br>   ids.add(<span class="hljs-number">2</span>);<br>   ids.add(<span class="hljs-number">3</span>);<br>   map.put(<span class="hljs-string">&quot;ids&quot;</span>,ids);<br><br>   List&lt;Blog&gt; blogs = mapper.queryBlogForeach(map);<br><br>   System.out.println(blogs);<br><br>   session.close();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>小结：其实动态 sql 语句的编写往往就是一个拼接的问题，为了保证拼接准确，我们最好首先要写原生的 sql 语句出来，然后在通过 mybatis 动态sql 对照着改，防止出错。多在实践中使用才是熟练掌握它的技巧。s</p>
</li>
</ol>
<h1 id="13、缓存"><a href="#13、缓存" class="headerlink" title="13、缓存"></a>13、缓存</h1><h2 id="13-1、简介"><a href="#13-1、简介" class="headerlink" title="13.1、简介"></a>13.1、简介</h2><p>1、什么是缓存 [ Cache ]？</p>
<ul>
<li>存在内存中的临时数据。</li>
<li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li>
</ul>
<p>2、为什么使用缓存？</p>
<ul>
<li>减少和数据库的交互次数，减少系统开销，提高系统效率。</li>
</ul>
<p>3、什么样的数据能使用缓存？</p>
<ul>
<li>经常查询并且不经常改变的数据。</li>
</ul>
<h2 id="13-2、Mybatis缓存"><a href="#13-2、Mybatis缓存" class="headerlink" title="13.2、Mybatis缓存"></a>13.2、Mybatis缓存</h2><ul>
<li><p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</p>
</li>
<li><p>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong></p>
</li>
<li><ul>
<li>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</li>
<li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</li>
<li>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</li>
</ul>
</li>
</ul>
<h2 id="13-3、一级缓存"><a href="#13-3、一级缓存" class="headerlink" title="13.3、一级缓存"></a>13.3、一级缓存</h2><p>一级缓存也叫本地缓存：</p>
<ul>
<li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li>
<li>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库；</li>
</ul>
<p><strong>测试</strong></p>
<ol>
<li><p>在mybatis中加入日志，方便测试结果</p>
</li>
<li><p>编写接口方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据id查询用户</span><br><span class="hljs-function">User <span class="hljs-title">queryUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br></code></pre></td></tr></table></figure></li>
<li><p>接口对应的Mapper文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>  select * from user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryUserById</span><span class="hljs-params">()</span></span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br>   UserMapper mapper = session.getMapper(UserMapper.class);<br><br>   User user = mapper.queryUserById(<span class="hljs-number">1</span>);<br>   System.out.println(user);<br>   User user2 = mapper.queryUserById(<span class="hljs-number">1</span>);<br>   System.out.println(user2);<br>   System.out.println(user==user2);<br><br>   session.close();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>5.结果分析</p>
</li>
</ol>
<p><img src="/myBlog/mybatis/image-20210622140854609.png" alt="image-20210622140854609"></p>
<p><strong>一级缓存失效的四种情况</strong></p>
<p>一级缓存是SqlSession级别的缓存，是一直开启的，我们关闭不了它；</p>
<p>一级缓存失效情况：没有使用到当前的一级缓存，效果就是，还需要再向数据库中发起一次查询请求！</p>
<ol>
<li><p>sqlSession不同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryUserById</span><span class="hljs-params">()</span></span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br>   SqlSession session2 = MybatisUtils.getSession();<br>   UserMapper mapper = session.getMapper(UserMapper.class);<br>   UserMapper mapper2 = session2.getMapper(UserMapper.class);<br><br>   User user = mapper.queryUserById(<span class="hljs-number">1</span>);<br>   System.out.println(user);<br>   User user2 = mapper2.queryUserById(<span class="hljs-number">1</span>);<br>   System.out.println(user2);<br>   System.out.println(user==user2);<br><br>   session.close();<br>   session2.close();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>观察结果：发现发送了两条SQL语句！</p>
<p>结论：<strong>每个sqlSession中的缓存相互独立</strong></p>
</li>
<li><p>sqlSession相同，查询条件不同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryUserById</span><span class="hljs-params">()</span></span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br>   UserMapper mapper = session.getMapper(UserMapper.class);<br>   UserMapper mapper2 = session.getMapper(UserMapper.class);<br><br>   User user = mapper.queryUserById(<span class="hljs-number">1</span>);<br>   System.out.println(user);<br>   User user2 = mapper2.queryUserById(<span class="hljs-number">2</span>);<br>   System.out.println(user2);<br>   System.out.println(user==user2);<br><br>   session.close();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>观察结果：发现发送了两条SQL语句！很正常的理解</p>
<p>结论：<strong>当前缓存中，不存在这个数据</strong></p>
</li>
<li><p>sqlSession相同，两次查询之间执行了增删改操作</p>
<p>增加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//修改用户</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(Map map)</span></span>;<br></code></pre></td></tr></table></figure>

<p>编写SQL</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>  update user set name = #&#123;name&#125; where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryUserById</span><span class="hljs-params">()</span></span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br>   UserMapper mapper = session.getMapper(UserMapper.class);<br><br>   User user = mapper.queryUserById(<span class="hljs-number">1</span>);<br>   System.out.println(user);<br><br>   HashMap map = <span class="hljs-keyword">new</span> HashMap();<br>   map.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;kuangshen&quot;</span>);<br>   map.put(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-number">4</span>);<br>   mapper.updateUser(map);<br><br>   User user2 = mapper.queryUserById(<span class="hljs-number">1</span>);<br>   System.out.println(user2);<br><br>   System.out.println(user==user2);<br><br>   session.close();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>观察结果：查询在中间执行了增删改操作后，重新执行了</p>
<p>结论：<strong>因为增删改操作可能会对当前数据产生影响</strong></p>
</li>
<li><p>sqlSession相同，手动清除一级缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryUserById</span><span class="hljs-params">()</span></span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br>   UserMapper mapper = session.getMapper(UserMapper.class);<br><br>   User user = mapper.queryUserById(<span class="hljs-number">1</span>);<br>   System.out.println(user);<br><br>   session.clearCache();<span class="hljs-comment">//手动清除缓存</span><br><br>   User user2 = mapper.queryUserById(<span class="hljs-number">1</span>);<br>   System.out.println(user2);<br><br>   System.out.println(user==user2);<br><br>   session.close();<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<p>一级缓存就是一个map</p>
<h2 id="13-4、二级缓存"><a href="#13-4、二级缓存" class="headerlink" title="13.4、二级缓存"></a>13.4、二级缓存</h2><ul>
<li><p>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</p>
</li>
<li><p>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</p>
</li>
<li><p>工作机制</p>
</li>
<li><ul>
<li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li>
<li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</li>
<li>新的会话查询信息，就可以从二级缓存中获取内容；</li>
<li>不同的mapper查出的数据会放在自己对应的缓存（map）中；</li>
</ul>
</li>
</ul>
<p><strong>使用步骤</strong></p>
<ol>
<li><p>开启全局缓存 【mybatis-config.xml】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>去每个mapper.xml中配置使用二级缓存，这个配置非常简单；【xxxMapper.xml】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>/&gt;</span><br><br>官方示例=====&gt;查看官方文档<br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span></span><br><span class="hljs-tag"> <span class="hljs-attr">eviction</span>=<span class="hljs-string">&quot;FIFO&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">flushInterval</span>=<span class="hljs-string">&quot;60000&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;512&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">readOnly</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。<br></code></pre></td></tr></table></figure></li>
<li><p>代码测试</p>
<ul>
<li>所有的实体类先实现序列化接口</li>
<li>测试代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryUserById</span><span class="hljs-params">()</span></span>&#123;<br>   SqlSession session = MybatisUtils.getSession();<br>   SqlSession session2 = MybatisUtils.getSession();<br><br>   UserMapper mapper = session.getMapper(UserMapper.class);<br>   UserMapper mapper2 = session2.getMapper(UserMapper.class);<br><br>   User user = mapper.queryUserById(<span class="hljs-number">1</span>);<br>   System.out.println(user);<br>   session.close();<br><br>   User user2 = mapper2.queryUserById(<span class="hljs-number">1</span>);<br>   System.out.println(user2);<br>   System.out.println(user==user2);<br><br>   session2.close();<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<p><strong>结论</strong></p>
<ul>
<li>只要开启了二级缓存，我们在同一个Mapper中的查询，可以在二级缓存中拿到数据</li>
<li>查出的数据都会被默认先放在一级缓存中</li>
<li>只有会话提交或者关闭以后，一级缓存中的数据才会转到二级缓存中</li>
</ul>
<h2 id="13-5、缓存原理图"><a href="#13-5、缓存原理图" class="headerlink" title="13.5、缓存原理图"></a>13.5、缓存原理图</h2><p><img src="/myBlog/mybatis/image-20210622141444604.png" alt="image-20210622141444604"></p>
<h2 id="13-6、EhCache"><a href="#13-6、EhCache" class="headerlink" title="13.6、EhCache"></a>13.6、EhCache</h2><p>第三方缓存实现–EhCache: 查看百度百科</p>
<p>Ehcache是一种广泛使用的java分布式缓存，用于通用缓存；</p>
<p>要在应用程序中使用Ehcache，需要引入依赖的jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.caches<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>在mapper.xml中使用对应的缓存即可<br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span> = <span class="hljs-string">“org.acme.FooMapper”</span> &gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span> = <span class="hljs-string">“org.mybatis.caches.ehcache.EhcacheCache”</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br>编写ehcache.xml文件，如果在加载时未找到/ehcache.xml资源或出现问题，则将使用默认配置。<br><br><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">updateCheck</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">      diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：</span><br><span class="hljs-comment">      user.home – 用户主目录</span><br><span class="hljs-comment">      user.dir – 用户当前工作目录</span><br><span class="hljs-comment">      java.io.tmpdir – 默认临时文件路径</span><br><span class="hljs-comment">    --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;./tmpdir/Tmp_EhCache&quot;</span>/&gt;</span><br>   <br>   <span class="hljs-tag">&lt;<span class="hljs-name">defaultCache</span></span><br><span class="hljs-tag">           <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;10000&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;1800&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;259200&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>/&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">cache</span></span><br><span class="hljs-tag">           <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cloud_user&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;5000&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;1800&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;1800&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>/&gt;</span><br>   <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">      defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。</span><br><span class="hljs-comment">    --&gt;</span><br>   <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">     name:缓存名称。</span><br><span class="hljs-comment">     maxElementsInMemory:缓存最大数目</span><br><span class="hljs-comment">     maxElementsOnDisk：硬盘最大缓存个数。</span><br><span class="hljs-comment">     eternal:对象是否永久有效，一但设置了，timeout将不起作用。</span><br><span class="hljs-comment">     overflowToDisk:是否保存到磁盘，当系统当机时</span><br><span class="hljs-comment">     timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</span><br><span class="hljs-comment">     timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。</span><br><span class="hljs-comment">     diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.</span><br><span class="hljs-comment">     diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</span><br><span class="hljs-comment">     diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。</span><br><span class="hljs-comment">     memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</span><br><span class="hljs-comment">     clearOnFlush：内存数量最大时是否清除。</span><br><span class="hljs-comment">     memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。</span><br><span class="hljs-comment">     FIFO，first in first out，这个是大家最熟的，先进先出。</span><br><span class="hljs-comment">     LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。</span><br><span class="hljs-comment">     LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</span><br><span class="hljs-comment">  --&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>framework</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/myBlog/SpringMVC/</url>
    <content><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><p>ssm: mybatis + Spring + SpringMVC MVC三层架构</p>
<p>JavaSE:认真学习, 老师带，入门快<br>JavaWeb:认真学习,老师带,入门快<br>SSM框架:研究官方文档，锻炼自学能力，锻炼笔记能力，锻炼项目能力</p>
<p>SpringMVC + Vue + SpringBoot + SpringCloud + Linux</p>
<p>SSM = JavaWeb做项目;</p>
<p>Spring: IOC和APO</p>
<p>SpringMVC: SpringMVC的执行流程!</p>
<p>SpringMVC : SSM框架整合!</p>
<p>Spring</p>
<p>MVC:模型(dao, service) 视图 (jsp)控制器 (Servlet)<br>dao<br>service<br>servlet :转发，重定向<br>jsp/html</p>
<p>前端数据传输实体类</p>
<p>实体类:用户名，密码，生日，爱好，… 20个</p>
<p>前端:用户名密码</p>
<p>pojo: User<br>vo: UserVo<br>dto:</p>
<p><strong>JSP:本质就是一个Servlet</strong></p>
<p>假设:你的项目的架构，是设计好的，还是演进的?</p>
<ul>
<li>Alibaba PHP</li>
<li>随着用户大， Java</li>
<li>王坚去 IOE MySQL</li>
<li>MySQL : MySQL–&gt; AliSQL. AliRedis</li>
<li>Allinone –微服务</li>
</ul>
<p>MVC :</p>
<p>MWM: M V VM ViewModel :双向绑定</p>
<h1 id="1、什么是MVC"><a href="#1、什么是MVC" class="headerlink" title="1、什么是MVC"></a>1、什么是MVC</h1><ul>
<li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。</li>
<li>是将业务逻辑、数据、显示分离的方法来组织代码。</li>
<li>MVC主要作用是<strong>降低了视图与业务逻辑间的双向偶合</strong>。</li>
<li>MVC不是一种设计模式，<strong>MVC是一种架构模式</strong>。当然不同的MVC存在差异。</li>
</ul>
<p><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p>
<p><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p>
<p><strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。 也就是说控制器做了个调度员的工作。</p>
<p><strong>最典型的MVC就是JSP + servlet + javabean的模式。</strong></p>
<p><img src="/myBlog/SpringMVC/1905053-20200331221325100-1165356814.png" alt="img"></p>
<h2 id="1-1、Model1时代"><a href="#1-1、Model1时代" class="headerlink" title="1.1、Model1时代"></a>1.1、Model1时代</h2><ul>
<li>在web早期的开发中，通常采用的都是Model1。</li>
<li>Model1中，主要分为两层，视图层和模型层。</li>
</ul>
<p><img src="/myBlog/SpringMVC/1905053-20200331221347503-978638377.png" alt="img"></p>
<p>Model1优点：架构简单，比较适合小型项目开发；</p>
<p>Model1缺点：JSP职责不单一，职责过重，不便于维护；</p>
<h2 id="1-2、Model2时代"><a href="#1-2、Model2时代" class="headerlink" title="1.2、Model2时代"></a>1.2、Model2时代</h2><p>Model2把一个项目分成三部分，包括<strong>视图、控制、模型。</strong></p>
<p><img src="/myBlog/SpringMVC/1905053-20200331221406483-639584230.png" alt="img"></p>
<p>用户发请求</p>
<ol>
<li>Servlet接收请求数据，并调用对应的业务逻辑方法</li>
<li>业务处理完毕，返回更新后的数据给servlet</li>
<li>servlet转向到JSP，由JSP来渲染页面</li>
<li>响应给前端更新后的页面</li>
</ol>
<p><strong>职责分析：</strong></p>
<p><strong>Controller：控制器</strong></p>
<ol>
<li>取得表单数据</li>
<li>调用业务逻辑</li>
<li>转向指定的页面</li>
</ol>
<p><strong>Model：模型</strong></p>
<ol>
<li>业务逻辑</li>
<li>保存数据的状态</li>
</ol>
<p><strong>View：视图</strong></p>
<ol>
<li>显示页面</li>
</ol>
<p>Model2这样不仅提高的代码的复用率与项目的扩展性，且大大降低了项目的维护成本。Model 1模式的实现比较简单，适用于快速开发小规模项目，Model1中JSP页面身兼View和Controller两种角色，将控制逻辑和表现逻辑混杂在一起，从而导致代码的重用性非常低，增加了应用的扩展性和维护的难度。Model2消除了Model1的缺点。</p>
<h2 id="1-3、回顾Servlet"><a href="#1-3、回顾Servlet" class="headerlink" title="1.3、回顾Servlet"></a>1.3、回顾Servlet</h2><ol>
<li><p>新建一个Maven工程当做父工程！ pom依赖！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li>
<li><p>建立一个Moudle：springmvc-01-servlet ， 添加Web app的支持！</p>
</li>
<li><p>导入servlet 和 jsp 的 jar 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>编写一个Servlet类，用来处理用户的请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.servlet;<br><br><span class="hljs-comment">//实现Servlet接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//取得参数</span><br>        String method = req.getParameter(<span class="hljs-string">&quot;method&quot;</span>);<br>        <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;add&quot;</span>))&#123;<br>            req.getSession().setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;执行了add方法&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;delete&quot;</span>))&#123;<br>            req.getSession().setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;执行了delete方法&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//业务逻辑</span><br>        <span class="hljs-comment">//视图跳转</span><br>        req.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/jsp/hello.jsp&quot;</span>).forward(req,resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req,resp);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li>
<li><p>编写Hello.jsp，在WEB-INF目录下新建一个jsp的文件夹，新建hello.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Kuangshen&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    $&#123;msg&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li>
<li><p>在web.xml中注册Servlet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/user<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li>
<li><p>配置Tomcat，并启动测试</p>
<ul>
<li>localhost:8080/user?method=add</li>
<li>localhost:8080/user?method=delete</li>
</ul>
</li>
<li><p>访问结果</p>
</li>
</ol>
<p><strong>MVC框架要做哪些事情</strong></p>
<ol>
<li>将url映射到java类或java类的方法 .</li>
<li>封装用户提交的数据 .</li>
<li>处理请求–调用相关的业务处理–封装响应数据 .</li>
<li>将响应的数据进行渲染 . jsp / html 等表示层数据 .</li>
</ol>
<p><strong>说明：</strong></p>
<p>常见的服务器端MVC框架有：Struts、Spring MVC、ASP.NET MVC、Zend Framework、JSF；常见前端MVC框架：vue、angularjs、react、backbone；由MVC演化出了另外一些模式如：MVP、MVVM 等等….</p>
<h1 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><img src="/myBlog/SpringMVC/1905053-20200331222018441-1850931217.png" alt="img"></p>
<p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</p>
<p>查看官方文档：<a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a></p>
<p><strong>我们为什么要学习SpringMVC呢?</strong></p>
<p>Spring MVC的特点：</p>
<ol>
<li>轻量级，简单易学</li>
<li>高效 , 基于请求响应的MVC框架</li>
<li>与Spring兼容性好，无缝结合</li>
<li>约定优于配置</li>
<li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li>
<li>简洁灵活</li>
</ol>
<p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计。</p>
<p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p>
<p>正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop) , 使用约定优于配置 . 能够进行简单的junit测试 . 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦截器 等等……所以我们要学习 .</p>
<p><strong>最重要的一点还是用的人多 , 使用的公司多 .</strong></p>
<h3 id="中心控制器"><a href="#中心控制器" class="headerlink" title="中心控制器"></a>中心控制器</h3><p>Spring的web框架围绕DispatcherServlet设计。 DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的controller声明方式。</p>
<p>Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动</strong> , <strong>围绕一个中心Servlet分派请求及提供其他功能</strong>，**DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)**。</p>
<p><img src="/myBlog/SpringMVC/1905053-20200331222037711-828417064.png" alt="img"></p>
<p>SpringMVC的原理如下图所示：</p>
<p>当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p>
<p><img src="/myBlog/SpringMVC/1905053-20200331222109176-906298972.png" alt="img"></p>
<h3 id="SpringMVC执行原理"><a href="#SpringMVC执行原理" class="headerlink" title="SpringMVC执行原理"></a>SpringMVC执行原理</h3><p><img src="/myBlog/SpringMVC/1905053-20200331222126131-219513987.png" alt="img"></p>
<p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p>
<p><strong>简要分析执行流程</strong></p>
<ol>
<li>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。<ul>
<li>我们假设请求的url为 : <a href="http://localhost/">http://localhost</a>:8080/SpringMVC/hello</li>
<li><strong>如上url拆分成三部分：</strong></li>
<li><a href="http://localhost/">http://localhost</a>:8080服务器域名</li>
<li>SpringMVC部署在服务器上的web站点</li>
<li>hello表示控制器</li>
<li>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</li>
</ul>
</li>
<li>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</li>
<li>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</li>
<li>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</li>
<li>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</li>
<li>Handler让具体的Controller执行。</li>
<li>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</li>
<li>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</li>
<li>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</li>
<li>视图解析器将解析的逻辑视图名传给DispatcherServlet。</li>
<li>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</li>
<li>最终视图呈现给用户。</li>
</ol>
<p>在这里先听一遍原理，不理解没有关系，我们马上来写一个对应的代码实现大家就明白了，如果不明白，那就写10遍，没有笨人，只有懒人！</p>
<h1 id="3、HelloSpringMVC-配置版"><a href="#3、HelloSpringMVC-配置版" class="headerlink" title="3、HelloSpringMVC(配置版)"></a>3、HelloSpringMVC(配置版)</h1><ol>
<li><p>新建一个Moudle ， 添加web的支持！</p>
</li>
<li><p>确定导入了SpringMVC 的依赖！</p>
</li>
<li><p>配置web.xml ， 注册DispatcherServlet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--1.注册DispatcherServlet--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--启动级别-1--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span><br>    <span class="hljs-comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li>
<li><p>编写SpringMVC 的 配置文件！名称：springmvc-servlet.xml : [servletname]-servlet.xml说明，这里的名称要求是按照官方来的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li>
<li><p>添加 处理映射器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>添加 处理器适配器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>添加 视图解析器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--前缀--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--后缀--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>编写我们要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个ModelAndView，装数据，封视图；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.Controller;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-comment">//注意：这里我们先导入Controller接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//ModelAndView 模型和视图</span><br>        ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();<br><br>        <span class="hljs-comment">//封装对象，放在ModelAndView中。Model</span><br>        mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;HelloSpringMVC&quot;</span>);<br>        <span class="hljs-comment">//封装要跳转的视图，放在ModelAndView中</span><br>        mv.setViewName(<span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">//: /WEB-INF/jsp/hello.jsp</span><br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>将自己的类交给SpringIOC容器，注册bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Handler--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;/hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.controller.HelloController&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>写要跳转的jsp页面，显示ModelandView存放的数据，以及我们的正常页面；</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Kuangshen&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    $&#123;msg&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure></li>
<li><p>配置Tomcat 启动测试！</p>
</li>
</ol>
<h2 id="可能遇到的问题："><a href="#可能遇到的问题：" class="headerlink" title="可能遇到的问题："></a><strong>可能遇到的问题：</strong></h2><p><strong>访问出现404，排查步骤：</strong></p>
<ol>
<li>查看控制台输出，看一下是不是缺少了什么jar包。</li>
<li>如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！（与classes同级目录）</li>
</ol>
<p><img src="/myBlog/SpringMVC/image-20210731181900414.png" alt="image-20210731181900414"></p>
<p> 3.重启Tomcat 即可解决！</p>
<p> 4.没有将Controller类交给SpringIOC容器，注册bean！</p>
<p> 5.出现500的情况：web.xml中的注册DispatcherServlet中的<inin-param>中的<param-value>的classpath写漏，如下图</param-value></inin-param></p>
<p><img src="/myBlog/SpringMVC/image-20210731184323992.png" alt="image-20210731184323992"></p>
<p>小结：看这个估计大部分同学都能理解其中的原理了，但是我们实际开发才不会这么写，不然就疯了，还学这个玩意干嘛！我们来看个注解版实现，这才是SpringMVC的精髓，到底有多么简单，看这个图就知道了。</p>
<h1 id="4、注解开发"><a href="#4、注解开发" class="headerlink" title="4、注解开发"></a>4、注解开发</h1><p><strong>使用注解开发SpringMVC（注解版）</strong></p>
<p><strong>第一步:新建一个Moudle , 添加web支持！</strong>建立包结构 com.kuang.controller</p>
<p><strong>第二步:由于Maven可能存在资源过滤的问题，我们将配置完善</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br></code></pre></td></tr></table></figure>



<p><strong>第三步:在pom.xml文件引入相关的依赖</strong>：<br>主要有Spring框架核心库、Spring MVC、servlet , JSTL等。我们在父依赖中已经引入了！</p>
<p><strong>第四步:配置web.xml</strong></p>
<p>注意点：</p>
<ul>
<li>注意web.xml版本问题，要最新版！</li>
<li>注册DispatcherServlet</li>
<li>关联SpringMVC的配置文件</li>
<li>启动级别为1</li>
<li>映射路径为 / 【不要用/*，会404】</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--1.注册servlet--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br><br></code></pre></td></tr></table></figure>



<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/ 和 /</span>* 的区别：<br>&lt; url-pattern &gt; <span class="hljs-regexp">/ &lt;/</span> url-pattern &gt; 不会匹配到.jsp， 只针对我们编写的请求；<br>即：.jsp 不会进入spring的 DispatcherServlet类 。<br>&lt; url-pattern &gt; <span class="hljs-regexp">/* &lt;/</span> url-pattern &gt; 会匹配 *.jsp，<br>会出现返回 jsp视图 时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报<span class="hljs-number">404</span>错。<br><br></code></pre></td></tr></table></figure>



<p><strong>第五步:添加Spring MVC配置文件</strong></p>
<ul>
<li>让IOC的注解生效</li>
<li>静态资源过滤 ：HTML . JS . CSS . 图片 ， 视频 …..</li>
<li>MVC的注解驱动</li>
<li>配置视图解析器</li>
</ul>
<p>在resource目录下添加springmvc-servlet.xml配置文件，配置的形式与Spring容器配置基本类似，为了支持基于注解的IOC，设置了自动扫描包的功能，具体配置信息如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.kuang.controller&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 让Spring MVC不处理静态资源 过滤掉一些静态资源，如.css  .js  .html .mp3--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    支持mvc注解驱动</span><br><span class="hljs-comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span><br><span class="hljs-comment">        要想使@RequestMapping注解生效</span><br><span class="hljs-comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span><br><span class="hljs-comment">        和一个AnnotationMethodHandlerAdapter实例</span><br><span class="hljs-comment">        这两个实例分别在类级别和方法级别处理。</span><br><span class="hljs-comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br><br></code></pre></td></tr></table></figure>

<p>在视图解析器中我们把所有的视图都存放在/WEB-INF/目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问。</p>
<p><strong>第六步:创建Controller</strong></p>
<p>编写一个Java控制类： com.kuang.controller.HelloController , 注意编码规范</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/HelloController&quot;)</span><span class="hljs-comment">//多添加一级访问</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br><br>    <span class="hljs-comment">//真实访问地址 : 项目名/HelloController/hello</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><span class="hljs-comment">//请求路径</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">(Model model)</span> </span>&#123;<br>        <span class="hljs-comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span><br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;hello,SpringMVC，我是成博&quot;</span>);<br>        <span class="hljs-comment">//会被视图解析器处理，web-inf/jsp/hello.jsp</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<ul>
<li>@Controller是为了让Spring IOC容器初始化时自动扫描到；</li>
<li>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是/HelloController/hello；</li>
<li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li>
<li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF/jsp/<strong>hello</strong>.jsp。</li>
</ul>
<p><strong>第七步:创建视图层</strong></p>
<p>在WEB-INF/ jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带回的信息；</p>
<p>可以通过EL表示取出Model中存放的值，或者对象；</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;SpringMVC&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    $&#123;msg&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure>

<p><strong>第八步:配置Tomcat运行</strong></p>
<p>配置Tomcat ， 开启服务器 ， 访问 对应的请求路径！</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>实现步骤其实非常的简单：  </p>
<ol>
<li>新建一个web项目</li>
<li>导入相关jar包</li>
<li>编写web.xml , 注册DispatcherServlet</li>
<li>编写springmvc配置文件</li>
<li>接下来就是去创建对应的控制类 , controller</li>
<li>最后完善前端视图和controller之间的对应</li>
<li>测试运行调试.</li>
</ol>
<p>使用springMVC必须配置的三大件：</p>
<p><strong>处理器映射器、处理器适配器、视图解析器</strong></p>
<p>通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，而省去了大段的xml配置</p>
<h1 id="5、Controller-及-RestFul风格"><a href="#5、Controller-及-RestFul风格" class="headerlink" title="5、Controller 及 RestFul风格"></a>5、Controller 及 RestFul风格</h1><h3 id="控制器Controller"><a href="#控制器Controller" class="headerlink" title="控制器Controller"></a>控制器Controller</h3><ul>
<li>控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</li>
<li>控制器负责解析用户的请求并将其转换为一个模型。</li>
<li>在Spring MVC中一个控制器类可以包含多个方法</li>
<li>在Spring MVC中，对于Controller的配置方式有很多种</li>
</ul>
<p>我们来看看有哪些方式可以实现：</p>
<p>Controller是一个接口，在org.springframework.web.servlet.mvc包下，接口中只有一个方法；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实现该接口的类获得控制器功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Controller</span> </span>&#123;<br>    <span class="hljs-comment">//处理请求且返回一个模型与视图对象</span><br>    <span class="hljs-function">ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest var1, HttpServletResponse var2)</span> <span class="hljs-keyword">throws</span> Exception</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<ol>
<li><p>新建一个Moudle，springmvc-04-controller 。 将刚才的03 拷贝一份, 我们进行操作！</p>
<ul>
<li>删掉HelloController</li>
<li>mvc的配置文件只留下 视图解析器！</li>
</ul>
</li>
<li><p>编写一个Controller类，ControllerTest1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义控制器</span><br><span class="hljs-comment">//注意点：不要导错包，实现Controller接口，重写方法；</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//返回一个模型视图对象</span><br>        ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();<br>        mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;Test1Controller&quot;</span>);<br>        mv.setViewName(<span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>编写完毕后，去Spring配置文件中注册请求的bean；name对应请求路径，class对应处理请求的类</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;/t1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.controller.ControllerTest1&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>编写前端test.jsp，注意在WEB-INF/jsp目录下编写，对应我们的视图解析器</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Kuangshen&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    $&#123;msg&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li>
<li><p>配置Tomcat运行测试，我这里没有项目发布名配置的就是一个 / ，所以请求不用加项目名，OK</p>
</li>
</ol>
<p><strong>说明：</strong></p>
<ul>
<li>实现接口Controller定义控制器是较老的办法</li>
<li>缺点是：一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦；</li>
</ul>
<h3 id="使用注解-Controller"><a href="#使用注解-Controller" class="headerlink" title="使用注解@Controller"></a>使用注解@Controller</h3><ul>
<li>@Controller注解类型用于声明Spring类的实例是一个控制器（在讲IOC时还提到了另外3个注解）；</li>
<li>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.kuang.controller&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>

<ul>
<li>增加一个ControllerTest2类，使用注解实现；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@Controller注解的类会自动添加到Spring上下文中</span><br><span class="hljs-comment">//代表这个类会被Spring按管</span><br><span class="hljs-comment">//被这个注解的类，中的所有方法，如果返回值是String，并且有具体页面可以跳转，那么就会被视图解析器解析;</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest2</span></span>&#123;<br><br>    <span class="hljs-comment">//映射访问路径</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/t2&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        <span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span><br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;ControllerTest2&quot;</span>);<br>        <span class="hljs-comment">//返回视图位置</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>运行tomcat测试</li>
</ul>
<p><strong>可以发现，我们的两个请求都可以指向一个视图，但是页面结果的结果是不一样的，从这里可以看出视图是被复用的，而控制器与视图之间是弱偶合关系。</strong></p>
<h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h3><p><strong>@RequestMapping</strong></p>
<ul>
<li>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</li>
<li>为了测试结论更加准确，我们可以加上一个项目名测试 myweb</li>
<li>只注解在方法上面</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/h1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>访问路径：<a href="http://localhost/">http://localhost</a>:8080 / 项目名 / h1</p>
<ul>
<li>同时注解类与方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/h1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>访问路径：<a href="http://localhost/">http://localhost</a>:8080 / 项目名/ admin /h1 , 需要先指定类的路径再指定方法的路径；</p>
<h1 id="6、RestFul-风格"><a href="#6、RestFul-风格" class="headerlink" title="6、RestFul 风格"></a>6、RestFul 风格</h1><ul>
<li>简洁</li>
<li>高效</li>
<li>安全</li>
</ul>
<p><strong>概念</strong></p>
<p>Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p>
<p><strong>功能</strong></p>
<ul>
<li>资源：互联网所有的事物都可以被抽象为资源</li>
<li>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</li>
<li>分别对应 添加、 删除、修改、查询。</li>
</ul>
<p><strong>传统方式操作资源</strong> ：通过不同的参数来实现不同的效果！方法单一，post 和 get</p>
<ul>
<li><a href="http://127.0.0.1/item/queryItem.action?id=1">http://127.0.0.1/item/queryItem.action?id=1</a> 查询,GET</li>
<li><a href="http://127.0.0.1/item/saveItem.action">http://127.0.0.1/item/saveItem.action</a> 新增,POST</li>
<li><a href="http://127.0.0.1/item/updateItem.action">http://127.0.0.1/item/updateItem.action</a> 更新,POST</li>
<li><a href="http://127.0.0.1/item/deleteItem.action?id=1">http://127.0.0.1/item/deleteItem.action?id=1</a> 删除,GET或POST</li>
</ul>
<p><strong>使用RESTful操作资源</strong> ： 可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</p>
<ul>
<li><a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 查询,GET</li>
<li><a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 新增,POST</li>
<li><a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 更新,PUT</li>
<li><a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 删除,DELETE</li>
</ul>
<p><strong>学习测试</strong></p>
<ol>
<li><p>在新建一个类 RestFulController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestFulController</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>在Spring MVC中可以使用 @PathVariable 注解，让方法参数的值对应绑定到一个URI模板变量上。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestFulController</span> </span>&#123;<br>    <span class="hljs-comment">//原来的 :  http://localhost: 8080/add?a=1&amp;b=2</span><br>    <span class="hljs-comment">//RestFul :  http://localhost : 8080/add/1/2</span><br>    <br>    <span class="hljs-comment">//映射访问路径</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> p1, <span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> p2, Model model)</span></span>&#123;<br>        <br>        <span class="hljs-keyword">int</span> result = p1+p2;<br>        <span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span><br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;结果：&quot;</span>+result);<br>        <span class="hljs-comment">//返回视图位置</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>        <br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>我们来测试请求查看下</p>
<p><img src="/myBlog/SpringMVC/1905053-20200331213217087-619232504.png" alt="img"></p>
</li>
<li><p>思考：使用路径变量的好处？</p>
<ul>
<li><p>使路径变得更加简洁；</p>
</li>
<li><p>获得参数更加方便，框架会自动进行类型转换。</p>
</li>
<li><p>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如这里访问是的路径是/commit/1/a，则路径与方法不匹配，而不会是参数转换失败。</p>
<p><img src="/myBlog/SpringMVC/1905053-20200401214609681-1237588624.png" alt="img"></p>
</li>
</ul>
</li>
<li><p>我们来修改下对应的参数类型，再次测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//映射访问路径</span><br><span class="hljs-meta">@RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> p1, <span class="hljs-meta">@PathVariable</span> String p2, Model model)</span></span>&#123;<br><br>    String result = p1+p2;<br>    <span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span><br>    model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;结果：&quot;</span>+result);<br>    <span class="hljs-comment">//返回视图位置</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="/myBlog/SpringMVC/1905053-20200401214657561-1298821776.png" alt="img"></p>
</li>
</ol>
<p><strong>使用method属性指定请求类型</strong></p>
<p>用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等</p>
<p>我们来测试一下：</p>
<ul>
<li>增加一个方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//映射访问路径,必须是POST请求</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.POST&#125;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index2</span><span class="hljs-params">(Model model)</span></span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;hello!&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>我们使用浏览器地址栏进行访问默认是Get请求，会报错405：</li>
</ul>
<p><img src="/myBlog/SpringMVC/1905053-20200401214714976-802588010.png" alt="img"></p>
<ul>
<li>如果将POST修改为GET则正常了；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//映射访问路径,必须是Get请求</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.GET&#125;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index2</span><span class="hljs-params">(Model model)</span></span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;hello!&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="/myBlog/SpringMVC/1905053-20200401214737681-664600385.png" alt="img"></p>
<p><strong>所有的地址栏请求默认都会是 HTTP GET 类型的。</strong></p>
<p>方法级别的注解变体有如下几个： 组合注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping</span><br><span class="hljs-meta">@PostMapping</span><br><span class="hljs-meta">@PutMapping</span><br><span class="hljs-meta">@DeleteMapping</span><br><span class="hljs-meta">@PatchMapping</span><br></code></pre></td></tr></table></figure>

<p>@GetMapping 是一个组合注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestFulController</span> </span>&#123;<br>    <span class="hljs-comment">//原来的 :  http://localhost: 8080/add?a=1&amp;b=2</span><br>    <span class="hljs-comment">//RestFul :  http://localhost : 8080/add/1/2</span><br><br>    <span class="hljs-comment">//映射访问路径</span><br>    <span class="hljs-comment">//@RequestMapping(value = &quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;,method = RequestMethod.GET)</span><br>    <span class="hljs-comment">//@GetMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span><br>    <span class="hljs-meta">@GetMapping(path = &quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> p1, <span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> p2, Model model)</span></span>&#123;<br>        <br>        <span class="hljs-keyword">int</span> result = p1+p2;<br>        <span class="hljs-comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span><br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;结果：&quot;</span>+result);<br>        <span class="hljs-comment">//返回视图位置</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;  <br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="/myBlog/SpringMVC/1905053-20200331213251638-969968192.png" alt="img"></p>
<p>它所扮演的是 @RequestMapping(method =RequestMethod.GET) 的一个快捷方式。</p>
<p>平时使用的会比较多！</p>
<h3 id="小黄鸭调试法"><a href="#小黄鸭调试法" class="headerlink" title="小黄鸭调试法"></a>小黄鸭调试法</h3><p>场景一：<em>我们都有过向别人（甚至可能向完全不会编程的人）提问及解释编程问题的经历，但是很多时候就在我们解释的过程中自己却想到了问题的解决方案，然后对方却一脸茫然。</em></p>
<p>场景二：你的同行跑来问你一个问题，但是当他自己把问题说完，或说到一半的时候就想出答案走了，留下一脸茫然的你。</p>
<p>其实上面两种场景现象就是所谓的小黄鸭调试法（Rubber Duck Debuging），又称橡皮鸭调试法，它是我们软件工程中最常使用调试方法之一。</p>
<p><img src="/myBlog/SpringMVC/1905053-20200401214504256-745544113.png" alt="img"></p>
<p>此概念据说来自《程序员修炼之道》书中的一个故事，传说程序大师随身携带一只小黄鸭，在调试代码的时候会在桌上放上这只小黄鸭，然后详细地向鸭子解释每行代码，然后很快就将问题定位修复了。</p>
<h1 id="7、结果跳转三种方式"><a href="#7、结果跳转三种方式" class="headerlink" title="7、结果跳转三种方式"></a>7、结果跳转三种方式</h1><h3 id="7-1、ModelAndView"><a href="#7-1、ModelAndView" class="headerlink" title="7.1、ModelAndView"></a>7.1、ModelAndView</h3><p>设置ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面 .</p>
<p>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>对应的controller类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//返回一个模型视图对象</span><br>        ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();<br>        mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;ControllerTest1&quot;</span>);<br>        mv.setViewName(<span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="7-2、ServletAPI"><a href="#7-2、ServletAPI" class="headerlink" title="7.2、ServletAPI"></a>7.2、ServletAPI</h3><p>通过设置ServletAPI , 不需要视图解析器 .</p>
<ol>
<li>通过HttpServletResponse进行输出</li>
<li>通过HttpServletResponse实现重定向</li>
<li>通过HttpServletResponse实现转发</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResultGo</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/result/t1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        rsp.getWriter().println(<span class="hljs-string">&quot;Hello,Spring BY servlet API&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/result/t2&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        rsp.sendRedirect(<span class="hljs-string">&quot;/index.jsp&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/result/t3&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//转发</span><br>        req.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;/result/t3&quot;</span>);<br>        req.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req,rsp);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>





<h3 id="7-3、SpringMVC"><a href="#7-3、SpringMVC" class="headerlink" title="7.3、SpringMVC"></a>7.3、SpringMVC</h3><p><strong>通过SpringMVC来实现转发和重定向 - 无需视图解析器；</strong></p>
<p>测试前，需要将视图解析器注释掉</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResultSpringMVC</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/rsm/t1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//转发</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/index.jsp&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/rsm/t2&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//转发二</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/index.jsp&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/rsm/t3&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//重定向</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<p><strong>通过SpringMVC来实现转发和重定向 - 有视图解析器；</strong></p>
<p>重定向 , 不需要视图解析器 , 本质就是重新请求一个新地方嘛 , 所以注意路径问题.</p>
<p>可以重定向到另外一个请求实现 .</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResultSpringMVC2</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/rsm2/t1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//转发</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/rsm2/t2&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//重定向</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>        <span class="hljs-comment">//return &quot;redirect:hello.do&quot;; //hello.do为另一个请求/</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<p>==<strong>转发需要视图解析器，重定向不需要</strong>==</p>
<h1 id="8、数据处理"><a href="#8、数据处理" class="headerlink" title="8、数据处理"></a>8、数据处理</h1><h3 id="处理提交数据"><a href="#处理提交数据" class="headerlink" title="处理提交数据"></a>处理提交数据</h3><p><strong>1、提交的域名称和处理方法的参数名一致</strong></p>
<p>提交数据 : <a href="http://localhost/">http://localhost</a>:8080/hello?name=kuangshen</p>
<p>处理方法 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(String name)</span></span>&#123;<br>    System.out.println(name);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>后台输出 : kuangshen</p>
<p><strong>2、提交的域名称和处理方法的参数名不一致</strong></p>
<p>提交数据 : <a href="http://localhost/">http://localhost</a>:8080/hello?username=kuangshen</p>
<p>处理方法 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@RequestParam(&quot;username&quot;) : username提交的域的名称 .</span><br><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String name)</span></span>&#123;<br>    System.out.println(name);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>后台输出：</p>
<p><strong>3、提交的是一个对象</strong></p>
<p>要求提交的表单域和对象的属性名一致 , 参数使用对象即可</p>
<ol>
<li>实体类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-comment">//构造</span><br>    <span class="hljs-comment">//get/set</span><br>    <span class="hljs-comment">//tostring()</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>  2.提交数据 : <a href="http://localhost:8080/user?name=kuangshen&amp;id=1&amp;age=15">http://localhost:8080/user?name=kuangshen&amp;id=1&amp;age=15</a></p>
<p>  3.处理方法 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">user</span><span class="hljs-params">(User user)</span></span>&#123;<br>    System.out.println(user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>后台输出 : User { id=1, name=’kuangshen’, age=15 }</p>
<p><strong>说明：如果使用对象的话，前端传递的参数名和对象名必须一致，否则就是null。</strong></p>
<h3 id="数据显示到前端"><a href="#数据显示到前端" class="headerlink" title="数据显示到前端"></a>数据显示到前端</h3><p><strong>第一种 : 通过ModelAndView</strong></p>
<p>我们前面一直都是如此 . 就不过多解释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//返回一个模型视图对象</span><br>        ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();<br>        mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;ControllerTest1&quot;</span>);<br>        mv.setViewName(<span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>第二种 : 通过ModelMap</strong></p>
<p>ModelMap</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String name, ModelMap model)</span></span>&#123;<br>    <span class="hljs-comment">//封装要显示到视图中的数据</span><br>    <span class="hljs-comment">//相当于req.setAttribute(&quot;name&quot;,name);</span><br>    model.addAttribute(<span class="hljs-string">&quot;name&quot;</span>,name);<br>    System.out.println(name);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>第三种 : 通过Model</strong></p>
<p>Model</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/ct2/hello&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String name, Model model)</span></span>&#123;<br>    <span class="hljs-comment">//封装要显示到视图中的数据</span><br>    <span class="hljs-comment">//相当于req.setAttribute(&quot;name&quot;,name);</span><br>    model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,name);<br>    System.out.println(name);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>对比</strong></p>
<p>就对于新手而言简单来说使用区别就是：</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">Model</span> 只有寥寥几个方法只适合用于储存数据，简化了新手对于<span class="hljs-keyword">Model</span>对象的操作和理解；<br><br>ModelMap 继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性；<br><br>ModelAndView 可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。<br></code></pre></td></tr></table></figure>

<p>当然更多的以后开发考虑的更多的是性能和优化，就不能单单仅限于此的了解。</p>
<p><strong>请使用80%的时间打好扎实的基础，剩下18%的时间研究框架，2%的时间去学点英文，框架的官方文档永远是最好的教程。</strong></p>
<h1 id="9、数据处理（乱码问题）"><a href="#9、数据处理（乱码问题）" class="headerlink" title="9、数据处理（乱码问题）"></a>9、数据处理（乱码问题）</h1><p>测试步骤：</p>
<ol>
<li><p>我们可以在首页编写一个提交的表单</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;/e/t&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>  &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;name&quot;</span>&gt;<br>  &lt;input type=<span class="hljs-string">&quot;submit&quot;</span>&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure></li>
<li><p>后台编写对应的处理类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Encoding</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/e/t&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">(Model model,String name)</span></span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,name); <span class="hljs-comment">//获取表单提交的值</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>; <span class="hljs-comment">//跳转到test页面显示输入的值</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>输入中文测试，发现乱码</p>
</li>
</ol>
<p><img src="/myBlog/SpringMVC/1905053-20200402193540997-1854631524.png" alt="img"></p>
<p>不得不说，乱码问题是在我们开发中十分常见的问题，也是让我们程序猿比较头大的问题！</p>
<p>以前乱码问题通过过滤器解决 , 而SpringMVC给我们提供了一个过滤器 , 可以在web.xml中配置 .</p>
<p>修改了xml文件需要重启服务器！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--2.配置SpringMVC的乱码过滤--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>有些极端情况下.这个过滤器对get的支持不好 .</p>
<p>处理方法 :</p>
<ol>
<li><p>修改tomcat配置文件 ： 设置编码！(conf–&gt;server.xml)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">URIEncoding</span>=<span class="hljs-string">&quot;utf-8&quot;</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8443&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>自定义过滤器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.filter;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解决get和post请求 全部乱码的过滤器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericEncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        <span class="hljs-comment">//处理response的字符编码</span><br>        HttpServletResponse myResponse=(HttpServletResponse) response;<br>        myResponse.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br><br>        <span class="hljs-comment">// 转型为与协议相关对象</span><br>        HttpServletRequest httpServletRequest = (HttpServletRequest) request;<br>        <span class="hljs-comment">// 对request包装增强</span><br>        HttpServletRequest myrequest = <span class="hljs-keyword">new</span> MyRequest(httpServletRequest);<br>        chain.doFilter(myrequest, response);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//自定义request对象，HttpServletRequest的包装类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRequest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServletRequestWrapper</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> HttpServletRequest request;<br>    <span class="hljs-comment">//是否编码的标记</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> hasEncode;<br>    <span class="hljs-comment">//定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyRequest</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(request);<span class="hljs-comment">// super必须写</span><br>        <span class="hljs-keyword">this</span>.request = request;<br>    &#125;<br><br>    <span class="hljs-comment">// 对需要增强方法 进行覆盖</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">getParameterMap</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 先获得请求方式</span><br>        String method = request.getMethod();<br>        <span class="hljs-keyword">if</span> (method.equalsIgnoreCase(<span class="hljs-string">&quot;post&quot;</span>)) &#123;<br>            <span class="hljs-comment">// post请求</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 处理post乱码</span><br>                request.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>                <span class="hljs-keyword">return</span> request.getParameterMap();<br>            &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equalsIgnoreCase(<span class="hljs-string">&quot;get&quot;</span>)) &#123;<br>            <span class="hljs-comment">// get请求</span><br>            Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();<br>            <span class="hljs-keyword">if</span> (!hasEncode) &#123; <span class="hljs-comment">// 确保get手动编码逻辑只运行一次</span><br>                <span class="hljs-keyword">for</span> (String parameterName : parameterMap.keySet()) &#123;<br>                    String[] values = parameterMap.get(parameterName);<br>                    <span class="hljs-keyword">if</span> (values != <span class="hljs-keyword">null</span>) &#123;<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; values.length; i++) &#123;<br>                            <span class="hljs-keyword">try</span> &#123;<br>                                <span class="hljs-comment">// 处理get乱码</span><br>                                values[i] = <span class="hljs-keyword">new</span> String(values[i]<br>                                        .getBytes(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>), <span class="hljs-string">&quot;utf-8&quot;</span>);<br>                            &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>                                e.printStackTrace();<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                hasEncode = <span class="hljs-keyword">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> parameterMap;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.getParameterMap();<br>    &#125;<br><br>    <span class="hljs-comment">//取一个值</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getParameter</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        Map&lt;String, String[]&gt; parameterMap = getParameterMap();<br>        String[] values = parameterMap.get(name);<br>        <span class="hljs-keyword">if</span> (values == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> values[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 取回参数的第一个值</span><br>    &#125;<br><br>    <span class="hljs-comment">//取所有值</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] getParameterValues(String name) &#123;<br>        Map&lt;String, String[]&gt; parameterMap = getParameterMap();<br>        String[] values = parameterMap.get(name);<br>        <span class="hljs-keyword">return</span> values;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>这个也是我在网上找的一些大神写的，一般情况下，SpringMVC默认的乱码处理就已经能够很好的解决了！</p>
<p><strong>然后在web.xml中配置这个过滤器即可！</strong></p>
<p>乱码问题，需要平时多注意，在尽可能能设置编码的地方，都设置为统一编码 UTF-8！</p>
</li>
</ol>
<h1 id="10、整合SSM"><a href="#10、整合SSM" class="headerlink" title="10、整合SSM"></a>10、整合SSM</h1><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><p>环境：</p>
<ul>
<li>IDEA</li>
<li>MySQL 5.7.19</li>
<li>Tomcat 9</li>
<li>Maven 3.6</li>
</ul>
<p> 要求：</p>
<ul>
<li>需要熟练掌握MySQL数据库，Spring，JavaWeb及MyBatis知识，简单的前端知识；</li>
</ul>
<h2 id="数据库环境"><a href="#数据库环境" class="headerlink" title="数据库环境"></a>数据库环境</h2><p>创建一个存放书籍数据的数据库表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">CREATE DATABASE `ssmbuild`;<br><br>USE `ssmbuild`;<br><br>DROP TABLE IF EXISTS `books`;<br><br>CREATE TABLE `books` (<br>`bookID` INT(10) NOT NULL AUTO_INCREMENT COMMENT &#x27;书id&#x27;,<br>`bookName` VARCHAR(100) NOT NULL COMMENT &#x27;书名&#x27;,<br>`bookCounts` INT(11) NOT NULL COMMENT &#x27;数量&#x27;,<br>`detail` VARCHAR(200) NOT NULL COMMENT &#x27;描述&#x27;,<br>KEY `bookID` (`bookID`)<br>) ENGINE=INNODB DEFAULT CHARSET=utf8<br><br>INSERT  INTO `books`(`bookID`,`bookName`,`bookCounts`,`detail`)VALUES<br>(1,&#x27;Java&#x27;,1,&#x27;从入门到放弃&#x27;),<br>(2,&#x27;MySQL&#x27;,10,&#x27;从删库到跑路&#x27;),<br>(3,&#x27;Linux&#x27;,5,&#x27;从进门到进牢&#x27;);<br></code></pre></td></tr></table></figure>

<h2 id="基本环境搭建"><a href="#基本环境搭建" class="headerlink" title="基本环境搭建"></a>基本环境搭建</h2><ol>
<li><p>新建一Maven项目！ssmbuild ， 添加web的支持</p>
</li>
<li><p>导入相关的pom依赖！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--Junit--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--数据库驱动--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 数据库连接池 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--Servlet - JSP --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--Mybatis--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--Spring--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>Maven资源过滤设置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>建立基本结构和配置框架！</p>
</li>
</ol>
<ul>
<li><p>com.kuang.pojo</p>
</li>
<li><p>com.kuang.dao</p>
</li>
<li><p>com.kuang.service</p>
</li>
<li><p>com.kuang.controller</p>
</li>
<li><p>mybatis-config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">       <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">       <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>applicationContext.xml<br></code></pre></td></tr></table></figure></li>
<li><p>applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="Mybatis层编写"><a href="#Mybatis层编写" class="headerlink" title="Mybatis层编写"></a>Mybatis层编写</h2><ol>
<li><p>数据库配置文件 <strong>database.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">jdbc.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span><br><span class="hljs-meta">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">jdbc.password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure></li>
<li><p>IDEA关联数据库</p>
</li>
<li><p>编写MyBatis的核心配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">       <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">       <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>   <br>   <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.kuang.pojo&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/kuang/dao/BookMapper.xml&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>编写数据库对应的实体类 com.kuang.pojo.Books</p>
<p>使用lombok插件！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Books</span> </span>&#123;<br>   <br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> bookID;<br>   <span class="hljs-keyword">private</span> String bookName;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> bookCounts;<br>   <span class="hljs-keyword">private</span> String detail;<br>   <br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>编写Dao层的 Mapper接口！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.dao;<br><br><span class="hljs-keyword">import</span> com.kuang.pojo.Books;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookMapper</span> </span>&#123;<br><br>   <span class="hljs-comment">//增加一个Book</span><br>   <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Books book)</span></span>;<br><br>   <span class="hljs-comment">//根据id删除一个Book</span><br>   <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br><br>   <span class="hljs-comment">//更新Book</span><br>   <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Books books)</span></span>;<br><br>   <span class="hljs-comment">//根据id查询,返回一个Book</span><br>   <span class="hljs-function">Books <span class="hljs-title">queryBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br><br>   <span class="hljs-comment">//查询全部Book,返回list集合</span><br>   <span class="hljs-function">List&lt;Books&gt; <span class="hljs-title">queryAllBook</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">       <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">       <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.kuang.dao.BookMapper&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--增加一个Book--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addBook&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Books&quot;</span>&gt;</span><br>      insert into ssmbuild.books(bookName,bookCounts,detail)<br>      values (#&#123;bookName&#125;, #&#123;bookCounts&#125;, #&#123;detail&#125;)<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--根据id删除一个Book--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteBookById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>      delete from ssmbuild.books where bookID=#&#123;bookID&#125;<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--更新Book--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateBook&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Books&quot;</span>&gt;</span><br>      update ssmbuild.books<br>      set bookName = #&#123;bookName&#125;,bookCounts = #&#123;bookCounts&#125;,detail = #&#123;detail&#125;<br>      where bookID = #&#123;bookID&#125;<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--根据id查询,返回一个Book--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBookById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Books&quot;</span>&gt;</span><br>      select * from ssmbuild.books<br>      where bookID = #&#123;bookID&#125;<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--查询全部Book--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryAllBook&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Books&quot;</span>&gt;</span><br>      SELECT * from ssmbuild.books<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>编写Service层的接口和实现类</p>
<p>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.service;<br><br><span class="hljs-keyword">import</span> com.kuang.pojo.Books;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">//BookService:底下需要去实现,调用dao层</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookService</span> </span>&#123;<br>   <span class="hljs-comment">//增加一个Book</span><br>   <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Books book)</span></span>;<br>   <span class="hljs-comment">//根据id删除一个Book</span><br>   <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>   <span class="hljs-comment">//更新Book</span><br>   <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Books books)</span></span>;<br>   <span class="hljs-comment">//根据id查询,返回一个Book</span><br>   <span class="hljs-function">Books <span class="hljs-title">queryBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>   <span class="hljs-comment">//查询全部Book,返回list集合</span><br>   <span class="hljs-function">List&lt;Books&gt; <span class="hljs-title">queryAllBook</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.service;<br><br><span class="hljs-keyword">import</span> com.kuang.dao.BookMapper;<br><span class="hljs-keyword">import</span> com.kuang.pojo.Books;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BookService</span> </span>&#123;<br><br>   <span class="hljs-comment">//调用dao层的操作，设置一个set接口，方便Spring管理</span><br>   <span class="hljs-keyword">private</span> BookMapper bookMapper;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBookMapper</span><span class="hljs-params">(BookMapper bookMapper)</span> </span>&#123;<br>       <span class="hljs-keyword">this</span>.bookMapper = bookMapper;<br>  &#125;<br>   <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addBook</span><span class="hljs-params">(Books book)</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> bookMapper.addBook(book);<br>  &#125;<br>   <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> bookMapper.deleteBookById(id);<br>  &#125;<br>   <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Books books)</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> bookMapper.updateBook(books);<br>  &#125;<br>   <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Books <span class="hljs-title">queryBookById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> bookMapper.queryBookById(id);<br>  &#125;<br>   <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Books&gt; <span class="hljs-title">queryAllBook</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">return</span> bookMapper.queryAllBook();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>OK，到此，底层需求操作编写完毕！</strong></p>
</li>
</ol>
<h2 id="Spring层"><a href="#Spring层" class="headerlink" title="Spring层"></a>Spring层</h2><ol>
<li><p>配置<strong>Spring整合MyBatis</strong>，我们这里数据源使用c3p0连接池；</p>
</li>
<li><p>我们去编写Spring整合Mybatis的相关的配置文件；spring-dao.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 配置整合mybatis --&gt;</span><br>   <span class="hljs-comment">&lt;!-- 1.关联数据库文件 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:database.properties&quot;</span>/&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 2.数据库连接池 --&gt;</span><br>   <span class="hljs-comment">&lt;!--数据库连接池</span><br><span class="hljs-comment">       dbcp 半自动化操作 不能自动连接</span><br><span class="hljs-comment">       c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）</span><br><span class="hljs-comment">   --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 配置连接池属性 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br><br>       <span class="hljs-comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxPoolSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minPoolSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br>       <span class="hljs-comment">&lt;!-- 关闭连接后不自动commit --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoCommitOnClose&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>       <span class="hljs-comment">&lt;!-- 获取连接超时时间 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkoutTimeout&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10000&quot;</span>/&gt;</span><br>       <span class="hljs-comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;acquireRetryAttempts&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 注入数据库连接池 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>       <span class="hljs-comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span><br>   <span class="hljs-comment">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 注入sqlSessionFactory --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br>       <span class="hljs-comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.kuang.dao&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p><strong>Spring整合service层</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 扫描service相关的bean --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.kuang.service&quot;</span> /&gt;</span><br><br>   <span class="hljs-comment">&lt;!--BookServiceImpl注入到IOC容器中--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BookServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.service.BookServiceImpl&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookMapper&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookMapper&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 配置事务管理器 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 注入数据库连接池 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！</p>
</li>
</ol>
<h2 id="SpringMVC层"><a href="#SpringMVC层" class="headerlink" title="SpringMVC层"></a>SpringMVC层</h2><p><strong>web.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--DispatcherServlet--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>           <span class="hljs-comment">&lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--&gt;</span>  <br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--encodingFilter--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span><br>          org.springframework.web.filter.CharacterEncodingFilter<br>       <span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br>   <br>   <span class="hljs-comment">&lt;!--Session过期时间--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br>   <br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure>



<p><strong>spring-mvc.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">   https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 配置SpringMVC --&gt;</span><br>   <span class="hljs-comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br>   <span class="hljs-comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span> /&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 4.扫描web相关的bean --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.kuang.controller&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>



<p><strong>Spring配置整合文件，applicationContext.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring-dao.xml&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring-service.xml&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;spring-mvc.xml&quot;</span>/&gt;</span><br>   <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h2 id="配置文件，暂时结束！Controller-和-视图层编写"><a href="#配置文件，暂时结束！Controller-和-视图层编写" class="headerlink" title="配置文件，暂时结束！Controller 和 视图层编写"></a><strong>配置文件，暂时结束！Controller 和 视图层编写</strong></h2><ol>
<li><p>BookController 类编写 ， 方法一：查询全部书籍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/book&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookController</span> </span>&#123;<br><br>   <span class="hljs-meta">@Autowired</span><br>   <span class="hljs-meta">@Qualifier(&quot;BookServiceImpl&quot;)</span><br>   <span class="hljs-keyword">private</span> BookService bookService;<br><br>   <span class="hljs-meta">@RequestMapping(&quot;/allBook&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">list</span><span class="hljs-params">(Model model)</span> </span>&#123;<br>       List&lt;Books&gt; list = bookService.queryAllBook();<br>       model.addAttribute(<span class="hljs-string">&quot;list&quot;</span>, list);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;allBook&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>编写首页 <strong>index.jsp</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; %&gt;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">       <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="css">           <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="css">           <span class="hljs-attribute">color</span>: black;</span><br><span class="css">           <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;</span><br><span class="css">      &#125;</span><br><span class="css">       <span class="hljs-selector-tag">h3</span> &#123;</span><br><span class="css">           <span class="hljs-attribute">width</span>: <span class="hljs-number">180px</span>;</span><br><span class="css">           <span class="hljs-attribute">height</span>: <span class="hljs-number">38px</span>;</span><br><span class="css">           <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;</span><br><span class="css">           <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">           <span class="hljs-attribute">line-height</span>: <span class="hljs-number">38px</span>;</span><br><span class="css">           <span class="hljs-attribute">background</span>: deepskyblue;</span><br><span class="css">           <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;</span><br><span class="css">      &#125;</span><br><span class="css">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/book/allBook&quot;</span>&gt;</span>点击进入列表页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>书籍列表页面 <strong>allbook.jsp</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;<br>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>书籍列表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 引入 Bootstrap --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-12 column&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page-header&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>书籍列表 —— 显示所有书籍<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4 column&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/book/toAddBook&quot;</span>&gt;</span>新增<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-12 column&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-hover table-striped&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>书籍编号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>书籍名字<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>书籍数量<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>书籍详情<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br><br>               <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">c:forEach</span> <span class="hljs-attr">var</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">items</span>=<span class="hljs-string">&quot;$&#123;requestScope.get(&#x27;list&#x27;)&#125;&quot;</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                       <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;book.getBookID()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                       <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;book.getBookName()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                       <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;book.getBookCounts()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                       <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;book.getDetail()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                       <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                           <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/book/toUpdateBook?id=$&#123;book.getBookID()&#125;&quot;</span>&gt;</span>更改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> |<br>                           <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/book/del/$&#123;book.getBookID()&#125;&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                       <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                   <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">c:forEach</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>BookController 类编写 ， 方法二：添加书籍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/toAddBook&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toAddPaper</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;addBook&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@RequestMapping(&quot;/addBook&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">addPaper</span><span class="hljs-params">(Books books)</span> </span>&#123;<br>   System.out.println(books);<br>   bookService.addBook(books);<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/book/allBook&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>添加书籍页面：<strong>addBook.jsp</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;<br>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;<br><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>新增书籍<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 引入 Bootstrap --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-12 column&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page-header&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>新增书籍<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/book/addBook&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>      书籍名称：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookName&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>      书籍数量：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookCounts&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>      书籍详情：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;detail&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;添加&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>BookController 类编写 ， 方法三：修改书籍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/toUpdateBook&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toUpdateBook</span><span class="hljs-params">(Model model, <span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>   Books books = bookService.queryBookById(id);<br>   System.out.println(books);<br>   model.addAttribute(<span class="hljs-string">&quot;book&quot;</span>,books );<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;updateBook&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@RequestMapping(&quot;/updateBook&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">updateBook</span><span class="hljs-params">(Model model, Books book)</span> </span>&#123;<br>   System.out.println(book);<br>   bookService.updateBook(book);<br>   Books books = bookService.queryBookById(book.getBookID());<br>   model.addAttribute(<span class="hljs-string">&quot;books&quot;</span>, books);<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/book/allBook&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>修改书籍页面  <strong>updateBook.jsp</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;<br>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>修改信息<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 引入 Bootstrap --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-12 column&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page-header&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>修改信息<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/book/updateBook&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookID&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;book.getBookID()&#125;&quot;</span>/&gt;</span><br>      书籍名称：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;book.getBookName()&#125;&quot;</span>/&gt;</span><br>      书籍数量：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookCounts&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;book.getBookCounts()&#125;&quot;</span>/&gt;</span><br>      书籍详情：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;detail&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;book.getDetail() &#125;&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>BookController 类编写 ， 方法四：删除书籍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/del/&#123;bookId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">deleteBook</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;bookId&quot;)</span> <span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>   bookService.deleteBookById(id);<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/book/allBook&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<p><strong>配置Tomcat，进行运行！</strong></p>
<p>到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！</p>
<p><strong>项目结构图</strong> </p>
<p><img src="/myBlog/SpringMVC/1.png" alt="1"></p>
<p><img src="/myBlog/SpringMVC/2.png" alt="2"></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li>启动Tomcat不成功的原因，可能是没有导lib包</li>
</ul>
<p><img src="/myBlog/SpringMVC/image-20210811192257482.png" alt="image-20210811192257482"></p>
<ul>
<li>返回值类型写错</li>
</ul>
<p><img src="/myBlog/SpringMVC/image-20210811192336918.png" alt="image-20210811192336918"></p>
<ul>
<li><p>找不到bean</p>
<p><img src="/myBlog/SpringMVC/image-20210811192627057.png" alt="image-20210811192627057"></p>
</li>
<li><p>排错思路</p>
<p><img src="/myBlog/SpringMVC/image-20210811192652810.png" alt="image-20210811192652810"></p>
</li>
</ul>
<ul>
<li>出现这个错误，可能是返回值类型写错</li>
</ul>
<p><img src="/myBlog/SpringMVC/image-20210811192746763.png" alt="image-20210811192746763"></p>
<p><img src="/myBlog/SpringMVC/image-20210811192802314.png" alt="image-20210811192802314"></p>
<ul>
<li><p>用了中文逗号</p>
<p><img src="/myBlog/SpringMVC/image-20210811192859967.png" alt="image-20210811192859967"></p>
</li>
</ul>
<h2 id="小结及展望"><a href="#小结及展望" class="headerlink" title="小结及展望"></a>小结及展望</h2><p>这个是同学们的第一个SSM整合案例，一定要烂熟于心！</p>
<p>SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。</p>
<p>或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！</p>
<p>我们后面还要学习一些 SpringMVC 的知识！</p>
<ul>
<li>Ajax  和  Json</li>
<li>文件上传和下载</li>
<li>拦截器</li>
</ul>
<p>前路漫漫，认真坚持最重要！</p>
<h1 id="11、JSON交互处理"><a href="#11、JSON交互处理" class="headerlink" title="11、JSON交互处理"></a>11、JSON交互处理</h1><h2 id="什么是JSON？"><a href="#什么是JSON？" class="headerlink" title="什么是JSON？"></a>什么是JSON？</h2><ul>
<li>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</li>
<li>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</li>
<li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li>
<li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li>
</ul>
<p>在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</p>
<ul>
<li><p>对象表示为键值对，数据由逗号分隔</p>
</li>
<li><p>花括号保存对象</p>
</li>
<li><p>方括号保存数组</p>
</li>
</ul>
<p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;QinJiang&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>&#125;<br>&#123;<span class="hljs-string">&quot;sex&quot;</span>: <span class="hljs-string">&quot;男&quot;</span>&#125;<br></code></pre></td></tr></table></figure>

<p>很多人搞不清楚 JSON 和 JavaScript 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：</p>
<ul>
<li>JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">&#x27;World&#x27;</span>&#125;; <span class="hljs-comment">//这是一个对象，注意键名也是可以使用引号包裹的</span><br><span class="hljs-keyword">var</span> json = <span class="hljs-string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>; <span class="hljs-comment">//这是一个 JSON 字符串，本质是一个字符串</span><br></code></pre></td></tr></table></figure>

<p><strong>JSON 和 JavaScript 对象互转</strong></p>
<p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>); <br><span class="hljs-comment">//结果是 &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;</span><br></code></pre></td></tr></table></figure>

<p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> json = <span class="hljs-built_in">JSON</span>.stringify(&#123;<span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">&#x27;World&#x27;</span>&#125;);<br><span class="hljs-comment">//结果是 &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span><br></code></pre></td></tr></table></figure>

<p><strong>代码测试</strong></p>
<ol>
<li><p>新建一个module ，springmvc-05-json ， 添加web的支持</p>
</li>
<li><p>在web目录下新建一个 json-1.html ， 编写测试内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JSON_秦疆<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//编写一个js的对象</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> user = &#123;</span><br><span class="javascript"> <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;成博&quot;</span>,</span><br><span class="javascript"> <span class="hljs-attr">age</span>:<span class="hljs-number">3</span>,</span><br><span class="javascript"> <span class="hljs-attr">sex</span>:<span class="hljs-string">&quot;男&quot;</span></span><br><span class="javascript">&#125;;</span><br><span class="javascript"><span class="hljs-comment">//将js对象转换成json字符串</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-built_in">JSON</span>.stringify(user);</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(str);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//将json字符串转换为js对象</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> user2 = <span class="hljs-built_in">JSON</span>.parse(str);</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(user2.age,user2.name,user2.sex);</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>在IDEA中使用浏览器打开，查看控制台输出！</p>
</li>
</ol>
<p><img src="/myBlog/SpringMVC/1905053-20200331213612113-1624858159.png" alt="img"></p>
<h2 id="Controller返回JSON数据"><a href="#Controller返回JSON数据" class="headerlink" title="Controller返回JSON数据"></a>Controller返回JSON数据</h2><h2 id="1-jackson"><a href="#1-jackson" class="headerlink" title="1.jackson"></a>1.jackson</h2><ul>
<li><p>Jackson应该是目前比较好的json解析工具了</p>
</li>
<li><p>当然工具不止这一个，比如还有阿里巴巴的 fastjson 等等。</p>
</li>
<li><p>我们这里使用Jackson，使用它需要导入它的jar包；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>配置SpringMVC需要的配置<br><strong>web.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--1.注册servlet--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>springmvc-servlet.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.kuang.controller&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>

<ul>
<li>我们随便编写一个User的实体类，然后我们去编写我们的测试Controller；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.pojo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><br><span class="hljs-comment">//需要导入lombok</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>这里我们需要两个新东西，一个是@ResponseBody，一个是ObjectMapper对象，我们看下具体的用法</li>
</ul>
</li>
</ul>
<p>编写一个Controller；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/json1&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br>        <span class="hljs-comment">//创建一个jackson的对象映射器，用来解析数据</span><br>        ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>        <span class="hljs-comment">//创建一个对象</span><br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆1号&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>        <span class="hljs-comment">//将我们的对象解析成为json格式</span><br>        String str = mapper.writeValueAsString(user);<br>        <span class="hljs-comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span><br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>配置Tomcat ， 启动测试一下！</li>
</ul>
<p><img src="/myBlog/SpringMVC/1905053-20200331213642133-500236017.png" alt="img"></p>
<ul>
<li><p>发现出现了乱码问题，我们需要设置一下他的编码格式为utf-8，以及它返回的类型；</p>
</li>
<li><p>通过@RequestMaping的produces属性来实现，修改下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//produces:指定响应体返回类型和编码</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/json1&quot;,produces = &quot;application/json;charset=utf-8&quot;)</span><br></code></pre></td></tr></table></figure></li>
<li><p>再次测试， <a href="http://localhost/">http://localhost</a>:8080/json1 ， 乱码问题OK！</p>
</li>
</ul>
<p>【注意：使用json记得处理乱码问题】</p>
<h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><p><strong>乱码统一解决</strong></p>
<p>上一种方法比较麻烦，如果项目中有许多请求则每一个都要添加，可以通过Spring配置统一指定，这样就不用每次都去处理了！</p>
<p>我们可以在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--JSON乱码问题配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span> <span class="hljs-attr">register-defaults</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;objectMapper&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;failOnEmptyBeans&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>返回json字符串统一解决</strong></p>
<p>在类上直接使用 <strong>@RestController</strong> ，这样子，里面所有的方法都只会返回 json 字符串了，不用再每一个都添加@ResponseBody ！我们在前后端分离开发中，一般都使用 @RestController ，十分便捷！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br>    <span class="hljs-comment">//produces:指定响应体返回类型和编码</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/json1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br>        <span class="hljs-comment">//创建一个jackson的对象映射器，用来解析数据</span><br>        ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>        <span class="hljs-comment">//创建一个对象</span><br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆1号&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>        <span class="hljs-comment">//将我们的对象解析成为json格式</span><br>        String str = mapper.writeValueAsString(user);<br>        <span class="hljs-comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span><br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>启动tomcat测试，结果都正常输出！</p>
<h3 id="测试集合输出"><a href="#测试集合输出" class="headerlink" title="测试集合输出"></a>测试集合输出</h3><p>增加一个新的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/json2&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br><br>    <span class="hljs-comment">//创建一个jackson的对象映射器，用来解析数据</span><br>    ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>    <span class="hljs-comment">//创建一个对象</span><br>    User user1 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆1号&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>    User user2 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆2号&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>    User user3 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆3号&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>    User user4 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆4号&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>    List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();<br>    list.add(user1);<br>    list.add(user2);<br>    list.add(user3);<br>    list.add(user4);<br><br>    <span class="hljs-comment">//将我们的对象解析成为json格式</span><br>    String str = mapper.writeValueAsString(list);<br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>运行结果 : 十分完美，没有任何问题！</p>
<h3 id="输出时间对象"><a href="#输出时间对象" class="headerlink" title="输出时间对象"></a>输出时间对象</h3><p>增加一个新的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/json3&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br><br>    ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br><br>    <span class="hljs-comment">//创建时间一个对象，java.util.Date</span><br>    Date date = <span class="hljs-keyword">new</span> Date();<br>    <span class="hljs-comment">//将我们的对象解析成为json格式</span><br>    String str = mapper.writeValueAsString(date);<br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>运行结果 :</p>
<ul>
<li>默认日期格式会变成一个数字，是1970年1月1日到当前日期的毫秒数！</li>
<li>Jackson 默认是会把时间转成timestamps形式</li>
</ul>
<p><strong>解决方案：取消timestamps形式 ， 自定义时间格式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/json4&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br><br>    ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br><br>    <span class="hljs-comment">//不使用时间戳的方式</span><br>    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="hljs-keyword">false</span>);<br>    <span class="hljs-comment">//自定义日期格式对象</span><br>    SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    <span class="hljs-comment">//指定日期格式</span><br>    mapper.setDateFormat(sdf);<br><br>    Date date = <span class="hljs-keyword">new</span> Date();<br>    String str = mapper.writeValueAsString(date);<br><br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>运行结果 : 成功的输出了时间！</p>
<p><strong>时间戳格式化，老手艺不能丢</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/json6&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json6</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br><br>    ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>    Date date = <span class="hljs-keyword">new</span> Date();<br>    <span class="hljs-comment">//自定义日期的格式</span><br>    SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    <span class="hljs-comment">// objectMapper,时间解析后的默认格式为: Timestamp, 时间裁</span><br>    <span class="hljs-keyword">return</span> mapper.writeValueAsString(sdf.format(date));<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="抽取为工具类"><a href="#抽取为工具类" class="headerlink" title="抽取为工具类"></a>抽取为工具类</h3><p><strong>如果要经常使用的话，这样是比较麻烦的，我们可以将这些代码封装到一个工具类中；我们去编写下</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.utils;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonUtils</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getJson</span><span class="hljs-params">(Object object)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getJson(object,<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getJson</span><span class="hljs-params">(Object object,String dateFormat)</span> </span>&#123;<br>        ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>        <span class="hljs-comment">//不使用时间差的方式</span><br>        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="hljs-keyword">false</span>);<br>        <span class="hljs-comment">//自定义日期格式对象</span><br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(dateFormat);<br>        <span class="hljs-comment">//指定日期格式</span><br>        mapper.setDateFormat(sdf);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> mapper.writeValueAsString(object);<br>        &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>我们使用工具类，代码就更加简洁了！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/json5&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json5</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br>    Date date = <span class="hljs-keyword">new</span> Date();<br>    String json = JsonUtils.getJson(date);<br>    <span class="hljs-keyword">return</span> json;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>大工告成！完美！</p>
<h2 id="2-FastJson"><a href="#2-FastJson" class="headerlink" title="2.FastJson"></a>2.FastJson</h2><p>fastjson.jar是阿里开发的一款专门用于Java开发的包，可以方便的实现json对象与JavaBean对象的转换，实现JavaBean对象与json字符串的转换，实现json对象与json字符串的转换。实现json的转换方法很多，最后的实现结果都是一样的。</p>
<p>fastjson 的 pom依赖！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.60<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure>



<p>fastjson 三个主要的类：</p>
<ul>
<li>【JSONObject 代表 json 对象 】<ul>
<li>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</li>
<li>JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map接口并调用接口中的方法完成的。</li>
</ul>
</li>
<li>【JSONArray 代表 json 对象数组】<ul>
<li>内部是有List接口中的方法来完成操作的。</li>
</ul>
</li>
<li>【JSON 代表 JSONObject和JSONArray的转化】<ul>
<li>JSON类源码分析与使用</li>
<li>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化。</li>
</ul>
</li>
</ul>
<p><strong>代码测试，我们新建一个FastJsonDemo 类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.kuang.pojo.User;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FastJsonDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建一个对象</span><br>        User user1 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆1号&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>        User user2 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆2号&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>        User user3 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆3号&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>        User user4 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆4号&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>        List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();<br>        list.add(user1);<br>        list.add(user2);<br>        list.add(user3);<br>        list.add(user4);<br><br>        System.out.println(<span class="hljs-string">&quot;*******Java对象 转 JSON字符串*******&quot;</span>);<br>        String str1 = JSON.toJSONString(list);<br>        System.out.println(<span class="hljs-string">&quot;JSON.toJSONString(list)==&gt;&quot;</span>+str1);<br>        String str2 = JSON.toJSONString(user1);<br>        System.out.println(<span class="hljs-string">&quot;JSON.toJSONString(user1)==&gt;&quot;</span>+str2);<br><br>        System.out.println(<span class="hljs-string">&quot;\n****** JSON字符串 转 Java对象*******&quot;</span>);<br>        User jp_user1=JSON.parseObject(str2,User.class);<br>        System.out.println(<span class="hljs-string">&quot;JSON.parseObject(str2,User.class)==&gt;&quot;</span>+jp_user1);<br><br>        System.out.println(<span class="hljs-string">&quot;\n****** Java对象 转 JSON对象 ******&quot;</span>);<br>        JSONObject jsonObject1 = (JSONObject) JSON.toJSON(user2);<br>        System.out.println(<span class="hljs-string">&quot;(JSONObject) JSON.toJSON(user2)==&gt;&quot;</span>+jsonObject1.getString(<span class="hljs-string">&quot;name&quot;</span>));<br><br>        System.out.println(<span class="hljs-string">&quot;\n****** JSON对象 转 Java对象 ******&quot;</span>);<br>        User to_java_user = JSON.toJavaObject(jsonObject1, User.class);<br>        System.out.println(<span class="hljs-string">&quot;JSON.toJavaObject(jsonObject1, User.class)==&gt;&quot;</span>+to_java_user);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>



<p>例题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/json8&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json8</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br><br>        <span class="hljs-comment">//创建一个对象</span><br>        User user1 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆1号&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>        User user2 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆2号&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>        User user3 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆3号&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>        User user4 = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆4号&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>        List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();<br>        list.add(user1);<br>        list.add(user2);<br>        list.add(user3);<br>        list.add(user4);<br><br>        <span class="hljs-comment">//将我们的对象解析成为json格式</span><br>        String str1 = JSON.toJSONString(list);<br>        <span class="hljs-keyword">return</span> str1;<br>    &#125;<br></code></pre></td></tr></table></figure>

<p>测试：</p>
<p><img src="/myBlog/SpringMVC/1905053-20200331213729633-854108693.png" alt="img"></p>
<h1 id="12、Ajax技术"><a href="#12、Ajax技术" class="headerlink" title="12、Ajax技术"></a>12、Ajax技术</h1><h2 id="12-1、AJAX初体验"><a href="#12-1、AJAX初体验" class="headerlink" title="12.1、AJAX初体验"></a>12.1、AJAX初体验</h2><p>异步可理解为局部刷新，同步指需要按部就班地完成一整套流程</p>
<ul>
<li><strong>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></li>
<li>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</li>
<li><strong>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></li>
<li>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。</li>
<li>Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</li>
<li>就和国内百度的搜索框一样：</li>
<li>传统的网页(即不用ajax技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。</li>
<li>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</li>
<li>使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</li>
</ul>
<h3 id="伪造Ajax"><a href="#伪造Ajax" class="headerlink" title="伪造Ajax"></a>伪造Ajax</h3><p>我们可以使用前端的一个标签来伪造一个ajax的样子。 iframe标签</p>
<ol>
<li><p>新建一个module ： sspringmvc-06-ajax ， 导入web支持！</p>
</li>
<li><p>编写一个 ajax-frame.html 使用 iframe 测试，感受下效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>kuangshen<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"> <span class="hljs-keyword">var</span> myDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();</span><br><span class="javascript"> <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;currentTime&#x27;</span>).innerText = myDate.getTime();</span><br><span class="javascript">&#125;;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">LoadPage</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"> <span class="hljs-keyword">var</span> targetUrl =  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;url&#x27;</span>).value;</span><br><span class="javascript"> <span class="hljs-built_in">console</span>.log(targetUrl);</span><br><span class="javascript"> <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;iframePosition&quot;</span>).src = targetUrl;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>请输入要加载的地址：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;currentTime&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;LoadPage()&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>加载页面位置：<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;iframePosition&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%;height: 500px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>使用IDEA开浏览器测试一下</p>
</li>
</ol>
<p><strong>利用AJAX可以做：</strong></p>
<ul>
<li>注册时，输入用户名自动检测用户是否已经存在。</li>
<li>登陆时，提示用户名密码错误</li>
<li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</li>
<li>….等等</li>
</ul>
<h3 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery.ajax"></a>jQuery.ajax</h3><ul>
<li>纯JS原生实现Ajax我们不去讲解这里，直接使用jquery提供的，方便学习和使用，避免重复造轮子，有兴趣的同学可以去了解下JS原生XMLHttpRequest ！</li>
<li>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</li>
<li>jQuery 提供多个与 AJAX 有关的方法。</li>
<li>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</li>
<li>jQuery 不是生产者，而是大自然搬运工。</li>
<li>jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">jQuery.ajax(...)<br>       部分参数：<br>              url：请求地址<br>             type：请求方式，GET、POST（<span class="hljs-number">1.9</span><span class="hljs-number">.0</span>之后用method）<br>          headers：请求头<br>             data：要发送的数据<br>      contentType：即将发送信息至服务器的内容编码类型(默认: <span class="hljs-string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>)<br>            <span class="hljs-keyword">async</span>：是否异步<br>          timeout：设置请求超时时间（毫秒）<br>       beforeSend：发送请求前执行的函数(全局)<br>         complete：完成之后执行的回调函数(全局)<br>          success：成功之后执行的回调函数(全局)<br>            error：失败之后执行的回调函数(全局)<br>          accepts：通过请求头发送给服务器，告诉服务器当前客户端课接受的数据类型<br>         dataType：将服务器端返回的数据转换成指定类型<br>            <span class="hljs-string">&quot;xml&quot;</span>: 将服务器端返回的内容转换成xml格式<br>           <span class="hljs-string">&quot;text&quot;</span>: 将服务器端返回的内容转换成普通文本格式<br>           <span class="hljs-string">&quot;html&quot;</span>: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。<br>         <span class="hljs-string">&quot;script&quot;</span>: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式<br>           <span class="hljs-string">&quot;json&quot;</span>: 将服务器端返回的内容转换成相应的JavaScript对象<br>          <span class="hljs-string">&quot;jsonp&quot;</span>: JSONP 格式使用 JSONP 形式调用函数时，如 <span class="hljs-string">&quot;myurl?callback=?&quot;</span> jQuery 将自动替换 ? 为正确的函数名，以执行回调函数<br></code></pre></td></tr></table></figure>

<p><strong>我们来个简单的测试，使用最原始的HttpServletResponse处理 , .最简单 , 最通用</strong></p>
<ol>
<li><p>配置web.xml 和 springmvc的配置文件，复制上面案例的即可 【记得静态资源过滤和注解驱动配置上】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.kuang.controller&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>编写一个AjaxController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AjaxController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/a1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ajax1</span><span class="hljs-params">(String name , HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;admin&quot;</span>.equals(name))&#123;<br>            response.getWriter().print(<span class="hljs-string">&quot;true&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            response.getWriter().print(<span class="hljs-string">&quot;false&quot;</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>导入jquery ， 可以使用在线的CDN ， 也可以下载导入</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;script src=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script src=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure></li>
<li><p>编写index.jsp测试</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>$Title$<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    &lt;%--<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>--%&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a1</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            $.post(&#123;</span><br><span class="javascript">                <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/a1&quot;</span>,</span><br><span class="javascript">                <span class="hljs-attr">data</span>:&#123;<span class="hljs-string">&#x27;name&#x27;</span>:$(<span class="hljs-string">&quot;#txtName&quot;</span>).val()&#125;,</span><br><span class="javascript">                <span class="hljs-attr">success</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data,status</span>) </span>&#123;</span><br><span class="javascript">                    alert(data);</span><br><span class="javascript">                    alert(status);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>  &lt;%--onblur：失去焦点触发事件--%&gt;<br>  用户名:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txtName&quot;</span> <span class="hljs-attr">onblur</span>=<span class="hljs-string">&quot;a1()&quot;</span>/&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>启动tomcat测试！ 打开浏览器的控制台，当我们鼠标离开输入框的时候，可以看到发出了一个ajax的请求！是后台返回给我们的结果！测试成功！</p>
</li>
</ol>
<h2 id="12-2、AJAX异步加载数据"><a href="#12-2、AJAX异步加载数据" class="headerlink" title="12.2、AJAX异步加载数据"></a>12.2、AJAX异步加载数据</h2><h3 id="Springmvc实现"><a href="#Springmvc实现" class="headerlink" title="Springmvc实现"></a>Springmvc实现</h3><p>实体类user</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String sex;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>我们来获取一个集合对象，展示到前端页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/a2&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">ajax2</span><span class="hljs-params">()</span></span>&#123;<br>    List&lt;User&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();<br>    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆1号&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;男&quot;</span>));<br>    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆2号&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;男&quot;</span>));<br>    list.add(<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;秦疆3号&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;男&quot;</span>));<br>    <span class="hljs-keyword">return</span> list; <span class="hljs-comment">//由于@RestController注解，将list转成json格式返回</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>前端页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;获取数据&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;80%&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">    $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        $(<span class="hljs-string">&quot;#btn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            $.post(<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/a2&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(data)</span><br><span class="javascript">                <span class="hljs-keyword">var</span> html=<span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;data.length ; i++) &#123;</span><br><span class="javascript">                    html+= <span class="hljs-string">&quot;&lt;tr&gt;&quot;</span> +</span><br><span class="javascript">                        <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + data[i].name + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class="javascript">                        <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + data[i].age + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class="javascript">                        <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + data[i].sex + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class="javascript">                        <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span></span><br><span class="javascript">                &#125;</span><br><span class="javascript">                $(<span class="hljs-string">&quot;#content&quot;</span>).html(html);</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>成功实现了数据回显！可以体会一下Ajax的好处！</strong></p>
<h2 id="12-3、AJAX验证用户名体验"><a href="#12-3、AJAX验证用户名体验" class="headerlink" title="12.3、AJAX验证用户名体验"></a>12.3、AJAX验证用户名体验</h2><h3 id="注册提示效果"><a href="#注册提示效果" class="headerlink" title="注册提示效果"></a>注册提示效果</h3><p>我们再测试一个小Demo，思考一下我们平时注册时候，输入框后面的实时提示怎么做到的；如何优化</p>
<p>我们写一个Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/a3&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">ajax3</span><span class="hljs-params">(String name,String pwd)</span></span>&#123;<br>    String msg = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">//模拟数据库中存在数据</span><br>    <span class="hljs-keyword">if</span> (name!=<span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;admin&quot;</span>.equals(name))&#123;<br>            msg = <span class="hljs-string">&quot;OK&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            msg = <span class="hljs-string">&quot;用户名输入错误&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (pwd!=<span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;123456&quot;</span>.equals(pwd))&#123;<br>            msg = <span class="hljs-string">&quot;OK&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            msg = <span class="hljs-string">&quot;密码输入有误&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> msg; <span class="hljs-comment">//由于@RestController注解，将msg转成json格式返回</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>前端页面 login.jsp</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ajax<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a1</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            $.post(&#123;</span><br><span class="javascript">                <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/a3&quot;</span>,</span><br><span class="javascript">                <span class="hljs-attr">data</span>:&#123;<span class="hljs-string">&#x27;name&#x27;</span>:$(<span class="hljs-string">&quot;#name&quot;</span>).val()&#125;,</span><br><span class="javascript">                <span class="hljs-attr">success</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span> (data.toString()==<span class="hljs-string">&#x27;OK&#x27;</span>)&#123;</span><br><span class="javascript">                        $(<span class="hljs-string">&quot;#userInfo&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;green&quot;</span>);</span><br><span class="javascript">                    &#125;<span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                        $(<span class="hljs-string">&quot;#userInfo&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>);</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                    $(<span class="hljs-string">&quot;#userInfo&quot;</span>).html(data);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a2</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            $.post(&#123;</span><br><span class="javascript">                <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/a3&quot;</span>,</span><br><span class="javascript">                <span class="hljs-attr">data</span>:&#123;<span class="hljs-string">&#x27;pwd&#x27;</span>:$(<span class="hljs-string">&quot;#pwd&quot;</span>).val()&#125;,</span><br><span class="javascript">                <span class="hljs-attr">success</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span> (data.toString()==<span class="hljs-string">&#x27;OK&#x27;</span>)&#123;</span><br><span class="javascript">                        $(<span class="hljs-string">&quot;#pwdInfo&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;green&quot;</span>);</span><br><span class="javascript">                    &#125;<span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                        $(<span class="hljs-string">&quot;#pwdInfo&quot;</span>).css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>);</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                    $(<span class="hljs-string">&quot;#pwdInfo&quot;</span>).html(data);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    用户名:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">onblur</span>=<span class="hljs-string">&quot;a1()&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userInfo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    密码:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">onblur</span>=<span class="hljs-string">&quot;a2()&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pwdInfo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>【记得处理json乱码问题】</p>
<p>测试一下效果，动态请求响应，局部刷新，就是如此！</p>
<h2 id="12-4、补充，自己看看"><a href="#12-4、补充，自己看看" class="headerlink" title="12.4、补充，自己看看"></a>12.4、补充，自己看看</h2><h3 id="获取baidu接口Demo"><a href="#获取baidu接口Demo" class="headerlink" title="获取baidu接口Demo"></a>获取baidu接口Demo</h3><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JSONP百度搜索<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#q</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">            <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;</span><br><span class="css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;</span><br><span class="css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span><br><span class="css">        &#125;</span><br><span class="css">        <span class="hljs-selector-id">#ul</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">520px</span>;</span><br><span class="css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">            <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;</span><br><span class="css">            <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">1px</span>;</span><br><span class="css">            <span class="hljs-attribute">display</span>: none;</span><br><span class="css">        &#125;</span><br><span class="css">        <span class="hljs-selector-id">#ul</span> <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;</span><br><span class="css">        &#125;</span><br><span class="css">        <span class="hljs-selector-id">#ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f60</span>;</span><br><span class="css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// 2.步骤二</span></span><br><span class="javascript">        <span class="hljs-comment">// 定义demo函数 (分析接口、数据)</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span>(<span class="hljs-params">data</span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> Ul = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;ul&#x27;</span>);</span><br><span class="javascript">            <span class="hljs-keyword">var</span> html = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="javascript">            <span class="hljs-comment">// 如果搜索数据存在 把内容添加进去</span></span><br><span class="javascript">            <span class="hljs-keyword">if</span> (data.s.length) &#123;</span><br><span class="javascript">                <span class="hljs-comment">// 隐藏掉的ul显示出来</span></span><br><span class="javascript">                Ul.style.display = <span class="hljs-string">&#x27;block&#x27;</span>;</span><br><span class="javascript">                <span class="hljs-comment">// 搜索到的数据循环追加到li里</span></span><br><span class="javascript">                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;data.s.length;i++)&#123;</span><br><span class="javascript">                    html += <span class="hljs-string">&#x27;&lt;li&gt;&#x27;</span>+data.s[i]+<span class="hljs-string">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">                <span class="hljs-comment">// 循环的li写入ul</span></span><br><span class="javascript">                Ul.innerHTML = html;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// 1.步骤一</span></span><br><span class="javascript">        <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">// 获取输入框和ul</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> Q = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;q&#x27;</span>);</span><br><span class="javascript">            <span class="hljs-keyword">var</span> Ul = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;ul&#x27;</span>);</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">// 事件鼠标抬起时候</span></span><br><span class="javascript">            Q.onkeyup = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-comment">// 如果输入框不等于空</span></span><br><span class="javascript">                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.value != <span class="hljs-string">&#x27;&#x27;</span>) &#123;</span><br><span class="javascript">                    <span class="hljs-comment">// ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆JSONPz重点☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆</span></span><br><span class="javascript">                    <span class="hljs-comment">// 创建标签</span></span><br><span class="javascript">                    <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);</span><br><span class="javascript">                    <span class="hljs-comment">//给定要跨域的地址 赋值给src</span></span><br><span class="javascript">                    <span class="hljs-comment">//这里是要请求的跨域的地址 我写的是百度搜索的跨域地址</span></span><br><span class="javascript">                    script.src = <span class="hljs-string">&#x27;https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=&#x27;</span>+<span class="hljs-built_in">this</span>.value+<span class="hljs-string">&#x27;&amp;cb=demo&#x27;</span>;</span><br><span class="javascript">                    <span class="hljs-comment">// 将组合好的带src的script标签追加到body里</span></span><br><span class="javascript">                    <span class="hljs-built_in">document</span>.body.appendChild(script);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;q&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ul&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="12-5、问题"><a href="#12-5、问题" class="headerlink" title="12.5、问题"></a>12.5、问题</h2><ul>
<li>没有在pom导入Jackson依赖</li>
</ul>
<p><img src="/myBlog/SpringMVC/image-20210811204452782.png" alt="image-20210811204452782"></p>
<ul>
<li>输出数据没有在table标签内，且没对齐</li>
</ul>
<p><img src="/myBlog/SpringMVC/image-20210811204532578.png" alt="image-20210811204532578">+</p>
<ul>
<li>这是正确的</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>&lt;%--数据 ：后台--%&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br></code></pre></td></tr></table></figure>

<ul>
<li>这是发生错误的</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tboby</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tboby</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h1 id="13、拦截器"><a href="#13、拦截器" class="headerlink" title="13、拦截器"></a>13、拦截器</h1><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter,用于对处理器进行预处理和后处理。开发者可以自己定义一些拦截器来实现特定的功能。</p>
<p><strong>过滤器与拦截器的区别：</strong>拦截器是AOP思想的具体应用。</p>
<p><strong>过滤器</strong></p>
<ul>
<li>servlet规范中的一部分，任何java web工程都可以使用</li>
<li>在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截</li>
</ul>
<p><strong>拦截器</strong></p>
<ul>
<li>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</li>
<li>拦截器只会拦截访问的控制器方法， 如果访问的是jsp/html/css/image/js是不会进行拦截的</li>
</ul>
<h3 id="13-1、自定义拦截器"><a href="#13-1、自定义拦截器" class="headerlink" title="13.1、自定义拦截器"></a>13.1、自定义拦截器</h3><p>那如何实现拦截器呢？</p>
<p>想要自定义拦截器，必须实现 HandlerInterceptor 接口。</p>
<ol>
<li><p>新建一个Moudule ， springmvc-07-Interceptor ， 添加web支持</p>
</li>
<li><p>配置web.xml 和 springmvc-servlet.xml 文件</p>
</li>
<li><p>编写一个拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.interceptor;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-comment">//在请求处理的方法之前执行</span><br>    <span class="hljs-comment">//如果返回true执行下一个拦截器</span><br>    <span class="hljs-comment">//如果返回false就不执行下一个拦截器</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;------------处理前------------&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//在请求处理方法执行之后执行</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;------------处理后------------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//在dispatcherServlet处理后执行,做清理工作.</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;------------清理------------&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>在springmvc的配置文件中配置拦截器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--关于拦截器的配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--/** 包括路径及其子路径--&gt;</span><br>        <span class="hljs-comment">&lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截--&gt;</span><br>        <span class="hljs-comment">&lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--bean配置的就是拦截器--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.interceptor.MyInterceptor&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>编写一个Controller，接收请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-comment">//测试拦截器的控制器</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterceptorController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/interceptor&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testFunction</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;控制器中的方法执行了&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>前端 index.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/interceptor&quot;</span>&gt;拦截器测试&lt;/a&gt;<br></code></pre></td></tr></table></figure></li>
<li><p>启动tomcat 测试一下</p>
</li>
</ol>
<h3 id="13-2、验证用户是否登录-认证用户"><a href="#13-2、验证用户是否登录-认证用户" class="headerlink" title="13.2、验证用户是否登录 (认证用户)"></a>13.2、验证用户是否登录 (认证用户)</h3><p><strong>实现思路</strong></p>
<ol>
<li>有一个登陆页面，需要写一个controller访问页面。</li>
<li>登陆页面有一提交表单的动作。需要在controller中处理。判断用户名密码是否正确。如果正确，向session中写入用户信息。<em>返回登陆成功。</em></li>
<li>拦截用户请求，判断用户是否登陆。如果用户已经登陆。放行， 如果用户未登陆，跳转到登陆页面</li>
</ol>
<p><strong>代码编写</strong></p>
<ol>
<li><p>编写一个登陆页面 login.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br><br>&lt;h1&gt;登录页面&lt;/h1&gt;<br>&lt;hr&gt;<br><br>&lt;body&gt;<br>&lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/login&quot;</span>&gt;<br>    用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt; &lt;br&gt;<br>    密码： &lt;input type=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;pwd&quot;</span>&gt; &lt;br&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li>
<li><p>编写一个Controller处理请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br>    <span class="hljs-comment">//跳转到登陆页面</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/jumplogin&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">jumpLogin</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//跳转到成功页面</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/jumpSuccess&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">jumpSuccess</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//登陆提交</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/login&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(HttpSession session, String username, String pwd)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 向session记录用户身份信息</span><br>        System.out.println(<span class="hljs-string">&quot;接收前端===&quot;</span>+username);<br>        session.setAttribute(<span class="hljs-string">&quot;user&quot;</span>, username);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//退出登陆</span><br>    <span class="hljs-meta">@RequestMapping(&quot;logout&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">logout</span><span class="hljs-params">(HttpSession session)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// session 过期</span><br>        session.invalidate();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li>
<li><p>编写一个登陆成功的页面 success.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;h1&gt;登录成功页面&lt;/h1&gt;<br>&lt;hr&gt;<br><br>$&#123;user&#125;<br>&lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/logout&quot;</span>&gt;注销&lt;/a&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li>
<li><p>在 index 页面上测试跳转！启动Tomcat 测试，未登录也可以进入主页！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>$Title$<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>  &lt;%--登录--%&gt;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/jumplogin&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/jumpSuccess&quot;</span>&gt;</span>成功页面<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>编写用户登录拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.interceptor;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 如果是登陆页面则放行</span><br>        System.out.println(<span class="hljs-string">&quot;uri: &quot;</span> + request.getRequestURI());<br>        <span class="hljs-keyword">if</span> (request.getRequestURI().contains(<span class="hljs-string">&quot;login&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        HttpSession session = request.getSession();<br><br>        <span class="hljs-comment">// 如果用户已登陆也放行</span><br>        <span class="hljs-keyword">if</span>(session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>) != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 用户没有登陆跳转到登陆页面</span><br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/jsp/login.jsp&quot;</span>).forward(request, response);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>在Springmvc的配置文件中注册拦截器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--关于拦截器的配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginInterceptor&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.interceptor.LoginInterceptor&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure></li>
<li><p>再次重启Tomcat测试！</p>
</li>
</ol>
<p><strong>OK，测试登录拦截功能无误</strong></p>
<h1 id="14、文件上传和下载"><a href="#14、文件上传和下载" class="headerlink" title="14、文件上传和下载"></a>14、文件上传和下载</h1><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>文件上传是项目开发中最常见的功能之一 ,springMVC 可以很好的支持文件上传，但是SpringMVC上下文中默认没有装配MultipartResolver，因此默认情况下其不能处理文件上传工作。如果想使用Spring的文件上传功能，则需要在上下文中配置MultipartResolver。</p>
<p>前端表单要求：为了能上传文件，必须将表单的method设置为POST，并将enctype设置为multipart/form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器；</p>
<p><strong>对表单中的 enctype 属性做个详细的说明：</strong></p>
<ul>
<li>application/x-www=form-urlencoded：默认方式，只处理表单域中的 value 属性值，采用这种编码方式的表单会将表单域中的值处理成 URL 编码方式。</li>
<li>multipart/form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</li>
<li>text/plain：除了把空格转换为 “+” 号外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮件。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>一旦设置了enctype为multipart/form-data，浏览器即会采用二进制流的方式来处理表单数据，而对于文件上传的处理则涉及在服务器端解析原始的HTTP响应。在2003年，Apache Software Foundation发布了开源的Commons FileUpload组件，其很快成为Servlet/JSP程序员上传文件的最佳选择。</p>
<ul>
<li>Servlet3.0规范已经提供方法来处理文件上传，但这种上传需要在Servlet中完成。</li>
<li>而Spring MVC则提供了更简单的封装。</li>
<li>Spring MVC为文件上传提供了直接的支持，这种支持是用即插即用的MultipartResolver实现的。</li>
<li>Spring MVC使用Apache Commons FileUpload技术实现了一个MultipartResolver实现类：CommonsMultipartResolver。因此，SpringMVC的文件上传还需要依赖Apache Commons FileUpload的组件</li>
</ul>
<h3 id="14-1、文件上传"><a href="#14-1、文件上传" class="headerlink" title="14.1、文件上传"></a>14.1、文件上传</h3><p>一、导入文件上传的jar包，commons-fileupload ， Maven会自动帮我们导入他的依赖包 commons-io包；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--文件上传--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--servlet-api导入高版本的--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>二、配置bean：multipartResolver<br>【<strong>注意！！！这个bena的id必须为：multipartResolver ， 否则上传文件会报400的错误！在这里栽过坑,教训！</strong>】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--文件上传配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;utf-8&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10485760&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxInMemorySize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;40960&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>CommonsMultipartFile 的 常用方法：</p>
<ul>
<li><strong>String getOriginalFilename()：获取上传文件的原名</strong></li>
<li><strong>InputStream getInputStream()：获取文件流</strong></li>
<li><strong>void transferTo(File dest)：将上传文件保存到一个目录文件中</strong></li>
</ul>
<p>我们去实际测试一下</p>
<p>三、编写前端页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/upload&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;upload&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>四、<strong>Controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartFile;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileController</span> </span>&#123;<br>    <span class="hljs-comment">//@RequestParam(&quot;file&quot;) 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span><br>    <span class="hljs-comment">//批量上传CommonsMultipartFile则为数组即可</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">fileUpload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file , HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        <span class="hljs-comment">//获取文件名 : file.getOriginalFilename();</span><br>        String uploadFileName = file.getOriginalFilename();<br><br>        <span class="hljs-comment">//如果文件名为空，直接回到首页！</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;&quot;</span>.equals(uploadFileName))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;上传文件名 : &quot;</span>+uploadFileName);<br><br>        <span class="hljs-comment">//上传路径保存设置</span><br>        String path = request.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);<br>        <span class="hljs-comment">//如果路径不存在，创建一个</span><br>        File realPath = <span class="hljs-keyword">new</span> File(path);<br>        <span class="hljs-keyword">if</span> (!realPath.exists())&#123;<br>            realPath.mkdir();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;上传文件保存地址：&quot;</span>+realPath);<br><br>        InputStream is = file.getInputStream(); <span class="hljs-comment">//文件输入流</span><br>        OutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(realPath,uploadFileName)); <span class="hljs-comment">//文件输出流</span><br><br>        <span class="hljs-comment">//读取写出</span><br>        <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">while</span> ((len=is.read(buffer))!=-<span class="hljs-number">1</span>)&#123;<br>            os.write(buffer,<span class="hljs-number">0</span>,len);<br>            os.flush();<br>        &#125;<br>        os.close();<br>        is.close();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>五、测试上传文件，OK！</p>
<p><strong>采用file.Transto 来保存上传的文件</strong></p>
<ol>
<li><p>编写Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 采用file.Transto 来保存上传的文件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/upload2&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String  <span class="hljs-title">fileUpload2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>    <span class="hljs-comment">//上传路径保存设置</span><br>    String path = request.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);<br>    File realPath = <span class="hljs-keyword">new</span> File(path);<br>    <span class="hljs-keyword">if</span> (!realPath.exists())&#123;<br>        realPath.mkdir();<br>    &#125;<br>    <span class="hljs-comment">//上传文件地址</span><br>    System.out.println(<span class="hljs-string">&quot;上传文件保存地址：&quot;</span>+realPath);<br><br>    <span class="hljs-comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span><br>    file.transferTo(<span class="hljs-keyword">new</span> File(realPath +<span class="hljs-string">&quot;/&quot;</span>+ file.getOriginalFilename()));<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index.jsp&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>前端表单提交地址修改</p>
</li>
<li><p>访问提交测试，OK！</p>
</li>
</ol>
<h3 id="14-2、文件下载"><a href="#14-2、文件下载" class="headerlink" title="14.2、文件下载"></a>14.2、文件下载</h3><p>文件下载步骤：</p>
<ol>
<li>设置 response 响应头</li>
<li>读取文件 – InputStream</li>
<li>写出文件 – OutputStream</li>
<li>执行操作</li>
<li>关闭流 （先开后关）</li>
</ol>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value=&quot;/download&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">downloads</span><span class="hljs-params">(HttpServletResponse response ,HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>    <span class="hljs-comment">//要下载的图片地址</span><br>    String  path = request.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);<br>    String  fileName = <span class="hljs-string">&quot;基础语法.jpg&quot;</span>;<br><br>    <span class="hljs-comment">//1、设置response 响应头</span><br>    response.reset(); <span class="hljs-comment">//设置页面不缓存,清空buffer</span><br>    response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>); <span class="hljs-comment">//字符编码</span><br>    response.setContentType(<span class="hljs-string">&quot;multipart/form-data&quot;</span>); <span class="hljs-comment">//二进制传输数据</span><br>    <span class="hljs-comment">//设置响应头</span><br>    response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<br>            <span class="hljs-string">&quot;attachment;fileName=&quot;</span>+URLEncoder.encode(fileName, <span class="hljs-string">&quot;UTF-8&quot;</span>));<br><br>    File file = <span class="hljs-keyword">new</span> File(path,fileName);<br>    <span class="hljs-comment">//2、 读取文件--输入流</span><br>    InputStream input=<span class="hljs-keyword">new</span> FileInputStream(file);<br>    <span class="hljs-comment">//3、 写出文件--输出流</span><br>    OutputStream out = response.getOutputStream();<br><br>    <span class="hljs-keyword">byte</span>[] buff =<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//4、执行 写出操作</span><br>    <span class="hljs-keyword">while</span>((index= input.read(buff))!= -<span class="hljs-number">1</span>)&#123;<br>        out.write(buff, <span class="hljs-number">0</span>, index);<br>        out.flush();<br>    &#125;<br>    out.close();<br>    input.close();<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>前端</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/download&quot;</span>&gt;</span>点击下载<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h1 id="15、通用"><a href="#15、通用" class="headerlink" title="15、通用"></a>15、通用</h1><h3 id="1-web-xml"><a href="#1-web-xml" class="headerlink" title="1.web.xml"></a>1.web.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--DispatcherServlet--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--encodingFilter--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span><br>            org.springframework.web.filter.CharacterEncodingFilter<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--Session过期时间--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h3 id="2-springmvc-servlet-xml"><a href="#2-springmvc-servlet-xml" class="headerlink" title="2.springmvc-servlet.xml"></a>2.springmvc-servlet.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.kuang.controller&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--JSON乱码问题配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span> <span class="hljs-attr">register-defaults</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;objectMapper&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;failOnEmptyBeans&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="3、使用到的注解"><a href="#3、使用到的注解" class="headerlink" title="3、使用到的注解"></a>3、使用到的注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span>注解类型用于声明Spring类的实例是一个控制器<br><span class="hljs-meta">@RequestMapping(&quot;/HelloController&quot;)</span><br><span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> p1<br> 组合注解  <span class="hljs-meta">@GetMapping</span><br>          <span class="hljs-meta">@PostMapping</span><br>          <span class="hljs-meta">@PutMapping</span><br>          <span class="hljs-meta">@DeleteMapping</span><br>          <span class="hljs-meta">@PatchMapping</span><br><span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String name <br><span class="hljs-meta">@ResponseBody</span>    <br>组合注解   <span class="hljs-meta">@RestController</span><br></code></pre></td></tr></table></figure>

<h3 id="4、使用到的jar包"><a href="#4、使用到的jar包" class="headerlink" title="4、使用到的jar包"></a>4、使用到的jar包</h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>     <span class="hljs-comment">&lt;!-- fastjson --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.60<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="/myBlog/SpringMVC/1905053-20200331213841543-745577399.png" alt="img"></p>
<h1 id="16、SpringMVC的执行流程"><a href="#16、SpringMVC的执行流程" class="headerlink" title="16、SpringMVC的执行流程"></a>16、SpringMVC的执行流程</h1><p><img src="/myBlog/SpringMVC/1370903-20180827201021158-682489195.png" alt="img"></p>
<p><strong>1、一个请求匹配前端控制器 DispatcherServlet 的请求映射路径(在 web.xml中指定), WEB 容器将该请求转交给 DispatcherServlet 处理</strong></p>
<p><strong>2、DispatcherServlet 接收到请求后, 将根据 请求信息 交给 处理器映射器 （HandlerMapping）</strong></p>
<p><strong>3、HandlerMapping 根据用户的url请求 查找匹配该url的 Handler，并返回一个执行链</strong></p>
<p><strong>4、DispatcherServlet 再请求 处理器适配器(HandlerAdapter) 调用相应的 Handler 进行处理并返回 ModelAndView 给 DispatcherServlet</strong></p>
<p><strong>5、DispatcherServlet 将 ModelAndView 请求 ViewReslover（视图解析器）解析，返回具体 View</strong></p>
<p><strong>6、DispatcherServlet 对 View 进行渲染视图（即将模型数据填充至视图中）</strong></p>
<p><strong>7、DispatcherServlet 将页面响应给用户</strong></p>
]]></content>
      <categories>
        <category>framework</category>
      </categories>
  </entry>
  <entry>
    <title>Java数据结构和算法</title>
    <url>/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Java数据结构和算法"><a href="#Java数据结构和算法" class="headerlink" title="Java数据结构和算法"></a>Java数据结构和算法</h1><h1 id="第2章-数据结构和算法概述"><a href="#第2章-数据结构和算法概述" class="headerlink" title="第2章 数据结构和算法概述"></a>第2章 数据结构和算法概述</h1><h2 id="2-1-1数据结构和算法的关系"><a href="#2-1-1数据结构和算法的关系" class="headerlink" title="2.1.1数据结构和算法的关系"></a><strong>2.1.1数据结构和算法的关系</strong></h2><ol>
<li><p>数据data结构(structure)是一<strong>门研究组织数据方式的学科</strong>，有了编程语言也就有了数据结构.学好数据结构可以编写出更加漂亮,更加有效率的代码。</p>
</li>
<li><p>要学习好数据结构就要多多考虑如何将生活中遇到的问题,用程序去实现解决.</p>
</li>
<li><p><strong>程序 = 数据结构 + 算法</strong></p>
</li>
<li><p><strong>数据结构是算法的基础,</strong> 换言之，想要学好算法，需要把数据结构学到位。</p>
</li>
</ol>
<h2 id="2-2看几个实际编程中遇到的问题"><a href="#2-2看几个实际编程中遇到的问题" class="headerlink" title="2.2看几个实际编程中遇到的问题"></a>2.2看几个实际编程中遇到的问题</h2><h3 id="2-2-1问题一-字符串替换问题"><a href="#2-2-1问题一-字符串替换问题" class="headerlink" title="2.2.1问题一-字符串替换问题"></a>2.2.1问题一-字符串替换问题</h3><p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211118100458420.png" alt="image-20211118100458420"></p>
<p>小结：需要使用到单链表数据结构</p>
<h3 id="2-2-2一个五子棋程序"><a href="#2-2-2一个五子棋程序" class="headerlink" title="2.2.2一个五子棋程序"></a>2.2.2一个五子棋程序</h3><p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211118101408875.png" alt="image-20211118101408875"></p>
<p>如何判断游戏的输赢，并可以完成存盘退出和继续上局的功能</p>
<ol>
<li>棋盘  <strong>二维数组=&gt;(稀疏数组)</strong>-&gt; 写入文件 【存档功能】</li>
<li>读取文件-&gt;稀疏数组-&gt;二维数组 -&gt; 棋盘 【接上局】</li>
</ol>
<h3 id="2-2-3约瑟夫-Josephu问题-丢手帕问题"><a href="#2-2-3约瑟夫-Josephu问题-丢手帕问题" class="headerlink" title="2.2.3约瑟夫(Josephu问题(丢手帕问题)"></a>2.2.3约瑟夫(Josephu问题(丢手帕问题)</h3><ol>
<li><p>Josephu 问题为：设编号为1，2，… n的n个人围坐一圈，约定编号为k（1&lt;=k&lt;=n）的人从1开始报数，数到m 的那个人出列，它的下一位又从1开始报数，数到m的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列。</p>
</li>
<li><p><strong>提示：</strong>用一个不带头结点的循环链表来处理Josephu 问题：先构成一个有n个结点的单循环链表（<strong>单向环形链表</strong>），然后由k结点起从1开始计数，计到m时，对应结点从链表中删除，然后再从被删除结点的下一个结点又从1开始计数，直到最后一个结点从链表中删除算法结束。</p>
</li>
<li><p>小结：完成约瑟夫问题，需要使用单向环形链表这个数据结构。</p>
</li>
</ol>
<h3 id="2-2-4其他常见问题"><a href="#2-2-4其他常见问题" class="headerlink" title="2.2.4其他常见问题"></a>2.2.4其他常见问题</h3><p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211118101808981.png" alt="image-20211118101808981"></p>
<ol>
<li>修路问题 =&gt; 最小生成<strong>树</strong>(<strong>加权值</strong>)【<strong>数据结构</strong>】+ 普利姆算法</li>
<li>最短路径问题 =&gt; 图+弗洛伊德算法</li>
<li><strong>汉诺塔</strong> <strong>=&gt;</strong> <strong>分支算法</strong></li>
<li>八皇后问题 =&gt; 回溯法</li>
</ol>
<h3 id="2-3线性结构和非线性结构"><a href="#2-3线性结构和非线性结构" class="headerlink" title="2.3线性结构和非线性结构"></a>2.3线性结构和非线性结构</h3><p>数据结构包括：<strong>线性结构</strong>和<strong>非线性结构</strong>。</p>
<h4 id="2-3-1线性结构"><a href="#2-3-1线性结构" class="headerlink" title="2.3.1线性结构"></a>2.3.1<strong>线性结构</strong></h4><ol>
<li>线性结构作为最常用的数据结构，其特点是<strong>数据元素之间存在一对一</strong>的线性关系</li>
<li>线性结构有两种不同的存储结构，即<strong>顺序存储结构（数组）和链式存储结构（链表）</strong>。顺序存储的线性表称为顺序表，顺序表中的<strong>存储元素是连续</strong>的</li>
<li>链式存储的线性表称为链表，链表中的<strong>存储元素不一定是连续的</strong>，元素节点中存放数据元素以及相邻元素的地址信息</li>
<li>线性结构常见的有：<strong>数组、队列、链表和栈</strong>，后面我们会详细讲解.</li>
</ol>
<h4 id="2-3-2非线性结构"><a href="#2-3-2非线性结构" class="headerlink" title="2.3.2非线性结构"></a>2.3.2<strong>非线性结构</strong></h4><p>非线性结构包括：二维数组，多维数组，广义表，<strong>树结构，图结构</strong></p>
<h1 id="第3章-稀疏数组和队列"><a href="#第3章-稀疏数组和队列" class="headerlink" title="第3章 稀疏数组和队列"></a><strong>第3章 稀疏数组和队列</strong></h1><h2 id="3-1稀疏sparsearray数组"><a href="#3-1稀疏sparsearray数组" class="headerlink" title="3.1稀疏sparsearray数组"></a>3.1稀疏sparsearray数组</h2><h3 id="3-1-1先看一个实际的需求"><a href="#3-1-1先看一个实际的需求" class="headerlink" title="3.1.1先看一个实际的需求"></a>3.1.1先看一个实际的需求</h3><p>编写的五子棋程序中，有<strong>存盘退出</strong>和续上盘的功能。</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211118104504920.png" alt="image-20211118104504920"></p>
<p><strong>分析问题</strong>: </p>
<p>因为该二维数组的很多值是默认值0, 因此记录了<strong>很多没有意义的数据</strong>.-&gt;<strong>稀疏数组</strong>。</p>
<h3 id="3-1-2基本介绍"><a href="#3-1-2基本介绍" class="headerlink" title="3.1.2基本介绍"></a>3.1.2<strong>基本介绍</strong></h3><p>当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。</p>
<p>稀疏数组的处理方法是:</p>
<ol>
<li>记录数组<strong>一共有几行几列，有多少个不同</strong>的值</li>
<li>把具有不同值的元素的行列及值记录在一个小规模的数组中，从而<strong>缩小程序</strong>的规模</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211118104658636.png" alt="image-20211118104658636"></p>
<h3 id="3-1-3应用实例"><a href="#3-1-3应用实例" class="headerlink" title="3.1.3应用实例"></a>3.1.3应用实例</h3><ol>
<li>使用稀疏数组，来保留类似前面的二维数组(棋盘、地图等等)</li>
<li>把稀疏数组存盘，并且可以从新恢复原来的二维数组数</li>
<li>整体思路分析</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211118110050134.png" alt="image-20211118110050134"></p>
<ol start="4">
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.sparsearray;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SparseArray</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建一个原始的二维数组11*11</span><br>        <span class="hljs-keyword">int</span> chessArr1[][] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>];<br><br>        <span class="hljs-comment">// 0表示没有，1表示黑子，2表示蓝色</span><br>        chessArr1[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]=<span class="hljs-number">1</span>;<br>        chessArr1[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>]=<span class="hljs-number">2</span>;<br><br>        <span class="hljs-comment">// 输出原来的二维数组</span><br>        System.out.println(<span class="hljs-string">&quot;原来的二维数组：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] row : chessArr1) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> data : row) &#123;<br>                System.out.printf(<span class="hljs-string">&quot;%d\t&quot;</span>,data);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>        <span class="hljs-comment">// 将二维数组转稀疏数组的思路</span><br>        <span class="hljs-comment">// 1.遍历原来的二维数组得到非零数据的个数</span><br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; chessArr1.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; chessArr1.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (chessArr1[i][j] != <span class="hljs-number">0</span>)&#123;<br>                    sum++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;sum=&quot;</span>+sum);<br><br><br>        <span class="hljs-comment">// 2.创建对应的稀疏数组</span><br>        <span class="hljs-keyword">int</span>[][] sparseArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[sum + <span class="hljs-number">1</span>][<span class="hljs-number">3</span>];<br><br>        <span class="hljs-comment">// 给稀疏数组赋值</span><br>        sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] =<span class="hljs-number">11</span>;<br>        sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] =<span class="hljs-number">11</span>;<br>        sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] =sum;<br><br>        <span class="hljs-comment">// 遍历二维数组，将非0的值存放到sparseArr中</span><br>        <span class="hljs-comment">// count 用于记录是第几个非0数据</span><br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; chessArr1.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; chessArr1.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (chessArr1[i][j] != <span class="hljs-number">0</span>)&#123;<br>                    count++;<br>                    sparseArr[count][<span class="hljs-number">0</span>]=i;<br>                    sparseArr[count][<span class="hljs-number">1</span>]=j;<br>                    sparseArr[count][<span class="hljs-number">2</span>]=chessArr1[i][j];<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 输出稀疏数组的形式</span><br>        System.out.println(<span class="hljs-string">&quot;=======得到的希尔数组为：=====&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; sparseArr.length; i++) &#123;<br>            System.out.printf(<span class="hljs-string">&quot;%d\t%d\t%d\t\n&quot;</span>,sparseArr[i][<span class="hljs-number">0</span>],sparseArr[i][<span class="hljs-number">1</span>],sparseArr[i][<span class="hljs-number">2</span>]);<br>        &#125;<br><br>        System.out.println();<br><br>        <span class="hljs-comment">// 将稀疏数组恢复成原始的二维数组</span><br><br>        <span class="hljs-comment">// 1.先读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数组</span><br>        <span class="hljs-keyword">int</span>[][] chessArr2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]][sparseArr[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]];<br><br>        <span class="hljs-comment">// 2.读取稀疏数组后几行（从第二行开始），并赋值给原始的二维数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; sparseArr.length; i++) &#123;<br>            chessArr2[ sparseArr[i][<span class="hljs-number">0</span>]] [sparseArr[i][<span class="hljs-number">1</span>] ]=sparseArr[i][<span class="hljs-number">2</span>];<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;恢复后的数组&quot;</span>);<br>        <span class="hljs-comment">// 遍历二维数组，得到原始的数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] row : chessArr2) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> data : row) &#123;<br>                System.out.printf(<span class="hljs-string">&quot;%d\t&quot;</span>,data);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-1-4课后练习"><a href="#3-1-4课后练习" class="headerlink" title="3.1.4课后练习"></a>3.1.4<strong>课后练习</strong></h3><p>要求：</p>
<ol>
<li>在前面的基础上，将稀疏数组保存到磁盘上，比如 map.data</li>
<li>恢复原来的数组时，读取map.data 进行恢复</li>
</ol>
<h2 id="3-2队列"><a href="#3-2队列" class="headerlink" title="3.2队列"></a>3.2队列</h2><h3 id="3-2-1队列的一个使用场景"><a href="#3-2-1队列的一个使用场景" class="headerlink" title="3.2.1队列的一个使用场景"></a>3.2.1队列的一个使用场景</h3><p>银行排队的案例：</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211118150027962.png" alt="image-20211118150027962"></p>
<h3 id="3-2-2队列介绍"><a href="#3-2-2队列介绍" class="headerlink" title="3.2.2队列介绍"></a>3.2.2<strong>队列介绍</strong></h3><ol>
<li>队列是一个<strong>有序列表</strong>，可以用<strong>数组</strong>或是<strong>链表</strong>来实现。</li>
<li>遵循<strong>先入先出</strong>的原则。即：先存入队列的数据，要先取出。后存入的要后取出</li>
<li>示意图：(使用数组模拟队列示意图)</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211118150123141.png" alt="image-20211118150123141"></p>
<h3 id="3-2-3数组模拟队列思路"><a href="#3-2-3数组模拟队列思路" class="headerlink" title="3.2.3数组模拟队列思路"></a>3.2.3数组模拟队列思路</h3><ol>
<li>队列本身是有序列表，若使用数组的结构来存储队列的数据，则队列数组的声明如下图, 其中 maxSize 是该队列的最大容量。</li>
<li>因为队列的输出、输入是分别从前后端来处理，因此需要两个<strong>变量front</strong>及 <strong>rear</strong>分别<strong>记录队列前后端</strong>的下标，front 会随着数据输出而改变，而 rear则是随着数据输入而改变，如图所示:</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211118150812030.png" alt="image-20211118150812030"></p>
<p>当我们将数据存入队列时称为”addQueue”，addQueue 的处理需要有两个步骤：<strong>思路分析</strong> </p>
<ol>
<li>将尾指针往后移：rear+1 , 当front == rear 【空】</li>
<li>若尾指针 rear 小于队列的最大下标 maxSize-1，则将数据存入 rear所指的数组元素中，否则无法存入数据。 rear == maxSize - 1[队列满]</li>
</ol>
<p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.queue;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayQueueDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 创建一个队列</span><br>        ArrayQueue queue = <span class="hljs-keyword">new</span> ArrayQueue(<span class="hljs-number">3</span>);<br><br>        <span class="hljs-keyword">char</span> key = <span class="hljs-string">&#x27; &#x27;</span>;     <span class="hljs-comment">// 接收用户输入</span><br>        <span class="hljs-keyword">boolean</span> loop = <span class="hljs-keyword">true</span>;<br><br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br><br>        <span class="hljs-comment">// 输出一个菜单</span><br>        <span class="hljs-keyword">while</span> (loop)&#123;<br>            System.out.println(<span class="hljs-string">&quot;s(show)：显示队列&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;e(exit)：退出队列&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;a(add)：添加数据到队列&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;g(get)：从队列取出数据&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;h(head)：查看队列头的数据&quot;</span>);<br><br>            key = scanner.next().charAt(<span class="hljs-number">0</span>);     <span class="hljs-comment">// 接收一个数据</span><br><br>            <span class="hljs-keyword">switch</span> (key)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<br>                    queue.showQueue();<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;请输入您要添加的数据：&quot;</span>);<br>                    <span class="hljs-keyword">int</span> value = scanner.nextInt();<br>                    queue.addQueue(value);<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;g&#x27;</span>:<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">int</span> res = queue.getQueue();<br>                        System.out.println(<span class="hljs-string">&quot;取出的数据为：&quot;</span>+res);<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        e.printStackTrace();<br>                        System.out.println(e.getMessage());<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;h&#x27;</span>:<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">int</span> res = queue.headQueue();<br>                        System.out.println(<span class="hljs-string">&quot;头队列为：&quot;</span>+res);<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        e.printStackTrace();<br>                        System.out.println(e.getMessage());<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;e&#x27;</span>:<br>                    scanner.close();<br>                    loop = <span class="hljs-keyword">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;程序退出~~&quot;</span>);<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 使用数组模拟队列，编写一个ArrayQueue类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayQueue</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSize;        <span class="hljs-comment">// 表示数组最大容量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> rear;           <span class="hljs-comment">// 头队列</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> front;          <span class="hljs-comment">// 尾队列</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> []arr;          <span class="hljs-comment">// 该数据用于存放数据，模拟队列</span><br><br>    <span class="hljs-comment">// 创建队列的构造器</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arrMaxSize)</span> </span>&#123;<br>        maxSize = arrMaxSize;<br>        arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[maxSize];<br>        front = -<span class="hljs-number">1</span>;             <span class="hljs-comment">// 指向队列头部，分析出front是指向队列的前一个位置</span><br>        rear = -<span class="hljs-number">1</span>;              <span class="hljs-comment">// 指向队列尾部，即就是队列最后一个数据</span><br>    &#125;<br><br>    <span class="hljs-comment">// 判断队列是否已满</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> rear == maxSize - <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断队列是否为空</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> rear == front;<br>    &#125;<br><br>    <span class="hljs-comment">// 添加数据到队列</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (isFull())&#123;<br>            System.out.println(<span class="hljs-string">&quot;队列已满~&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        rear++;<br>        arr[rear]=n;<br>    &#125;<br><br>    <span class="hljs-comment">// 从队列中取出数据，出队列</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getQueue</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;队列为空，没有数据&quot;</span>);<br>        &#125;<br>        front++;<br>        <span class="hljs-keyword">return</span> arr[front];<br>    &#125;<br><br>    <span class="hljs-comment">// 显示所有数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showQueue</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>            System.out.println(<span class="hljs-string">&quot;队列为空，没有数据&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.printf(<span class="hljs-string">&quot;arr[%d]=%d\n&quot;</span>,i,arr[i]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 显示头数据，不是取出。</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">headQueue</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;队列为空，没有数据&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr[front + <span class="hljs-number">1</span>];<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>问题分析并优化</p>
<ol>
<li>目前数组使用一次就不能使用，没有达到复用的效果</li>
<li>将这个数组使用算法，改进成一个<strong>环形的队列</strong> 取模： %</li>
</ol>
<h3 id="3-2-4数组模拟环形队列"><a href="#3-2-4数组模拟环形队列" class="headerlink" title="3.2.4数组模拟环形队列"></a>3.2.4<strong>数组模拟环形队列</strong></h3><p>对前面的数组模拟队列的优化，充分利用数组。因此将数组看做是一个环形的。(通过<strong>取模</strong>的方式来实现即可)</p>
<p>分析说明：</p>
<ol>
<li>尾索引的下一个为头索引时表示队列满，即将<strong>队列容量空出一个作为约定</strong>,这个在做判断队列满的<br> 时候需要注意 (rear + 1) % maxSize == front 满] </li>
<li>rear == front [空]</li>
<li>测试示意图:</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211118195515282.png" alt="image-20211118195515282"></p>
<ol start="4">
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.queue;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircleArrayQueueDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        System.out.println(<span class="hljs-string">&quot;测试数组模拟环形队列的案例~~&quot;</span>);<br>        <br>        <span class="hljs-comment">// 创建一个队列</span><br>        CircleQueue queue = <span class="hljs-keyword">new</span> CircleQueue(<span class="hljs-number">3</span>);<br><br>        <span class="hljs-comment">// 接收用户输入</span><br>        <span class="hljs-keyword">char</span> key = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">boolean</span> loop = <span class="hljs-keyword">true</span>;<br><br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br><br>        <span class="hljs-comment">// 输出一个菜单</span><br>        <span class="hljs-keyword">while</span> (loop)&#123;<br>            System.out.println(<span class="hljs-string">&quot;s(show)：显示队列&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;e(exit)：退出队列&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;a(add)：添加数据到队列&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;g(get)：从队列取出数据&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;h(head)：查看队列头的数据&quot;</span>);<br><br>            key = scanner.next().charAt(<span class="hljs-number">0</span>);     <span class="hljs-comment">// 接收一个数据</span><br><br>            <span class="hljs-keyword">switch</span> (key)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<br>                    queue.showQueue();<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;请输入您要添加的数据：&quot;</span>);<br>                    <span class="hljs-keyword">int</span> value = scanner.nextInt();<br>                    queue.addQueue(value);<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;g&#x27;</span>:<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">int</span> res = queue.getQueue();<br>                        System.out.println(<span class="hljs-string">&quot;取出的数据为：&quot;</span>+res);<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        e.printStackTrace();<br>                        System.out.println(e.getMessage());<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;h&#x27;</span>:<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">int</span> res = queue.headQueue();<br>                        System.out.println(<span class="hljs-string">&quot;头队列为：&quot;</span>+res);<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        e.printStackTrace();<br>                        System.out.println(e.getMessage());<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;e&#x27;</span>:<br>                    scanner.close();<br>                    loop = <span class="hljs-keyword">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;程序退出~~&quot;</span>);<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircleQueue</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSize;        <span class="hljs-comment">// 表示数组最大容量</span><br>    <span class="hljs-comment">//1.front 变量的含义做一个调整： front 就指向队列的第一个元素, 也就是说 arr[front] 就是队列的第一个元素</span><br>    <span class="hljs-comment">//front 的初始值 = 0</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> front;          <span class="hljs-comment">// 尾队列</span><br><br>    <span class="hljs-comment">//2.  rear 变量的含义做一个调整：rear 指向队列的最后一个元素的后一个位置. 因为希望空出一个空间做为约定.</span><br>    <span class="hljs-comment">//rear 的初始值 = 0</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> rear;           <span class="hljs-comment">// 头队列</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> []arr;          <span class="hljs-comment">// 该数据用于存放数据，模拟队列</span><br><br>    <span class="hljs-comment">// 创建队列的构造器</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CircleQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arrMaxSize)</span> </span>&#123;<br>        maxSize = arrMaxSize;<br>        arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[maxSize];<br>    &#125;<br><br>    <span class="hljs-comment">// 判断队列是否已满</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> (rear + <span class="hljs-number">1</span>) % maxSize == front;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断队列是否为空</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> rear == front;<br>    &#125;<br><br>    <span class="hljs-comment">// 添加数据到队列</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (isFull())&#123;<br>            System.out.println(<span class="hljs-string">&quot;队列已满~&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        arr[rear] = n;<br>        rear = (rear + <span class="hljs-number">1</span>) % maxSize;<br>    &#125;<br><br>    <span class="hljs-comment">// 从队列中取出数据，出队列</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getQueue</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;队列为空，没有数据&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 这里需要分析出front是指向队列的第一个元素</span><br>        <span class="hljs-comment">// 1.先把front的值存入一个临时的变量</span><br>        <span class="hljs-comment">// 2.将front后移，考虑取模</span><br>        <span class="hljs-comment">// 3.将临时保存的值返回</span><br>        <span class="hljs-keyword">int</span> value = arr[front];<br>        front = (front + <span class="hljs-number">1</span>) % maxSize;<br>        <span class="hljs-keyword">return</span> value;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 显示所有数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showQueue</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>            System.out.println(<span class="hljs-string">&quot;队列为空，没有数据&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = front; i &lt; front + size(); i++) &#123;<br>            System.out.printf(<span class="hljs-string">&quot;arr[%d]=%d\n&quot;</span>,i % maxSize,arr[i % maxSize]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取有效个数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// rear = 1</span><br>        <span class="hljs-comment">// maxSize = 3</span><br>        <span class="hljs-comment">// front = 0</span><br>        <span class="hljs-keyword">return</span> (rear +maxSize -front) % maxSize;<br>    &#125;<br><br>    <span class="hljs-comment">// 显示头数据，不是取出。</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">headQueue</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;队列为空，没有数据&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr[front];<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<h1 id="第4章-链表"><a href="#第4章-链表" class="headerlink" title="第4章 链表"></a>第4章 链表</h1><h2 id="4-1链表-Linked-List-介绍"><a href="#4-1链表-Linked-List-介绍" class="headerlink" title="4.1链表(Linked List)介绍"></a>4.1链表(Linked List)介绍</h2><p>链表是有序的列表，但是它在内存中是存储如下</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211119170837446.png" alt="image-20211119170837446"></p>
<p>小结:</p>
<ol>
<li>链表是以节点的方式来存储,是<strong>链式存储</strong></li>
<li>每个节点包含 data 域， next 域：指向下一个节点.</li>
<li>如图：发现链表的<strong>各个节点不一定是连续存储</strong>.</li>
<li>链表分<strong>带头节点的链表</strong>和<strong>没有头节点的链表</strong>，根据实际的需求来确定</li>
</ol>
<p>单链表(带头结点) <strong>逻辑结构</strong>示意图如下</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211119170944928.png" alt="image-20211119170944928"></p>
<h2 id="4-2单链表的应用实例"><a href="#4-2单链表的应用实例" class="headerlink" title="4.2单链表的应用实例"></a>4.2单链表的应用实例</h2><p>使用带head头的单向链表实现 –水浒英雄排行榜管理完成对英雄人物的<strong>增删改查</strong>操作， 注: <strong>删除和修改</strong>,查找<br>可以考虑学员独立完成，也可带学员完成</p>
<ol>
<li><p>第一种方法在添加英雄时，直接添加到链表的尾部</p>
<p>思路分析示意图：</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211119171148813.png" alt="image-20211119171148813"></p>
</li>
<li><p>第二种方式在添加英雄时，<strong>根据排名</strong>将英雄插入到指定位置 (如果有这个排名，则添加失败，并给出提示)</p>
<p>思路分析示意图：</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211119171307003.png" alt="image-20211119171307003"></p>
</li>
<li><p>修改节点功能</p>
<p>思路：1.先找到节点，通过遍历，2.temp.name = newHeroNode.name ;temp.nickName = newHeroNode.nickName</p>
</li>
<li><p>删除节点</p>
<p>思路分析示意图：</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211119171544791.png" alt="image-20211119171544791"></p>
</li>
<li><p>代码演示：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.linkedlist;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleLinkedListDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 创建节点</span><br>        HeroNode hero1 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;法外狂徒&quot;</span>);<br>        HeroNode hero2 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;法外狂徒2&quot;</span>);<br>        HeroNode hero3 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;法外狂徒3&quot;</span>);<br>        HeroNode hero4 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;阿六&quot;</span>, <span class="hljs-string">&quot;法外狂徒4&quot;</span>);<br>        HeroNode hero5 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;阿六5&quot;</span>, <span class="hljs-string">&quot;法外狂徒5&quot;</span>);<br><br>        <span class="hljs-comment">// 创建链表</span><br>        SingleLinkedList singleLinkedList = <span class="hljs-keyword">new</span> SingleLinkedList();<br><br><span class="hljs-comment">/*        singleLinkedList.add(hero1);</span><br><span class="hljs-comment">        singleLinkedList.add(hero2);</span><br><span class="hljs-comment">        singleLinkedList.add(hero3);</span><br><span class="hljs-comment">        singleLinkedList.add(hero4);</span><br><span class="hljs-comment">        singleLinkedList.add(hero5);*/</span><br><br>        <span class="hljs-comment">// 第二种方法，通过no排序</span><br>        singleLinkedList.addByOrder(hero1);<br>        singleLinkedList.addByOrder(hero3);<br>        singleLinkedList.addByOrder(hero2);<br>        singleLinkedList.addByOrder(hero4);<br>        singleLinkedList.addByOrder(hero5);<br><br>        System.out.println(<span class="hljs-string">&quot;更新前~~~&quot;</span>);<br>        <span class="hljs-comment">// 输出</span><br>        singleLinkedList.list();<br><br>        HeroNode newHeroNode = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;小李&quot;</span>, <span class="hljs-string">&quot;法外狂徒2~~~&quot;</span>);<br><br>        <span class="hljs-comment">// 更新</span><br>        singleLinkedList.update(newHeroNode);<br><br>        System.out.println(<span class="hljs-string">&quot;更新后~~~&quot;</span>);<br><br>        singleLinkedList.list();<br><br>        singleLinkedList.delete(<span class="hljs-number">1</span>);<br>        singleLinkedList.delete(<span class="hljs-number">2</span>);<br>        singleLinkedList.delete(<span class="hljs-number">3</span>);<br>        singleLinkedList.delete(<span class="hljs-number">4</span>);<br>        singleLinkedList.delete(<span class="hljs-number">5</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;删除后~~&quot;</span>);<br><br>        singleLinkedList.list();<br><br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 定义SingleLinkedList管理我的英雄</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleLinkedList</span></span>&#123;<br><br>    <span class="hljs-comment">// 头结点</span><br>    <span class="hljs-keyword">private</span> HeroNode head = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-comment">// 添加节点到单向链表</span><br>    <span class="hljs-comment">// 1.因为头结点不能动，定义一个临时变量，用来遍历</span><br>    <span class="hljs-comment">// 2.先找到next为null的节点</span><br>    <span class="hljs-comment">// 3.将头节点的next值指向下一个节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(HeroNode heroNode)</span></span>&#123;<br><br>        HeroNode temp = head;<br><br>        <span class="hljs-comment">// 遍历，寻找最后一个next为空的节点</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-comment">// 找到链表最后</span><br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 如果没有找到，继续往后移</span><br>            temp = temp.next;<br>        &#125;<br><br>        <span class="hljs-comment">// temp.next指向heroNode</span><br>       temp.next = heroNode;<br>    &#125;<br><br>    <span class="hljs-comment">// 第二种方式在添加英雄时，根据排名将英雄插入到指定位置</span><br>    <span class="hljs-comment">// (如果有这个排名，则添加失败，并给出提示</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addByOrder</span><span class="hljs-params">(HeroNode heroNode)</span></span>&#123;<br><br>        HeroNode temp = head;<br><br>        <span class="hljs-comment">// 定义flag，默认为false，表示插入的节点不存在</span><br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-comment">// 最后一个，直接返回</span><br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 找到位置了，直接插入</span><br>            <span class="hljs-keyword">if</span> (temp.next.no &gt; heroNode.no)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp.next.no == heroNode.no)&#123;<br>                <span class="hljs-comment">// 说明节点已经存在</span><br>                flag = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 如果当前节点不符合，则将temp往后移</span><br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag)&#123;  <span class="hljs-comment">// 不能添加，节点已经存在</span><br>            System.out.printf(<span class="hljs-string">&quot;插入的节点 %d 已经存在，请重新插入！\n&quot;</span>,heroNode.no);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 将节点插到temp的后面</span><br>            heroNode.next = temp.next;<br>            temp.next = heroNode;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 修改</span><br>    <span class="hljs-comment">// 找到原来的no，根据no修改名字和昵称</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(HeroNode newHeroNode)</span></span>&#123;<br><br>        <span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;链表为空&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        HeroNode temp = head.next;<br><br>        <span class="hljs-comment">// 默认没有找到no</span><br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-comment">// 已经是最后一个节点</span><br>            <span class="hljs-keyword">if</span> (temp == <span class="hljs-keyword">null</span> )&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.no == newHeroNode.no)&#123;<br>                <span class="hljs-comment">// 说明已经找到了</span><br>                flag = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 往后移</span><br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag)&#123;<br>            <span class="hljs-comment">// 如果找到了，修改名字和昵称</span><br>            temp.name = newHeroNode.name;<br>            temp.nickName = newHeroNode.nickName;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.printf(<span class="hljs-string">&quot;没有找到编号为 %d 的数据&quot;</span>,newHeroNode.no);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 删除</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span></span>&#123;<br><br>        HeroNode temp = head;<br><br>        <span class="hljs-comment">// 标志是否找到</span><br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-comment">// 最后一个节点</span><br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.next.no == no)&#123;<br>                <span class="hljs-comment">// 找到了节点</span><br>                flag = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (flag)&#123;<br>            <span class="hljs-comment">// 如果找到了，temp的下一个节点将指向删掉的节点的下一个节点</span><br>            <span class="hljs-comment">// 被删除的节点，将不会有其它引用指向，会被垃圾回收机制回收</span><br>            temp.next= temp.next.next;<br><br>            <span class="hljs-comment">//System.out.println(&quot;删除成功&quot;);</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.printf(<span class="hljs-string">&quot;没有找到编号为 %d 的节点&quot;</span>,no);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 显示链表，遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">list</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 判断是否为空</span><br>        <span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;链表为空&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 通过一个辅助变量，遍历</span><br>        HeroNode temp = head.next;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br><br>            <span class="hljs-comment">// 判断是否到链表最后</span><br>            <span class="hljs-keyword">if</span> (temp == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 输出节点信息</span><br>            System.out.println(temp);<br><br>            <span class="hljs-comment">// temp 后移</span><br>            temp = temp.next;<br>        &#125;<br><br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-comment">// 定于HeroNode，每个HeroNode对象就是一个节点</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeroNode</span></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> no;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> String nickName;<br>    <span class="hljs-keyword">public</span> HeroNode next;       <span class="hljs-comment">// 指向下一个节点</span><br><br>    <span class="hljs-comment">// 有参构造</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HeroNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no, String name, String nickName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.no = no;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.nickName = nickName;<br>    &#125;<br><br>    <span class="hljs-comment">// 重写toString</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroNode&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;no=&quot;</span> + no +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, nickName=&#x27;&quot;</span> + nickName +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="4-3单链表面试题-新浪、百度、腾讯）"><a href="#4-3单链表面试题-新浪、百度、腾讯）" class="headerlink" title="4.3单链表面试题(新浪、百度、腾讯）"></a>4.3单链表面试题(新浪、百度、腾讯）</h2><p>单链表的常见面试题有如下:</p>
<ol>
<li><p>求单链表中有效节点的个数</p>
<p>代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">// 方法：获取到单链表的节点个数（如果是带头节点的链表，需要不统计头节点）</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> head  链表的头结点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>      返回的就是有效节点的个数</span><br><span class="hljs-comment">     */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLength</span><span class="hljs-params">(HeroNode head)</span></span>&#123;<br><br>    <span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> length = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 定义一个辅助的变量，这里我们没有统计头节点</span><br>    HeroNode cur = head.next;<br><br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>)&#123;<br>        length++;<br>        cur = cur.next;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> length;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>查找单链表中的倒数第k个结点 【新浪面试题】</p>
<p>代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 查找单链表中的倒数第K个节点【新浪面试题】</span><br><span class="hljs-comment">// 思路</span><br><span class="hljs-comment">// 1.编写一个方法，接收head节点，同时接收一个index</span><br><span class="hljs-comment">// 2.index表示是倒数的第index个节点</span><br><span class="hljs-comment">// 3.先把链表从头到尾遍历，得到链表的总的长度getLength</span><br><span class="hljs-comment">// 4.得到size后，我们从链表的第一个开始遍历（size-index）个，就可以得到</span><br><span class="hljs-comment">// 5.如果找到了，则返回节点，否则返回null</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HeroNode <span class="hljs-title">findLastIndexNode</span><span class="hljs-params">(HeroNode head,<span class="hljs-keyword">int</span> index)</span></span>&#123;<br>    <span class="hljs-comment">// 判断如果链表为空，返回null</span><br>    <span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// 第一遍历得到链表的长度（节点个数）</span><br>    <span class="hljs-keyword">int</span> size = getLength(head);<br><br>    <span class="hljs-comment">// 第二次遍历 size - index 位置，就是我们倒数的第k个节点</span><br>    <span class="hljs-comment">// 先做一个index的检验</span><br>    <span class="hljs-keyword">if</span> (index &lt;= <span class="hljs-number">0</span> || index &gt; size)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    HeroNode cur = head.next;<br><br>    <span class="hljs-comment">// 定义一个辅助变量，for 循环到倒数的index</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; size - index ; i++ )&#123;<br>        cur = cur.next;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> cur;<br><br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>单链表的反转【腾讯面试题，有点难度】</p>
<p>思路分析：</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211120094842379.png" alt="image-20211120094842379"></p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211120094902571.png" alt="image-20211120094902571"></p>
<p>代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 实现单链表反转</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reverseList</span><span class="hljs-params">(HeroNode head)</span></span>&#123;<br>    <span class="hljs-comment">// 判断链表是否为空,或者只有一个节点，无需反转，直接返回</span><br>    <span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span> || head.next.next ==<span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 定义一个辅助的指针（变量），帮助我们遍历原来的链表</span><br>    HeroNode cur = head.next;<br>    HeroNode next = <span class="hljs-keyword">null</span>;       <span class="hljs-comment">// 当前节点[cur]的下一个节点</span><br>    HeroNode reverseHead = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-comment">// 遍历原来的链表，每遍历一个节点，就将其取出，并放在新的链表reverseHead中 的最前端</span><br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>)&#123;<br>        next = cur.next;                <span class="hljs-comment">// 先暂时保存当前节点的下一个节点，后面会用到</span><br>        cur.next = reverseHead.next;    <span class="hljs-comment">// 将cur的下一个节点指向reverseHead的最前端</span><br>        reverseHead.next = cur;         <span class="hljs-comment">// 将reverseHead和第一节点连接起来</span><br>        cur = next;                     <span class="hljs-comment">// cur 下移一个</span><br>    &#125;<br>    <span class="hljs-comment">// 将head.next指向reverseHead.next，实现单链表反转</span><br>    head.next = reverseHead.next;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>从尾到头打印单链表 【百度，要求方式1：反向遍历 。 方式2：Stack栈】</p>
<p>思路分析：</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211120095007137.png" alt="image-20211120095007137"></p>
<p>代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 逆序打印单链表</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reversePrint</span><span class="hljs-params">(HeroNode head)</span></span>&#123;<br>    <span class="hljs-comment">// 判断是否为空,或者是否只有一个</span><br>    <span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span> || head.next.next == <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    HeroNode cur = head.next;<br><br>    Stack&lt;HeroNode&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br><br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>)&#123;<br>        stack.push(cur);    <span class="hljs-comment">// 入栈</span><br>        cur = cur.next;     <span class="hljs-comment">// 下移</span><br>    &#125;<br><br>    <span class="hljs-comment">// 出栈</span><br>    <span class="hljs-keyword">while</span> (stack.size()&gt;<span class="hljs-number">0</span>)&#123;<br>        System.out.println(stack.pop());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>合并两个有序的单链表，合并之后的链表依然有序【课后练习.】</p>
</li>
</ol>
<h2 id="4-4双向链表应用实例"><a href="#4-4双向链表应用实例" class="headerlink" title="4.4双向链表应用实例"></a>4.4双向链表应用实例</h2><h3 id="4-4-1双向链表的操作分析帝和实现"><a href="#4-4-1双向链表的操作分析帝和实现" class="headerlink" title="4.4.1双向链表的操作分析帝和实现"></a>4.4.1双向链表的操作分析帝和实现</h3><p>使用带head头的<strong>双向链表</strong>实现 –水浒英雄排行榜</p>
<p>管理单向链表的缺点分析: </p>
<ol>
<li>单向链表，<strong>查找的方向只能是一个方向</strong>，而双向链表可以向前或者向后查找。</li>
<li>单向链表不能自我删除，需要靠辅助节点 ，而双向 链表，则可以<strong>自我删除</strong>，所以前面我们单链表删除时节点，总是找到temp,temp是待删除节点的前一个节点(认真体会).</li>
<li>示意图帮助理解删除</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211120155727097.png" alt="image-20211120155727097"></p>
<p>对上图的说明：</p>
<p>分析 双向链表的遍历，添加，修改，删除的操作思路===》代码实现</p>
<ol>
<li><p>遍历 方和 单链表一样，只是可以向前，也可以向后查找</p>
</li>
<li><p>添加 (默认添加到双向链表的最后)</p>
</li>
</ol>
<p>(1) 先找到双向链表的最后这个节点</p>
<p>(2) temp.next = newHeroNode</p>
<p>(3) newHeroNode.pre = temp;</p>
<ol start="3">
<li><p><strong>修改</strong> 思路和 原来的单向链表一样.</p>
</li>
<li><p><strong>删除</strong></p>
</li>
</ol>
<p>(1) 因为是双向链表，因此，我们可以实现自我删除某个节点</p>
<p>(2) 直接找到要删除的这个节点，比如temp</p>
<p>(3) temp.pre.next = temp.next</p>
<p>(4) temp.next.pre = temp.pre;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.linkedlist;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoubleLinkedListDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 创建节点</span><br>        HeroNode2 hero1 = <span class="hljs-keyword">new</span> HeroNode2(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;法外狂徒&quot;</span>);<br>        HeroNode2 hero2 = <span class="hljs-keyword">new</span> HeroNode2(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;法外狂徒2&quot;</span>);<br>        HeroNode2 hero3 = <span class="hljs-keyword">new</span> HeroNode2(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;法外狂徒3&quot;</span>);<br>        HeroNode2 hero4 = <span class="hljs-keyword">new</span> HeroNode2(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;阿六&quot;</span>, <span class="hljs-string">&quot;法外狂徒4&quot;</span>);<br>        HeroNode2 hero5 = <span class="hljs-keyword">new</span> HeroNode2(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;阿六5&quot;</span>, <span class="hljs-string">&quot;法外狂徒5&quot;</span>);<br>        HeroNode2 hero7 = <span class="hljs-keyword">new</span> HeroNode2(<span class="hljs-number">7</span>, <span class="hljs-string">&quot;阿7&quot;</span>, <span class="hljs-string">&quot;法外狂徒5&quot;</span>);<br><br>        DoubleLinkedList doubleLinkedList = <span class="hljs-keyword">new</span> DoubleLinkedList();<br><br>        <span class="hljs-comment">// 按照顺序插入</span><br>        doubleLinkedList.addByOrder(hero7);<br>        doubleLinkedList.addByOrder(hero5);<br>        doubleLinkedList.addByOrder(hero1);<br>        doubleLinkedList.addByOrder(hero3);<br>        doubleLinkedList.addByOrder(hero4);<br>        doubleLinkedList.addByOrder(hero2);<br><br>        System.out.println(<span class="hljs-string">&quot;按照编号顺序插入&quot;</span>);<br>        doubleLinkedList.list();<br><br>      <span class="hljs-comment">/*  doubleLinkedList.add(hero1);</span><br><span class="hljs-comment">        doubleLinkedList.add(hero2);</span><br><span class="hljs-comment">        doubleLinkedList.add(hero3);</span><br><span class="hljs-comment">        doubleLinkedList.add(hero4);</span><br><span class="hljs-comment">        doubleLinkedList.add(hero5);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        System.out.println(&quot;双向链表的便遍历&quot;);</span><br><span class="hljs-comment">        doubleLinkedList.list();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        HeroNode2 newHeroNode = new HeroNode2(2, &quot;111111&quot;, &quot;法外狂徒2&quot;);</span><br><span class="hljs-comment">        doubleLinkedList.update(newHeroNode);</span><br><span class="hljs-comment">        System.out.println(&quot;修改过后的链表&quot;);</span><br><span class="hljs-comment">        doubleLinkedList.list();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        doubleLinkedList.delete(2);</span><br><span class="hljs-comment">        System.out.println(&quot;删除过后的链表&quot;);</span><br><span class="hljs-comment">        doubleLinkedList.list();</span><br><span class="hljs-comment">*/</span><br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 创建一个双链表</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoubleLinkedList</span></span>&#123;<br><br><br>    <span class="hljs-comment">// 初始化头结点，头结点不要动，不存放具体的数据</span><br>    <span class="hljs-keyword">private</span> HeroNode2 head = <span class="hljs-keyword">new</span> HeroNode2(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-comment">// 返回头结点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode2 <span class="hljs-title">getHead</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>    <span class="hljs-comment">// 按照编号顺序添加</span><br>    <span class="hljs-comment">// (如果有这个排名，则添加失败，并给出提示</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addByOrder</span><span class="hljs-params">(HeroNode2 heroNode)</span></span>&#123;<br><br>        HeroNode2 temp = head;<br><br>        <span class="hljs-comment">// 定义flag，默认为false，表示插入的节点不存在</span><br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-comment">// 最后一个，直接返回</span><br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 找到位置了，直接插入</span><br>            <span class="hljs-keyword">if</span> (temp.next.no &gt; heroNode.no)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp.next.no == heroNode.no)&#123;<br>                <span class="hljs-comment">// 说明节点已经存在</span><br>                flag = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 如果当前节点不符合，则将temp往后移</span><br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag)&#123;  <span class="hljs-comment">// 不能添加，节点已经存在</span><br>            System.out.printf(<span class="hljs-string">&quot;插入的节点 %d 已经存在，请重新插入！\n&quot;</span>,heroNode.no);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 将节点插到temp的后面</span><br>            <span class="hljs-comment">// heroNode.next = temp.next;</span><br>            <span class="hljs-comment">// temp.next = heroNode;</span><br>            <span class="hljs-keyword">if</span> (temp.next != <span class="hljs-keyword">null</span>)&#123;<br>                heroNode.next = temp.next;<br>                temp.next.pre = heroNode;<br>                temp.next = heroNode;<br>                heroNode.pre = temp;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                temp.next = heroNode;<br>                heroNode.pre = temp;<br>            &#125;<br>            <br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 遍历双向链表的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">list</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 判断是否为空</span><br>        <span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;链表为空&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 通过一个辅助变量，遍历</span><br>        HeroNode2 temp = head.next;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br><br>            <span class="hljs-comment">// 判断是否到链表最后</span><br>            <span class="hljs-keyword">if</span> (temp == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 输出节点信息</span><br>            System.out.println(temp);<br><br>            <span class="hljs-comment">// temp 后移</span><br>            temp = temp.next;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 添加一个 节点到链表最后</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(HeroNode2 heroNode)</span></span>&#123;<br><br>        HeroNode2 temp = head;<br><br>        <span class="hljs-comment">// 遍历，寻找最后一个next为空的节点</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-comment">// 找到链表最后</span><br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 如果没有找到，继续往后移</span><br>            temp = temp.next;<br>        &#125;<br><br>        <span class="hljs-comment">// 当退出while循环是，temp指向了链表的最后</span><br>        <span class="hljs-comment">// 形成了一个双向链表</span><br>        temp.next = heroNode;<br>        heroNode.pre = temp;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 修改一个节点的内容，可以看到双向链表的节点内容修改和单链表一样</span><br>    <span class="hljs-comment">// 找到原来的no，根据no修改名字和昵称</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(HeroNode2 newHeroNode)</span></span>&#123;<br><br>        <span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;链表为空&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        HeroNode2 temp = head.next;<br><br>        <span class="hljs-comment">// 默认没有找到no</span><br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-comment">// 已经是最后一个节点</span><br>            <span class="hljs-keyword">if</span> (temp == <span class="hljs-keyword">null</span> )&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.no == newHeroNode.no)&#123;<br>                <span class="hljs-comment">// 说明已经找到了</span><br>                flag = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 往后移</span><br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag)&#123;<br>            <span class="hljs-comment">// 如果找到了，修改名字和昵称</span><br>            temp.name = newHeroNode.name;<br>            temp.nickName = newHeroNode.nickName;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.printf(<span class="hljs-string">&quot;没有找到编号为 %d 的数据&quot;</span>,newHeroNode.no);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 从双向链表中删除一个节点</span><br>    <span class="hljs-comment">// 1 对于双向链表，我们可以直接找到要删除的这个节点</span><br>    <span class="hljs-comment">// 2 找到后，自我删除</span><br>    <span class="hljs-comment">// 删除</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span></span>&#123;<br><br>        <span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;链表为空，无法删除&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        HeroNode2 temp = head.next;<br><br>        <span class="hljs-comment">// 标志是否找到</span><br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-comment">// 指向链表的最后</span><br>            <span class="hljs-keyword">if</span> (temp == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.no == no)&#123;<br>                <span class="hljs-comment">// 找到了节点</span><br>                flag = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (flag)&#123;<br>            <span class="hljs-comment">// 如果找到了，temp的下一个节点将指向删掉的节点的下一个节点</span><br>            <span class="hljs-comment">// 被删除的节点，将不会有其它引用指向，会被垃圾回收机制回收</span><br>            <span class="hljs-comment">// temp.next= temp.next.next; [单链表]</span><br>            <span class="hljs-comment">//System.out.println(&quot;删除成功&quot;);</span><br><br>            temp.pre.next = temp.next;<br><br>            <span class="hljs-comment">// 有问题，如果是最后一个，出现null.pre空指针，所以先判断是否是最后一个</span><br>            <span class="hljs-keyword">if</span> (temp.next != <span class="hljs-keyword">null</span>)&#123;<br>                temp.next.pre = temp.pre;<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.printf(<span class="hljs-string">&quot;没有找到编号为 %d 的节点&quot;</span>,no);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 定于HeroNode，每个HeroNode对象就是一个节点</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeroNode2</span></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> no;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> String nickName;<br>    <span class="hljs-keyword">public</span> HeroNode2 next;       <span class="hljs-comment">// 指向下一个节点</span><br>    <span class="hljs-keyword">public</span> HeroNode2 pre;        <span class="hljs-comment">// 指向前一个节点</span><br><br>    <span class="hljs-comment">// 有参构造</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HeroNode2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no, String name, String nickName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.no = no;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.nickName = nickName;<br>    &#125;<br><br>    <span class="hljs-comment">// 重写toString</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroNode&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;no=&quot;</span> + no +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, nickName=&#x27;&quot;</span> + nickName +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>

<h3 id="4-4-2课堂作业和思路提示"><a href="#4-4-2课堂作业和思路提示" class="headerlink" title="4.4.2课堂作业和思路提示:"></a>4.4.2<strong>课堂作业和思路提示</strong>:</h3><p> 双向链表的第二种添加方式,按照编号顺序 [示意图]按照单链表的顺序添加，稍作修改即可(已经加在4.4.1的代码中63-107行)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 按照编号顺序添加</span><br><span class="hljs-comment">// (如果有这个排名，则添加失败，并给出提示</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addByOrder</span><span class="hljs-params">(HeroNode2 heroNode)</span></span>&#123;<br><br>    HeroNode2 temp = head;<br><br>    <span class="hljs-comment">// 定义flag，默认为false，表示插入的节点不存在</span><br>    <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>        <span class="hljs-comment">// 最后一个，直接返回</span><br>        <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// 找到位置了，直接插入</span><br>        <span class="hljs-keyword">if</span> (temp.next.no &gt; heroNode.no)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp.next.no == heroNode.no)&#123;<br>            <span class="hljs-comment">// 说明节点已经存在</span><br>            flag = <span class="hljs-keyword">true</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 如果当前节点不符合，则将temp往后移</span><br>        temp = temp.next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (flag)&#123;  <span class="hljs-comment">// 不能添加，节点已经存在</span><br>        System.out.printf(<span class="hljs-string">&quot;插入的节点 %d 已经存在，请重新插入！\n&quot;</span>,heroNode.no);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 将节点插到temp的后面</span><br>        <span class="hljs-comment">// heroNode.next = temp.next;</span><br>        <span class="hljs-comment">// temp.next = heroNode;</span><br>        <span class="hljs-keyword">if</span> (temp.next != <span class="hljs-keyword">null</span>)&#123;<br>            heroNode.next = temp.next;<br>            temp.next.pre = heroNode;<br>            temp.next = heroNode;<br>            heroNode.pre = temp;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            temp.next = heroNode;<br>            heroNode.pre = temp;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="4-5单向环形链表应用场景"><a href="#4-5单向环形链表应用场景" class="headerlink" title="4.5单向环形链表应用场景"></a>4.5单向环形链表应用场景</h2><p>Josephu(约瑟夫、约瑟夫环) 问题</p>
<p>Josephu 问题为：设编号为1，2，… n的n个人围坐一圈，约定编号为k（1&lt;=k&lt;=n）的人从1开始报数，数到m 的那个人出列，它的下一位又从1开始报数，数到m的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列。</p>
<p>提示：用一个不带头结点的循环链表来处理Josephu 问题：先构成一个有n个结点的单循环链表，然后由k结点起从1开始计数，计到m时，对应结点从链表中删除，然后再从被删除结点的下一个结点又从1开始计数，直到最后一个结点从链表中删除算法结束。</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211120163522352.png" alt="image-20211120163522352"></p>
<h2 id="4-6-单向环形链表介绍"><a href="#4-6-单向环形链表介绍" class="headerlink" title="4.6 单向环形链表介绍"></a>4.6 单向环形链表介绍</h2><p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211120163548522.png" alt="image-20211120163548522"></p>
<h2 id="4-7-Josephu问题"><a href="#4-7-Josephu问题" class="headerlink" title="4.7 Josephu问题"></a>4.7 Josephu问题</h2><p>约瑟夫问题的示意图 </p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211120163756115.png" alt="image-20211120163756115"></p>
<p><strong>Josephu问题</strong></p>
<p>Josephu 问题为：设编号为1，2，… n的n个人围坐一圈，约定编号为k（1&lt;=k&lt;=n）的人从1开始报数，数到m 的那个人出列，它的下一位又从1开始报数，数到m的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列。</p>
<p><strong>提示</strong></p>
<p>用一个不带头结点的循环链表来处理Josephu 问题：先构成一个有n个结点的单循环链表，然后由k结点起从1开始计数，计到m时，对应结点从链表中删除，然后再从被删除结点的下一个结点又从1开始计数，直到最后一个结点从链表中删除算法结束。</p>
<p><strong>约瑟夫问题-创建环形链表的思路图解</strong></p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211120202037626.png" alt="image-20211120202037626"></p>
<p><strong>约瑟夫问题-小孩出圈的思路分析图</strong></p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211120202123633.png" alt="image-20211120202123633"></p>
<h2 id="4-8-Josephu问题的代码实现"><a href="#4-8-Josephu问题的代码实现" class="headerlink" title="4.8 Josephu问题的代码实现"></a>4.8 Josephu问题的代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.linkedlist;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Josephu</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        CircleSingleLinkedList circleSingleLinkedList = <span class="hljs-keyword">new</span> CircleSingleLinkedList();<br>        circleSingleLinkedList.addBoy(<span class="hljs-number">5</span>);<br><br>        circleSingleLinkedList.showBoy();<br><br>        circleSingleLinkedList.countBoy(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);<br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CircleSingleLinkedList</span></span>&#123;<br><br>    <span class="hljs-comment">// 先创建第一个节点，当前没有编号</span><br>    <span class="hljs-keyword">private</span> Boy first = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-comment">// 添加小孩节点，构建成一个环形的链表</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addBoy</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nums)</span></span>&#123;<br><br>        <span class="hljs-comment">// 校验输入的数据是否正确</span><br>        <span class="hljs-keyword">if</span> (nums &lt; <span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;输入个数不正确&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 辅助指针</span><br>        Boy curBoy = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">// 使用for来创建我们的环形链表</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= nums; i++) &#123;<br><br>            <span class="hljs-comment">// 根据编号创建小孩节点</span><br>            Boy boy = <span class="hljs-keyword">new</span> Boy(i);<br>            <span class="hljs-comment">// 如果是第一个小孩</span><br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>)&#123;<br>                first = boy;<br>                first.setNext(first);   <span class="hljs-comment">// 构成环</span><br>                curBoy = first;         <span class="hljs-comment">// 指向第一个小孩</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                curBoy.setNext(boy);<br>                boy.setNext(first);<br>                curBoy = boy;<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 遍历当前的环形单链表</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showBoy</span><span class="hljs-params">()</span></span>&#123;<br><br>        <span class="hljs-comment">// 判断链表是否为空</span><br>        <span class="hljs-keyword">if</span> (first == <span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;没有任何小孩&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 因为first不能动，我们仍然使用一个辅助指针完成遍历</span><br>        Boy curBoy = first;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br><br>            System.out.printf(<span class="hljs-string">&quot;小孩的编号 %d \n&quot;</span>,curBoy.getNo());<br>            <span class="hljs-comment">// 遍历完毕</span><br>            <span class="hljs-keyword">if</span> (curBoy.getNext() == first)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// curBoy后移</span><br>            curBoy = curBoy.getNext();<br><br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 根据用户的输入，计算出小孩出圈的顺序</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> startNo   表示从第几个孩子开始数数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> countNum  表示数几下</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> nums      表示最初有多少个孩子</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">countBoy</span><span class="hljs-params">(<span class="hljs-keyword">int</span> startNo ,<span class="hljs-keyword">int</span> countNum ,<span class="hljs-keyword">int</span> nums)</span></span>&#123;<br>        <span class="hljs-comment">// 先对数据校验</span><br>        <span class="hljs-keyword">if</span> (first == <span class="hljs-keyword">null</span> || startNo &lt;<span class="hljs-number">1</span> || countNum &gt; nums)&#123;<br>            System.out.println(<span class="hljs-string">&quot;参数有误，请重新输入&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 创建一个辅助节点，帮忙完成小孩出圈</span><br>        Boy helper = first;<br>        <span class="hljs-comment">// 遍历，让helper指向链表的最后</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-comment">// 说明helper已经指向最后小孩节点</span><br>            <span class="hljs-keyword">if</span> (helper.getNext() == first)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 往后移</span><br>            helper = helper.getNext();<br>        &#125;<br><br>        <span class="hljs-comment">// 报数前，先移动到指定的个数作为开始</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; startNo - <span class="hljs-number">1</span>; j++) &#123;<br>            first = first.getNext();<br>            helper = helper.getNext();<br>        &#125;<br><br>        <span class="hljs-comment">// 报数时，遍历链表，从指定开始的数，根据要移动的次数（countNum -1）开始遍历，数数</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-comment">// 说明圈中只有一个小孩</span><br>            <span class="hljs-keyword">if</span> (helper == first)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 开始数数,让first 和 helper 同时移动到countNum -1</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; countNum - <span class="hljs-number">1</span>; i++) &#123;<br>                first = first.getNext();<br>                helper = helper.getNext();<br>            &#125;<br>            <span class="hljs-comment">// 这是first指向的节点就是要出圈的节点</span><br>            System.out.printf(<span class="hljs-string">&quot;小孩 %d 已经出圈 \n&quot;</span>,first.getNo());<br>            first = first.getNext();    <span class="hljs-comment">// 后移</span><br>            helper.setNext(first);      <span class="hljs-comment">// 指向first</span><br><br>        &#125;<br><br>        System.out.printf(<span class="hljs-string">&quot;最后留在圈中的小孩编号 %d \n&quot;</span>,first.getNo());<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 创建一个Boy类，表示一个节点</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Boy</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> no ;        <span class="hljs-comment">// 编号</span><br>    <span class="hljs-keyword">private</span> Boy next;       <span class="hljs-comment">// 指向下一个节点，默认为null</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Boy</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.no = no;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getNo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> no;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.no = no;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boy <span class="hljs-title">getNext</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> next;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNext</span><span class="hljs-params">(Boy next)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.next = next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="第5章-栈"><a href="#第5章-栈" class="headerlink" title="第5章 栈"></a>第5章 栈</h1><h2 id="5-1-栈的一个实际需求"><a href="#5-1-栈的一个实际需求" class="headerlink" title="5.1 栈的一个实际需求"></a>5.1 栈的一个实际需求</h2><p>请输入一个表达式</p>
<p>计算式:[<strong>7*2*2-5+1-5+3-3</strong>] <strong>点击计算<strong><strong>【</strong></strong>如下图****】</strong></p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211120211638901.png" alt="image-20211120211638901"></p>
<p>请问: 计算机底层是如何运算得到结果的？ 注意不是简单的把算式列出运算,因为我们看这个算式 7 * 2 * 2 - 5, 但是计算机怎么理解这个算式的(对计算机而言，它接收到的就是一个字符串)，我们讨论的是这个问题**。-&gt; **栈</p>
<h2 id="5-2-栈的介绍"><a href="#5-2-栈的介绍" class="headerlink" title="5.2 栈的介绍"></a>5.2 栈的介绍</h2><ol>
<li><p>栈的英文为(stack)</p>
</li>
<li><p>栈是一个<strong>先入后出</strong>(FILO-First In Last Out)的有序列表。</p>
</li>
<li><p>栈(stack)是限制线性表中元素的插入和删除<strong>只能在线性表的同一端</strong>进行的一种特殊线性表。允许插入和删除的一端，为变化的一端，称为<strong>栈顶</strong>(Top)，另一端为固定的一端，称为<strong>栈底</strong>(Bottom)。</p>
</li>
<li><p>根据栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除</p>
</li>
<li><p>出栈(pop)和入栈(push)的概念(如图所示)</p>
</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211120211803381.png" alt="image-20211120211803381"></p>
<h2 id="5-3-栈的应用场景"><a href="#5-3-栈的应用场景" class="headerlink" title="5.3 栈的应用场景"></a>5.3 栈的应用场景</h2><ol>
<li>子程序的调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。  </li>
<li>处理递归调用：和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。</li>
<li>表达式的转换[中缀表达式转后缀表达式]与求值(实际解决)。</li>
<li>二叉树的遍历。</li>
<li>图形的深度优先(depth一first)搜索法。</li>
</ol>
<h2 id="5-4栈的快速入门"><a href="#5-4栈的快速入门" class="headerlink" title="5.4栈的快速入门"></a>5.4栈的快速入门</h2><ol>
<li><p>用<strong>数组模拟栈</strong>的使用，由于栈是一种有序列表，当然可以使用数组的结构来储存栈的数据内容，下面我们就用数组模拟栈的<strong>出栈</strong>，<strong>入栈</strong>等操作。</p>
</li>
<li><p>实现思路分析,并画出示意图</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211120221232413.png" alt="image-20211120221232413"></p>
<p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.stack;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayStackDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        ArrayStack stack = <span class="hljs-keyword">new</span> ArrayStack(<span class="hljs-number">4</span>);<br>        String key = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-comment">// 控制程序是否退出</span><br>        <span class="hljs-keyword">boolean</span> loop = <span class="hljs-keyword">true</span>;<br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br><br>        <span class="hljs-keyword">while</span> (loop)&#123;<br>            System.out.println(<span class="hljs-string">&quot;show：表示展示栈的所有的数据&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;exit：表示退出程序&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;push：表示添加数据到栈（入栈）&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;pop：表示出栈&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;请输入您的选择：&quot;</span>);<br>            key = scanner.next();<br><br>            <span class="hljs-keyword">switch</span> (key)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;show&quot;</span>:<br>                    stack.list();<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;push&quot;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;请输入您要添加的数据&quot;</span>);<br>                    <span class="hljs-keyword">int</span> value = scanner.nextInt();<br>                    stack.push(value);<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;pop&quot;</span>:<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">int</span> res = stack.pop();<br>                        System.out.printf(<span class="hljs-string">&quot;您要出栈的数据是 %d \n&quot;</span>,res);<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        e.printStackTrace();<br>                        System.out.println(e.getMessage());<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;exit&quot;</span>:<br>                    scanner.close();<br>                    loop = <span class="hljs-keyword">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;程序已退出~~&quot;</span>);<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 定义一个ArrayStack 表示栈</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayStack</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSize;    <span class="hljs-comment">// 栈的大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] stack;    <span class="hljs-comment">// 数组，数组模拟栈，数据就放在该数组</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> top = -<span class="hljs-number">1</span>;   <span class="hljs-comment">// 栈顶，初始化为-1</span><br><br>    <span class="hljs-comment">// 构造器</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayStack</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> maxSize)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.maxSize = maxSize;<br>        stack = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[maxSize];<br>    &#125;<br><br>    <span class="hljs-comment">// 栈满</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> top == maxSize -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 栈空</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> top == -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 入栈</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (isFull())&#123;<br>            System.out.println(<span class="hljs-string">&quot;栈已经满啦&quot;</span>);<br>        &#125;<br><br>        top++;<br>        stack[top]=value;<br>    &#125;<br><br>    <span class="hljs-comment">// 出栈，将栈顶的数据返回</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>            <span class="hljs-comment">// 抛出异常</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;栈为空，出栈失败&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">int</span> value = stack[top];<br>        top--;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-comment">// 显示栈的情况[遍历栈]，遍历时，需要从栈顶开始显示数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">list</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>            System.out.println(<span class="hljs-string">&quot;栈为空，显示栈失败&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 需要从栈顶开始显示数据</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = top; i&gt;=<span class="hljs-number">0</span> ; i--)&#123;<br>            System.out.printf(<span class="hljs-string">&quot;stack[%d] = %d \n&quot;</span>,i,stack[i]);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p><strong>课堂练习</strong>，将老师写的程序改成使用<strong>链表来模拟栈</strong>.[单链表]</p>
<p>思路分析：</p>
<ol>
<li>先定义一个节点类Node<ul>
<li>int no：节点编号</li>
<li>Node next：下一个节点</li>
</ul>
</li>
<li>再定义一个单链表模拟数组<ul>
<li>maxSize:存储节点的最大个数（既是模拟栈的大小）</li>
<li>isEmpty：判断栈是否为空</li>
<li>isFull：判断栈是否已满</li>
<li>add:模拟出栈（push）</li>
<li>pop：模拟出栈</li>
<li>list：查看栈的情况（使用了单链表的逆序输出：方式一：数组，方式二：栈）</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.stack.practice;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestStackByLinkedList</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        SingleLinkedList singleLinkedList = <span class="hljs-keyword">new</span> SingleLinkedList();<br><br>        singleLinkedList.setMaxSize(<span class="hljs-number">4</span>);     <span class="hljs-comment">// 设置最大节点数，模拟栈的最大数</span><br>        String key = <span class="hljs-string">&quot;&quot;</span>;                    <span class="hljs-comment">// 用户输入的字符串</span><br>        <span class="hljs-keyword">boolean</span> loop = <span class="hljs-keyword">true</span>;                <span class="hljs-comment">// 控制循环</span><br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br><br>        <span class="hljs-keyword">while</span> (loop)&#123;<br>            System.out.println(<span class="hljs-string">&quot;add：添加节点，模拟入栈&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;exit：退出&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;pop：弹出节点，模拟出栈&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;list：遍历链表，模拟展示所以数据&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;请输入您要选择的选项：&quot;</span>);<br>            key = scanner.next();<br>            <span class="hljs-keyword">switch</span> (key)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;add&quot;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;请输入您要添加的数据(数字)：&quot;</span>);<br>                    <span class="hljs-keyword">int</span> value = scanner.nextInt();<br>                    Node node = <span class="hljs-keyword">new</span> Node(value);<br>                    singleLinkedList.add(node);<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;pop&quot;</span>:<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        singleLinkedList.pop();<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                        e.printStackTrace();<br>                        System.out.println(e.getMessage());<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;list&quot;</span>:<br>                    singleLinkedList.list();<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;exit&quot;</span>:<br>                    scanner.close();<br>                    loop = <span class="hljs-keyword">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br><br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;程序已退出~~&quot;</span>);<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 定义单链表模拟栈</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleLinkedList</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSize;    <span class="hljs-comment">// 表示链表最大存储的节点</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMaxSize</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxSize)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.maxSize = maxSize;<br>    &#125;<br><br>    <span class="hljs-comment">// 创建一个头head</span><br>    Node head = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// 为空</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> head.next == <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断是否已达到最大数量</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span></span>&#123;<br><br>        Node temp = head;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;      <span class="hljs-comment">// 定义一个count，,记录节点个数，用到判断是否已满</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-comment">// 说明已经找到了</span><br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 下移</span><br>            count++;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-comment">// 将count和maxSize比较</span><br>        <span class="hljs-keyword">if</span> (maxSize != count)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-comment">//System.out.println(&quot;链表模拟栈已满~~&quot;);</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 添加节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Node node)</span></span>&#123;<br>        <span class="hljs-comment">// 判断是否已满</span><br>        <span class="hljs-keyword">if</span> (isFull())&#123;<br>            System.out.println(<span class="hljs-string">&quot;栈已经满啦~~~&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 定义一个辅助变量</span><br>        Node temp = head;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-comment">// 说明找到了最后一个</span><br>            <span class="hljs-keyword">if</span> (temp.next ==<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 后移</span><br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-comment">// 将添加的节点加到链表中</span><br>        temp.next = node;<br>    &#125;<br><br>    <span class="hljs-comment">// 模拟出栈，将链表最后的一个元素弹出去，模拟栈的先进后出</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pop</span> <span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 判断是否为空</span><br>        <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;模拟栈为空~~&quot;</span>);<br>        &#125;<br><br>        Node temp = head;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-comment">// 说明已经 找到最后一个的前一个</span><br>            <span class="hljs-keyword">if</span> (temp.next.next == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 下移</span><br>            temp = temp.next;<br>        &#125;<br>        System.out.printf(<span class="hljs-string">&quot;出栈的节点是 %d \n&quot;</span>,temp.next.no);<br>        temp.next = <span class="hljs-keyword">null</span>;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 展示所以的【遍历】，模拟栈的先进后出，即逆序输出链表</span><br>    <span class="hljs-comment">// 方法一：用数组</span><br>    <span class="hljs-comment">// 方法二：用栈</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">list</span><span class="hljs-params">()</span></span>&#123;<br><br>        <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>            System.out.println(<span class="hljs-string">&quot;模拟栈为空哦~~&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        Node temp = head;<br><br>        <span class="hljs-comment">// 方法一：利用数组</span><br>        ArrayList&lt;Node&gt; arrayList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            arrayList.add(temp.next);<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-comment">// 遍历数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = arrayList.size() -<span class="hljs-number">1</span> ; i&gt;=<span class="hljs-number">0</span> ; i--)&#123;<br>            System.out.println(<span class="hljs-string">&quot;栈的情况为（利用栈）：&quot;</span>+arrayList.get(i));<br>        &#125;<br><br>        <span class="hljs-comment">// 方法二：利用栈</span><br>       <span class="hljs-comment">/* Stack&lt;Node&gt; stack = new Stack&lt;&gt;();</span><br><span class="hljs-comment">        while (true)&#123;</span><br><span class="hljs-comment">            if (temp.next == null)&#123;</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            stack.push(temp.next);</span><br><span class="hljs-comment">            temp = temp.next;</span><br><span class="hljs-comment">            //System.out.println(&quot;栈的情况为：&quot;+temp.no);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        while (stack.size()&gt;0)&#123;</span><br><span class="hljs-comment">            System.out.println(&quot;栈的情况为（利用栈）：&quot;+stack.pop());</span><br><span class="hljs-comment">        &#125;*/</span><br>    &#125;<br><br><br>&#125;<br><br><span class="hljs-comment">// 定义链表节点</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> no;      <span class="hljs-comment">// 编号</span><br>    <span class="hljs-keyword">public</span> Node next;   <span class="hljs-comment">// 下一个节点</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.no = no;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;no=&quot;</span> + no +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<h2 id="5-5-栈实现综合计数器（中缀表达式）"><a href="#5-5-栈实现综合计数器（中缀表达式）" class="headerlink" title="5.5 栈实现综合计数器（中缀表达式）"></a>5.5 栈实现综合计数器（中缀表达式）</h2><p>使用栈来实现综合计算器-</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211121142000076.png" alt="image-20211121142000076"></p>
<p>思路分析：</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211121142045475.png" alt="image-20211121142045475"></p>
<ul>
<li><p>代码实现[先实现一位运算，再扩展到多位运算]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.stack;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Calculator</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        String expression = <span class="hljs-string">&quot;300+20*6-2&quot;</span>;  <span class="hljs-comment">// 如果做多位数的为题？</span><br>        <span class="hljs-comment">// 创建两个栈，数栈，一个符号栈</span><br>        ArrayStack2 numStack = <span class="hljs-keyword">new</span> ArrayStack2(<span class="hljs-number">10</span>);<br>        ArrayStack2 operStack = <span class="hljs-keyword">new</span> ArrayStack2(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">// 定义相关的变量</span><br>        <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 用于扫描</span><br>        <span class="hljs-keyword">int</span> num1 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> num2 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> oper = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">char</span> ch = <span class="hljs-string">&#x27; &#x27;</span>;      <span class="hljs-comment">// 将每次扫描得到的存到ch</span><br>        String keepNum = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-comment">// 用于拼接，多位数</span><br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-comment">// 依次得到expression的每一个字符</span><br>            ch = expression.substring(index,index+<span class="hljs-number">1</span>).charAt(<span class="hljs-number">0</span>);<br>            <span class="hljs-comment">// 判断ch是什么，然后做相应的操作</span><br>            <span class="hljs-keyword">if</span> (operStack.isOper(ch))&#123;      <span class="hljs-comment">// 如果是运算符</span><br>                <span class="hljs-keyword">if</span> (!operStack.isEmpty())&#123;  <span class="hljs-comment">// 判断当前符号是否为空</span><br>                    <span class="hljs-comment">//如果符号栈有操作符，就进行比较,如果当前的操作符的优先级小于或者等于栈中的操作符，</span><br>                    <span class="hljs-comment">// 就需要从数栈中pop出两个数,在从符号栈中pop出一个符号，</span><br>                    <span class="hljs-comment">// 进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈，</span><br>                    <span class="hljs-keyword">if</span> (operStack.priority(ch) &lt;= operStack.priority(operStack.peek()))&#123;<br>                        num1 = numStack.pop();<br>                        num2 = numStack.pop();<br>                        oper = operStack.pop();<br>                        res = numStack.cal(num1,num2,oper);<br>                        <span class="hljs-comment">// 将运算结果入数栈</span><br>                        numStack.push(res);<br>                        operStack.push(ch);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-comment">// 如果当前的操作符的优先级大于栈中的操作符， 就直接入符号栈.</span><br>                        operStack.push(ch);<br>                    &#125;<br><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 如果发现当前的符号栈为 空，就直接入栈</span><br>                    operStack.push(ch);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 如果是数字，直接入数栈</span><br>                <span class="hljs-comment">// numStack.push(ch -48);  // ?&quot;1+3&quot; char 型的ASCLL码，1 --&gt; 48</span><br>                <span class="hljs-comment">// 分析思路</span><br>                <span class="hljs-comment">// 1.当处理多位数时，不能发现是一个数入栈，因为他可能是多位数</span><br>                <span class="hljs-comment">// 2.在处理数，需要向expression的表达式index后再看一位，如果是数就进行扫描，如果是符号就直接入栈</span><br>                <span class="hljs-comment">// 3.因此需要定义一个字符串，用于拼接</span><br><br>                keepNum += ch;  <span class="hljs-comment">// 拼接字符串，处理多位数</span><br><br>                <span class="hljs-comment">// 如果ch是最后一个，直接入栈</span><br>                <span class="hljs-keyword">if</span> (index == expression.length() -<span class="hljs-number">1</span>)&#123;<br>                    numStack.push(Integer.parseInt(keepNum));<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 入栈前判断表达式下一个是否为符号，如果是符号，直接入栈，不是符号，拼接字符串</span><br>                    <span class="hljs-comment">// 注意：是看后一位，不是index++</span><br>                    <span class="hljs-keyword">if</span> (operStack.isOper(expression.substring(index + <span class="hljs-number">1</span>, index + <span class="hljs-number">2</span>).charAt(<span class="hljs-number">0</span>))) &#123;<br>                        numStack.push(Integer.parseInt(keepNum));<br>                        <span class="hljs-comment">// 重要！！！！清空keepNum</span><br>                        keepNum = <span class="hljs-string">&quot;&quot;</span>;<br>                    &#125;<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-comment">// 下移判断下一个字符</span><br>            index++;<br>            <span class="hljs-keyword">if</span> (index &gt;= expression.length())&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 当表达式扫描完毕，就顺序的从 数栈和符号栈中pop出相应的数和符号，并运行.</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-comment">// 如果运算符是空，数栈只有一个，说明是最后一个</span><br>            <span class="hljs-keyword">if</span> (operStack.isEmpty())&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            num1 = numStack.pop();<br>            num2 = numStack.pop();<br>            oper = operStack.pop();<br>            res = numStack.cal(num1,num2,oper);<br>            numStack.push(res);<br><br><br>        &#125;<br>        <span class="hljs-keyword">int</span> res2 = numStack.pop();<br>        System.out.printf(<span class="hljs-string">&quot;表达式 %s = %d&quot;</span>,expression,res2);<br>    &#125;<br><br>&#125;<br><br><br><br><span class="hljs-comment">// 定义一个ArrayStack 表示栈</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayStack2</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSize;    <span class="hljs-comment">// 栈的大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] stack;    <span class="hljs-comment">// 数组，数组模拟栈，数据就放在该数组</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> top = -<span class="hljs-number">1</span>;   <span class="hljs-comment">// 栈顶，初始化为-1</span><br><br>    <span class="hljs-comment">// 构造器</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayStack2</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> maxSize)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.maxSize = maxSize;<br>        stack = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[maxSize];<br>    &#125;<br><br>    <span class="hljs-comment">// 增加一个方法，返回当前栈顶的值，但不是真正的pop</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">peek</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> stack[top];<br>    &#125;<br><br>    <span class="hljs-comment">// 栈满</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> top == maxSize -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 栈空</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> top == -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 入栈</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (isFull())&#123;<br>            System.out.println(<span class="hljs-string">&quot;栈已经满啦&quot;</span>);<br>        &#125;<br><br>        top++;<br>        stack[top]=value;<br>    &#125;<br><br>    <span class="hljs-comment">// 出栈，将栈顶的数据返回</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>            <span class="hljs-comment">// 抛出异常</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;栈为空，出栈失败&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">int</span> value = stack[top];<br>        top--;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-comment">// 显示栈的情况[遍历栈]，遍历时，需要从栈顶开始显示数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">list</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>            System.out.println(<span class="hljs-string">&quot;栈为空，显示栈失败&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 需要从栈顶开始显示数据</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = top; i&gt;=<span class="hljs-number">0</span> ; i--)&#123;<br>            System.out.printf(<span class="hljs-string">&quot;stack[%d] = %d \n&quot;</span>,i,stack[i]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回运算符的优先级别</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">priority</span><span class="hljs-params">(<span class="hljs-keyword">int</span> oper)</span></span>&#123;<br><br>        <span class="hljs-keyword">if</span> (oper == <span class="hljs-string">&#x27;*&#x27;</span> || oper == <span class="hljs-string">&#x27;/&#x27;</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (oper == <span class="hljs-string">&#x27;+&#x27;</span> || oper == <span class="hljs-string">&#x27;-&#x27;</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;  <span class="hljs-comment">// 假设只有+,-,*, /</span><br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">// 判断是否是运算符</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isOper</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> val == <span class="hljs-string">&#x27;+&#x27;</span> || val == <span class="hljs-string">&#x27;-&#x27;</span> || val == <span class="hljs-string">&#x27;*&#x27;</span> || val == <span class="hljs-string">&#x27;/&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 运算</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1,<span class="hljs-keyword">int</span> num2,<span class="hljs-keyword">int</span> oper)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;    <span class="hljs-comment">// 用于保存计算结果</span><br>        <span class="hljs-keyword">switch</span> (oper)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>                res = num1 + num2;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>                res = num2 - num1;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>                res = num1 * num2;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>                res = num2 / num1;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<p>课后练习：给表达式加入小括号</p>
</li>
</ul>
<h2 id="5-6-逆波兰计算器"><a href="#5-6-逆波兰计算器" class="headerlink" title="5.6 逆波兰计算器"></a>5.6 逆波兰计算器</h2><p>前缀：从右向左扫描</p>
<p>中缀：平常的运算</p>
<p>后缀：从左向右扫描，下面的元素减去上面的元素</p>
<p>我们完成一个逆波兰计算器，要求完成如下任务</p>
<ol>
<li><p>输入一个逆波兰表达(后缀表达式)，使用栈(Stack),计算其结果</p>
</li>
<li><p>支持小括号和多位数整数，因为这里我们主要讲的是数据结构，因此计算器进行简化，只支持对整数的计算。</p>
</li>
<li><p>思路分析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">例如: (<span class="hljs-number">3</span>+<span class="hljs-number">4</span>)×<span class="hljs-number">5</span>-<span class="hljs-number">6</span> 对应的后缀表达式就是 <span class="hljs-number">3</span> <span class="hljs-number">4</span> + <span class="hljs-number">5</span> × <span class="hljs-number">6</span> - ,针对后缀表达式求值步骤如下:<br><span class="hljs-number">1.</span> 从左至右扫描，将<span class="hljs-number">3</span>和<span class="hljs-number">4</span>压入堆栈；<br><span class="hljs-number">2.</span> 遇到+运算符，因此弹出<span class="hljs-number">4</span>和<span class="hljs-number">3</span>（<span class="hljs-number">4</span>为栈顶元素，<span class="hljs-number">3</span>为次顶元素），计算出<span class="hljs-number">3</span>+<span class="hljs-number">4</span>的值，得<span class="hljs-number">7</span>，再将<span class="hljs-number">7</span>入栈；<br><span class="hljs-number">3.</span> 将<span class="hljs-number">5</span>入栈；<br><span class="hljs-number">4.</span> 接下来是×运算符，因此弹出<span class="hljs-number">5</span>和<span class="hljs-number">7</span>，计算出<span class="hljs-number">7</span>×<span class="hljs-number">5</span>=<span class="hljs-number">35</span>，将<span class="hljs-number">35</span>入栈；<br><span class="hljs-number">5.</span> 将<span class="hljs-number">6</span>入栈；<br><span class="hljs-number">6.</span> 最后是-运算符，计算出<span class="hljs-number">35</span>-<span class="hljs-number">6</span>的值，即<span class="hljs-number">29</span>，由此得出最终结果<br></code></pre></td></tr></table></figure></li>
<li><p>代码完成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.stack;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PolandNotation</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 定义一个后缀表达式</span><br>		<span class="hljs-comment">// 为了方便，逆波兰表达式 的数字和符号使用空格隔开</span><br>        <span class="hljs-comment">// String suffixExpression = &quot;3 4 + 5 * 6 -&quot;;  // 29</span><br>        String suffixExpression = <span class="hljs-string">&quot;4 5 * 8 - 60 + 8 2 / +&quot;</span>;  <span class="hljs-comment">// 76</span><br><br>        <span class="hljs-comment">// 思路：</span><br>        <span class="hljs-comment">// 1.先将3 4 + 5 * 6 - =&gt; 放到ArrayList中</span><br>        <span class="hljs-comment">// 2.将ArrayList传递给一个方法，遍历 ArrayList 配合栈 完成计算</span><br>        List&lt;String&gt; list = getListString(suffixExpression);<br>        System.out.println(<span class="hljs-string">&quot;list=&quot;</span>+list);<br>        <span class="hljs-keyword">int</span> res = calculate(list);<br>        System.out.println(<span class="hljs-string">&quot;计算结果是=&quot;</span>+res);<br><br>    &#125;<br><br>    <span class="hljs-comment">// 将一个逆波兰表达式，依次将数据和运算符放入到ArrayList中，分割字符串</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title">getListString</span><span class="hljs-params">(String suffixExpression)</span></span>&#123;<br>        <span class="hljs-comment">// 以空格分割</span><br>        String[] split = suffixExpression.split(<span class="hljs-string">&quot; &quot;</span>);<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String ele : split) &#123;<br>            list.add(ele);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 例如: (3+4)×5-6 对应的后缀表达式就是 **3 4 + 5 × 6 - ,** **针对后缀表达式求值步骤如下**:</span><br><span class="hljs-comment">     * 从左至右扫描，将3和4压入堆栈；</span><br><span class="hljs-comment">     * 遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；</span><br><span class="hljs-comment">     * 将5入栈；</span><br><span class="hljs-comment">     * 接下来是×运算符，因此弹出5和7，计算出7×5=35，将35入栈；</span><br><span class="hljs-comment">     * 将6入栈；</span><br><span class="hljs-comment">     * 最后是-运算符，计算出35-6的值，即29，由此得出最终结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculate</span><span class="hljs-params">(List&lt;String&gt; ls)</span></span>&#123;<br>        Stack&lt;String&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String item : ls) &#123;<br>            <span class="hljs-comment">// 正则表达式</span><br>            <span class="hljs-keyword">if</span> (item.matches(<span class="hljs-string">&quot;\\d+&quot;</span>))&#123; <span class="hljs-comment">// 匹配多位数</span><br>                stack.push(item);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">int</span> num2 = Integer.parseInt(stack.pop());<br>                <span class="hljs-keyword">int</span> num1 = Integer.parseInt(stack.pop());<br>                <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;+&quot;</span>))&#123;<br>                    res = num1 + num2;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;-&quot;</span>))&#123;<br>                    res = num1 - num2;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;*&quot;</span>))&#123;<br>                    res = num1 * num2;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;/&quot;</span>))&#123;<br>                    res = num1 / num2;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;运算符有误&quot;</span>);<br>                &#125;<br>                <span class="hljs-comment">// 把res入栈</span><br>                stack.push(<span class="hljs-string">&quot;&quot;</span>+res);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 最后留在stack栈中的数据是运算结果</span><br>        <span class="hljs-keyword">return</span> Integer.parseInt(stack.pop());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<h2 id="5-7-中缀表达式转为后缀表达式"><a href="#5-7-中缀表达式转为后缀表达式" class="headerlink" title="5.7 中缀表达式转为后缀表达式"></a>5.7 中缀表达式转为后缀表达式</h2><p>大家看到，后缀表达式适合计算式进行运算，但是人却不太容易写出来，尤其是表达式很长的情况下，因此在开发中，我们需要将 <strong>中缀表达式</strong>转成<strong>后缀表达式</strong>。</p>
<h3 id="5-7-1具体步骤如下"><a href="#5-7-1具体步骤如下" class="headerlink" title="5.7.1具体步骤如下:"></a>5.7.1<strong>具体步骤如下</strong>:</h3><ol>
<li><p>初始化两个栈：运算符栈s1和储存中间结果的栈s2；</p>
</li>
<li><p>从左至右扫描中缀表达式；</p>
</li>
<li><p>遇到<strong>操作数</strong>时，将其压s2；</p>
</li>
<li><p>遇到<strong>运算符</strong>时，比较其与s1栈顶运算符的优先级：</p>
<p>(1)如果s1为空，或栈顶运算符为左括号“(”，则直接将此运算符入栈；</p>
<p>(2)否则，若优先级比栈顶运算符的高，也将运算符压入s1；</p>
<p>(3)否则，将s1栈顶的运算符弹出并压入到s2中，再次转到(4-1)与s1中新的栈顶运算符相比较； </p>
</li>
<li><p>遇到<strong>括号</strong>时：<br> (1) 如果是左括号“(”，则直接压入s1<br> (2) 如果是右括号“)”，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃</p>
</li>
<li><p>重复步骤2至5，直到表达式的最右边</p>
</li>
<li><p>将s1中剩余的运算符依次弹出并压入s2</p>
</li>
<li><p>依次弹出s2中的元素并输出，<strong>结果的逆序即为中缀表达式对应的后缀表达式</strong></p>
</li>
</ol>
<h3 id="5-7-2举例说明"><a href="#5-7-2举例说明" class="headerlink" title="5.7.2举例说明"></a>5.7.2<strong>举例说明</strong></h3><p>将中缀表达式1+((2+3)×4)-5转换为后缀表达式的过程如下</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211122012047826.png" alt="image-20211122012047826"></p>
<p><strong>因此结果为</strong> <strong>“1 2 3 + 4 × + 5 –”</strong></p>
<h3 id="5-7-3-代码实现中缀表达式转为后缀表达式"><a href="#5-7-3-代码实现中缀表达式转为后缀表达式" class="headerlink" title="5.7.3 代码实现中缀表达式转为后缀表达式"></a>5.7.3 <strong>代码实现中缀表达式转为后缀表达式</strong></h3><p>思路分析示意图：</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211122012234772.png" alt="image-20211122012234772"></p>
<p><strong>代码实现</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.stack;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PolandNotation</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 先定义一个中缀表达式</span><br>        String expression = <span class="hljs-string">&quot;1+((2+3)*4)-5&quot;</span>;<br>        List&lt;String&gt; infixExpressionList = toInfixExpressionList(expression);<br>        System.out.println(<span class="hljs-string">&quot;中缀表达式的List=&quot;</span>+infixExpressionList);<br><br>        List&lt;String&gt; suffixExpressionList = paresSuffixExpressionList(infixExpressionList);<br>        System.out.println(<span class="hljs-string">&quot;后缀表达式的List=&quot;</span>+suffixExpressionList);<br><br>        System.out.printf(<span class="hljs-string">&quot;后缀表达式运算结果：%d&quot;</span>,calculate(suffixExpressionList));<br><br>        <span class="hljs-comment">// 定义一个后缀表达式</span><br>        <span class="hljs-comment">// 为了方便，逆波兰表达式 的数字和符号使用空格隔开</span><br>        <span class="hljs-comment">// String suffixExpression = &quot;3 4 + 5 * 6 -&quot;;  // 29</span><br>        <span class="hljs-comment">/*String suffixExpression = &quot;4 5 * 8 - 60 + 8 2 / +&quot;;  // 76</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 思路：</span><br><span class="hljs-comment">        // 1.先将3 4 + 5 * 6 - =&gt; 放到ArrayList中</span><br><span class="hljs-comment">        // 2.将ArrayList传递给一个方法，遍历 ArrayList 配合栈 完成计算</span><br><span class="hljs-comment">        List&lt;String&gt; list = getListString(suffixExpression);</span><br><span class="hljs-comment">        System.out.println(&quot;list=&quot;+list);</span><br><span class="hljs-comment">        int res = calculate(list);</span><br><span class="hljs-comment">        System.out.println(&quot;计算结果是=&quot;+res);*/</span><br><br>    &#125;<br><br>    <span class="hljs-comment">// 将传进来的中缀表达式的list，转成后缀表达式的list</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title">paresSuffixExpressionList</span><span class="hljs-params">(List&lt;String&gt; ls)</span></span>&#123;<br>        Stack&lt;String&gt; s1 = <span class="hljs-keyword">new</span> Stack&lt;&gt;();           <span class="hljs-comment">// 符号</span><br>        List&lt;String&gt; s2 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();   <span class="hljs-comment">// 因为这个s2，只存数据，不取出(pop)数字，所以用list比用栈方便</span><br><br>        <span class="hljs-keyword">for</span> (String item : ls) &#123;<br>            <span class="hljs-comment">// 如果是一个数</span><br>            <span class="hljs-keyword">if</span> (item.matches(<span class="hljs-string">&quot;\\d+&quot;</span>))&#123;<br>                s2.add(item);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;(&quot;</span>))&#123;<br>                s1.push(item);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;)&quot;</span>))&#123;<br>                <span class="hljs-comment">// 在s1中遍历。直到找到了左括号，将左括号之前的都弹出</span><br>                <span class="hljs-keyword">while</span> (!s1.peek().equals(<span class="hljs-string">&quot;(&quot;</span>))&#123;<br>                    s2.add(s1.pop());<br>                &#125;<br>                <span class="hljs-comment">// 弹出左括号</span><br>                s1.pop();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 如果是运算符,当item的运算符优先级小于等于s1栈顶的运算符优先级时，将s1中的弹出，加到s2中</span><br>                <span class="hljs-keyword">while</span> (s1.size() != <span class="hljs-number">0</span> &amp;&amp; Operation.getValue(item) &lt;= Operation.getValue(s1.peek()) )&#123;<br>                    s2.add(s1.pop());<br>                &#125;<br>                s1.push(item);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 将剩余的运算符都加到s2中</span><br>        <span class="hljs-keyword">while</span> (s1.size() != <span class="hljs-number">0</span>)&#123;<br>            s2.add(s1.pop());<br>        &#125;<br>        <span class="hljs-comment">// 注意是因为存放到list中，按顺序出来就是对应的后缀表达式</span><br>        <span class="hljs-keyword">return</span> s2;<br>    &#125;<br><br>    <span class="hljs-comment">// 方法：将中缀表达式转成对应的list</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title">toInfixExpressionList</span><span class="hljs-params">(String s)</span></span>&#123;<br>        <span class="hljs-comment">// 定义一个List，存放中缀表达式对应的内容</span><br>        ArrayList&lt;String&gt; ls = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;      <span class="hljs-comment">// 定义一个指针</span><br>        String str;     <span class="hljs-comment">// 用于拼接多位数</span><br>        <span class="hljs-keyword">char</span> c;         <span class="hljs-comment">// 每遍历到一个字符，就放在c中</span><br><br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-comment">// 如果是非数字，需要加入到ls中</span><br>            <span class="hljs-keyword">if</span> ( (c = s.charAt(i)) &lt;<span class="hljs-number">48</span> || (c = s.charAt(i)) &gt;<span class="hljs-number">57</span> )&#123;<br>                ls.add(<span class="hljs-string">&quot;&quot;</span>+c);<br>                i++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">// 如果是一个数，需要考虑多位数</span><br>                str = <span class="hljs-string">&quot;&quot;</span>;   <span class="hljs-comment">// 先将str置空0-9:[48]-[57]</span><br>                <span class="hljs-keyword">while</span> ( i &lt; s.length() &amp;&amp; (c = s.charAt(i)) &gt;=<span class="hljs-number">48</span> &amp;&amp; (c = s.charAt(i)) &lt;= <span class="hljs-number">57</span>)&#123;<br>                    str += c;<br>                    i++;        <span class="hljs-comment">// i后移</span><br>                &#125;<br>                ls.add(str);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">while</span> (i&lt;s.length());<br><br>        <span class="hljs-keyword">return</span> ls;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 将一个逆波兰表达式（后缀表达式），依次将数据和运算符放入到ArrayList中，分割字符串</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title">getListString</span><span class="hljs-params">(String suffixExpression)</span></span>&#123;<br>        <span class="hljs-comment">// 以空格分割</span><br>        String[] split = suffixExpression.split(<span class="hljs-string">&quot; &quot;</span>);<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String ele : split) &#123;<br>            list.add(ele);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 完成对逆波兰表达式的运算</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从左至右扫描，将3和4压入堆栈；</span><br><span class="hljs-comment">     * 遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；</span><br><span class="hljs-comment">     * 将5入栈；</span><br><span class="hljs-comment">     * 接下来是×运算符，因此弹出5和7，计算出7×5=35，将35入栈；</span><br><span class="hljs-comment">     * 将6入栈；</span><br><span class="hljs-comment">     * 最后是-运算符，计算出35-6的值，即29，由此得出最终结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculate</span><span class="hljs-params">(List&lt;String&gt; ls)</span></span>&#123;<br>        Stack&lt;String&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String item : ls) &#123;<br>            <span class="hljs-comment">// 这里使用正则表达式来取出数</span><br>            <span class="hljs-keyword">if</span> (item.matches(<span class="hljs-string">&quot;\\d+&quot;</span>))&#123; <span class="hljs-comment">// 匹配的是多位数</span><br>                stack.push(item);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">int</span> num2 = Integer.parseInt(stack.pop());<br>                <span class="hljs-keyword">int</span> num1 = Integer.parseInt(stack.pop());<br>                <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;+&quot;</span>))&#123;<br>                    res = num1 + num2;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;-&quot;</span>))&#123;<br>                    res = num1 - num2;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;*&quot;</span>))&#123;<br>                    res = num1 * num2;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;/&quot;</span>))&#123;<br>                    res = num1 / num2;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;运算符有误&quot;</span>);<br>                &#125;<br>                <span class="hljs-comment">// 把res入栈</span><br>                stack.push(<span class="hljs-string">&quot;&quot;</span>+res);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 最后留在stack栈中的数据是运算结果</span><br>        <span class="hljs-keyword">return</span> Integer.parseInt(stack.pop());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 编写一个类，返回运算符优先级</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Operation</span></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> ADD = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> SUB = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> MUL = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> DIV = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getValue</span><span class="hljs-params">(String operation)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">switch</span> (operation)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:<br>                result = ADD;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-&quot;</span>:<br>                result = SUB;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:<br>                result = MUL;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:<br>                result = DIV;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;运算符不存在&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="5-8-逆波兰计算器完整版"><a href="#5-8-逆波兰计算器完整版" class="headerlink" title="5.8 逆波兰计算器完整版"></a>5.8 逆波兰计算器完整版</h3><h4 id="5-8-1-完整版的逆波兰计算器，功能包括"><a href="#5-8-1-完整版的逆波兰计算器，功能包括" class="headerlink" title="5.8.1 完整版的逆波兰计算器，功能包括"></a>5.8.1 完整版的逆波兰计算器，功能包括</h4><ol>
<li>支持 + - * / ( ) </li>
<li>多位数，支持小数,</li>
<li>兼容处理, 过滤任何空白字符，包括空格、制表符、换页符</li>
</ol>
<p>逆波兰计算器完整版考虑的因素较多，下面给出完整版代码供同学们学习，其基本思路和前面一样，也是使用到：<strong>中缀表达式转后缀表达式</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">package</span> com.atguigu.stack;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Stack;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReversePolishMultiCalc</span> </span>&#123;<br><br>	 <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 匹配 + - * / ( ) 运算符</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SYMBOL = <span class="hljs-string">&quot;\\+|-|\\*|/|\\(|\\)&quot;</span>;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String LEFT = <span class="hljs-string">&quot;(&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String RIGHT = <span class="hljs-string">&quot;)&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String ADD = <span class="hljs-string">&quot;+&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String MINUS= <span class="hljs-string">&quot;-&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TIMES = <span class="hljs-string">&quot;*&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DIVISION = <span class="hljs-string">&quot;/&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加減 + -</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> LEVEL_01 = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 乘除 * /</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> LEVEL_02 = <span class="hljs-number">2</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 括号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> LEVEL_HIGH = Integer.MAX_VALUE;<br><br><br>    <span class="hljs-keyword">static</span> Stack&lt;String&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    <span class="hljs-keyword">static</span> List&lt;String&gt; data = Collections.synchronizedList(<span class="hljs-keyword">new</span> ArrayList&lt;String&gt;());<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 去除所有空白符</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> s</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">replaceAllBlank</span><span class="hljs-params">(String s )</span></span>&#123;<br>        <span class="hljs-comment">// \\s+ 匹配任何空白字符，包括空格、制表符、换页符等等, 等价于[ \f\n\r\t\v]</span><br>        <span class="hljs-keyword">return</span> s.replaceAll(<span class="hljs-string">&quot;\\s+&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断是不是数字 int double long float</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> s</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isNumber</span><span class="hljs-params">(String s)</span></span>&#123;<br>        Pattern pattern = Pattern.compile(<span class="hljs-string">&quot;^[-\\+]?[.\\d]*$&quot;</span>);<br>        <span class="hljs-keyword">return</span> pattern.matcher(s).matches();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断是不是运算符</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> s</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSymbol</span><span class="hljs-params">(String s)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> s.matches(SYMBOL);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 匹配运算等级</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> s</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calcLevel</span><span class="hljs-params">(String s)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;+&quot;</span>.equals(s) || <span class="hljs-string">&quot;-&quot;</span>.equals(s))&#123;<br>            <span class="hljs-keyword">return</span> LEVEL_01;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;*&quot;</span>.equals(s) || <span class="hljs-string">&quot;/&quot;</span>.equals(s))&#123;<br>            <span class="hljs-keyword">return</span> LEVEL_02;<br>        &#125;<br>        <span class="hljs-keyword">return</span> LEVEL_HIGH;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 匹配</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> s</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title">doMatch</span> <span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        <span class="hljs-keyword">if</span>(s == <span class="hljs-keyword">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(s.trim())) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;data is empty&quot;</span>);<br>        <span class="hljs-keyword">if</span>(!isNumber(s.charAt(<span class="hljs-number">0</span>)+<span class="hljs-string">&quot;&quot;</span>)) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;data illeagle,start not with a number&quot;</span>);<br><br>        s = replaceAllBlank(s);<br><br>        String each;<br>        <span class="hljs-keyword">int</span> start = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>            <span class="hljs-keyword">if</span>(isSymbol(s.charAt(i)+<span class="hljs-string">&quot;&quot;</span>))&#123;<br>                each = s.charAt(i)+<span class="hljs-string">&quot;&quot;</span>;<br>                <span class="hljs-comment">//栈为空，(操作符，或者 操作符优先级大于栈顶优先级 &amp;&amp; 操作符优先级不是( )的优先级 及是 ) 不能直接入栈</span><br>                <span class="hljs-keyword">if</span>(stack.isEmpty() || LEFT.equals(each)<br>                        || ((calcLevel(each) &gt; calcLevel(stack.peek())) &amp;&amp; calcLevel(each) &lt; LEVEL_HIGH))&#123;<br>                    stack.push(each);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( !stack.isEmpty() &amp;&amp; calcLevel(each) &lt;= calcLevel(stack.peek()))&#123;<br>                    <span class="hljs-comment">//栈非空，操作符优先级小于等于栈顶优先级时出栈入列，直到栈为空，或者遇到了(，最后操作符入栈</span><br>                    <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; calcLevel(each) &lt;= calcLevel(stack.peek()) )&#123;<br>                        <span class="hljs-keyword">if</span>(calcLevel(stack.peek()) == LEVEL_HIGH)&#123;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                        data.add(stack.pop());<br>                    &#125;<br>                    stack.push(each);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(RIGHT.equals(each))&#123;<br>                    <span class="hljs-comment">// ) 操作符，依次出栈入列直到空栈或者遇到了第一个)操作符，此时)出栈</span><br>                    <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; LEVEL_HIGH &gt;= calcLevel(stack.peek()))&#123;<br>                        <span class="hljs-keyword">if</span>(LEVEL_HIGH == calcLevel(stack.peek()))&#123;<br>                            stack.pop();<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                        data.add(stack.pop());<br>                    &#125;<br>                &#125;<br>                start = i ;    <span class="hljs-comment">//前一个运算符的位置</span><br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( i == s.length()-<span class="hljs-number">1</span> || isSymbol(s.charAt(i+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;&quot;</span>) )&#123;<br>                each = start == <span class="hljs-number">0</span> ? s.substring(start,i+<span class="hljs-number">1</span>) : s.substring(start+<span class="hljs-number">1</span>,i+<span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span>(isNumber(each)) &#123;<br>                    data.add(each);<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;data not match number&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//如果栈里还有元素，此时元素需要依次出栈入列，可以想象栈里剩下栈顶为/，栈底为+，应该依次出栈入列，可以直接翻转整个stack 添加到队列</span><br>        Collections.reverse(stack);<br>        data.addAll(<span class="hljs-keyword">new</span> ArrayList&lt;&gt;(stack));<br><br>        System.out.println(data);<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算出结果</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> list</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Double <span class="hljs-title">doCalc</span><span class="hljs-params">(List&lt;String&gt; list)</span></span>&#123;<br>        Double d = <span class="hljs-number">0d</span>;<br>        <span class="hljs-keyword">if</span>(list == <span class="hljs-keyword">null</span> || list.isEmpty())&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (list.size() == <span class="hljs-number">1</span>)&#123;<br>            System.out.println(list);<br>            d = Double.valueOf(list.get(<span class="hljs-number">0</span>));<br>            <span class="hljs-keyword">return</span> d;<br>        &#125;<br>        ArrayList&lt;String&gt; list1 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            list1.add(list.get(i));<br>            <span class="hljs-keyword">if</span>(isSymbol(list.get(i)))&#123;<br>                Double d1 = doTheMath(list.get(i - <span class="hljs-number">2</span>), list.get(i - <span class="hljs-number">1</span>), list.get(i));<br>                list1.remove(i);<br>                list1.remove(i-<span class="hljs-number">1</span>);<br>                list1.set(i-<span class="hljs-number">2</span>,d1+<span class="hljs-string">&quot;&quot;</span>);<br>                list1.addAll(list.subList(i+<span class="hljs-number">1</span>,list.size()));<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        doCalc(list1);<br>        <span class="hljs-keyword">return</span> d;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 运算</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> s1</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> s2</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> symbol</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Double <span class="hljs-title">doTheMath</span><span class="hljs-params">(String s1,String s2,String symbol)</span></span>&#123;<br>        Double result ;<br>        <span class="hljs-keyword">switch</span> (symbol)&#123;<br>            <span class="hljs-keyword">case</span> ADD : result = Double.valueOf(s1) + Double.valueOf(s2); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> MINUS : result = Double.valueOf(s1) - Double.valueOf(s2); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> TIMES : result = Double.valueOf(s1) * Double.valueOf(s2); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> DIVISION : result = Double.valueOf(s1) / Double.valueOf(s2); <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span> : result = <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//String math = &quot;9+(3-1)*3+10/2&quot;;</span><br>        String math = <span class="hljs-string">&quot;12.8 + (2 - 3.55)*4+10/5.0&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            doCalc(doMatch(math));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>





<h3 id="复盘写的逆波兰计算器代码"><a href="#复盘写的逆波兰计算器代码" class="headerlink" title="复盘写的逆波兰计算器代码"></a>复盘写的逆波兰计算器代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.stack.practice;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自己完成逆波兰计算器</span><br><span class="hljs-comment"> * 思路：中缀表达式 -&gt; 后缀表达式 -&gt; 计算</span><br><span class="hljs-comment"> * 中缀表达式 -&gt; 后缀表达式：</span><br><span class="hljs-comment"> *      将中缀表达式转为InfixExpressionList，方便遍历</span><br><span class="hljs-comment"> *      创建两个栈，符号栈s1，和数栈s2，遍历中缀表达式</span><br><span class="hljs-comment"> *      当是操作数时，直接入数栈s2</span><br><span class="hljs-comment"> *      如果是左括号时，直接入s1</span><br><span class="hljs-comment"> *      如果是右括号，依次弹出s1栈顶的元素，直到找到左括号</span><br><span class="hljs-comment"> *      如果是运算符，与s1的栈顶运算符比较，如果s1为空，直接入栈；如果当前运算符优先级大于s1栈顶的，直接入栈，</span><br><span class="hljs-comment"> *      如果当前的运算符小于等于s1栈顶的，将s1栈顶的运算符弹出，压进s2中，再判断</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      处理完毕之后，将s1中剩余的运算符依次弹出加到s2中</span><br><span class="hljs-comment"> *      最后输出s2中的数据，他的结果的逆序就是后缀表达式</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      注意：这里需要更改一下，因为s2只做存数据，没有pop数据，所以这里将s2换成list，方便后面的遍历，不用逆序打印</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 计算：</span><br><span class="hljs-comment"> *      定义一个逆波兰计算器</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestPolandNotation</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String infixExpression = <span class="hljs-string">&quot;1+((2+3)*4)-5&quot;</span>;<br>        List&lt;String&gt; infixExpressionList = toInfixExpressionList(infixExpression);<br>        System.out.println(<span class="hljs-string">&quot;中缀表达式的list=&quot;</span>+infixExpressionList);<br><br>        List&lt;String&gt; suffixExpressionList = toSuffixExpressionList(infixExpressionList);<br>        System.out.println(<span class="hljs-string">&quot;中缀转后缀的list=&quot;</span>+suffixExpressionList);<br><br>        <span class="hljs-keyword">int</span> result = calculate(suffixExpressionList);<br>        System.out.println(<span class="hljs-string">&quot;逆波兰的运算结果：&quot;</span>+result); <span class="hljs-comment">// 16</span><br>    &#125;<br><br>    <span class="hljs-comment">// 定义一个逆波兰计算器</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculate</span><span class="hljs-params">(List&lt;String&gt; ls)</span></span>&#123;<br>        Stack&lt;String&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span> (String item : ls) &#123;<br>            <span class="hljs-comment">// 如果是数字，考虑多位数</span><br>            <span class="hljs-keyword">if</span> (item.matches(<span class="hljs-string">&quot;\\d+&quot;</span>))&#123;<br>                stack.push(item);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 如果不是数字,pop出两个数据，</span><br>                <span class="hljs-keyword">int</span> num2 = Integer.parseInt(stack.pop());<br>                <span class="hljs-keyword">int</span> num1 = Integer.parseInt(stack.pop());<br>                <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>                <span class="hljs-comment">// 判断运算符</span><br>                <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;+&quot;</span>))&#123;<br>                    res = num1 + num2;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;-&quot;</span>))&#123;<br>                    <span class="hljs-comment">// 注意：是将后面pop出来的数据减去前一个pop出来的！！！！</span><br>                    res = num1 - num2;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;*&quot;</span>))&#123;<br>                    res = num1 * num2;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;/&quot;</span>))&#123;<br>                    res = num1 / num2;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;运算符有误&quot;</span>);<br>                &#125;<br><br>                <span class="hljs-comment">// 将得到的结果压入栈</span><br>                stack.push(<span class="hljs-string">&quot;&quot;</span>+res);<br><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 最后留在栈的数据就是运算结果</span><br>        <span class="hljs-keyword">return</span> Integer.parseInt(stack.pop());<br><br>    &#125;<br><br>    <span class="hljs-comment">// 将中缀表达式对应的list转为后缀表达式对应的list</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title">toSuffixExpressionList</span><span class="hljs-params">(List&lt;String&gt; ls)</span></span>&#123;<br>        <span class="hljs-comment">// 创建栈</span><br>        Stack&lt;String&gt; s1 = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        <span class="hljs-comment">// 这里不用栈，因为不需要pop数据 用list，方便后面遍历输出</span><br>        ArrayList&lt;String&gt; s2 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span> (String item : ls) &#123;<br>            <span class="hljs-comment">// 如果是操作数</span><br>            <span class="hljs-keyword">if</span> (item.matches(<span class="hljs-string">&quot;\\d+&quot;</span>))&#123;<br>                s2.add(item);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;(&quot;</span>))&#123;<br>                <span class="hljs-comment">// 如果是左括号</span><br>                s1.push(item);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item.equals(<span class="hljs-string">&quot;)&quot;</span>))&#123;<br>                <span class="hljs-comment">// 如果是右括号</span><br>                <span class="hljs-keyword">while</span> (!s1.peek().equals(<span class="hljs-string">&quot;(&quot;</span>))&#123;<br>                    <span class="hljs-comment">// 将s1中的栈顶依次弹出，并添加到s2中</span><br>                    s2.add(s1.pop());<br>                &#125;<br>                <span class="hljs-comment">// 去掉左括号</span><br>                s1.pop();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 如果是运算符,s1为空，直接入栈，s1不为空，当前运算符大于s1栈顶的，直接入栈，</span><br>                <span class="hljs-comment">// 否则将s1栈顶弹出，并添加到s2，最后将当前符号入s1栈</span><br>                <span class="hljs-keyword">while</span> (s1.size() != <span class="hljs-number">0</span> &amp;&amp; Operation.getOperation(item) &lt;= Operation.getOperation(s1.peek()))&#123;<br>                    s2.add(s1.pop());<br>                &#125;<br>                <span class="hljs-comment">// 将s1栈顶弹出，并添加到s2中</span><br>                s1.push(item);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 最后将s1中剩余的运算符依次加到s2中</span><br>        <span class="hljs-keyword">while</span> (s1.size()&gt;<span class="hljs-number">0</span>)&#123;<br>            s2.add(s1.pop());<br>        &#125;<br><br>        <span class="hljs-comment">// 返回s2</span><br>        <span class="hljs-keyword">return</span> s2;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 中缀表达式转为list</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title">toInfixExpressionList</span><span class="hljs-params">(String s)</span></span>&#123;<br>        <span class="hljs-comment">// 创建一个list</span><br>        ArrayList&lt;String&gt; ls = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;      <span class="hljs-comment">// 用于遍历的指针</span><br>        String str;     <span class="hljs-comment">// 拼接多位数</span><br>        <span class="hljs-keyword">char</span> c;         <span class="hljs-comment">// 保存遍历的数据</span><br><br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-comment">// 如果不是数字，直接添加进去</span><br>            <span class="hljs-keyword">if</span> ((c=s.charAt(i))&lt;<span class="hljs-number">48</span> || (c=s.charAt(i))&gt;<span class="hljs-number">57</span> )&#123;<br>                ls.add(<span class="hljs-string">&quot;&quot;</span>+c);<br>                i++;    <span class="hljs-comment">// 往后移</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 如果是数字，需要考虑多位数</span><br>                str = <span class="hljs-string">&quot;&quot;</span>;   <span class="hljs-comment">// 将str置空</span><br>               <span class="hljs-keyword">while</span> (i&lt;s.length() &amp;&amp; (c = s.charAt(i))&gt;=<span class="hljs-number">48</span> &amp;&amp; (c=s.charAt(i))&lt;=<span class="hljs-number">57</span>)&#123;<br>                   str += c;<br>                   <span class="hljs-comment">// 拼接完之后需要往后移</span><br>                   i++;<br>               &#125;<br>               <span class="hljs-comment">// 添加到list中</span><br>               ls.add(str);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">while</span> (i&lt;s.length());<br><br>        <span class="hljs-keyword">return</span> ls;<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 写一个返回运算符优先级的类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Operation</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> ADD = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> SUB = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> MUL = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> DIV = <span class="hljs-number">2</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getOperation</span><span class="hljs-params">(String operation)</span></span>&#123;<br><br>        <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">switch</span> (operation)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:<br>                result = ADD;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-&quot;</span>:<br>                result = SUB;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:<br>                result = MUL;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:<br>                result = DIV;<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;操作符有误&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="第6章-递归"><a href="#第6章-递归" class="headerlink" title="第6章 递归"></a>第6章 递归</h1><h2 id="6-1-递归应用场景"><a href="#6-1-递归应用场景" class="headerlink" title="6.1 递归应用场景"></a>6.1 递归应用场景</h2><p>看个实际应用场景，迷宫问题(回溯)， 递归(Recursion)</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211122115031320.png" alt="image-20211122115031320"></p>
<h2 id="6-2-递归的概念"><a href="#6-2-递归的概念" class="headerlink" title="6.2 递归的概念"></a>6.2 递归的概念</h2><p>简单的说: 递归就是<strong>方法自己调用自己</strong>，每次调用时传入<strong>不同的变量</strong>。递归有助于编程者<strong>解决复杂的问题</strong>，同时可以让代码变得简洁。</p>
<h2 id="6-3-递归调用机制"><a href="#6-3-递归调用机制" class="headerlink" title="6.3 递归调用机制"></a>6.3 递归调用机制</h2><p>我列举两个小案例,来帮助大家理解递归，部分学员已经学习过递归了，这里在给大家回顾一下<strong>递归调用机制</strong></p>
<ol>
<li><p>打印问题</p>
</li>
<li><p>阶乘问题</p>
</li>
<li><p>使用图解方式说明了递归的调用机制</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211122115353251.png" alt="image-20211122115353251"></p>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.Recursion;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RecursionTest</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//test(4);</span><br>        <span class="hljs-keyword">int</span> result = factorial(<span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">&quot;result=&quot;</span>+result);<br>    &#125;<br><br>    <span class="hljs-comment">// 阶乘问题</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">factorial</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> factorial(n - <span class="hljs-number">1</span>) * n;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 打印</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">2</span>) &#123;<br>            test(n - <span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;n=&quot;</span> + n);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<h2 id="6-4-递归能解决什么样的问题"><a href="#6-4-递归能解决什么样的问题" class="headerlink" title="6.4 递归能解决什么样的问题"></a>6.4 递归能解决什么样的问题</h2><p>递归用于解决什么样的问题</p>
<ol>
<li>各种数学问题如: 8皇后问题 , 汉诺塔, 阶乘问题, 迷宫问题, 球和篮子的问题(google编程大赛)</li>
<li>各种算法中也会使用到递归，比如快排，归并排序，二分查找，分治算法等.</li>
<li>将用栈解决的问题–&gt;第归代码比较简洁</li>
</ol>
<h2 id="6-5-递归需要遵守的重要规则"><a href="#6-5-递归需要遵守的重要规则" class="headerlink" title="6.5 递归需要遵守的重要规则"></a>6.5 递归需要遵守的重要规则</h2><p>递归需要遵守的重要规则</p>
<ol>
<li>执行一个方法时，就创建一个新的受保护的独立空间(栈空间)</li>
<li>方法的局部变量是独立的，不会相互影响, 比如n变量</li>
<li>如果方法中使用的是引用类型变量(比如数组)，就会共享该引用类型的数据.</li>
<li>递归<strong>必须向退出递归的条件逼近</strong>，否则就是无限递归,出现StackOverflowError，死龟了:)</li>
<li>当一个方法执行完毕，或者遇到return，就会返回，<strong>遵守谁调用，就将结果返回给谁</strong>，同时当方法执行完毕或者返回时，该方法也就执行完毕。</li>
</ol>
<h2 id="6-6-递归-迷宫问题"><a href="#6-6-递归-迷宫问题" class="headerlink" title="6.6  递归-迷宫问题"></a>6.6  递归-迷宫问题</h2><h3 id="6-6-1-迷宫问题"><a href="#6-6-1-迷宫问题" class="headerlink" title="6.6.1 迷宫问题"></a>6.6.1 迷宫问题</h3><p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211122194805660.png" alt="image-20211122194805660"></p>
<h3 id="6-6-2-代码实现"><a href="#6-6-2-代码实现" class="headerlink" title="6.6.2 代码实现"></a>6.6.2 代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.Recursion;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MiGong</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 先创建一个二维数组 8*7的 ，模拟迷宫</span><br>        <span class="hljs-keyword">int</span>[][] map = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">8</span>][<span class="hljs-number">7</span>];<br><br>        <span class="hljs-comment">// 让第1行和第8行都设置为1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;<br>            map[<span class="hljs-number">0</span>][i]=<span class="hljs-number">1</span>;<br>            map[<span class="hljs-number">7</span>][i]=<span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 让第1列和第7列都设置为1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i++)&#123;<br>            map[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>            map[i][<span class="hljs-number">6</span>] = <span class="hljs-number">1</span>;<br>        &#125;<br><br>        map[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        map[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// map[1][2] = 1;</span><br>        <span class="hljs-comment">// map[2][2] = 1;</span><br><br>        <span class="hljs-comment">// 输出迷宫</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">7</span>; j++) &#123;<br>                System.out.printf(<span class="hljs-string">&quot;%d\t&quot;</span>,map[i][j]);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>        <span class="hljs-comment">// setWay(map,1,1);</span><br>        setWay2(map,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;已经找到路径的迷宫：&quot;</span>);<br>        <span class="hljs-comment">// 输出迷宫</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">7</span>; j++) &#123;<br>                System.out.printf(<span class="hljs-string">&quot;%d\t&quot;</span>,map[i][j]);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">// 1.0表示没有走过，1表示墙，2表示可以走，3表示可以走，但是走不通，回溯</span><br>    <span class="hljs-comment">// 下-&gt;右-&gt;上-&gt;左</span><br>    <span class="hljs-comment">// map[6][5] = 1结束</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> map   地图</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> i     从第几行开始</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> j     从第几列开始</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>      有路就返回true，否则false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">setWay</span><span class="hljs-params">(<span class="hljs-keyword">int</span> map[][],<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j)</span></span>&#123;<br>        <span class="hljs-comment">// 到达终点</span><br>        <span class="hljs-keyword">if</span> (map[<span class="hljs-number">6</span>][<span class="hljs-number">5</span>] == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 如果是0，说明没走过，可以走</span><br>            <span class="hljs-keyword">if</span> (map[i][j] == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-comment">// 先假设他可以走</span><br>                map[i][j] = <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">if</span> (setWay(map, i + <span class="hljs-number">1</span>, j))&#123;         <span class="hljs-comment">// 向下走</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay(map, i, j + <span class="hljs-number">1</span>))&#123;  <span class="hljs-comment">// 向右走</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay(map, i - <span class="hljs-number">1</span>, j))&#123;  <span class="hljs-comment">// 向上走</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay(map, i, j - <span class="hljs-number">1</span>))&#123;  <span class="hljs-comment">// 向左走</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 都走不了，设置为3</span><br>                    map[i][j] = <span class="hljs-number">3</span>;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 如果map[i][j] != 0,则有1,2,3</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br><br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 上，右，下，左</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">setWay2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> map[][],<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j)</span></span>&#123;<br>        <span class="hljs-comment">// 到达终点</span><br>        <span class="hljs-keyword">if</span> (map[<span class="hljs-number">6</span>][<span class="hljs-number">5</span>] == <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 如果是0，说明没走过，可以走</span><br>            <span class="hljs-keyword">if</span> (map[i][j] == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-comment">// 先假设他可以走</span><br>                map[i][j] = <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">if</span> (setWay2(map, i - <span class="hljs-number">1</span>, j))&#123;         <span class="hljs-comment">// 向上走</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay2(map, i, j + <span class="hljs-number">1</span>))&#123;  <span class="hljs-comment">// 向右走</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay2(map, i + <span class="hljs-number">1</span>, j))&#123;  <span class="hljs-comment">// 向下走</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay2(map, i, j - <span class="hljs-number">1</span>))&#123;  <span class="hljs-comment">// 向左走</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 都走不了，设置为3</span><br>                    map[i][j] = <span class="hljs-number">3</span>;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 如果map[i][j] != 0,则有1,2,3</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br><br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>



<h3 id="6-6-3-对迷宫问题的讨论"><a href="#6-6-3-对迷宫问题的讨论" class="headerlink" title="6.6.3 对迷宫问题的讨论"></a>6.6.3 对迷宫问题的讨论</h3><ol>
<li>小球得到的路径，和程序员设置的找路策略有关即：找路的<strong>上下左右</strong>的顺序相关</li>
<li>再得到小球路径时，可以先使用(下右上左)，再改成(上右下左)，看看路径是不是有变化</li>
<li>测试回溯现象</li>
<li><strong>思考</strong>: <strong>如何求出最短路径</strong>?</li>
</ol>
<h2 id="6-7-递归-八皇后问题-回溯算法）"><a href="#6-7-递归-八皇后问题-回溯算法）" class="headerlink" title="6.7 递归-八皇后问题(回溯算法）"></a>6.7 递归-八皇后问题(回溯算法）</h2><h3 id="6-7-1八皇后问题介绍"><a href="#6-7-1八皇后问题介绍" class="headerlink" title="6.7.1八皇后问题介绍"></a>6.7.1<strong>八皇后问题介绍</strong></h3><p>八皇后问题，是一个古老而著名的问题，是<strong>回溯算法的典型案例</strong>。该问题是国际西洋棋棋手马克斯·贝瑟尔于1848年提出：在8×8格的国际象棋上摆放八个皇后，使其不能互相攻击，即：<strong>任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法</strong>。92</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211122200617542.png" alt="image-20211122200617542"></p>
<h3 id="6-7-2-八皇后问题算法思路分析"><a href="#6-7-2-八皇后问题算法思路分析" class="headerlink" title="6.7.2 八皇后问题算法思路分析"></a>6.7.2 <strong>八皇后问题算法思路分析</strong></h3><ol>
<li><p>第一个皇后先放第一行第一列</p>
</li>
<li><p>第二个皇后放在第二行第一列、然后判断是否OK， 如果不OK，继续放在第二列、第三列、依次把所有列都放完，找到一个合适</p>
</li>
<li><p>继续第三个皇后，还是第一列、第二列……直到第8个皇后也能放在一个不冲突的位置，算是找到了一个正确解</p>
</li>
<li><p>当得到一个正确解时，在栈回退到上一个栈时，就会开始回溯，即将第一个皇后，放到第一列的所有正确解，全部得到.</p>
</li>
<li><p>然后回头继续第一个皇后放第二列，后面继续循环执行 1,2,3,4的步骤 【示意图】</p>
</li>
<li><p>示意图</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211122201723176.png" alt="image-20211122201723176"></p>
</li>
</ol>
<p><strong>说明</strong>：理论上应该创建一个二维数组来表示棋盘，但是实际上可以通过算法，用一个一维数组即可解决问题. arr[8] = {0 , 4, 7, 5, 2, 6, 1, 3} //对应arr 下标 表示第几行，即第几个皇后，arr[i] = val , val 表示第i+1个皇后，放在第i+1行的第val+1列</p>
<h3 id="6-7-3-八皇后问题算法代码实现"><a href="#6-7-3-八皇后问题算法代码实现" class="headerlink" title="6.7.3 八皇后问题算法代码实现"></a>6.7.3 八皇后问题算法代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.Recursion;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Queue8</span> </span>&#123;<br><br>    <span class="hljs-comment">// 定义一个max，共有多少个皇后</span><br>    <span class="hljs-keyword">int</span> max = <span class="hljs-number">8</span>;<br>    <span class="hljs-comment">// 定义数组array，保存皇后放置位置的结果，如arr=&#123;0,4,7,5,2,6,1,3&#125;</span><br>    <span class="hljs-keyword">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[max];<br>    <span class="hljs-comment">// 统计有多少个方法</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 统计判断了多少次</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> judgeCount = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        Queue8 queue8 = <span class="hljs-keyword">new</span> Queue8();<br>        queue8.check(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.printf(<span class="hljs-string">&quot;一共有 %d 个方法\n&quot;</span>,count);        <span class="hljs-comment">// 92种</span><br>        System.out.printf(<span class="hljs-string">&quot;一共判断了 %d 次\n&quot;</span>,judgeCount);   <span class="hljs-comment">//15720次</span><br>        System.out.println(<span class="hljs-string">&quot;一共耗时（毫秒）：&quot;</span>+(end-start));<br>    &#125;<br><br>    <span class="hljs-comment">// 放置第n个皇后</span><br>    <span class="hljs-comment">// 注意：check是每一次递归是，进入到check中都有  for (int i = 0; i &lt;max; i++) 因此会有回溯</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-comment">// n=8的时候说明已经是第9个了，已经全部放完了</span><br>        <span class="hljs-keyword">if</span> (n == max)&#123;<br>            printf();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 如果还没到第8个，继续遍历，放置皇后</span><br>        <span class="hljs-comment">// 需要遍历max次，即8行</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;max; i++) &#123;<br>            <span class="hljs-comment">// 先把第一个皇后n，放在该行的第一列</span><br>            array[n] = i;<br>            <span class="hljs-comment">// 判断当前放置的第n个皇后到i列时，是否冲突</span><br>            <span class="hljs-keyword">if</span> (judge(n))&#123;<br>                <span class="hljs-comment">// 如果不冲突，就放置下一个，进行递归</span><br>                check(n + <span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-comment">// 如果冲突了，就会i++, 接着运行array[n] = i;，将该皇后移去下一位置（列）</span><br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 检查放置的第n个皇后是否和前面的 i个冲突</span><br>    <span class="hljs-comment">// 同一斜线，同一列</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> n     放置的第n个皇后</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>      如果不冲突，放回true，否则返回false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        judgeCount++;<br>        <span class="hljs-comment">// 判断第n个皇后之前</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-comment">// array[i] == array[n]：如果同一列</span><br>            <span class="hljs-comment">// Math.abs(n - i) == Math.abs(array[n] - array[i]):在同一斜线上，</span><br>            <span class="hljs-comment">// 行与行相减的绝对值，列与列相减的绝对值，如果两者相等，则同一斜线上</span><br>            <span class="hljs-keyword">if</span> (array[i] == array[n] || Math.abs(n - i) == Math.abs(array[n] - array[i]))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 因为每一行只放一个皇后，放完之后就会n+1，所以在这里不存在同一行</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 遍历数组</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printf</span><span class="hljs-params">()</span></span>&#123;<br>        count++;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>            System.out.print(array[i]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>





<h1 id="第7章-排序算法"><a href="#第7章-排序算法" class="headerlink" title="第7章 排序算法"></a>第7章 排序算法</h1><h2 id="7-1-排序算法的介绍"><a href="#7-1-排序算法的介绍" class="headerlink" title="7.1 排序算法的介绍"></a>7.1 排序算法的介绍</h2><p>排序也称排序算法(Sort Algorithm)，排序是将一组数据，依指定的顺序进行排列的过程。</p>
<h2 id="7-2-排序的分类："><a href="#7-2-排序的分类：" class="headerlink" title="7.2 排序的分类："></a>7.2 <strong>排序的分类：</strong></h2><ol>
<li><p>内部排序:</p>
<p>指将需要处理的所有数据都加载到内部存储器中进行排序。</p>
</li>
<li><p>外部排序法：</p>
<p>数据量过大，无法全部加载到内 存中，需要借助外部存储进行排序。</p>
</li>
<li><p>常见的排序算法分类(见右图):</p>
</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211123111932947.png" alt="image-20211123111932947"></p>
<h2 id="7-3-算法的时间复杂度"><a href="#7-3-算法的时间复杂度" class="headerlink" title="7.3 算法的时间复杂度"></a>7.3 算法的时间复杂度</h2><h3 id="7-3-1-度量一个程序-算法-执行时间的两种方法"><a href="#7-3-1-度量一个程序-算法-执行时间的两种方法" class="headerlink" title="7.3.1 度量一个程序(算法)执行时间的两种方法"></a>7.3.1 度量一个程序(算法)执行时间的两种方法</h3><ol>
<li><p>事后统计的方法</p>
<p>这种方法可行, 但是有两个问题：一是要想对设计的算法的运行性能进行评测，需要实际运行该程序；二是所得时间的统计量依赖于计算机的硬件、软件等环境因素, <strong>这种方式，要在同一台计算机的相同状态下运行，才能比较那个算法速度更快</strong>。</p>
</li>
<li><p>事前估算的方法<br> 通过分析某个算法的<strong>时间复杂度</strong>来判断哪个算法更优.</p>
</li>
</ol>
<h3 id="7-3-2-时间频度"><a href="#7-3-2-时间频度" class="headerlink" title="7.3.2 时间频度"></a>7.3.2 时间频度</h3><ul>
<li><p>基本介绍</p>
<p><strong>时间频度</strong>：一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间就多。<strong>一个算法中的语句执行次数称为语句频度或时间频度</strong>。记为T(n)。[举例说明]</p>
</li>
<li><p>举例说明-基本案例</p>
<p>比如计算1-100所有数字之和, 我们设计两种算法：</p>
</li>
</ul>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211123153104575.png" alt="image-20211123153104575"></p>
<ul>
<li>举例说明-忽略常数项</li>
</ul>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211123153150269.png" alt="image-20211123153150269"></p>
<p>结论: </p>
<ol>
<li>2n+20 和 2n 随着n 变大，执行曲线无限接近, 20可以忽略</li>
<li>3n+10 和 3n 随着n 变大，执行曲线无限接近, 10可以忽略</li>
</ol>
<ul>
<li>举例说明-忽略低次项</li>
</ul>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211123153256460.png" alt="image-20211123153256460"></p>
<p>结论: </p>
<ol>
<li>2n^2+3n+10 和 2n^2 随着n 变大, 执行曲线无限接近, 可以忽略 3n+10</li>
<li>n^2+5n+20 和 n^2 随着n 变大,执行曲线无限接近, 可以忽略 5n+20</li>
</ol>
<ul>
<li>举例说明-忽略系数</li>
</ul>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211123153343925.png" alt="image-20211123153343925"></p>
<p>结论: </p>
<ol>
<li>随着n值变大，5n^2+7n 和 3n^2 + 2n ，执行曲线重合, 说明 这种情况下, 5和3可以忽略。</li>
<li>而n^3+5n 和 6n^3+4n ，执行曲线分离，说明多少次方式关键</li>
</ol>
<h3 id="7-3-3-时间复杂度"><a href="#7-3-3-时间复杂度" class="headerlink" title="7.3.3  时间复杂度"></a>7.3.3  时间复杂度</h3><ol>
<li>一般情况下，算法中的基本操作语句的重复执行次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n)，使得当n趋近于无穷大时，T(n) / f(n) 的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作 T(n)=Ｏ( f(n) )，称Ｏ( f(n) ) 为算法的渐进时间复杂度，简称时间复杂度。</li>
<li>T(n) 不同，但时间复杂度可能相同。 如：T(n)=n²+7n+6 与 T(n)=3n²+2n+2 它们的T(n) 不同，但时间复杂度相同，都为O(n²)。</li>
<li>计算时间复杂度的方法：<ul>
<li>用常数1代替运行时间中的所有加法常数 T(n)=n²+7n+6 =&gt; T(n)=n²+7n+1</li>
<li>修改后的运行次数函数中，只保留最高阶项 T(n)=n²+7n+1 =&gt; T(n) = n²</li>
<li>去除最高阶项的系数 T(n) = n² =&gt; T(n) = n² =&gt; O(n²)</li>
</ul>
</li>
</ol>
<h3 id="7-3-4-常见的时间复杂度"><a href="#7-3-4-常见的时间复杂度" class="headerlink" title="7.3.4 常见的时间复杂度"></a>7.3.4 <strong>常见的时间复杂度</strong></h3><ol>
<li>常数阶O(1)</li>
<li>对数阶O(log2n)</li>
<li>线性阶O(n)</li>
<li>线性对数阶O(nlog2n)</li>
<li>平方阶O(n^2)</li>
<li>立方阶O(n^3)</li>
<li>k次方阶O(n^k)</li>
<li>指数阶O(2^n)</li>
</ol>
<p><strong>常见的时间复杂度对应的图</strong>：</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211123153842058.png" alt="image-20211123153842058"></p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211123153957059.png" alt="image-20211123153957059"></p>
<ol>
<li><p>常数阶O(1)</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211123154048580.png" alt="image-20211123154048580"></p>
</li>
<li><p>对数阶O(log2n)</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211123154142267.png" alt="image-20211123154142267"></p>
</li>
<li><p>线性阶O(n)</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211123154218149.png" alt="image-20211123154218149"></p>
</li>
<li><p>线性对数阶O(nlogN)</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211123154252592.png" alt="image-20211123154252592"></p>
</li>
<li><p>平方阶O(n²)</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211123154400143.png" alt="image-20211123154400143"></p>
</li>
<li><p>立方阶O(n³)<strong>、</strong>K次方阶O(n^k)</p>
<p><strong>说明</strong>：参考上面的O(n²) 去理解就好了，O(n³)相当于三层n循环，其它的类似</p>
</li>
</ol>
<h3 id="7-3-5-平均时间复杂度和最坏时间复杂度"><a href="#7-3-5-平均时间复杂度和最坏时间复杂度" class="headerlink" title="7.3.5 平均时间复杂度和最坏时间复杂度"></a>7.3.5 平均时间复杂度和最坏时间复杂度</h3><ol>
<li>平均时间复杂度是指所有可能的输入实例均以等概率出现的情况下，该算法的运行时间。</li>
<li>最坏情况下的时间复杂度称最坏时间复杂度。一般讨论的时间复杂度均是最坏情况下的时间复杂度。 这样做的原因是：最坏情况下的时间复杂度是算法在任何输入实例上运行时间的界限，这就保证了算法的运行时间不会比最坏情况更长。</li>
<li>平均时间复杂度和最坏时间复杂度是否一致，和算法有关(如图:)。</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211123154515184.png" alt="image-20211123154515184"></p>
<h2 id="7-4-算法的空间复杂度简介"><a href="#7-4-算法的空间复杂度简介" class="headerlink" title="7.4 算法的空间复杂度简介"></a>7.4 算法的空间复杂度简介</h2><h3 id="7-4-1基本介绍"><a href="#7-4-1基本介绍" class="headerlink" title="7.4.1基本介绍"></a>7.4.1<strong>基本介绍</strong></h3><ol>
<li>类似于时间复杂度的讨论，一个算法的空间复杂度(Space Complexity)定义为该算法所耗费的存储空间，它也是问题规模n的函数。</li>
<li>空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度。有的算法需要占用的临时工作单元数与解决问题的规模n有关，它随着n的增大而增大，当n较大时，将占用较多的存储单元，例如快速排序和归并排序算法就属于这种情况</li>
<li>在做算法分析时，<strong>主要讨论的是时间复杂度</strong>。<strong>从用户使用体验上看，更看重的程序执行的速度</strong>。一些缓存产品(redis, memcache)和算法(基数排序)<strong>本质就是用空间换时间</strong>.</li>
</ol>
<h2 id="7-5-冒泡排序"><a href="#7-5-冒泡排序" class="headerlink" title="7.5  冒泡排序"></a>7.5  冒泡排序</h2><h3 id="7-5-1基本介绍"><a href="#7-5-1基本介绍" class="headerlink" title="7.5.1基本介绍"></a>7.5.1<strong>基本介绍</strong></h3><p>冒泡排序（Bubble Sorting）的基本思想是：通过对待排序序列从前向后（从下标较小的元素开始）,<strong>依次比较相邻元素的值，若发现逆序则交换</strong>，使值较大的元素逐渐从前移向后部，就象水底下的气泡一样逐渐向上冒。</p>
<p>优化：</p>
<p>因为排序的过程中，各元素不断接近自己的位置，<strong>如果一趟比较下来没有进行过交换，就说明序列有序</strong>，因此要在排序过程中设置</p>
<p>一个标志flag判断元素是否进行过交换。从而减少不必要的比较。(这里说的优化，可以在冒泡排序写好后，在进行)</p>
<h3 id="7-5-2-演示冒泡过程的例子（图解）"><a href="#7-5-2-演示冒泡过程的例子（图解）" class="headerlink" title="7.5.2 演示冒泡过程的例子（图解）"></a>7.5.2 演示冒泡过程的例子（图解）</h3><p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211123184420297.png" alt="image-20211123184420297"></p>
<p>小结冒泡排序规则</p>
<p>(1) 一共进行 数组的大小-1 次 大的循环</p>
<p>(2)每一趟排序的次数在逐渐的减少</p>
<p>(3) 如果我们发现在某趟排序中，没有发生一次交换， 可以提前结束冒泡排序。这个就是优化</p>
<h3 id="7-5-3-冒泡排序应用实例"><a href="#7-5-3-冒泡排序应用实例" class="headerlink" title="7.5.3 冒泡排序应用实例"></a>7.5.3 <strong>冒泡排序应用实例</strong></h3><p>我们举一个具体的案例来说明冒泡法。我们将五个无序的数：**3, 9, -1, 10, -2 **使用冒泡排序法将其排成一个从小到大的有序数列。</p>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.sort;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BubbleSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 定义一个数组</span><br>        <span class="hljs-comment">// int[] arr = &#123;3, 9, -1, 10, -2&#125;;</span><br>        <span class="hljs-comment">// int[] arr = &#123;3, 9, -1, 10, 20&#125;;</span><br>        <span class="hljs-keyword">int</span> [] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">80000</span>];<br>        <span class="hljs-comment">// 测试：排序80000个数据的数组需要多长时间</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">80000</span>; i++)&#123;<br>            arr[i] = (<span class="hljs-keyword">int</span>) (Math.random()*<span class="hljs-number">80000</span>);       <span class="hljs-comment">// [0,80000)的随机数字</span><br>        &#125;<br><br>        Date date1 = <span class="hljs-keyword">new</span> Date();<br>        SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        String date1Str = simpleDateFormat.format(date1);<br>        System.out.println(<span class="hljs-string">&quot;开始排序前时间：&quot;</span>+date1Str);<br><br><br>        bubbleSort(arr);<br>        <span class="hljs-comment">//System.out.println(Arrays.toString(arr));</span><br><br>        Date date2 = <span class="hljs-keyword">new</span> Date();<br>        String date2Str = simpleDateFormat.format(date2);<br>        System.out.println(<span class="hljs-string">&quot;开始排序后时间：&quot;</span>+date2Str);    <span class="hljs-comment">// 约10秒</span><br><br><br>      <span class="hljs-comment">/*  // 临时变量</span><br><span class="hljs-comment">        int temp = 0;</span><br><span class="hljs-comment">        boolean flag = false;   // 判断是否执行过</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 可以理解为第几大趟</span><br><span class="hljs-comment">        for (int i = 0; i&lt;arr.length -1; i++)&#123;</span><br><span class="hljs-comment">            // 每遍历一趟，遍历次数就少一次</span><br><span class="hljs-comment">            for (int j = 0; j&lt;arr.length - 1 -i; j++)&#123;</span><br><span class="hljs-comment">                // 如果当前的数，比后面一个的要大，则交换位置</span><br><span class="hljs-comment">                if (arr[j]&gt;arr[j+1])&#123;</span><br><span class="hljs-comment">                    flag = true;</span><br><span class="hljs-comment">                    temp = arr[j];</span><br><span class="hljs-comment">                    arr[j] = arr[j+1];</span><br><span class="hljs-comment">                    arr[j+1] = temp;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            if (!flag)&#123;     // 如果flag== false，说明没有进行排序，则直接放回</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            &#125; else &#123;</span><br><span class="hljs-comment">                // 如果进行排序了，需要将flag置为false</span><br><span class="hljs-comment">                flag = false;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            System.out.println(&quot;第&quot;+(i+1)+&quot;次遍历结果为：&quot;+Arrays.toString(arr));</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">*/</span><br>        <span class="hljs-comment">// 以下为推到过程</span><br>       <span class="hljs-comment">/* // 第二趟</span><br><span class="hljs-comment">        for (int i = 0; i &lt; array.length -1 -1; i++)&#123;</span><br><span class="hljs-comment">            // 如果前面的数，比后面一个要大，则将前面的数放到后面</span><br><span class="hljs-comment">            if (array[i]&gt;array[i+1])&#123;</span><br><span class="hljs-comment">                temp = array[i];</span><br><span class="hljs-comment">                array[i] = array[i+1];</span><br><span class="hljs-comment">                array[i+1] = temp;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        System.out.println(&quot;第二趟排序的结果：&quot;+ Arrays.toString(array));</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 第三趟</span><br><span class="hljs-comment">        for (int i = 0; i &lt; array.length -1 -2; i++)&#123;</span><br><span class="hljs-comment">            // 如果前面的数，比后面一个要大，则将前面的数放到后面</span><br><span class="hljs-comment">            if (array[i]&gt;array[i+1])&#123;</span><br><span class="hljs-comment">                temp = array[i];</span><br><span class="hljs-comment">                array[i] = array[i+1];</span><br><span class="hljs-comment">                array[i+1] = temp;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        System.out.println(&quot;第三趟排序的结果：&quot;+ Arrays.toString(array));</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 第四趟</span><br><span class="hljs-comment">        for (int i = 0; i &lt; array.length -1 -3; i++)&#123;</span><br><span class="hljs-comment">            // 如果前面的数，比后面一个要大，则将前面的数放到后面</span><br><span class="hljs-comment">            if (array[i]&gt;array[i+1])&#123;</span><br><span class="hljs-comment">                temp = array[i];</span><br><span class="hljs-comment">                array[i] = array[i+1];</span><br><span class="hljs-comment">                array[i+1] = temp;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        System.out.println(&quot;第四趟排序的结果：&quot;+ Arrays.toString(array));*/</span><br>    &#125;<br><br>    <span class="hljs-comment">// 将冒泡排序抽取出来</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>        <span class="hljs-comment">// 定义一个变量</span><br>        <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 为了优化定义一个变量用作判断是否有交换</span><br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-comment">// 进行第几趟排序</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i&lt;arr.length - <span class="hljs-number">1</span>; i++)&#123;<br>            <span class="hljs-comment">// 在该趟中，比较多少次</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j&lt;arr.length - <span class="hljs-number">1</span> - i; j++)&#123;<br>                <span class="hljs-comment">// 如果当前的数，比后面一个要大，则交换位置</span><br>                <span class="hljs-keyword">if</span> (arr[j]&gt;arr[j+<span class="hljs-number">1</span>])&#123;<br>                    flag = <span class="hljs-keyword">true</span>;        <span class="hljs-comment">// 如果有交换</span><br>                    temp = arr[j];<br>                    arr[j] = arr[j+<span class="hljs-number">1</span>];<br>                    arr[j+<span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!flag)&#123;         <span class="hljs-comment">// flag == false</span><br>                <span class="hljs-keyword">break</span>;          <span class="hljs-comment">// 如果没有交换，直接退出</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                flag = <span class="hljs-keyword">false</span>;   <span class="hljs-comment">// 如果有交换，则将flag置成false</span><br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>



<h3 id="复盘冒泡排序完整的代码"><a href="#复盘冒泡排序完整的代码" class="headerlink" title="复盘冒泡排序完整的代码"></a>复盘冒泡排序完整的代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.sort.practice;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-comment">// 完整冒泡排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestBubbleSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 定义数组</span><br>        <span class="hljs-keyword">int</span> [] arr = &#123; <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>&#125;;<br>        <span class="hljs-comment">// 定义临时变量</span><br>        <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 判断是否有发生交换</span><br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-comment">// 第几趟</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-comment">// 该趟中，交换多少次</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (arr[j]&gt;arr[j+<span class="hljs-number">1</span>])&#123;<br>                    flag = <span class="hljs-keyword">true</span>;           <span class="hljs-comment">// 如果发生交换</span><br>                    temp = arr[j];<br>                    arr[j] = arr[j+<span class="hljs-number">1</span>];<br>                    arr[j+<span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!flag)&#123;                    <span class="hljs-comment">// 既flag == false，没有交换</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                flag = <span class="hljs-keyword">false</span>;              <span class="hljs-comment">// 如果发生了交换，重置flag</span><br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;排序结果为：&quot;</span>+ Arrays.toString(arr));<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="7-6-选择排序"><a href="#7-6-选择排序" class="headerlink" title="7.6 选择排序"></a>7.6 选择排序</h2><h3 id="7-6-1-基本介绍"><a href="#7-6-1-基本介绍" class="headerlink" title="7.6.1 基本介绍"></a>7.6.1 基本介绍</h3><p>选择式排序也属于内部排序法，是从欲排序的数据中，按指定的规则选出某一元素，再依规定交换位置后达到排序的目的。</p>
<h3 id="7-6-2-选择排序思想"><a href="#7-6-2-选择排序思想" class="headerlink" title="7.6.2 选择排序思想:"></a>7.6.2 选择排序思想:</h3><p>选择排序（select sorting）也是一种简单的排序方法。它的<strong>基本思想</strong>是：第一次从arr[0]<del>arr[n-1]中选取最小值，与arr[0]交换，第二次从arr[1]</del>arr[n-1]中选取最小值，与arr[1]交换，第三次从arr[2]<del>arr[n-1]中选取最小值，与arr[2]交换，…，第i次从arr[i-1]</del>arr[n-1]中选取最小值，与arr[i-1]交换，…, 第n-1次从arr[n-2]~arr[n-1]中选取最小值，与arr[n-2]交换，总共通过n-1次，得到一个按排序码从小到大排列的有序序列。</p>
<h3 id="7-6-3-选择排序思路分析图"><a href="#7-6-3-选择排序思路分析图" class="headerlink" title="7.6.3  选择排序思路分析图:"></a>7.6.3  选择排序思路分析图:</h3><p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211124204836373.png" alt="image-20211124204836373"></p>
<p>对一个数组的选择排序再进行讲解</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211124204943796.png" alt="image-20211124204943796"></p>
<h3 id="7-6-4-选择排序应用实例"><a href="#7-6-4-选择排序应用实例" class="headerlink" title="7.6.4 选择排序应用实例:"></a>7.6.4 选择排序应用实例:</h3><p>有一群牛 <strong>,</strong> 颜值分别是 101, 34, 119, 1 请使用选择排序从低到高进行排序 <strong>[<strong>101, 34, 119, 1</strong>]</strong> 说明: 测试效率的数据 80000，看耗时</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211124205041930.png" alt="image-20211124205041930"></p>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.sort;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SelectSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// int[] arr = &#123;3,65,4,14&#125;;</span><br><br>        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">80000</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">80000</span>;i++)&#123;<br>            arr[i] = (<span class="hljs-keyword">int</span>) (Math.random()*<span class="hljs-number">80000</span>);<br>        &#125;<br><br>        Date date1 = <span class="hljs-keyword">new</span> Date();<br>        SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        String dateStr1 = simpleDateFormat.format(date1);<br>        System.out.println(<span class="hljs-string">&quot;排序前的时间：&quot;</span>+dateStr1);<br><br>        selectSort(arr);<br><br>        Date date2 = <span class="hljs-keyword">new</span> Date();<br>        String dateStr2 = simpleDateFormat.format(date2);<br>        System.out.println(<span class="hljs-string">&quot;排序前的时间：&quot;</span>+dateStr2);         <span class="hljs-comment">// 相差2秒</span><br><br>        <span class="hljs-comment">/*System.out.println(&quot;选择排序前的数组：&quot;+Arrays.toString(arr));</span><br><span class="hljs-comment">        selectSort(arr);</span><br><span class="hljs-comment">        System.out.println(&quot;选择排序后的数组：&quot;+Arrays.toString(arr));*/</span><br><br>    &#125;<br><br>    <span class="hljs-comment">// 选择排序</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> [] arr)</span></span>&#123;<br>        <span class="hljs-comment">// 只需要走arr.length -1 趟，最后一个数不用排序</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length -<span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-comment">// 定义一个最小值索引</span><br>            <span class="hljs-keyword">int</span> minIndex = i;<br>            <span class="hljs-comment">// 假设第一个为最小的</span><br>            <span class="hljs-keyword">int</span> min = arr[i];<br>            <span class="hljs-comment">// 从第二个开始比较，找到最小值</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; arr.length; j++)&#123;<br>                <span class="hljs-comment">// 判断第一个和第二个的大小，并记录了当前位置</span><br>                <span class="hljs-keyword">if</span> (min &gt;arr[j])&#123;     <span class="hljs-comment">// 说明第一个比第二个大，则将最小的值赋值给min，并重置minIndex</span><br>                    min = arr[j];<br>                    minIndex = j;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 交换位置，将最小的放到第一位</span><br>            <span class="hljs-keyword">if</span> (minIndex != i)&#123;<br>                arr[minIndex] = arr[i];<br>                arr[i] = min;<br><br>            &#125;<br>        &#125;<br><br><br><br>       <span class="hljs-comment">/* // 定义一个最小值索引</span><br><span class="hljs-comment">        int minIndex = 0;</span><br><span class="hljs-comment">        // 假设第一个为最小的</span><br><span class="hljs-comment">        int min = arr[0];</span><br><span class="hljs-comment">        // 从第二个开始比较，找到最小值</span><br><span class="hljs-comment">        for (int j = 0 + 1; j &lt; arr.length; j++)&#123;</span><br><span class="hljs-comment">            // 判断第一个和第二个的大小，并记录了当前位置</span><br><span class="hljs-comment">            if (min &gt;arr[j])&#123;     // 说明第一个比第二个大，则将最小的值赋值给min，并重置minIndex</span><br><span class="hljs-comment">                min = arr[j];</span><br><span class="hljs-comment">                minIndex = j;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        // 交换位置，将最小的放到第一位</span><br><span class="hljs-comment">        arr[minIndex] = arr[0];</span><br><span class="hljs-comment">        arr[0] = min;</span><br><span class="hljs-comment">        System.out.println(&quot;第一个排序结果为：&quot;+ Arrays.toString(arr));</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        minIndex = 1;</span><br><span class="hljs-comment">        min = arr[1];</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        for (int j = 1 + 1; j&lt;arr.length; j++)&#123;</span><br><span class="hljs-comment">            if (min&gt; arr[j])&#123;</span><br><span class="hljs-comment">                min = arr[j];</span><br><span class="hljs-comment">                minIndex =j;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        arr[minIndex] = arr[1];</span><br><span class="hljs-comment">        arr[1] = min;</span><br><span class="hljs-comment">        System.out.println(&quot;第二个排序结果为：&quot;+ Arrays.toString(arr));</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        minIndex = 2;</span><br><span class="hljs-comment">        min = arr[2];</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        for (int j = 2 + 1; j&lt;arr.length; j++)&#123;</span><br><span class="hljs-comment">            if (min&gt; arr[j])&#123;</span><br><span class="hljs-comment">                min = arr[j];</span><br><span class="hljs-comment">                minIndex =j;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        if (minIndex != 2)&#123;</span><br><span class="hljs-comment">            arr[minIndex] = arr[2];</span><br><span class="hljs-comment">            arr[2] = min;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        System.out.println(&quot;第三个排序结果为：&quot;+ Arrays.toString(arr));</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="选择排序复盘代码"><a href="#选择排序复盘代码" class="headerlink" title="选择排序复盘代码"></a>选择排序复盘代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.sort.practice;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSelectSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">121</span>,-<span class="hljs-number">21</span>,<span class="hljs-number">1</span>,<span class="hljs-number">14541</span>,<span class="hljs-number">2341</span>,<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-comment">// 从索引为0开始比较第一趟，比较的次数为数组的长度 -1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-comment">// 假设当前的索引为最小的索引</span><br>            <span class="hljs-keyword">int</span> minIndex = i;<br>            <span class="hljs-comment">// 假设当前的值为最小的值</span><br>            <span class="hljs-keyword">int</span> min = arr[i];<br>            <span class="hljs-comment">// 将第i个值后面的依次进行比较</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (min &gt; arr[j])&#123;<br>                    min = arr[j];<br>                    minIndex = j;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 优化：如果当前的值不相等，则先将最小的放到i位置上，如果相等，则不需再换位，已经在最小的位置上了</span><br>            <span class="hljs-keyword">if</span> (minIndex != i)&#123;<br>                arr[minIndex] = arr[i];<br>                arr[i] = min;<br>            &#125;<br><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;排序后的数组为：&quot;</span>+ Arrays.toString(arr));<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="7-7-插入排序"><a href="#7-7-插入排序" class="headerlink" title="7.7 插入排序"></a>7.7 插入排序</h2><h3 id="7-7-1-插入排序法介绍"><a href="#7-7-1-插入排序法介绍" class="headerlink" title="7.7.1 插入排序法介绍:"></a>7.7.1 插入排序法介绍:</h3><p>插入式排序属于内部排序法，是对于欲排序的元素以插入的方式找寻该元素的适当位置，以达到排序的目的。</p>
<h3 id="7-7-2-插入排序法思想"><a href="#7-7-2-插入排序法思想" class="headerlink" title="7.7.2 插入排序法思想:"></a>7.7.2 插入排序法思想:</h3><p>插入排序（Insertion Sorting）的基本思想是：<strong>把n个待排序的元素看成为一个有序表和一个无序表</strong>，开始时<strong>有序表中只包含一个元素</strong>，<strong>无序表中包含有n-1个元素</strong>，排序过程中每次从无序表中取出第一个元素，把它的排序码依次与有序表元素的排序码进行比较，将它插入到有序表中的适当位置，使之成为新的有序表。</p>
<h3 id="7-7-3-插入排序思路图"><a href="#7-7-3-插入排序思路图" class="headerlink" title="7.7.3  插入排序思路图:"></a>7.7.3  插入排序思路图:</h3><p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211124234419890.png" alt="image-20211124234419890"></p>
<h3 id="7-7-4-插入排序法应用实例"><a href="#7-7-4-插入排序法应用实例" class="headerlink" title="7.7.4 插入排序法应用实例:"></a>7.7.4 插入排序法应用实例:</h3><p>有一群小牛, 考试成绩分别是 101, 34, 119, 1  请从小到大排序</p>
<p><strong>代码实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.sort;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">// 直接插入排序，将第一个为有序的，后面的为无序的</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InsertSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//int[] arr = &#123;100,33,46,74,2,646,4,74,4,9,-1,-38&#125;;</span><br><br>        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">80000</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">80000</span>;i++)&#123;<br>            arr[i] = (<span class="hljs-keyword">int</span>) (Math.random()*<span class="hljs-number">80000</span>);<br>        &#125;<br>        Date date1 = <span class="hljs-keyword">new</span> Date();<br>        SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        String dateStr1 = simpleDateFormat.format(date1);<br>        System.out.println(<span class="hljs-string">&quot;排序前的时间：&quot;</span>+dateStr1);<br><br>        insertSort(arr);<br><br>        Date date2 = <span class="hljs-keyword">new</span> Date();<br>        String dateStr2 = simpleDateFormat.format(date2);<br>        System.out.println(<span class="hljs-string">&quot;排序后的时间：&quot;</span>+dateStr2);         <span class="hljs-comment">// 相差1秒</span><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; arr.length; i++)&#123;<br>            <span class="hljs-keyword">int</span> insertVal = arr[i];<br>            <span class="hljs-keyword">int</span> insertIndex = i - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (insertIndex &gt;= <span class="hljs-number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex])&#123;<br>                arr[insertIndex + <span class="hljs-number">1</span>] =arr[insertIndex];<br>                insertIndex--;<br>            &#125;<br>            arr[insertIndex + <span class="hljs-number">1</span>] = insertVal;<br>            <span class="hljs-comment">// System.out.println(&quot;第&quot;+i+&quot;次排序结果为：&quot;+Arrays.toString(arr));</span><br>        &#125;<br><br>        <span class="hljs-comment">/*// 第一轮</span><br><span class="hljs-comment">        int insertVal = arr[1];</span><br><span class="hljs-comment">        int insertIndex = 1 - 1;</span><br><span class="hljs-comment">        // insertIndex &gt;= 0 :防止下标越界</span><br><span class="hljs-comment">        // insertVal &lt; arr[insertIndex]：无序表的第一个如果小于前面一个，则说明没找到位置，</span><br><span class="hljs-comment">        while (insertIndex &gt;= 0 &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;</span><br><span class="hljs-comment">            // 没有找到位置，则将arr[insertIndex]的向后移</span><br><span class="hljs-comment">            arr[insertIndex + 1] = arr[insertIndex];</span><br><span class="hljs-comment">            // 索引减一</span><br><span class="hljs-comment">            insertIndex--;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        // 如果这时是第一个元素了，insertIndex--之后就等于-1，insertIndex&lt;0了，找到位置了，直接插入</span><br><span class="hljs-comment">        // 但是，索引需要加一</span><br><span class="hljs-comment">        arr[insertIndex + 1] = insertVal;</span><br><span class="hljs-comment">        System.out.println(&quot;第一次排序的结果为：&quot;+ Arrays.toString(arr));</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 第二轮</span><br><span class="hljs-comment">        insertVal = arr[2];</span><br><span class="hljs-comment">        insertIndex = 2 - 1;</span><br><span class="hljs-comment">        // insertIndex &gt;= 0 :防止下标越界</span><br><span class="hljs-comment">        // insertVal &lt; arr[insertIndex]：无序表的第一个如果小于前面一个，则说明没找到位置，</span><br><span class="hljs-comment">        while (insertIndex &gt;= 0 &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;</span><br><span class="hljs-comment">            // 没有找到位置，则将arr[insertIndex]的向后移</span><br><span class="hljs-comment">            arr[insertIndex + 1] = arr[insertIndex];</span><br><span class="hljs-comment">            // 索引减一</span><br><span class="hljs-comment">            insertIndex--;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        // 如果这时是第一个元素了，insertIndex--之后就等于-1，insertIndex&lt;0了，找到位置了，直接插入</span><br><span class="hljs-comment">        // 但是，索引需要加一</span><br><span class="hljs-comment">        arr[insertIndex + 1] = insertVal;</span><br><span class="hljs-comment">        System.out.println(&quot;第二次排序的结果为：&quot;+ Arrays.toString(arr));</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 第三轮</span><br><span class="hljs-comment">        insertVal = arr[3];</span><br><span class="hljs-comment">        insertIndex = 3 - 1;</span><br><span class="hljs-comment">        // insertIndex &gt;= 0 :防止下标越界</span><br><span class="hljs-comment">        // insertVal &lt; arr[insertIndex]：无序表的第一个如果小于前面一个，则说明没找到位置，</span><br><span class="hljs-comment">        while (insertIndex &gt;= 0 &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;</span><br><span class="hljs-comment">            // 没有找到位置，则将arr[insertIndex]的向后移</span><br><span class="hljs-comment">            arr[insertIndex + 1] = arr[insertIndex];</span><br><span class="hljs-comment">            // 索引减一</span><br><span class="hljs-comment">            insertIndex--;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        // 如果这时是第一个元素了，insertIndex--之后就等于-1，insertIndex&lt;0了，找到位置了，直接插入</span><br><span class="hljs-comment">        // 但是，索引需要加一</span><br><span class="hljs-comment">        arr[insertIndex + 1] = insertVal;</span><br><span class="hljs-comment">        System.out.println(&quot;第三次排序的结果为：&quot;+ Arrays.toString(arr));*/</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="复盘插入排序代码"><a href="#复盘插入排序代码" class="headerlink" title="复盘插入排序代码"></a>复盘插入排序代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.sort.practice;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">// 测试插入排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestInsertSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> [] arr = &#123;<span class="hljs-number">64</span>,<span class="hljs-number">22</span>,<span class="hljs-number">2</span>,<span class="hljs-number">56</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">36</span>,<span class="hljs-number">4</span>,<span class="hljs-number">777</span>,<span class="hljs-number">5</span>&#125;;<br>        <span class="hljs-comment">// 定义待插入的数</span><br>        <span class="hljs-keyword">int</span> insertVal = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// arr[i]前面一个数的下标（索引）</span><br>        <span class="hljs-keyword">int</span> insertIndex = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 从无序表的第一个，开始第i轮排序</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-comment">// 要插入的值</span><br>            insertVal = arr[i];<br>            <span class="hljs-comment">// arr[i]前面一个数的下标（索引）</span><br>            insertIndex = i - <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 给insertVal找到要插入的位置</span><br>            <span class="hljs-keyword">while</span> (insertIndex &gt;= <span class="hljs-number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex])&#123;<br>                arr[insertIndex + <span class="hljs-number">1</span>] = arr[insertIndex];<br>                insertIndex--;<br>            &#125;<br>            <span class="hljs-comment">// 如果不满足上面的条件，就说明已经找到位置了</span><br>            <span class="hljs-comment">// 注意，索引应该加一，比如当insertIndex=-1的时候，需要加一到0 的位置</span><br>            <span class="hljs-comment">// 优化：先判断是否需要换位,即判断索引是否相等</span><br>            <span class="hljs-keyword">if</span> (insertIndex != i)&#123;<br>                arr[insertIndex + <span class="hljs-number">1</span>] = insertVal;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;插入排序的结果为：&quot;</span>+ Arrays.toString(arr));<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="7-8-希尔排序"><a href="#7-8-希尔排序" class="headerlink" title="7.8 希尔排序"></a>7.8 希尔排序</h2><h3 id="7-8-1简单插入排序存在的问题"><a href="#7-8-1简单插入排序存在的问题" class="headerlink" title="7.8.1简单插入排序存在的问题"></a>7.8.1<strong>简单插入排序存在的问题</strong></h3><p>我们看简单的插入排序可能存在的问题.</p>
<p>数组 arr = {2,3,4,5,6,1} 这时需要插入的数 1(最小), 这样的过程是：</p>
<p>{2,3,4,5,6,6}</p>
<p>{2,3,4,5,5,6}</p>
<p>{2,3,4,4,5,6}</p>
<p>{2,3,3,4,5,6}</p>
<p>{2,2,3,4,5,6}</p>
<p>{1,2,3,4,5,6}</p>
<p><strong>结论</strong>:当需要插入的数是较小的数时，后移的次数明显增多，对效率有影响.</p>
<h3 id="7-8-2希尔排序法介绍"><a href="#7-8-2希尔排序法介绍" class="headerlink" title="7.8.2希尔排序法介绍"></a>7.8.2<strong>希尔排序法介绍</strong></h3><p>希尔排序是希尔（Donald Shell）于1959年提出的一种排序算法。希尔排序也是一种<strong>插入排序</strong>，它是简单插入排序经过改进之后的一个<strong>更高效的版本</strong>，也称为<strong>缩小增量排序</strong>。</p>
<h3 id="7-8-3希尔排序法基本思想"><a href="#7-8-3希尔排序法基本思想" class="headerlink" title="7.8.3希尔排序法基本思想"></a>7.8.3<strong>希尔排序法基本思想</strong></h3><p>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，<strong>当增量减至1时</strong>，整个文件恰被分成一组，算法便终止</p>
<h3 id="7-8-4希尔排序法的示意图"><a href="#7-8-4希尔排序法的示意图" class="headerlink" title="7.8.4希尔排序法的示意图"></a>7.8.4<strong>希尔排序法的示意图</strong></h3><p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211128104420464.png" alt="image-20211128104420464"></p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211128104437836.png" alt="image-20211128104437836"></p>
<h3 id="7-8-5-希尔排序法应用实例"><a href="#7-8-5-希尔排序法应用实例" class="headerlink" title="7.8.5 希尔排序法应用实例:"></a>7.8.5 <strong>希尔排序法应用实例</strong>:</h3><p>有一群小牛, 考试成绩分别是 {8,9,1,7,2,3,5,4,6,0} 请从小到大排序. 请分别使用</p>
<ol>
<li><p>希尔排序时， 对有序序列在插入时采用<strong>交换法</strong>, 并测试排序速度.</p>
</li>
<li><p>希尔排序时， 对有序序列在插入时<strong>采用移动法</strong>, 并测试排序速度</p>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.sort;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShellSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//int[] arr = &#123;8,9,1,7,2,3,5,4,6,0&#125;;</span><br><br>        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">80000</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">80000</span>;i++)&#123;<br>            arr[i] = (<span class="hljs-keyword">int</span>) (Math.random()*<span class="hljs-number">80000</span>);<br>        &#125;<br>        Date date1 = <span class="hljs-keyword">new</span> Date();<br>        SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        String dateStr1 = simpleDateFormat.format(date1);<br>        System.out.println(<span class="hljs-string">&quot;排序前的时间：&quot;</span>+dateStr1);<br><br>        <span class="hljs-comment">//shellSort(arr);     // 6~8秒</span><br>        shellSort2(arr);      <span class="hljs-comment">// 1秒左右</span><br>        <span class="hljs-comment">//System.out.println(&quot;希尔排序的结果为：&quot;+ Arrays.toString(arr));</span><br><br>        Date date2 = <span class="hljs-keyword">new</span> Date();<br>        String dateStr2 = simpleDateFormat.format(date2);<br>        System.out.println(<span class="hljs-string">&quot;排序后的时间：&quot;</span>+dateStr2);<br><br><br>    &#125;<br><br>    <span class="hljs-comment">// 使用逐步推导的方式来编写希尔排序</span><br>    <span class="hljs-comment">// 希尔排序时，对有序序列在插入是采用交换法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> [] arr)</span></span>&#123;<br><br>        <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 根据前面的逐步分析，使用循环处理，分组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> gap = arr.length / <span class="hljs-number">2</span>; gap &gt;<span class="hljs-number">0</span>; gap /= <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = gap; i &lt; arr.length; i++)&#123;<br>                <span class="hljs-comment">// 遍历每组中所有的元素（共gap组，每组个元素），步长为gap</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i - gap; j &gt;= <span class="hljs-number">0</span>; j -= gap)&#123;<br>                    <span class="hljs-comment">// 如果当前元素大于加上步长后的那个元素，说明交换</span><br>                    <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j+gap])&#123;<br>                        temp = arr[j];<br>                        arr[j] = arr[j+gap];<br>                        arr[j+gap] = temp;<br>                    &#125;<br>                &#125;<br>            &#125;<br>           <span class="hljs-comment">// System.out.println(&quot;希尔排序的结果为：&quot;+ Arrays.toString(arr));</span><br>        &#125;<br><br>        <span class="hljs-comment">/*// 第一轮将10个数组分成5组</span><br><span class="hljs-comment">        for (int i = 5; i &lt; arr.length; i++)&#123;</span><br><span class="hljs-comment">            // 遍历每组中所有的元素（共5组，每组2个元素），步长为5</span><br><span class="hljs-comment">            for (int j = i - 5; j &gt;= 0; j -= 5)&#123;</span><br><span class="hljs-comment">                if (arr[j] &gt; arr[j+5])&#123;</span><br><span class="hljs-comment">                    temp = arr[j];</span><br><span class="hljs-comment">                    arr[j] = arr[j+5];</span><br><span class="hljs-comment">                    arr[j+5] = temp;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        System.out.println(&quot;第1轮希尔排序的结果为：&quot;+ Arrays.toString(arr));</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 第2轮将5个数组分成2组</span><br><span class="hljs-comment">        for (int i = 2; i &lt; arr.length; i++)&#123;</span><br><span class="hljs-comment">            // 遍历每组中所有的元素（共5组，每组2个元素），步长为5</span><br><span class="hljs-comment">            for (int j = i - 2; j &gt;= 0; j -= 2)&#123;</span><br><span class="hljs-comment">                if (arr[j] &gt; arr[j+2])&#123;</span><br><span class="hljs-comment">                    temp = arr[j];</span><br><span class="hljs-comment">                    arr[j] = arr[j+2];</span><br><span class="hljs-comment">                    arr[j+2] = temp;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        System.out.println(&quot;第2轮希尔排序的结果为：&quot;+ Arrays.toString(arr));</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 第3轮将2个数组分成1组</span><br><span class="hljs-comment">        for (int i = 1; i &lt; arr.length; i++)&#123;</span><br><span class="hljs-comment">            // 遍历每组中所有的元素（共5组，每组2个元素），步长为5</span><br><span class="hljs-comment">            for (int j = i - 1; j &gt;= 0; j -= 1)&#123;</span><br><span class="hljs-comment">                if (arr[j] &gt; arr[j+1])&#123;</span><br><span class="hljs-comment">                    temp = arr[j];</span><br><span class="hljs-comment">                    arr[j] = arr[j+1];</span><br><span class="hljs-comment">                    arr[j+1] = temp;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        System.out.println(&quot;第3轮希尔排序的结果为：&quot;+ Arrays.toString(arr));*/</span><br>    &#125;<br><br>    <span class="hljs-comment">// 对交换式的希尔排序进行优化--&gt; 移位法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellSort2</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>        <span class="hljs-comment">// 分组，增量gap，并逐步的缩小增量</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> gap = arr.length / <span class="hljs-number">2</span>; gap &gt;<span class="hljs-number">0</span>; gap /= <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-comment">// 从第gap个元素开始，逐个对其所在的组进行直接插入排序</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = gap; i&lt;arr.length; i ++)&#123;<br>                <span class="hljs-comment">// 用直接插入排序</span><br>                <span class="hljs-keyword">int</span> j = i;<br>                <span class="hljs-keyword">int</span> temp = arr[j];<br>                <span class="hljs-keyword">if</span> (arr[j] &lt; arr[j -gap])&#123;<br>                    <span class="hljs-keyword">while</span> (j - gap &gt;= <span class="hljs-number">0</span> &amp;&amp; temp &lt; arr[j - gap])&#123;<br>                        <span class="hljs-comment">// 移动</span><br>                        arr[j] = arr[j - gap];<br>                        j -= gap;<br>                    &#125;<br>                    <span class="hljs-comment">// 退出while说明已经找到了，直接移动</span><br>                   arr[j] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<h3 id="希尔排序复盘代码-交换法-移位法"><a href="#希尔排序复盘代码-交换法-移位法" class="headerlink" title="希尔排序复盘代码(交换法+移位法)"></a>希尔排序复盘代码(交换法+移位法)</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.sort.practice;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">// 希尔排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestShellSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">5</span>,<span class="hljs-number">57</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">47</span>&#125;;<br>        shellSort(arr);<br>        System.out.println(<span class="hljs-string">&quot;希尔排序（交换法）的结果为：&quot;</span> + Arrays.toString(arr));<br>        shellSort2(arr);<br>        System.out.println(<span class="hljs-string">&quot;希尔排序（移动法）的结果为：&quot;</span> + Arrays.toString(arr));<br>    &#125;<br>    <span class="hljs-comment">// 方式一：交换法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>        <span class="hljs-comment">// 分组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> gap = arr.length / <span class="hljs-number">2</span>; gap &gt; <span class="hljs-number">0</span>; gap /= <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-comment">// 遍历每组中所有的元素，步长为grap</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = gap; i &lt; arr.length; i++)&#123;<br>                <span class="hljs-comment">// j为从第一个开始，即i - gap步长</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j =i - gap ; j &gt;= <span class="hljs-number">0</span>; j -= gap)&#123;<br>                    <span class="hljs-comment">// 判断arr[j]是否小于arr[j - grap]</span><br>                    <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + gap])&#123;<br>                        <span class="hljs-comment">// 交换</span><br>                        <span class="hljs-keyword">int</span> temp = arr[j + gap];<br>                        arr[j + gap] = arr[j];<br>                        arr[j] = temp;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 方式二：移动法，直接插入</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellSort2</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>        <span class="hljs-comment">// 分组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> gap = arr.length / <span class="hljs-number">2</span>; gap &gt; <span class="hljs-number">0</span>; gap /= <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-comment">// 遍历每组</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = gap; i&lt; arr.length; i++)&#123;<br>                <span class="hljs-comment">// 遍历每组的元素，采用直接插入法</span><br>                <span class="hljs-comment">// 先判断，再while循环找到位置直接插入</span><br>                <span class="hljs-comment">// 直接插入法</span><br>                <span class="hljs-keyword">int</span> j = i;<br>                <span class="hljs-keyword">int</span> temp = arr[j];<br>                <span class="hljs-keyword">if</span> (arr[j] &lt; arr[j - gap])&#123;<br>                    <span class="hljs-comment">// 找位置</span><br>                    <span class="hljs-keyword">while</span> (j - gap &gt;= <span class="hljs-number">0</span> &amp;&amp; temp &lt; arr[j -gap])&#123;<br>                        <span class="hljs-comment">// 移动</span><br>                        arr[j] = arr[j - gap];<br>                        j -= gap;<br>                    &#125;<br>                    arr[j] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="7-9-快速排序"><a href="#7-9-快速排序" class="headerlink" title="7.9 快速排序"></a>7.9 快速排序</h2><h3 id="7-9-1-快速排序法介绍"><a href="#7-9-1-快速排序法介绍" class="headerlink" title="7.9.1 快速排序法介绍:"></a>7.9.1 <strong>快速排序法介绍</strong>:</h3><p>快速排序（Quicksort）是对<strong>冒泡排序</strong>的一种改进。基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，<strong>整个排序过程可以递归进行</strong>，以此达到整个数据变成有序序列</p>
<h3 id="7-9-2-快速排序法示意图"><a href="#7-9-2-快速排序法示意图" class="headerlink" title="7.9.2 快速排序法示意图:"></a>7.9.2 快速排序法示意图:</h3><p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211128131501036.png" alt="image-20211128131501036"></p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211128131537170.png" alt="image-20211128131537170"></p>
<h3 id="7-9-3-快速排序法应用实例"><a href="#7-9-3-快速排序法应用实例" class="headerlink" title="7.9.3  快速排序法应用实例:"></a>7.9.3  快速排序法应用实例:</h3><p><strong>要求</strong>: 对 [-9,78,0,23,-567,70] 进行<strong>从小到大</strong>的<br> 排序，要求使用快速排序法。【测试8w和800w】 </p>
<p>说明[验证分析]:</p>
<ol>
<li><p>如果取消左右递归，结果是 <strong>-9 -567 0 23 78 70</strong></p>
</li>
<li><p>如果取消右递归,结果是**-567 -9 0 23 78 70**</p>
</li>
<li><p>如果取消左递归,结果是 <strong>-9 -567 0 23 70 78</strong></p>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.sort;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QuickSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//int[] arr = &#123;-9,78,0,23,-567,70&#125;;</span><br><br>        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">800000</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">800000</span>;i++)&#123;<br>            arr[i] = (<span class="hljs-keyword">int</span>) (Math.random()*<span class="hljs-number">80000</span>);<br>        &#125;<br><br>        Date date1 = <span class="hljs-keyword">new</span> Date();<br>        SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        String dateStr1 = simpleDateFormat.format(date1);<br>        System.out.println(<span class="hljs-string">&quot;排序前的时间：&quot;</span>+dateStr1);<br><br>        quickSort(arr,<span class="hljs-number">0</span>,arr.length - <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//System.out.println(&quot;快速排序的结果为：&quot;+ Arrays.toString(arr));</span><br><br>        Date date2 = <span class="hljs-keyword">new</span> Date();<br>        String dateStr2 = simpleDateFormat.format(date2);<br>        System.out.println(<span class="hljs-string">&quot;排序前的时间：&quot;</span>+dateStr2);         <span class="hljs-comment">// 8千万，耗时9秒</span><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr,<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right)</span></span>&#123;<br>        <span class="hljs-comment">// 左下标</span><br>        <span class="hljs-keyword">int</span> l = left;<br>        <span class="hljs-comment">// 右下标</span><br>        <span class="hljs-keyword">int</span> r = right;<br>        <span class="hljs-comment">// pivot中轴值</span><br>        <span class="hljs-keyword">int</span> pivot = arr[(left + right) /<span class="hljs-number">2</span> ];<br>        <span class="hljs-comment">// 临时变量，作为交换时使用</span><br>        <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// 以中轴pivot中心，将大于pivot的放在右边，小于pivot的放在左边</span><br>        <span class="hljs-keyword">while</span> (l&lt;r)&#123;<br>            <span class="hljs-comment">// 在pivot的左边一直找，找到大于等于pivot值，才退出</span><br>            <span class="hljs-keyword">while</span> (arr[l] &lt; pivot)&#123;<br>                l += <span class="hljs-number">1</span>;     <span class="hljs-comment">// l后移</span><br>            &#125;<br>            <span class="hljs-comment">// 在pivot的右边一直找，找到小于等于pivot值，才退出</span><br>            <span class="hljs-keyword">while</span> (arr[r] &gt; pivot)&#123;<br>                r -= <span class="hljs-number">1</span>;     <span class="hljs-comment">// r前移</span><br>            &#125;<br><br>            <span class="hljs-comment">// 当l&gt;=r时，pivot左边的已经全部小于等于pivot的值了，右边的全部都是大于等于pivot的值</span><br>            <span class="hljs-keyword">if</span> (l &gt;= r)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 交换</span><br>            temp = arr[l];<br>            arr[l] = arr[r];<br>            arr[r] = temp;<br><br>            <span class="hljs-comment">// 交换完之后，如果arr[l] == pivot ，r--，前移</span><br>            <span class="hljs-keyword">if</span> (arr[l] == pivot)&#123;<br>                r -= <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-comment">// 交换完之后，如果arr[r] == pivot ，l--，后移</span><br>            <span class="hljs-keyword">if</span> (arr[r] == pivot)&#123;<br>                l += <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 如果l == r ，必须l++ ,r--,否则为出现栈溢出，右递归会出现死循环</span><br>        <span class="hljs-keyword">if</span> (l == r)&#123;<br>            l += <span class="hljs-number">1</span>;<br>            r -= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 向左递归</span><br>        <span class="hljs-keyword">if</span> (left &lt; r)&#123;<br>            quickSort(arr,left,r);<br>        &#125;<br>        <span class="hljs-comment">// 向右递归</span><br>        <span class="hljs-keyword">if</span> (right &gt; l)&#123;<br>            quickSort(arr,l,right);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<h3 id="快速排序复盘代码"><a href="#快速排序复盘代码" class="headerlink" title="快速排序复盘代码"></a>快速排序复盘代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.sort.practice;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestQuickSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;-<span class="hljs-number">9</span>,<span class="hljs-number">78</span>,<span class="hljs-number">0</span>,<span class="hljs-number">23</span>,-<span class="hljs-number">567</span>,<span class="hljs-number">70</span>&#125;;<br>        quickSort(arr,<span class="hljs-number">0</span>,arr.length -<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;arr=&quot;</span>+ Arrays.toString(arr));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr , <span class="hljs-keyword">int</span> left ,<span class="hljs-keyword">int</span> right)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> l = left;       <span class="hljs-comment">// 左下标</span><br>        <span class="hljs-keyword">int</span> r = right;      <span class="hljs-comment">// 右下标</span><br>        <span class="hljs-keyword">int</span> pivot = arr[( left + right) / <span class="hljs-number">2</span>];   <span class="hljs-comment">// 中轴值</span><br>        <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;       <span class="hljs-comment">// 临时变量</span><br>        <span class="hljs-comment">// 找到比pivot小的值放到左边，比pivot大的值放到右边</span><br>        <span class="hljs-keyword">while</span> (l&lt;r)&#123;<br><br>            <span class="hljs-keyword">while</span> (arr[l] &lt; pivot)&#123;<br>                l += <span class="hljs-number">1</span>;     <span class="hljs-comment">// l后移</span><br>            &#125;<br>            <span class="hljs-keyword">while</span> (arr[r] &gt; pivot)&#123;<br>                r -= <span class="hljs-number">1</span>;     <span class="hljs-comment">// r前移</span><br>            &#125;<br>            <span class="hljs-comment">// 如果l == r 说明左右两边的值已经归为，退出循环</span><br>            <span class="hljs-keyword">if</span> (l == r)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 交换</span><br>            temp = arr[l];<br>            arr[l] = arr[r];<br>            arr[r] = temp;<br><br>            <span class="hljs-comment">// 交换完之后，如果 arr[l] == pivot ,则需r--</span><br>            <span class="hljs-keyword">if</span> (arr[l] == pivot)&#123;<br>                r -= <span class="hljs-number">1</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (arr[r] == pivot)&#123;<br>                l += <span class="hljs-number">1</span>;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-comment">// 如果l == r 了，需要将l往后移和r往前移动，否则会在右递归的时候出现死循环</span><br>        <span class="hljs-keyword">if</span> (l == r)&#123;<br>            l += <span class="hljs-number">1</span>;<br>            r -= <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 左递归</span><br>        <span class="hljs-keyword">if</span> (left &lt; r) &#123;<br>            quickSort(arr, left, r);<br>        &#125;<br>        <span class="hljs-comment">// 右递归</span><br>        <span class="hljs-keyword">if</span> (right &gt; l)&#123;<br>            quickSort(arr,l,right);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="7-10-归并排序"><a href="#7-10-归并排序" class="headerlink" title="7.10 归并排序"></a>7.10 归并排序</h2><h3 id="7-10-1-归并排序介绍"><a href="#7-10-1-归并排序介绍" class="headerlink" title="7.10.1 归并排序介绍:"></a>7.10.1 归并排序介绍:</h3><p>归并排序（MERGE-SORT）是利用归并的思想实现的排序方法，该算法采用经典的<strong>分治（divide-and-conquer）策略</strong>（分治法将问题分(divide)成一些<strong>小的问题然后递归求解</strong>，而治(conquer)的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。</p>
<h3 id="7-10-2-归并排序思想示意图1-基本思想"><a href="#7-10-2-归并排序思想示意图1-基本思想" class="headerlink" title="7.10.2 归并排序思想示意图1-基本思想:"></a>7.10.2 归并排序思想示意图1-基本思想:</h3><p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211128203157177.png" alt="image-20211128203157177"></p>
<p><strong>说明</strong>:</p>
<p>可以看到这种结构很像一棵完全二叉树，本文的归并排序我们采用递归去实现（也可采用迭代的方式去实现）。分阶段可以理解为就是递归拆分子序列的过程。</p>
<h3 id="7-10-3-归并排序思想示意图2-合并相邻有序子序列"><a href="#7-10-3-归并排序思想示意图2-合并相邻有序子序列" class="headerlink" title="7.10.3 归并排序思想示意图2-合并相邻有序子序列:"></a>7.10.3 归并排序思想示意图2-合并相邻有序子序列:</h3><p>再来看看治阶段，我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将[4,5,7,8]和[1,2,3,6]两个已经有序的子序列，合并为最终序列[1,2,3,4,5,6,7,8]，来看下实现步骤</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211128203300190.png" alt="image-20211128203300190"></p>
<h3 id="7-10-4-归并排序的应用实例"><a href="#7-10-4-归并排序的应用实例" class="headerlink" title="7.10.4 归并排序的应用实例:"></a>7.10.4 <strong>归并排序的应用实例</strong>:</h3><p>给你一个数组,  val arr = Array(9,8,7,6,5,4,3,2,1),  请使用归并排序完成排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.sort;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MergeSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>       <span class="hljs-comment">// int [] arr = &#123;3,6,2,1,7,5,8,4&#125;;</span><br><br><br>        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">80000000</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">80000000</span>;i++)&#123;<br>            arr[i] = (<span class="hljs-keyword">int</span>) (Math.random()*<span class="hljs-number">80000</span>);<br>        &#125;<br><br>        Date date1 = <span class="hljs-keyword">new</span> Date();<br>        SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        String dateStr1 = simpleDateFormat.format(date1);<br>        System.out.println(<span class="hljs-string">&quot;排序前的时间：&quot;</span>+dateStr1);<br><br>        <span class="hljs-keyword">int</span> [] temp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length];<br>        mergeSort(arr,<span class="hljs-number">0</span>,arr.length - <span class="hljs-number">1</span>,temp);<br>       <span class="hljs-comment">// System.out.println(&quot;arr=&quot;+ Arrays.toString(arr));</span><br><br>        Date date2 = <span class="hljs-keyword">new</span> Date();<br>        String dateStr2 = simpleDateFormat.format(date2);<br>        System.out.println(<span class="hljs-string">&quot;排序前的时间：&quot;</span>+dateStr2);         <span class="hljs-comment">// 8千万，耗时11秒</span><br><br>    &#125;<br><br>    <span class="hljs-comment">// 分+合方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right,<span class="hljs-keyword">int</span>[] temp)</span></span>&#123;<br><br>        <span class="hljs-keyword">if</span> (left &lt; right)&#123;<br>            <span class="hljs-keyword">int</span> mid = (left + right) / <span class="hljs-number">2</span>;   <span class="hljs-comment">// 中间索引</span><br>            <span class="hljs-comment">// 向左递归进行分解</span><br>            mergeSort(arr, left, mid, temp);<br>            <span class="hljs-comment">// 向右递归进行分解</span><br>            mergeSort(arr, mid + <span class="hljs-number">1</span>, right, temp);<br>            <span class="hljs-comment">// 合并</span><br>            merge(arr,left,mid,right,temp);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 合并的方法</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr   排序的原数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> left  左边有序序列的初始索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mid   中间索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> right 右边索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> temp  中转的数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> [] arr , <span class="hljs-keyword">int</span> left ,<span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> right, <span class="hljs-keyword">int</span>[] temp)</span></span>&#123;<br>        <span class="hljs-comment">//System.out.println(&quot;xxxx&quot;);</span><br>        <span class="hljs-keyword">int</span> i = left;       <span class="hljs-comment">// 初始化i，左边有序序列的初始索引</span><br>        <span class="hljs-keyword">int</span> j = mid + <span class="hljs-number">1</span>;    <span class="hljs-comment">// 初始化j，右边有序序列的初始化索引</span><br>        <span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;          <span class="hljs-comment">// 指向temp数组的当前索引</span><br><br>        <span class="hljs-comment">// (一) 将左右两边的数据按照规则放到temp中，直到两边的有序序列有一边处理完毕为止</span><br>        <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right)&#123;<br>            <span class="hljs-comment">// 如果左边的有序序列的当前元素小于等于右边的，则将左边的数据加到temp中</span><br>            <span class="hljs-comment">// 然后 t++，i++</span><br>            <span class="hljs-keyword">if</span> (arr[i] &lt; arr[j])&#123;<br>                temp[t] = arr[i];<br>                i += <span class="hljs-number">1</span>;<br>                t += <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">// 反之，则将右边的加到temp中</span><br>                temp[t] = arr[j];<br>                j += <span class="hljs-number">1</span>;<br>                t += <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// (二) 将剩余的一边数据全部依次填充到temp中</span><br>        <span class="hljs-comment">// 左边剩余</span><br>        <span class="hljs-keyword">while</span> (i &lt;= mid)&#123;<br>            temp[t] = arr[i];<br>            i += <span class="hljs-number">1</span>;<br>            t += <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 右边剩余</span><br>        <span class="hljs-keyword">while</span> (j &lt;= right)&#123;<br>            temp[t] = arr[j];<br>            j += <span class="hljs-number">1</span>;<br>            t += <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// (三) 将temp中的数据copy到arr中</span><br>        t = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> tempLeft = left;<br>        <span class="hljs-comment">// 并不是每次都是合并8个数据，最后一次才是8个数据</span><br>        <span class="hljs-comment">// 第一次合并tempLeft = 0 right = 1,tempLeft = 2 right = 3</span><br>        <span class="hljs-comment">// 最后一次tempLeft = 0 right = 7</span><br>       <span class="hljs-comment">// System.out.println(&quot;tempLeft=&quot;+tempLeft+&quot; right=&quot;+right);</span><br>        <span class="hljs-keyword">while</span> (tempLeft &lt;= right)&#123;<br>            arr[tempLeft] = temp[t];<br>            t += <span class="hljs-number">1</span>;<br>            tempLeft += <span class="hljs-number">1</span>;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="复盘归并排序代码"><a href="#复盘归并排序代码" class="headerlink" title="复盘归并排序代码"></a>复盘归并排序代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.sort.practice;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">// 归并排序</span><br><span class="hljs-comment">// 分而治之</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMergeSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> [] arr = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">9</span>&#125;;<br>        <span class="hljs-keyword">int</span> [] temp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length];<br>        mergeSort(arr,<span class="hljs-number">0</span>,arr.length - <span class="hljs-number">1</span>,temp);<br>        System.out.println(<span class="hljs-string">&quot;arr=&quot;</span> + Arrays.toString(arr));<br>    &#125;<br><br>    <span class="hljs-comment">// 分+合</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> [] arr ,<span class="hljs-keyword">int</span> left ,<span class="hljs-keyword">int</span> right,<span class="hljs-keyword">int</span> [] temp)</span></span>&#123;<br><br>        <span class="hljs-keyword">if</span> (left &lt; right)&#123;<br>            <span class="hljs-keyword">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>            <span class="hljs-comment">// 向左递归</span><br>            mergeSort(arr, left, mid, temp);<br>            <span class="hljs-comment">// 向右递归</span><br>            mergeSort(arr, mid + <span class="hljs-number">1</span>, right, temp);<br>            <span class="hljs-comment">// 合并</span><br>            merge(arr,left,mid,right,temp);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 合并</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> right, <span class="hljs-keyword">int</span>[] temp)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> i = left;       <span class="hljs-comment">// 初始化左边有序序列的索引i</span><br>        <span class="hljs-keyword">int</span> j = mid + <span class="hljs-number">1</span>;    <span class="hljs-comment">// 初始化中间索引</span><br>        <span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;          <span class="hljs-comment">// temp的下标</span><br><br>        <span class="hljs-comment">// 1.将有序序列的值依次加到temp中，直到一边的有序序列处理完毕为止</span><br>        <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right)&#123;<br>            <span class="hljs-comment">// 如果arr[i]的值比arr[j]的小，则将arr[i]加到temp中</span><br>            <span class="hljs-keyword">if</span> (arr[i] &lt; arr[j])&#123;<br>                temp[t] = arr[i];<br>                t += <span class="hljs-number">1</span>;<br>                i += <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-comment">// 否则将arr[j]加到temp中</span><br>                temp[t] = arr[j];<br>                t += <span class="hljs-number">1</span>;<br>                j += <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 2.将剩余的一边的有序序列依次加到temp中</span><br>        <span class="hljs-comment">// 左边剩余</span><br>        <span class="hljs-keyword">while</span> (i &lt;= mid)&#123;<br>            temp[t] = arr[i];<br>            t += <span class="hljs-number">1</span>;<br>            i += <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 右边剩余</span><br>        <span class="hljs-keyword">while</span> (j &lt;= right)&#123;<br>            temp[t] = arr[j];<br>            t += <span class="hljs-number">1</span>;<br>            j += <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 3.将temp数组copy到arr</span><br>        t = <span class="hljs-number">0</span>;      <span class="hljs-comment">// 从第一个开始</span><br>        <span class="hljs-keyword">int</span> tempLeft = left;    <span class="hljs-comment">// 辅助变量</span><br><br>        <span class="hljs-keyword">while</span> (tempLeft &lt;= right)&#123;<br>            arr[tempLeft] = temp[t];<br>            t += <span class="hljs-number">1</span>;<br>            tempLeft += <span class="hljs-number">1</span>;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="7-11-基数排序"><a href="#7-11-基数排序" class="headerlink" title="7.11 基数排序"></a>7.11 基数排序</h2><h3 id="7-11-1-基数排序-桶排序-介绍"><a href="#7-11-1-基数排序-桶排序-介绍" class="headerlink" title="7.11.1 基数排序(桶排序)介绍"></a>7.11.1 基数排序(桶排序)介绍</h3><ol>
<li>基数排序（radix sort）属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）或bin sort，顾名思义，它是通过键值的各个位的值，将要排序的元素分配至某些“桶”中，达到排序的作用</li>
<li>基数排序法是属于稳定性的排序，基数排序法的是效率高的稳定性排序法</li>
<li>基数排序(Radix Sort)是桶排序的扩展</li>
<li>基数排序是1887年赫尔曼·何乐礼发明的。它是这样实现的：将整数按位数切割成不同的数字，然后按每个位数分别比较。</li>
</ol>
<h3 id="7-11-2-基数排序基本思想"><a href="#7-11-2-基数排序基本思想" class="headerlink" title="7.11.2 基数排序基本思想"></a>7.11.2 基数排序基本思想</h3><ol>
<li>将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。</li>
<li>这样说明，比较难理解，下面我们看一个图文解释，理解基数排序的步骤</li>
</ol>
<h3 id="7-11-3-基数排序图文说明"><a href="#7-11-3-基数排序图文说明" class="headerlink" title="7.11.3 基数排序图文说明"></a>7.11.3 基数排序图文说明</h3><p>将数组 {53, 3, 542, 748, 14, 214 } 使用基数排序, 进行升序排序</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211129171212514.png" alt="image-20211129171212514"></p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211129171229440.png" alt="image-20211129171229440"></p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211129171309608.png" alt="image-20211129171309608"></p>
<h3 id="7-11-4-基数排序代码实现"><a href="#7-11-4-基数排序代码实现" class="headerlink" title="7.11.4 基数排序代码实现"></a>7.11.4 <strong>基数排序代码实现</strong></h3><p> <strong>要求：</strong>将数组 {53, 3, 542, 748, 14, 214 } 使用基数排序, 进行升序排序</p>
<p><strong>思路分析：</strong>前面的图文已经讲明确</p>
<p><strong>代码实现：</strong>看老师演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.sort;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RadixSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//int [] arr =  &#123;53,3,542,748,14,214&#125;;</span><br><br>        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">8000000</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8000000</span>;i++)&#123;<br>            arr[i] = (<span class="hljs-keyword">int</span>) (Math.random()*<span class="hljs-number">80000</span>);<br>        &#125;<br><br>        Date date1 = <span class="hljs-keyword">new</span> Date();<br>        SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        String dateStr1 = simpleDateFormat.format(date1);<br>        System.out.println(<span class="hljs-string">&quot;排序前的时间：&quot;</span>+dateStr1);<br><br>        radixSort(arr);<br><br>        Date date2 = <span class="hljs-keyword">new</span> Date();<br>        String dateStr2 = simpleDateFormat.format(date2);<br>        System.out.println(<span class="hljs-string">&quot;排序前的时间：&quot;</span>+dateStr2);         <span class="hljs-comment">// 8百万，耗时1~2秒</span><br><br>    &#125;<br>    <span class="hljs-comment">// 基数排序方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">radixSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>        <span class="hljs-comment">// 根据前面的推到过程，我们可以得到最终的基数排序代码</span><br>        <span class="hljs-comment">// 1.得到数组中最大的数的位数</span><br>        <span class="hljs-keyword">int</span> max = arr[<span class="hljs-number">0</span>];   <span class="hljs-comment">// 假设arr[0]为最大的</span><br><br>        <span class="hljs-comment">// 找出数组中最大的元素</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &gt; arr[<span class="hljs-number">0</span>])&#123;<br>                max = arr[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 获取最大元素是几位数</span><br>        <span class="hljs-keyword">int</span> maxLength = (max + <span class="hljs-string">&quot;&quot;</span>).length();<br><br>        <span class="hljs-comment">// 定义一个二维数组，表示10个捅，每个捅就是一个一维数组</span><br>        <span class="hljs-comment">// 1.二维数组包含10个一维数组</span><br>        <span class="hljs-comment">// 2.为了防止在放入数的时候，数据溢出，则每个一维数组（捅），大小定义为arr.length</span><br>        <span class="hljs-comment">// 3.明确，基数排序是使用空间换时间的经典算法</span><br><br>        <span class="hljs-comment">// 十个捅</span><br>        <span class="hljs-keyword">int</span>[][] bucket = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>][arr.length];<br>        <span class="hljs-comment">// 每个捅中的数据个数 bucketElementCounts[0] 记录的就是bucket[0]捅放入的数据</span><br>        <span class="hljs-keyword">int</span>[] bucketElementCounts = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br><br>        <span class="hljs-comment">// 这里使用循环代码处理</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, n = <span class="hljs-number">1</span>; i &lt; maxLength; i++, n *= <span class="hljs-number">10</span>)&#123;<br><br>            <span class="hljs-comment">// 第i+1轮，对应的位数，第一次是个位，第二次是十位....</span><br>            <span class="hljs-comment">// 往捅里面放数据</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length; j++)&#123;<br>                <span class="hljs-comment">// 取到个位数</span><br>                <span class="hljs-keyword">int</span> digitOfElement = arr[j] /n % <span class="hljs-number">10</span>;<br>                <span class="hljs-comment">// 放到对应的捅中</span><br>                bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];<br>                bucketElementCounts[digitOfElement]++;<br>            &#125;<br><br>            <span class="hljs-comment">// 从捅里取出数据到arr中</span><br>            <span class="hljs-comment">// 遍历每个捅</span><br>            <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 辅助变量，辅助遍历数组，取出数据</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; bucketElementCounts.length; k++)&#123;<br>                <span class="hljs-comment">// 判断捅中是否有元素</span><br>                <span class="hljs-keyword">if</span> (bucketElementCounts[k] != <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-comment">// 遍历捅中的每个数据，就是bucketElementCounts[k]的个数</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>; l &lt; bucketElementCounts[k]; l++)&#123;<br>                        arr[index++] = bucket[k][l];<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">// 置空 bucketElementCounts[k]，否则会报ArrayIndexOutOfBoundsException的错</span><br>                bucketElementCounts[k] = <span class="hljs-number">0</span>;<br>            &#125;<br><br>           <span class="hljs-comment">// System.out.println(&quot;第&quot;+(i+1)+&quot;轮基数排序结果为：arr=&quot;+ Arrays.toString(arr));</span><br>        &#125;<br><br><br>       <span class="hljs-comment">/* // 十个捅</span><br><span class="hljs-comment">        int[][] bucket = new int[10][arr.length];</span><br><span class="hljs-comment">        // 每个捅中的数据个数</span><br><span class="hljs-comment">        int[] bucketElementCounts = new int[10];</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 第1轮，个位数</span><br><span class="hljs-comment">        // 往捅里面放数据</span><br><span class="hljs-comment">        for (int j = 0; j &lt; arr.length; j++)&#123;</span><br><span class="hljs-comment">            // 取到个位数</span><br><span class="hljs-comment">            int digitOfElement = arr[j] % 10;</span><br><span class="hljs-comment">            bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];</span><br><span class="hljs-comment">            bucketElementCounts[digitOfElement]++;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 从捅里取出数据到arr中</span><br><span class="hljs-comment">        // 遍历每个捅</span><br><span class="hljs-comment">        int index = 0;  // 辅助变量，辅助遍历数组，取出数据</span><br><span class="hljs-comment">        for (int k = 0; k &lt; bucketElementCounts.length; k++)&#123;</span><br><span class="hljs-comment">            // 判断捅中是否有元素</span><br><span class="hljs-comment">            if (bucketElementCounts[k] != 0)&#123;</span><br><span class="hljs-comment">                // 遍历捅中的每个数据，就是bucketElementCounts[k]的个数</span><br><span class="hljs-comment">                for (int l = 0; l &lt; bucketElementCounts[k]; l++)&#123;</span><br><span class="hljs-comment">                    arr[index++] = bucket[k][l];</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            // 置空 bucketElementCounts[k]，否则会报ArrayIndexOutOfBoundsException的错</span><br><span class="hljs-comment">            bucketElementCounts[k] = 0;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        System.out.println(&quot;第1轮基数排序结果为：arr=&quot;+ Arrays.toString(arr));</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 第2轮，十位数</span><br><span class="hljs-comment">        // 往捅里面放数据</span><br><span class="hljs-comment">        for (int j = 0; j &lt; arr.length; j++)&#123;</span><br><span class="hljs-comment">            // 取到个位数</span><br><span class="hljs-comment">            int digitOfElement = arr[j] /10 % 10;</span><br><span class="hljs-comment">            bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];</span><br><span class="hljs-comment">            bucketElementCounts[digitOfElement]++;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 从捅里取出数据到arr中</span><br><span class="hljs-comment">        // 遍历每个捅</span><br><span class="hljs-comment">        index = 0;  // 辅助变量，辅助遍历数组，取出数据</span><br><span class="hljs-comment">        for (int k = 0; k &lt; bucketElementCounts.length; k++)&#123;</span><br><span class="hljs-comment">            // 判断捅中是否有元素</span><br><span class="hljs-comment">            if (bucketElementCounts[k] != 0)&#123;</span><br><span class="hljs-comment">                // 遍历捅中的每个数据，就是bucketElementCounts[k]的个数</span><br><span class="hljs-comment">                for (int l = 0; l &lt; bucketElementCounts[k]; l++)&#123;</span><br><span class="hljs-comment">                    arr[index++] = bucket[k][l];</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            // 置空 bucketElementCounts[k]，否则会报ArrayIndexOutOfBoundsException的错</span><br><span class="hljs-comment">            bucketElementCounts[k] = 0;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        System.out.println(&quot;第2轮基数排序结果为：arr=&quot;+ Arrays.toString(arr));</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 第3轮，百位数</span><br><span class="hljs-comment">        // 往捅里面放数据</span><br><span class="hljs-comment">        for (int j = 0; j &lt; arr.length; j++)&#123;</span><br><span class="hljs-comment">            // 取到个位数</span><br><span class="hljs-comment">            int digitOfElement = arr[j] /100 % 10;</span><br><span class="hljs-comment">            bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];</span><br><span class="hljs-comment">            bucketElementCounts[digitOfElement]++;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 从捅里取出数据到arr中</span><br><span class="hljs-comment">        // 遍历每个捅</span><br><span class="hljs-comment">        index = 0;  // 辅助变量，辅助遍历数组，取出数据</span><br><span class="hljs-comment">        for (int k = 0; k &lt; bucketElementCounts.length; k++)&#123;</span><br><span class="hljs-comment">            // 判断捅中是否有元素</span><br><span class="hljs-comment">            if (bucketElementCounts[k] != 0)&#123;</span><br><span class="hljs-comment">                // 遍历捅中的每个数据，就是bucketElementCounts[k]的个数</span><br><span class="hljs-comment">                for (int l = 0; l &lt; bucketElementCounts[k]; l++)&#123;</span><br><span class="hljs-comment">                    arr[index++] = bucket[k][l];</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            // 置空 bucketElementCounts[k]，否则会报ArrayIndexOutOfBoundsException的错</span><br><span class="hljs-comment">            bucketElementCounts[k] = 0;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        System.out.println(&quot;第3轮基数排序结果为：arr=&quot;+ Arrays.toString(arr));*/</span><br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="7-11-5-基数排序的说明"><a href="#7-11-5-基数排序的说明" class="headerlink" title="7.11.5 基数排序的说明:"></a>7.11.5 基数排序的说明:</h3><ol>
<li>基数排序是对传统桶排序的扩展，速度很快.</li>
<li>基数排序是经典的空间换时间的方式，占用内存很大, 当对海量数据排序时，容易造成 OutOfMemoryError 。</li>
<li>基数排序时稳定的。[注:假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，r[i]=r[j]，且r[i]在r[j]之前，而在排序后的序列中，r[i]仍在r[j]之前，则称这种排序算法是稳定的；否则称为不稳定的</li>
<li>有负数的数组，我们不用基数排序来进行排序,如果要支持负数，参考: <strong><a href="https://code.i-harness.com/zh-CN/q/e98fa9">https://code.i-harness.com/zh-CN/q/e98fa9</a></strong></li>
</ol>
<h3 id="复盘基数排序代码"><a href="#复盘基数排序代码" class="headerlink" title="复盘基数排序代码"></a>复盘基数排序代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.sort.practice;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">// 基数排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestRadixSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">53</span>, <span class="hljs-number">3</span>, <span class="hljs-number">542</span>, <span class="hljs-number">748</span>, <span class="hljs-number">14</span>, <span class="hljs-number">214</span>&#125;;<br>        radixSort(arr);<br>        System.out.println(<span class="hljs-string">&quot;基数排序的结果为：&quot;</span>+ Arrays.toString(arr));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">radixSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>        <span class="hljs-comment">// 假设第一个为最大的</span><br>        <span class="hljs-keyword">int</span> max = arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-comment">// 找到最大的元素</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &gt; arr[<span class="hljs-number">0</span>])&#123;<br>                max = arr[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 最大的位数</span><br>        <span class="hljs-keyword">int</span> maxLength = (max + <span class="hljs-string">&quot;&quot;</span>).length();<br>        <span class="hljs-comment">// 10个捅</span><br>        <span class="hljs-keyword">int</span>[][] bucket = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>][arr.length];<br>        <span class="hljs-comment">// 每个捅记录的数据</span><br>        <span class="hljs-keyword">int</span>[] bucketElementCounts = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, n = <span class="hljs-number">1</span>; i &lt; maxLength; i++, n *= <span class="hljs-number">10</span>)&#123;<br><br>            <span class="hljs-comment">// 遍历数组往捅里放数据</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length; j++)&#123;<br>                <span class="hljs-comment">// 取到个位数，找到对应的捅</span><br>                <span class="hljs-keyword">int</span> digitElement = arr[j] /n % <span class="hljs-number">10</span>;<br>                <span class="hljs-comment">// 放数据</span><br>                bucket[digitElement][bucketElementCounts[digitElement]] = arr[j];<br>                bucketElementCounts[digitElement]++;<br>            &#125;<br><br>            <span class="hljs-comment">// 从捅里取出数据</span><br>            <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 辅助变量，辅助将数据放到arr数组中</span><br>            <span class="hljs-comment">// 遍历每个捅</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; bucketElementCounts.length; k++)&#123;<br>                <span class="hljs-comment">// 判断捅里是否有数据</span><br>                <span class="hljs-keyword">if</span> (bucketElementCounts[k] != <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-comment">// 遍历捅里的每一个数据</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>; l &lt; bucketElementCounts[k]; l++)&#123;<br>                        <span class="hljs-comment">// 这里记得index++ 否则会出错</span><br>                        arr[index++] = bucket[k][l];<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">// 将bucketElementCounts[k]置空</span><br>                bucketElementCounts[k] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="7-12-常用排序算法总结和对比"><a href="#7-12-常用排序算法总结和对比" class="headerlink" title="7.12 常用排序算法总结和对比"></a>7.12 常用排序算法总结和对比</h2><h3 id="7-12-1-一张排序算法的比较图"><a href="#7-12-1-一张排序算法的比较图" class="headerlink" title="7.12.1 一张排序算法的比较图"></a>7.12.1 一张排序算法的比较图</h3><p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211130110255900.png" alt="image-20211130110255900"></p>
<h3 id="7-12-2-相关术语解释"><a href="#7-12-2-相关术语解释" class="headerlink" title="7.12.2 相关术语解释"></a>7.12.2 相关术语解释</h3><ol>
<li><strong>稳定</strong>：如果a原本在b前面，而a=b，排序之后a仍然在b的前面；</li>
<li><strong>不稳定</strong>：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面；</li>
<li><strong>内排序</strong>：所有排序操作都在内存中完成；</li>
<li><strong>外排序</strong>：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</li>
<li><strong>时间复杂度：</strong> 一个算法执行所耗费的时间。</li>
<li><strong>空间复杂度</strong>：运行完一个程序所需内存的大小。</li>
<li><strong>n:</strong> 数据规模</li>
<li><strong>k:</strong> “桶”的个数</li>
<li><strong>In-place:</strong>  不占用额外内存</li>
<li><strong>Out-place:</strong> 占用额外内存</li>
</ol>
<h2 id="7-13-复盘以上所学的排序代码"><a href="#7-13-复盘以上所学的排序代码" class="headerlink" title="7.13 复盘以上所学的排序代码"></a>7.13 复盘以上所学的排序代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.sort.practice;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">// 回顾常见的算法</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReviewAllSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> [] bubbleArr = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">20</span>&#125;;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">101</span>,<span class="hljs-number">34</span>,<span class="hljs-number">119</span>,<span class="hljs-number">1</span>&#125;;<br>       <span class="hljs-comment">/* bubbleSort(bubbleArr);</span><br><span class="hljs-comment">        selectSort(arr);</span><br><span class="hljs-comment">        insertSort(arr);</span><br><span class="hljs-comment">        shellSort(arr);</span><br><span class="hljs-comment">        shellSort2(arr);</span><br><span class="hljs-comment">        quickSort(arr,0,arr.length - 1);</span><br><span class="hljs-comment">        int[] temp = new int[arr.length];</span><br><span class="hljs-comment">        margeSort(arr,0,arr.length - 1,temp);</span><br><span class="hljs-comment">        System.out.println(&quot;归并排序的结果为：&quot;+ Arrays.toString(arr));*/</span><br>       radixSort(arr);<br><br>    &#125;<br><br>    <span class="hljs-comment">// 基数排序（捅排序）</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">radixSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br><br>        <span class="hljs-keyword">int</span> max = arr[<span class="hljs-number">0</span>];   <span class="hljs-comment">// 假设第一位为最大的位数</span><br>        <span class="hljs-comment">// 找到最大的数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &gt; max)&#123;<br>                max = arr[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 获取最大位数</span><br>        <span class="hljs-keyword">int</span> maxLength = (max + <span class="hljs-string">&quot;&quot;</span>).length();<br><br>        <span class="hljs-comment">// 定义一个二维数组，模拟十个捅</span><br>        <span class="hljs-keyword">int</span>[][] bucket = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>][arr.length];<br>        <span class="hljs-comment">// 定义一个一维数组，记录每个捅的数据个数</span><br>        <span class="hljs-keyword">int</span>[] bucketElementCounts = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, n = <span class="hljs-number">1</span>; i &lt; maxLength; i++, n *= <span class="hljs-number">10</span>)&#123;<br>            <span class="hljs-comment">// 第一轮，个位数</span><br>            <span class="hljs-comment">// 遍历数组，拿到个位数，放到对应的捅中</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length; j++)&#123;<br>                <span class="hljs-comment">// 取到个位数</span><br>                <span class="hljs-keyword">int</span> digitElement = arr[j] / n % <span class="hljs-number">10</span>;<br>                bucket[digitElement][bucketElementCounts[digitElement]] = arr[j];<br>                bucketElementCounts[digitElement]++;<br>            &#125;<br><br>            <span class="hljs-comment">// 从捅里拿出数据</span><br>            <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;      <span class="hljs-comment">// 指向捅的索引，方便从桶里取出数据</span><br>            <span class="hljs-comment">// 遍历每个捅</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; bucketElementCounts.length; k++)&#123;<br>                <span class="hljs-comment">// 判断捅里是否有数据</span><br>                <span class="hljs-keyword">if</span> (bucketElementCounts[k] != <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-comment">// 遍历捅里面的每一个数据，并放到arr中</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>; l &lt;bucketElementCounts[k]; l++)&#123;<br>                        arr[index++] = bucket[k][l];<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">// 将捅置空</span><br>                bucketElementCounts[k] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br><br><br>        System.out.println(<span class="hljs-string">&quot;基数排序结果为：&quot;</span>+Arrays.toString(arr));<br><br>    &#125;<br><br>    <span class="hljs-comment">// 归并排序</span><br>    <span class="hljs-comment">// 分+合</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">margeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right,<span class="hljs-keyword">int</span>[] temp)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (left &lt; right)&#123;<br>            <span class="hljs-keyword">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>            <span class="hljs-comment">// 向左拆分</span><br>            margeSort(arr, left, mid, temp);<br>            <span class="hljs-comment">// 向右拆分</span><br>            margeSort(arr, mid + <span class="hljs-number">1</span>, right, temp);<br>            <span class="hljs-comment">// 合并</span><br>            marge(arr,left,mid,right,temp);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 归并排序（分而治之）</span><br>    <span class="hljs-comment">// 合并</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">marge</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[]arr , <span class="hljs-keyword">int</span> left ,<span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> right, <span class="hljs-keyword">int</span>[] temp)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> i = left;           <span class="hljs-comment">// 初始化左边有序序列的初始索引</span><br>        <span class="hljs-keyword">int</span> j = mid + <span class="hljs-number">1</span>;        <span class="hljs-comment">// 初始化右边有序序列的索引</span><br>        <span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;              <span class="hljs-comment">// temp的索引</span><br><br>        <span class="hljs-comment">// 一.将arr的数据按照规则依次放到temp中，直到一边处理完毕为止</span><br>        <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right)&#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &lt; arr[j])&#123;<br>                temp[t] = arr[i];<br>                t += <span class="hljs-number">1</span>;<br>                i += <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                temp[t] = arr[j];<br>                t += <span class="hljs-number">1</span>;<br>                j += <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 二.将剩余的一边的数据依次放到temp中</span><br>        <span class="hljs-comment">// 左边剩余</span><br>        <span class="hljs-keyword">if</span> (i &lt;= mid)&#123;<br>            temp[t] = arr[i];<br>            t += <span class="hljs-number">1</span>;<br>            i += <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 右边剩余</span><br>        <span class="hljs-keyword">if</span> (j &lt;= right)&#123;<br>            temp[t] = arr[j];<br>            t += <span class="hljs-number">1</span>;<br>            j += <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 3.将temp的数据copy回到arr中</span><br>        t = <span class="hljs-number">0</span>;                  <span class="hljs-comment">// 从temp的第一个开始</span><br>        <span class="hljs-keyword">int</span> tempLeft = left;    <span class="hljs-comment">// 定义一个辅助变量，方便从temp中取出数据放到arr中</span><br>        <span class="hljs-keyword">while</span> (tempLeft &lt;= right )&#123;<br>            arr[tempLeft] = temp[t];<br>            tempLeft += <span class="hljs-number">1</span>;<br>            t += <span class="hljs-number">1</span>;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 快速排序: 中轴值pivot</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[]arr ,<span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> l = left;                       <span class="hljs-comment">// 初始化左边的下标</span><br>        <span class="hljs-keyword">int</span> r = right;                      <span class="hljs-comment">// 初始化右边的下标</span><br>        <span class="hljs-keyword">int</span> pivot = arr[(left + right) / <span class="hljs-number">2</span>];     <span class="hljs-comment">// 中轴值</span><br>        <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 以pivot为中轴，大的放在右边，小的放在左边</span><br>        <span class="hljs-keyword">while</span> (l &lt; r)&#123;<br>            <span class="hljs-comment">// 在左边找到比pivot大的才退出循环</span><br>            <span class="hljs-keyword">while</span> (arr[l] &lt; pivot)&#123;<br>                l += <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-comment">// 在pivot右边找到比pivot小的才退出循环</span><br>            <span class="hljs-keyword">while</span> (arr[r] &gt; pivot)&#123;<br>                r -= <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-comment">// 如果下标l大于等于r了，说明已经全部找到了，退出</span><br>            <span class="hljs-keyword">if</span> (l &gt;= r)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 找到之后就交换</span><br>            temp = arr[l];<br>            arr[l] = arr[r];<br>            arr[r] = temp;<br><br>            <span class="hljs-comment">// 交换完之后，如果一边有剩余，多的一边往对应的方向移动</span><br>            <span class="hljs-keyword">if</span> (arr[l] == pivot)&#123;<br>                r -= <span class="hljs-number">1</span>;     <span class="hljs-comment">// 前移</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (arr[r] == pivot)&#123;<br>                l += <span class="hljs-number">1</span>;     <span class="hljs-comment">// 后移</span><br>            &#125;<br><br>        &#125;<br>        <span class="hljs-comment">// 如果l == r，则需要移动l和r，否则右递归不正确</span><br>        <span class="hljs-keyword">if</span> (l == r)&#123;<br>            l += <span class="hljs-number">1</span>;<br>            r -= <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 退出循环后，左右两边的值都已经按照规则归为，但是还不是有序的</span><br>        <span class="hljs-comment">// 左递归</span><br>        <span class="hljs-keyword">if</span> (left &lt; r)&#123;<br>            quickSort(arr, left, r);<br>        &#125;<br>        <span class="hljs-comment">// 右递归</span><br>        <span class="hljs-keyword">if</span> (right &gt; l)&#123;<br>            quickSort(arr, l, right);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;快速排序的结果为：&quot;</span>+Arrays.toString(arr));<br>    &#125;<br><br>    <span class="hljs-comment">// 希尔排序：除2，缩小排量</span><br>    <span class="hljs-comment">// 方法一：交换法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;   <span class="hljs-comment">// 辅助变量</span><br>        <span class="hljs-comment">// 第几轮</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> gap = arr.length / <span class="hljs-number">2</span>; gap &gt; <span class="hljs-number">0</span>; gap /= <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-comment">// 遍历每组（分组），步长为gap</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = gap; i &lt; arr.length; i++)&#123;<br>                <span class="hljs-comment">// 遍历每组的所有数据</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i - gap; j &gt;= <span class="hljs-number">0</span>; j -= gap)&#123;<br>                    <span class="hljs-comment">// 比较两个数</span><br>                    <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + gap])&#123;<br>                        <span class="hljs-comment">// 交换</span><br>                        temp = arr[j];<br>                        arr[j] = arr[j+gap];<br>                        arr[j+gap] = temp;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;希尔排序方法一（交换法）的结果为：&quot;</span>+Arrays.toString(arr));<br>    &#125;<br><br>    <span class="hljs-comment">// 希尔排序</span><br>    <span class="hljs-comment">// 方法二：移位法（直接插入）</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellSort2</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>        <span class="hljs-comment">// 第几轮</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> gap = arr.length / <span class="hljs-number">2</span>; gap &gt; <span class="hljs-number">0</span>; gap /= <span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-comment">// 分组</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = gap; i &lt; arr.length; i++)&#123;<br>                <span class="hljs-keyword">int</span> j = i;          <span class="hljs-comment">// 要插入的下标</span><br>                <span class="hljs-keyword">int</span> temp = arr[j];  <span class="hljs-comment">// 要插入的值</span><br>                <span class="hljs-comment">// 遍历每个组所有的数据，找到要插入的位置</span><br>                <span class="hljs-keyword">while</span> (j - gap &gt;= <span class="hljs-number">0</span> &amp;&amp; temp &lt; arr[j-gap])&#123;<br>                    arr[j] = arr[j - gap];<br>                    j -= gap;<br>                &#125;<br>                <span class="hljs-comment">// 退出之后就找到了，交换</span><br>                arr[j] = temp;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;希尔排序方法二；（移位法即直接插入）结果为：&quot;</span>+Arrays.toString(arr));<br>    &#125;<br><br>    <span class="hljs-comment">// 插入排序:一个有序表，一个无序表，将无序表中的第一个插入到有序中相对应的位置</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>        <span class="hljs-comment">// 第i轮，从下标为1（无序表第一个）开始遍历</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; arr.length; i++)&#123;<br>            <span class="hljs-comment">// 要插入的值</span><br>            <span class="hljs-keyword">int</span> insertVal = arr[i];<br>            <span class="hljs-comment">// 要插入地方的下标（索引）</span><br>            <span class="hljs-keyword">int</span> insertIndex = i - <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 循环遍历比较有序表和无序表的大小,先找到位置</span><br>            <span class="hljs-keyword">while</span> (insertIndex &gt;= <span class="hljs-number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex])&#123;<br>                arr[insertIndex + <span class="hljs-number">1</span>] = arr[insertIndex];<br>                <span class="hljs-comment">// 索引向前移动</span><br>                insertIndex--;<br>            &#125;<br>            <span class="hljs-comment">// 退出循环后，已找到位置,退出时insertIndex为-1</span><br>            arr[insertIndex + <span class="hljs-number">1</span>] = insertVal;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;插入排序结果为：&quot;</span>+Arrays.toString(arr));<br>    &#125;<br><br>    <span class="hljs-comment">// 选择排序：第一次在arr.length - 1中找到最小的，并放在第一个</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> min = <span class="hljs-number">0</span>;   <span class="hljs-comment">// 拿到最小值</span><br>        <span class="hljs-keyword">int</span> minIndex = <span class="hljs-number">0</span>;   <span class="hljs-comment">// 最小值的索引</span><br>        <span class="hljs-comment">// 第i轮</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++)&#123;<br>            min = arr[i];   <span class="hljs-comment">// 假设第一个为最小</span><br>            minIndex = i;   <span class="hljs-comment">// 最小索引为i</span><br>            <span class="hljs-comment">// 遍历数组，找出最小值，从第二个开始比较</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; arr.length; j++)&#123;<br><br>                <span class="hljs-keyword">if</span> (min &gt; arr[j])&#123;<br>                    <span class="hljs-comment">// 记录最小值的索引和值</span><br>                    min = arr[j];<br>                    minIndex = j;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 交换，优化，如果索引不相等再交换</span><br>            <span class="hljs-keyword">if</span> (minIndex != i)&#123;<br>                arr[minIndex] = arr[i];<br>                arr[i] = min;<br>            &#125;<br><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;选择排序结果为：&quot;</span>+Arrays.toString(arr));<br><br>    &#125;<br><br>    <span class="hljs-comment">// 冒泡，找到最大的放到最后一个</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>        <span class="hljs-comment">// 定义索引，方便遍历</span><br>        <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 优化，标志是否有交换</span><br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-comment">// 第i大轮</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++)&#123;<br>            <span class="hljs-comment">// 第i大论里面的第j小轮，既是比较两个数，找出最大的一个放到最后</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length - i - <span class="hljs-number">1</span>; j++)&#123;<br>                <span class="hljs-comment">// 如果前一个比后一个大，则交换</span><br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j+<span class="hljs-number">1</span>])&#123;<br>                    flag = <span class="hljs-keyword">true</span>;<br>                    temp = arr[j];<br>                    arr[j] = arr[j+<span class="hljs-number">1</span>];<br>                    arr[j+<span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 如果flag == false,则没有交换，直接退出循环</span><br>            <span class="hljs-keyword">if</span> (!flag)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                flag = <span class="hljs-keyword">false</span>;<br>            &#125;<br><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;冒泡排序结果为：&quot;</span>+ Arrays.toString(arr));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="第8章-查找算法"><a href="#第8章-查找算法" class="headerlink" title="第8章 查找算法"></a>第8章 查找算法</h1><h2 id="8-1-查找算法介绍"><a href="#8-1-查找算法介绍" class="headerlink" title="8.1 查找算法介绍"></a>8.1 查找算法介绍</h2><p> 在java中，我们常用的查找有四种:</p>
<ol>
<li> 顺序(线性)查找</li>
<li> 二分查找/折半查找</li>
<li>  插值查找</li>
<li>  斐波那契查找</li>
</ol>
<h2 id="8-2-线性查找算法"><a href="#8-2-线性查找算法" class="headerlink" title="8.2 线性查找算法"></a>8.2 线性查找算法</h2><p>有一个数列 {1,8, 10, 89, 1000, 1234}，判断数列中是否包含此名称【顺序查找】要求:如果找到了，就提示找到，并给出下标值。</p>
<p>思路：如果查找到全部符合条件的值。[思路分析]</p>
<p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.search;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SeqSearch</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> arr[] = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">53</span>,<span class="hljs-number">23</span>,<span class="hljs-number">64</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,-<span class="hljs-number">1</span>&#125;;		<span class="hljs-comment">// 没有顺序的数组</span><br>        <span class="hljs-keyword">int</span> index = seqSearch(arr, <span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">if</span> (index == -<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;没有找到&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;找到，下标为：&quot;</span>+index);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这里我们实现的线性查找是找到一个满足条件的值，就返回</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">seqSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[] ,<span class="hljs-keyword">int</span> value)</span></span>&#123;<br>        <span class="hljs-comment">// 线性查找是逐一对比，发现有相同的值，就返回下标</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;<br>            <span class="hljs-keyword">if</span> (arr[i] == value)&#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="8-3-二分查找算法"><a href="#8-3-二分查找算法" class="headerlink" title="8.3 二分查找算法"></a>8.3 二分查找算法</h2><h3 id="8-3-1-二分查找："><a href="#8-3-1-二分查找：" class="headerlink" title="8.3.1 二分查找："></a>8.3.1 二分查找：</h3><p>请对一个有序数组进行二分查找 {1,8, 10, 89, 1000, 1234} ，输入一个数看看该数组是否存在此数，并且求出下标，如果没有就提示”没有这个数”。</p>
<h3 id="8-3-2-二分查找算法的思路："><a href="#8-3-2-二分查找算法的思路：" class="headerlink" title="8.3.2 二分查找算法的思路："></a>8.3.2 二分查找算法的思路：</h3><p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211204174925493.png" alt="image-20211204174925493"></p>
<h3 id="8-3-3-二分查找的代码"><a href="#8-3-3-二分查找的代码" class="headerlink" title="8.3.3 二分查找的代码"></a>8.3.3 二分查找的代码</h3><p>说明：增加了找到所有满足田条件的元素下标：</p>
<p>课后思考题： {1,8, 10, 89, 1000, 1000，1234} 当一个有序数组中，有多个相同的数值时，如何将所有的数值都查找到，比如这里的1000。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.search;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">// 注意：使用二分查找的前提是该数组是有序的</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinarySearch</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> arr[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>,<span class="hljs-number">89</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">1234</span>&#125;;<br>        <span class="hljs-comment">/*int indexVal = binarySearch(arr, 0, arr.length - 1, 123);</span><br><span class="hljs-comment">        System.out.println(&quot;indexVal = &quot; + indexVal);*/</span><br>        List&lt;Integer&gt; list = binarySearch2(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>, <span class="hljs-number">1000</span>);<br>        System.out.println(<span class="hljs-string">&quot;list = &quot;</span>+ list);<br>    &#125;<br><br>    <span class="hljs-comment">// 二分查找</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr       数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> left      左边的索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> right     右边的索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> findVal   要查找的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>          如果找到就返回下标，如果没有找到就返回-1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr,<span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right, <span class="hljs-keyword">int</span> findVal)</span></span>&#123;<br>        <span class="hljs-comment">// 当left &gt; right时，说明没有找到，退出递归</span><br>        <span class="hljs-keyword">if</span> (left &gt; right)&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> midVal = arr[mid];<br>        <span class="hljs-keyword">if</span> (findVal &gt; midVal)&#123;      <span class="hljs-comment">// 向右递归</span><br>            <span class="hljs-keyword">return</span> binarySearch(arr, mid + <span class="hljs-number">1</span>, right, findVal);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findVal &lt; midVal)&#123;   <span class="hljs-comment">// 向左递归</span><br>            <span class="hljs-keyword">return</span> binarySearch(arr, left, mid - <span class="hljs-number">1</span>, findVal);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 完成一个课后思考题</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 课后思考题： &#123;1,8, 10, 89, 1000, 1000，1234&#125; 当一个有序数组中，</span><br><span class="hljs-comment">     * 有多个相同的数值时，如何将所有的数值都查找到，比如这里的 1000.</span><br><span class="hljs-comment">     * 思路分析：</span><br><span class="hljs-comment">     * 1.在找到temp索引值，不要马上返回</span><br><span class="hljs-comment">     * 2.向mid索引值的左边扫描，将所有满足1000的元素的下标，加入到集合ArrayList中</span><br><span class="hljs-comment">     * 3.向mid索引值的右边扫描，将所有满足1000的元素的下标，加入到集合ArrayList中</span><br><span class="hljs-comment">     * 4.将ArrayList返回</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> left</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> right</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> findVal</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Integer&gt; <span class="hljs-title">binarySearch2</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr,<span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right, <span class="hljs-keyword">int</span> findVal)</span></span>&#123;<br>        <span class="hljs-comment">// 当left &gt; right时，说明没有找到，退出递归</span><br>        <span class="hljs-keyword">if</span> (left &gt; right)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> midVal = arr[mid];<br>        <span class="hljs-keyword">if</span> (findVal &gt; midVal)&#123;      <span class="hljs-comment">// 向右递归</span><br>            <span class="hljs-keyword">return</span> binarySearch2(arr, mid + <span class="hljs-number">1</span>, right, findVal);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findVal &lt; midVal)&#123;   <span class="hljs-comment">// 向左递归</span><br>            <span class="hljs-keyword">return</span> binarySearch2(arr, left, mid - <span class="hljs-number">1</span>, findVal);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br><br>            List&lt;Integer&gt; resIndexList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>            <span class="hljs-comment">// 向左边扫描</span><br>            <span class="hljs-keyword">int</span> temp = mid - <span class="hljs-number">1</span>;<br><br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>                <span class="hljs-comment">// 说明没有找到，退出循环</span><br>                <span class="hljs-keyword">if</span> (temp &lt; <span class="hljs-number">0</span> || findVal != arr[temp])&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-comment">// 否则，将temp放入到resIndexList中</span><br>                resIndexList.add(temp);<br>                temp -= <span class="hljs-number">1</span>;      <span class="hljs-comment">// temp左移</span><br>            &#125;<br>            resIndexList.add(mid);<br><br>            <span class="hljs-comment">// 向右边扫描</span><br>            temp = mid + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>                <span class="hljs-keyword">if</span> (temp &gt; arr.length - <span class="hljs-number">1</span> || findVal != arr[temp])&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                resIndexList.add(temp);<br>                temp += <span class="hljs-number">1</span>;      <span class="hljs-comment">// temp右移</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> resIndexList;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="二分查找复盘代码"><a href="#二分查找复盘代码" class="headerlink" title="二分查找复盘代码"></a>二分查找复盘代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.search.practice;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">// 二分查找（有序数组） </span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestBinarySearch</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> [] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">36</span>,<span class="hljs-number">74</span>,<span class="hljs-number">567</span>,<span class="hljs-number">3467</span>&#125;;<br>       <span class="hljs-comment">/* int index = binarySearch(arr, 0, arr.length - 1, 1);</span><br><span class="hljs-comment">        System.out.println(&quot;index = &quot;+ index);*/</span><br>        List&lt;Integer&gt; list = binarySearch2(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;list = &quot;</span>+ list);<br>    &#125;<br><br>    <span class="hljs-comment">// 二分查找（有序数组），找到值，返回下标，</span><br>    <span class="hljs-comment">// 方法一：不考虑重复的值</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr       数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> left      左边索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> right     右边索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> findVal   要找的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>          返回找到的值的下标</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> left ,<span class="hljs-keyword">int</span> right,<span class="hljs-keyword">int</span> findVal)</span></span>&#123;<br>        <span class="hljs-comment">// 退出递归条件</span><br>        <span class="hljs-keyword">if</span> (left &gt; right)&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 中间的索引</span><br>        <span class="hljs-keyword">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">// 中间的值</span><br>        <span class="hljs-keyword">int</span> midVal = arr[mid];<br><br>        <span class="hljs-keyword">if</span> (findVal &gt; midVal)&#123;      <span class="hljs-comment">// 向右递归</span><br>            <span class="hljs-keyword">return</span> binarySearch(arr, mid + <span class="hljs-number">1</span>, right, findVal);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findVal &lt; midVal)&#123;   <span class="hljs-comment">// 向左递归</span><br>            <span class="hljs-keyword">return</span> binarySearch(arr, left, mid - <span class="hljs-number">1</span>, findVal);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 否则，返回下标</span><br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 方法二：考虑重复的，利用ArrayList记录下来</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Integer&gt; <span class="hljs-title">binarySearch2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[],<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right,<span class="hljs-keyword">int</span> findVal)</span></span>&#123;<br>        <span class="hljs-comment">// 没有找到，返回空集合，退出递归</span><br>        <span class="hljs-keyword">if</span> (left &gt; right)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        &#125;<br>        <span class="hljs-comment">// 中间索引</span><br>        <span class="hljs-keyword">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">// 中间值</span><br>        <span class="hljs-keyword">int</span> midVal = arr[mid];<br>        <span class="hljs-keyword">if</span> (findVal &gt; midVal)&#123;<br>            <span class="hljs-comment">// 向右递归</span><br>            <span class="hljs-keyword">return</span> binarySearch2(arr, mid + <span class="hljs-number">1</span>, right, findVal);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findVal &lt; midVal)&#123;<br>            <span class="hljs-comment">// 向左递归</span><br>            <span class="hljs-keyword">return</span> binarySearch2(arr, left, mid - <span class="hljs-number">1</span>, findVal);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 不直接返回下标，先记录起来，放到ArrayList中，最后返回ArrayList</span><br>            List&lt;Integer&gt; resIndexList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>            <span class="hljs-comment">// 向左边扫描</span><br>            <span class="hljs-keyword">int</span> temp = mid - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>                <span class="hljs-comment">// 如果没有找到，则退出</span><br>                <span class="hljs-keyword">if</span> (temp &lt; <span class="hljs-number">0</span> || findVal != arr[temp])&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-comment">// 如果找到了，则将下标加到ArrayList中</span><br>                resIndexList.add(temp);<br>                temp -= <span class="hljs-number">1</span>;      <span class="hljs-comment">// temp 前移</span><br>            &#125;<br>            <span class="hljs-comment">// 将中间值也加到集合中</span><br>            resIndexList.add(mid);<br>            <span class="hljs-comment">// 向右边扫描</span><br>            temp = mid + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>                <span class="hljs-comment">// 如果没有找到，退出循环</span><br>                <span class="hljs-keyword">if</span> (temp &gt; right || findVal != arr[temp])&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-comment">// 找到了，将入集合</span><br>                resIndexList.add(temp);<br>                temp += <span class="hljs-number">1</span>;      <span class="hljs-comment">// temp后移</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> resIndexList;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="8-4-插值查找算法"><a href="#8-4-插值查找算法" class="headerlink" title="8.4 插值查找算法"></a>8.4 插值查找算法</h2><ol>
<li><p>插值查找原理介绍:</p>
<p>插值查找算法类似于二分查找，不同的是插值查找每次从<strong>自适应****mid</strong>处开始查找。</p>
</li>
<li><p>将折半查找中的求mid 索引的公式 , low 表示左边索引left, high表示右边索引right.<br> key 就是前面我们讲的 findVal</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211204220310170.png" alt="image-20211204220310170"></p>
</li>
<li><p>int mid = low + (high - low) * (key - arr[low]) / (arr[high] - arr[low]) ;/<em>插值索引</em>/<br> 对应前面的代码公式：<br> int mid = left + (right – left) * (findVal – arr[left]) / (arr[right] – arr[left])</p>
</li>
<li><p>举例说明插值查找算法 1-100 的数组</p>
</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211204220335175.png" alt="image-20211204220335175"></p>
<h3 id="8-4-1-插值查找应用案例"><a href="#8-4-1-插值查找应用案例" class="headerlink" title="8.4.1 插值查找应用案例"></a>8.4.1 插值查找应用案例</h3><p>请对一个有序数组进行插值查找 <strong>{1,8, 10, 89, 1000, 1234}</strong> ，输入一个数看看该数组是否存在此数，并且求出下标，如果没有就提示”没有这个数”。</p>
<ul>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.search;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">insertValueSearch</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">        int arr[] = new int[100];</span><br><span class="hljs-comment">        for (int i = 0; i &lt; 100; i++)&#123;</span><br><span class="hljs-comment">            arr[i] = i + 1;</span><br><span class="hljs-comment">        &#125;*/</span><br>        <span class="hljs-comment">// System.out.println(Arrays.toString(arr));</span><br><br>        <span class="hljs-keyword">int</span> arr[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>,<span class="hljs-number">89</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">1234</span>&#125;;<br><br>        <span class="hljs-keyword">int</span> index = insertValueSearch(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>, <span class="hljs-number">1234</span>);<br>       <span class="hljs-comment">//int index = binarySearch(arr, 0, arr.length - 1, 1234);</span><br><br>        System.out.println(<span class="hljs-string">&quot;index = &quot;</span> + index);<br><br>    &#125;<br><br>    <span class="hljs-comment">// 二分查找</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr       数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> left      左边的索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> right     右边的索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> findVal   要查找的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>          如果找到就返回下标，如果没有找到就返回-1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr,<span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right, <span class="hljs-keyword">int</span> findVal)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;二分查找次数~~&quot;</span>);<br>        <span class="hljs-comment">// 当left &gt; right时，说明没有找到，退出递归</span><br>        <span class="hljs-keyword">if</span> (left &gt; right)&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> midVal = arr[mid];<br>        <span class="hljs-keyword">if</span> (findVal &gt; midVal)&#123;      <span class="hljs-comment">// 向右递归</span><br>            <span class="hljs-keyword">return</span> binarySearch(arr, mid + <span class="hljs-number">1</span>, right, findVal);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findVal &lt; midVal)&#123;   <span class="hljs-comment">// 向左递归</span><br>            <span class="hljs-keyword">return</span> binarySearch(arr, left, mid - <span class="hljs-number">1</span>, findVal);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 插值查找（有序），数据量大，关键字比较均匀，关键字不均匀的前提下不一定比二分查找要好</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr       数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> left      左边索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> right     右边索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> findVal   查找值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>          如果找到，就返回对应的下标，如果没有，返回-1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insertValueSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> [] arr, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right, <span class="hljs-keyword">int</span> findVal)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;插值查找次数~&quot;</span>);<br>        <span class="hljs-comment">// 不存在，退出递归，返回-1</span><br>        <span class="hljs-comment">// findVal &lt; arr[0] || findVal &gt; arr[arr.length - 1] 必须要加，否则mid可能会越界</span><br>        <span class="hljs-keyword">if</span> (left &gt; right || findVal &lt; arr[<span class="hljs-number">0</span>] || findVal &gt; arr[arr.length - <span class="hljs-number">1</span>])&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">// 求出mid 自适应</span><br>        <span class="hljs-keyword">int</span> mid = left + (right - left) * (findVal - arr[left]) / (arr[right] - arr[left]);<br>        <span class="hljs-keyword">int</span> midVal = arr[mid];<br><br>        <span class="hljs-keyword">if</span> (findVal &gt; midVal)&#123;<br>            <span class="hljs-comment">// 向右递归</span><br>            <span class="hljs-keyword">return</span> insertValueSearch(arr, mid + <span class="hljs-number">1</span>, right, findVal);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findVal &lt; midVal)&#123;<br>            <span class="hljs-comment">// 向左递归</span><br>            <span class="hljs-keyword">return</span> insertValueSearch(arr, left, mid - <span class="hljs-number">1</span>, findVal);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li>
</ul>
<h3 id="8-4-2-插值查找注意事项："><a href="#8-4-2-插值查找注意事项：" class="headerlink" title="8.4.2 插值查找注意事项："></a>8.4.2 插值查找注意事项：</h3><ol>
<li>对于数据量较大，<strong>关键字分布比较均匀</strong>的查找表来说，采用<strong>插值查找</strong>,速度较快.</li>
<li>关键字分布不均匀的情况下，该方法不一定比折半查找要好</li>
</ol>
<h2 id="8-5-斐波那契-黄金分割法-查找算法"><a href="#8-5-斐波那契-黄金分割法-查找算法" class="headerlink" title="8.5 斐波那契(黄金分割法)查找算法"></a>8.5 斐波那契(黄金分割法)查找算法</h2><h3 id="8-5-1-斐波那契-黄金分割法-查找基本介绍"><a href="#8-5-1-斐波那契-黄金分割法-查找基本介绍" class="headerlink" title="8.5.1 斐波那契(黄金分割法)查找基本介绍:"></a>8.5.1 斐波那契(黄金分割法)查找基本介绍:</h3><ol>
<li>黄金分割点是指把一条线段分割为两部分，使其中一部分与全长之比等于另一部分与这部分之比。取其前三位数字的近似值是0.618。由于按此比例设计的造型十分美丽，因此称为黄金分割，也称为中外比。这是一个神奇的数字，会带来意向不大的效果。</li>
<li><strong>斐波那契数列</strong> {1, 1, 2, 3, 5, 8, 13, 21, 34, 55 } 发现斐波那契数列的两个相邻数 的比例，无限接近 黄金分割值0.618</li>
</ol>
<h3 id="8-5-2-斐波那契-黄金分割法-原理"><a href="#8-5-2-斐波那契-黄金分割法-原理" class="headerlink" title="8.5.2 斐波那契(黄金分割法)原理"></a>8.5.2 斐波那契(黄金分割法)原理</h3><p>斐波那契查找原理与前两种相似，仅仅改变了中间结点（mid）的位置，mid不再是中间或插值得到，而是位于黄金分割点附近，即<strong>mid=low+F(k-1)-1</strong> （F代表斐波那契数列），如下图所示</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211205150847685.png" alt="image-20211205150847685"></p>
<p><strong>对F(k-1)-1的理解：</strong></p>
<ol>
<li>由斐波那契数列 F[k]=F[k-1]+F[k-2] 的性质，可以得到 （F[k]-1）=（F[k-1]-1）+（F[k-2]-1）+1 。该式说明：只要顺序表的长度为<strong>F[k]-1</strong>，则可以将该表分成长度为<strong>F[k-1]-1</strong>和<strong>F[k-2]-1</strong>的两段，即如上图所示。从而中间位置为mid=low+F(k-1)-1</li>
<li>类似的，每一子段也可以用相同的方式分割</li>
<li>但顺序表长度n不一定刚好等于F[k]-1，所以需要将原来的顺序表长度n增加至F[k]-1。这里的k值只要能使得F[k]-1恰好大于或等于n即可，由以下代码得到,顺序表长度增加后，新增的位置（从n+1到F[k]-1位置），都赋为n位置的值即可。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(n&gt;fib(k)-<span class="hljs-number">1</span>)<br>    k++;<br></code></pre></td></tr></table></figure>



<h3 id="8-5-3-斐波那契查找应用案例："><a href="#8-5-3-斐波那契查找应用案例：" class="headerlink" title="8.5.3 斐波那契查找应用案例："></a>8.5.3 斐波那契查找应用案例：</h3><p>请对一个有序数组进行斐波那契查找 <strong>{1,8, 10, 89, 1000, 1234}</strong> ，输入一个数看看该数组是否存在此数，并且求出下标，如果没有就提示”没有这个数”。</p>
<p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.search;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FibonacciSearch</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> maxSize = <span class="hljs-number">20</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>,<span class="hljs-number">89</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">1234</span>&#125;;<br>        <span class="hljs-keyword">int</span> index = fibSearch(arr, <span class="hljs-number">1234</span>);<br>        System.out.println(<span class="hljs-string">&quot;index = &quot;</span> + index);<br>    &#125;<br><br>    <span class="hljs-comment">// 获取斐波那契数列</span><br>    <span class="hljs-comment">// 非递归</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] fib()&#123;<br>        <span class="hljs-keyword">int</span>[] f = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[maxSize];<br>        f[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        f[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; maxSize; i++)&#123;<br>            f[i] = f[i - <span class="hljs-number">1</span>] + f[i - <span class="hljs-number">2</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> f;<br>    &#125;<br><br>    <span class="hljs-comment">// 编写斐波那契查找方法</span><br>    <span class="hljs-comment">// 使用非递归</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * mid = low + f[k - 1] - 1;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a 数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 要查找的关键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 找到就返回下标，否则返回-1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fibSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> [] a, <span class="hljs-keyword">int</span> key)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> low = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> high = a.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> mid = <span class="hljs-number">0</span>;        <span class="hljs-comment">// 保存mid的值</span><br>        <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;          <span class="hljs-comment">// 保存斐波那契分割点的下标</span><br>        <span class="hljs-keyword">int</span>[] f = fib();    <span class="hljs-comment">// 斐波那契数组</span><br><br>        <span class="hljs-comment">// 获取到斐波那契分割值的下标</span><br>        <span class="hljs-keyword">while</span> (high &gt; f[k] -<span class="hljs-number">1</span>)&#123;<br>            k++;<br>        &#125;<br>        <span class="hljs-comment">// 将a数组copy到temp中</span><br>        <span class="hljs-keyword">int</span>[] temp = Arrays.copyOf(a, f[k]);<br><br>        <span class="hljs-comment">// 由于temp的长度可能大于a的长度，直接copy过来后面多出来的是用0补齐，实际上需要用最后一个high来补齐</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = high + <span class="hljs-number">1</span>; i &lt; temp.length; i++)&#123;<br>            temp[i] = a[high];<br>        &#125;<br><br>        <span class="hljs-comment">// 开始循环处理，找到我们的key</span><br>        <span class="hljs-keyword">while</span> (low &lt;= high)&#123;<br><br>            mid =low + f[k - <span class="hljs-number">1</span>] - <span class="hljs-number">1</span>;<br><br>            <span class="hljs-keyword">if</span> (key &lt; temp[mid])&#123;<br>                <span class="hljs-comment">// 向左边查找</span><br>                high = mid - <span class="hljs-number">1</span>;<br>                <span class="hljs-comment">// 因为前面有k-1个元素，下次从f[k - 1]开始拆分，即下次的mid = low + f[k - 1 - 1] - 1</span><br>                <span class="hljs-comment">// 后面有k - 2个元素，从f[k - 2]开始拆分，mid = low + f[k - 1 - 2] - 1</span><br>                <span class="hljs-comment">// 1.说明：全部元素 = 前面的元素 + 后边的元素</span><br>                <span class="hljs-comment">// 2.f[k] = f[k-1] + f[f - 2]</span><br>                <span class="hljs-comment">// 因为前面有f[k-1]个元素，所以可以继续拆分f[f-1] = f[k -2] + f[k - 3]</span><br>                <span class="hljs-comment">// 即在f[k-1]的前面继续查找k--，下次循环mid = f[k-1-1] -1;</span><br>                k--;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key &gt; temp[mid])&#123;<br>                <span class="hljs-comment">// 向右边查找</span><br>                low = mid + <span class="hljs-number">1</span>;<br>                <span class="hljs-comment">// 说明</span><br>                <span class="hljs-comment">// 1.全部元素 = 前面的元素 + 后边的元素</span><br>                <span class="hljs-comment">// 2.f[k] = f[k - 1] + f[k -2]</span><br>                <span class="hljs-comment">// 3.因为后面我们有f[k-2]所以继续拆分f[k-1] = f[k - 3] + f[k - 4]</span><br>                <span class="hljs-comment">// 4.即在f[k-2]的前面进行查找 k -= 2</span><br>                <span class="hljs-comment">// 5.下次循环mid = f[k - 1 - 2] - 1</span><br>                k -= <span class="hljs-number">2</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 返回较小的一个</span><br>                <span class="hljs-keyword">if</span> (mid &lt;= high)&#123;<br>                    <span class="hljs-keyword">return</span> mid;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> high;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 找不到返回-1</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="斐波那契算法复盘代码"><a href="#斐波那契算法复盘代码" class="headerlink" title="斐波那契算法复盘代码"></a>斐波那契算法复盘代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.search.practice;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">// 斐波那契算法查找（有序列表）</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFibonacciSearch</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> maxSize = <span class="hljs-number">20</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">35</span>,<span class="hljs-number">65</span>,<span class="hljs-number">745</span>,<span class="hljs-number">856</span>,<span class="hljs-number">3456</span>&#125;;<br>        <span class="hljs-keyword">int</span> index = fibSearch(arr, <span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;index = &quot;</span> + index);<br>    &#125;<br><br>    <span class="hljs-comment">// 获取斐波那契数列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] fib()&#123;<br>        <span class="hljs-keyword">int</span>[] f = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[maxSize];<br>        f[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        f[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; maxSize; i++)&#123;<br>            f[i] = f[i -<span class="hljs-number">1</span>] + f[i -<span class="hljs-number">2</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> f;<br>    &#125;<br><br>    <span class="hljs-comment">// 编写斐波那契算法,有序列表</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr 数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 要查找的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 找到就返回下标，没有就返回-1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fibSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> key)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> low = <span class="hljs-number">0</span>;                <span class="hljs-comment">// 左rr边的索引</span><br>        <span class="hljs-keyword">int</span> high = arr.length - <span class="hljs-number">1</span>;  <span class="hljs-comment">// 右边的索引</span><br>        <span class="hljs-keyword">int</span> mid = <span class="hljs-number">0</span>;                <span class="hljs-comment">// 保存mid的值</span><br>        <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;                  <span class="hljs-comment">// 斐波那契的分割值的下标（索引）</span><br>        <span class="hljs-keyword">int</span>[] f = fib();            <span class="hljs-comment">// 获得斐波那契数列</span><br><br>        <span class="hljs-comment">// 获取斐波那契分割值的下标k</span><br>        <span class="hljs-keyword">while</span> (high &gt; f[k] - <span class="hljs-number">1</span>)&#123;<br>            k++;<br>        &#125;<br><br>        <span class="hljs-comment">// 将数组arr copy到temp中</span><br>        <span class="hljs-keyword">int</span>[] temp = Arrays.copyOf(arr, f[k]);<br><br>        <span class="hljs-comment">// 因为temp中的长度可能大于arr的长度，copy过去之后会在后面填充0，但实际上是填充arr最后的一个值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = high + <span class="hljs-number">1</span>; i &lt; temp.length; i++)&#123;<br>            temp[i] = arr[high];<br>        &#125;<br><br>        <span class="hljs-comment">// 数组准备完毕后，开始循环，查找我们要找的key</span><br>        <span class="hljs-keyword">while</span> (low &lt;= high)&#123;<br>            <span class="hljs-comment">// 找到分割点mid的值</span><br>            mid = low + f[k - <span class="hljs-number">1</span>] - <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 判断key的值与temp[mid]的值的大小</span><br>            <span class="hljs-keyword">if</span> (key &lt; temp[mid])&#123;<br>                <span class="hljs-comment">// 向左边查找</span><br>                high = mid - <span class="hljs-number">1</span>;<br>                <span class="hljs-comment">// 以f[k - 1]为开始拆分</span><br>                k--;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key &gt; temp[mid])&#123;<br>                <span class="hljs-comment">// 向右边查找</span><br>                low = mid + <span class="hljs-number">1</span>;<br>                <span class="hljs-comment">// 以f[k - 2]开始拆分</span><br>                k -= <span class="hljs-number">2</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 找到之后，返回比较小的值</span><br>                <span class="hljs-keyword">if</span> (mid &lt;= high)&#123;<br>                    <span class="hljs-keyword">return</span> mid;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> high;<br>                &#125;<br>            &#125;<br><br><br>        &#125;<br>        <span class="hljs-comment">// 都没有找到返回-1</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>





<h1 id="第9章-哈希表"><a href="#第9章-哈希表" class="headerlink" title="第9章 哈希表"></a>第9章 哈希表</h1><h2 id="9-1-哈希表-散列-Google上机题"><a href="#9-1-哈希表-散列-Google上机题" class="headerlink" title="9.1 哈希表(散列)-Google上机题"></a>9.1 哈希表(散列)-Google上机题</h2><ol>
<li><p>看一个实际需求，google公司的一个上机题: </p>
</li>
<li><p>有一个公司,当有新的员工来报道时,要求将该员工的信息加入(id,性别,年龄,住址..),当输入该员工的id时,要求查找到该员工的 所有信息.</p>
</li>
<li><p>要求: 不使用数据库,尽量节省内存,速度越快越好=&gt;哈希表(散列)</p>
</li>
</ol>
<h2 id="9-2-哈希表的基本介绍"><a href="#9-2-哈希表的基本介绍" class="headerlink" title="9.2 哈希表的基本介绍"></a>9.2 哈希表的基本介绍</h2><p>散列表（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211206003950955.png" alt="image-20211206003950955"></p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211206004248016.png" alt="image-20211206004248016"></p>
<h2 id="9-3-google公司的一个上机题"><a href="#9-3-google公司的一个上机题" class="headerlink" title="9.3 google公司的一个上机题:"></a>9.3 google公司的一个上机题:</h2><p>有一个公司,当有新的员工来报道时,要求将该员工的信息加入(id,性别,年龄,名字,住址..),当输入该员工的id时,要求查找到该员工的 所有信息。</p>
<p><strong>要求:</strong> </p>
<ol>
<li><p>不使用数据库,,速度越快越好=&gt;哈希表(散列)</p>
</li>
<li><p>添加时，保证按照id从低到高插入  [课后思考：如果id不是从低到高插入，但要求各条链表仍是从低到高，怎么解决?]</p>
</li>
<li><p>使用链表来实现哈希表, 该链表不带表头[即: 链表的第一个结点就存放雇员信息] </p>
</li>
<li><p>思路分析并画出示意图</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211206004005244.png" alt="image-20211206004005244"></p>
</li>
<li><p>代码实现[增删改查(显示所有员工，按id查询)]</p>
<p>已经加入删除和按照顺序添加的功能。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.hashtab;<br><br><span class="hljs-keyword">import</span> javax.management.StandardEmitterMBean;<br><span class="hljs-keyword">import</span> java.awt.event.ItemEvent;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashTalDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建哈希表</span><br>        HashTab hashTab = <span class="hljs-keyword">new</span> HashTab(<span class="hljs-number">7</span>);<br>        String key = <span class="hljs-string">&quot;&quot;</span>;<br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;add: 添加雇员&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;asc: 按照顺序添加雇员&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;list:遍历雇员&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;find:查找雇员&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;del: 删除雇员&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;exit:退出系统&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;请输入您的操作：&quot;</span>);<br>            key = scanner.next();<br>            <span class="hljs-keyword">switch</span> (key)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;add&quot;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;请输入id&quot;</span>);<br>                    <span class="hljs-keyword">int</span> id = scanner.nextInt();<br>                    System.out.println(<span class="hljs-string">&quot;请输入名字&quot;</span>);<br>                    String name = scanner.next();<br>                    Emp emp = <span class="hljs-keyword">new</span> Emp(id, name);<br>                    hashTab.add(emp);<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;asc&quot;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;请输入id&quot;</span>);<br>                    id = scanner.nextInt();<br>                    System.out.println(<span class="hljs-string">&quot;请输入名字&quot;</span>);<br>                    name = scanner.next();<br>                    emp = <span class="hljs-keyword">new</span> Emp(id, name);<br>                    hashTab.addByAsc(emp);<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;list&quot;</span>:<br>                    hashTab.list();<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;find&quot;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;请输入要查找的id&quot;</span>);<br>                    id = scanner.nextInt();<br>                    hashTab.findEmpById(id);<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;del&quot;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;请输入您要删除的id&quot;</span>);<br>                    id = scanner.nextInt();<br>                    hashTab.delEmpById(id);<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;exit&quot;</span>:<br>                    scanner.close();<br>                    System.exit(<span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 创建HashTab 管理多条链表</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashTab</span></span>&#123;<br>    <span class="hljs-keyword">private</span> EmpLinkedList[] empLinkedListArray;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size;       <span class="hljs-comment">// 表示有多少条链表</span><br>    <span class="hljs-comment">// 构造器</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashTab</span><span class="hljs-params">(<span class="hljs-keyword">int</span> size)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.size = size;<br>        <span class="hljs-comment">// 初始化数组</span><br>        empLinkedListArray = <span class="hljs-keyword">new</span> EmpLinkedList[size];<br>        <span class="hljs-comment">// 初始化每一条链表</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)&#123;<br>            empLinkedListArray[i] = <span class="hljs-keyword">new</span> EmpLinkedList();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 添加</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Emp emp)</span></span>&#123;<br>        <span class="hljs-comment">// 根据id得到员工应该加到哪条链表</span><br>        <span class="hljs-keyword">int</span> empLinkedListNO = hashFan(emp.id);<br>        <span class="hljs-comment">// 将emp添加到对应的链表中</span><br>        empLinkedListArray[empLinkedListNO].add(emp);<br>    &#125;<br><br>    <span class="hljs-comment">// 遍历所有的链表，遍历hashtab</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">list</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            empLinkedListArray[i].list(i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 根据id查找雇员</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">findEmpById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> empLinkedListNO = hashFan(id);<br>        Emp emp = empLinkedListArray[empLinkedListNO].findEmpById(id);<br>        <span class="hljs-keyword">if</span> (emp != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 找到了</span><br>            System.out.printf(<span class="hljs-string">&quot;在第 %d 条链表中找到了雇员,id = %d \n&quot;</span>,(empLinkedListNO+<span class="hljs-number">1</span>),id);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;在哈希表中，没有找到该雇员~&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 根据id删除雇员</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delEmpById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> empLinkedListNO = hashFan(id);<br>        empLinkedListArray[empLinkedListNO].delById(id);<br>    &#125;<br><br>    <span class="hljs-comment">// 按照顺序添加</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addByAsc</span><span class="hljs-params">(Emp emp)</span></span>&#123;<br>        <span class="hljs-comment">// 根据id得到员工应该加到哪条链表</span><br>        <span class="hljs-keyword">int</span> empLinkedListNO = hashFan(emp.id);<br>        <span class="hljs-comment">// 将emp添加到对应的链表中</span><br>        empLinkedListArray[empLinkedListNO].addByAsc(emp);<br>    &#125;<br><br>    <span class="hljs-comment">// 编写一个散列函数，使用一个简单取模法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashFan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> id % size;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 创建EmpLinkedList，表示链表</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmpLinkedList</span></span>&#123;<br>    <span class="hljs-comment">// 头指针，执行第一个Emp，因此我们这个链表的head是直接指向第一个Emp</span><br>    <span class="hljs-keyword">private</span> Emp head;    <span class="hljs-comment">// 头结点，默认为null</span><br><br>    <span class="hljs-comment">// 添加</span><br>    <span class="hljs-comment">// 假定，当添加雇员时，id是自增长的，即id的分配总是从小到大的</span><br>    <span class="hljs-comment">// 因此我们将该雇员直接加入到本链表的最后即可</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Emp emp)</span></span>&#123;<br>        <span class="hljs-comment">// 如果是第一个雇员</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>)&#123;<br>            head = emp;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 如果不是第一个雇员，则使用一个辅助指针，帮忙定位到最后，添加到最后</span><br>        Emp curEmp = head;<br>        <span class="hljs-comment">// 找到最后一个</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">if</span> (curEmp.next == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">// 说明已经到链表最后</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            curEmp = curEmp.next;   <span class="hljs-comment">// 后移</span><br>        &#125;<br>        curEmp.next = emp;<br>    &#125;<br><br><br>    <span class="hljs-comment">// 遍历链表雇员的信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">list</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span></span>&#123;<br>        <span class="hljs-comment">// 说明链表为空</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;第&quot;</span>+(no + <span class="hljs-number">1</span>)+<span class="hljs-string">&quot;链表为空&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        System.out.print(<span class="hljs-string">&quot;第&quot;</span>+(no + <span class="hljs-number">1</span>)+<span class="hljs-string">&quot;条链表信息为&quot;</span>);<br>        Emp curEmp = head;  <span class="hljs-comment">// 辅助变量，方便遍历</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            System.out.printf(<span class="hljs-string">&quot; =&gt; id = %d  name = %s \t&quot;</span>,curEmp.id,curEmp.name);<br>            <span class="hljs-keyword">if</span> (curEmp.next == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">// 说明已经到链表最后</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            curEmp = curEmp.next;   <span class="hljs-comment">// 后移</span><br>        &#125;<br>        System.out.println();<br>    &#125;<br><br>    <span class="hljs-comment">// 根据id查找</span><br>    <span class="hljs-comment">// 如果查找到，就返回Emp，如果没有找到，就返回null</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Emp <span class="hljs-title">findEmpById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>&#123;<br>        <span class="hljs-comment">// 判断是否为空</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;链表为空&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 辅助变量</span><br>        Emp curEmp = head;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-comment">// 已经找到</span><br>            <span class="hljs-keyword">if</span> (curEmp.id == id)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 退出</span><br>            <span class="hljs-comment">// 说明遍历完当前链表没有找到该雇员</span><br>            <span class="hljs-keyword">if</span> (curEmp.next == <span class="hljs-keyword">null</span>)&#123;<br>                curEmp = <span class="hljs-keyword">null</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            curEmp = curEmp.next;   <span class="hljs-comment">// 后移</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> curEmp;<br>    &#125;<br><br>    <span class="hljs-comment">// 根据id删除Emp</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>&#123;<br>        <span class="hljs-comment">// 判断是否为空</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;删除失败，链表为空&quot;</span>);<br>            <span class="hljs-keyword">return</span>;     <span class="hljs-comment">// 注意：如果删除失败，需要放回，否则空指针异常</span><br>        &#125;<br>        <span class="hljs-comment">// 辅助指针，方便遍历</span><br>        Emp curEmp = head;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 定位到需要删除的id</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-comment">// 如果链表只有一个元素，先判断当前curEmp的id与传进来的id是否相等</span><br>            <span class="hljs-keyword">if</span> (curEmp.id == id)&#123;<br>                res = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 如果当前链表不是一个元素，再判断curEmp下一个id，空出一个来删除</span><br>            <span class="hljs-keyword">if</span> (curEmp.next != <span class="hljs-keyword">null</span> &amp;&amp; curEmp.next.id == id)&#123;<br>                res = <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (curEmp.next == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">// 已经到链表最后</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            curEmp = curEmp.next;   <span class="hljs-comment">// 后移</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (res == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">if</span> (curEmp.next == <span class="hljs-keyword">null</span>)&#123;<br>                head = <span class="hljs-keyword">null</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                head = curEmp.next;<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res == <span class="hljs-number">2</span>)&#123;<br>            curEmp.next = curEmp.next.next;<br>            System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;该链表没有您要查到的雇员~&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 按id从小到大的顺序添加雇员</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addByAsc</span><span class="hljs-params">(Emp emp)</span></span>&#123;<br>        <span class="hljs-comment">// 如果是第一个雇员</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>)&#123;<br>            head = emp;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 如果不是第一个，则根据id，找到位置，再插入即可</span><br>        Emp curEmp = head;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;   <span class="hljs-comment">// 表示插入节点不存在</span><br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br><br>            <span class="hljs-comment">// 如果id相等</span><br>            <span class="hljs-keyword">if</span> (curEmp.id == emp.id) &#123;<br>                flag = <span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 在第一个位置插入</span><br>            <span class="hljs-keyword">if</span> (curEmp.id &gt; emp.id) &#123;<br>                <span class="hljs-comment">// 已经找到</span><br>                res = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 在最后一个位置插入</span><br>            <span class="hljs-keyword">if</span> (curEmp.next == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-comment">// 已经是最后一个，直接插入</span><br>                res = <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 在中间插入</span><br>            <span class="hljs-keyword">if</span> (curEmp.id &lt; emp.id &amp;&amp; curEmp.next.id &gt; emp.id) &#123;<br>                <span class="hljs-comment">// 说明已经找到</span><br>                res = <span class="hljs-number">3</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            curEmp = curEmp.next;    <span class="hljs-comment">// 后移</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag)&#123;<br>            System.out.printf(<span class="hljs-string">&quot;id = %d 已经存在，请重新输入~~ \n&quot;</span>,emp.id);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (res == <span class="hljs-number">1</span>)&#123;<br>                emp.next = curEmp;<br>                head = emp;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (res == <span class="hljs-number">2</span>)&#123;<br>                curEmp.next = emp;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (res == <span class="hljs-number">3</span>)&#123;<br>                emp.next = curEmp.next;<br>                curEmp.next = emp;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br><br>&#125;<br><br><span class="hljs-comment">// 创建Emp，表示一个雇员</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Emp</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> Emp next;    <span class="hljs-comment">// next 默认为null</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Emp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="第10章-树结构基础部分"><a href="#第10章-树结构基础部分" class="headerlink" title="第10章 树结构基础部分"></a>第10章 树结构基础部分</h1><h2 id="10-1-二叉树"><a href="#10-1-二叉树" class="headerlink" title="10.1 二叉树"></a>10.1 二叉树</h2><h3 id="10-1-1-为什么需要树这种数据结构"><a href="#10-1-1-为什么需要树这种数据结构" class="headerlink" title="10.1.1 为什么需要树这种数据结构"></a>10.1.1 为什么需要树这种数据结构</h3><ol>
<li><p>数组存储方式的分析</p>
<p><strong>优点</strong>：通过<strong>下标方式访问</strong>元素，速度快。对于有序数组，还可使用<strong>二分查找</strong>提高检索速度。</p>
<p><strong>缺点</strong>：如果要检索具体某个值，或者<strong>插入值(按一定顺序)会整体移动</strong>，效率较低 [示意图]</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211206114427743.png" alt="image-20211206114427743"></p>
</li>
<li><p>链式存储方式的分析</p>
<p><strong>优点</strong>：在一定程度上对数组存储方式有优化(比如：插入一个数值节点，只需要将<strong>插入</strong>节点，链接到链表中即可， <strong>删除</strong>效率也很好)。</p>
<p><strong>缺点：</strong>在进行<strong>检索时</strong>，效率仍然较低，比如(检索某个值，需要从头节点开始遍历) 【示意图】</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211206114621242.png" alt="image-20211206114621242"></p>
</li>
<li><p>树存储方式的分析</p>
<p>能提高数据<strong>存储，读取</strong>的效率,  比如利用 <strong>二叉排序树</strong>(Binary Sort Tree)，既可以保证数据的检索速度，同时也可以保证数据的<strong>插入，删除，修改</strong>的速度。【示意图,后面详讲】</p>
<p>案例: [7, 3, 10, 1, 5, 9, 12]</p>
</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211206114714109.png" alt="image-20211206114714109"></p>
<h3 id="10-1-2-树示意图"><a href="#10-1-2-树示意图" class="headerlink" title="10.1.2 树示意图"></a>10.1.2 树示意图</h3><p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211206130203345.png" alt="image-20211206130203345"></p>
<p>树的常用术语(结合示意图理解):</p>
<p>1)节点</p>
<p>2)根节点</p>
<p>3)父节点</p>
<p>4)子节点</p>
<p>5)叶子节点 (没有子节点的节点)</p>
<p>6)节点的权(节点值)</p>
<p>7)路径(从root节点找到该节点的路线)</p>
<p>8)层</p>
<p>9)子树</p>
<p>10)树的高度(最大层数)</p>
<p>11)森林 :多颗子树构成森林</p>
<h3 id="10-1-3-二叉树的概念"><a href="#10-1-3-二叉树的概念" class="headerlink" title="10.1.3 二叉树的概念"></a>10.1.3 二叉树的概念</h3><ol>
<li><p>树有很多种，每个节点<strong>最多只能有两个子节点</strong>的一种形式称为二叉树。</p>
</li>
<li><p>二叉树的子节点分为左节点和右节点。</p>
</li>
<li><p>示意图</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211206130333490.png" alt="image-20211206130333490"></p>
</li>
<li><p>如果该二叉树的<strong>所有叶子节点都在最后一层</strong>，并且结点总数= 2^n -1 , n 为层数，则我们称为<strong>满二叉树。</strong></p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211206130410039.png" alt="image-20211206130410039"></p>
</li>
<li><p>如果该二叉树的<strong>所有叶子节点都在最后一层或者倒数第二层</strong>，而且<strong>最后一层</strong>的叶子节点在<strong>左边连</strong>续，<strong>倒数第二层</strong>的叶子节点在<strong>右边连续</strong>，我们称<strong>为完全二叉树</strong>。</p>
</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211206130431063.png" alt="image-20211206130431063"></p>
<h3 id="10-1-4-二叉树遍历的说明"><a href="#10-1-4-二叉树遍历的说明" class="headerlink" title="10.1.4 二叉树遍历的说明"></a>10.1.4 二叉树遍历的说明</h3><p>使用前序，中序和后序对下面的二叉树进行遍历.</p>
<ol>
<li>前序遍历: <strong>先输出父节点</strong>，再遍历左子树和右子树</li>
<li>中序遍历: 先遍历左子树，<strong>再输出父节点</strong>，再遍历右子树</li>
<li>后序遍历: 先遍历左子树，再遍历右子树，<strong>最后输出父节点</strong></li>
<li><strong>小结</strong>: 看输出父节点的顺序，就确定是前序，中序还是后序</li>
</ol>
<h3 id="10-1-5-二叉树遍历应用实例-前序-中序-后序"><a href="#10-1-5-二叉树遍历应用实例-前序-中序-后序" class="headerlink" title="10.1.5 二叉树遍历应用实例(前序,中序,后序)"></a>10.1.5 二叉树遍历应用实例(前序,中序,后序)</h3><p>应用实例的说明和思路</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211206130640610.png" alt="image-20211206130640610"></p>
<ul>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.binaryTree;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinaryTreeDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        BinaryTree binaryTree = <span class="hljs-keyword">new</span> BinaryTree();<br>        HeroNode root = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;宋江&quot;</span>);<br>        HeroNode node2 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;吴用&quot;</span>);<br>        HeroNode node3 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;卢俊义&quot;</span>);<br>        HeroNode node4 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;林冲&quot;</span>);<br>        HeroNode node5 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;关胜&quot;</span>);<br><br>        root.setLeft(node2);<br>        root.setRight(node3);<br>        node3.setRight(node4);<br>        node3.setLeft(node5);<br>        binaryTree.setRoot(root);<br><br>        System.out.println(<span class="hljs-string">&quot;前序遍历&quot;</span>);<br>        binaryTree.preOrder();  <span class="hljs-comment">// 1,2,3,5,4</span><br><br><br>        System.out.println(<span class="hljs-string">&quot;中序遍历&quot;</span>);<br>        binaryTree.infixOrder();    <span class="hljs-comment">// 2,1,5,3,4</span><br><br>        System.out.println(<span class="hljs-string">&quot;后序遍历&quot;</span>);<br>        binaryTree.postOrder();     <span class="hljs-comment">// 2,5,4,3,1</span><br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 创建二叉树</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinaryTree</span></span>&#123;<br>    <span class="hljs-keyword">private</span> HeroNode root;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRoot</span><span class="hljs-params">(HeroNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.root = root;<br>    &#125;<br><br>    <span class="hljs-comment">// 前序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.root != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.root.preOrder();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;二叉树为空，无法遍历&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 中序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">infixOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.root != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.root.infixOrder();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;二叉树为空，无法遍历&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 后序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.root != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.root.postOrder();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;二叉树为空，无法遍历&quot;</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 创建英雄结点</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeroNode</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> HeroNode left;  <span class="hljs-comment">// 默认为空</span><br>    <span class="hljs-keyword">private</span> HeroNode right; <span class="hljs-comment">// 默认为空</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HeroNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode <span class="hljs-title">getLeft</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLeft</span><span class="hljs-params">(HeroNode left)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.left = left;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode <span class="hljs-title">getRight</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRight</span><span class="hljs-params">(HeroNode right)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroNode&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 前序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 先输入当前节点</span><br>        System.out.println(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-comment">// 左边</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.left.preOrder();<br>        &#125;<br>        <span class="hljs-comment">// 右边</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.right.preOrder();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 中序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">infixOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 左边</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.left.infixOrder();<br>        &#125;<br>        <span class="hljs-comment">// 当前</span><br>        System.out.println(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-comment">// 右边</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.right.infixOrder();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 后序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 左边</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.left.postOrder();<br>        &#125;<br>        <span class="hljs-comment">// 右边</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.right.postOrder();<br>        &#125;<br>        System.out.println(<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li>
</ul>
<h3 id="10-1-6-二叉树-查找指定节点"><a href="#10-1-6-二叉树-查找指定节点" class="headerlink" title="10.1.6 二叉树-查找指定节点"></a>10.1.6 二叉树-查找指定节点</h3><p>要求</p>
<ol>
<li><p>请编写前序查找，中序查找和后序查找的方法。</p>
</li>
<li><p>并分别使用三种查找方式，查找 heroNO = 5 的节点</p>
</li>
<li><p>并分析各种查找方式，分别比较了多少次</p>
</li>
<li><p>思路分析图解</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211208122439985.png" alt="image-20211208122439985"></p>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.binaryTree;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinaryTreeDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        BinaryTree binaryTree = <span class="hljs-keyword">new</span> BinaryTree();<br>        HeroNode root = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;宋江&quot;</span>);<br>        HeroNode node2 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;吴用&quot;</span>);<br>        HeroNode node3 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;卢俊义&quot;</span>);<br>        HeroNode node4 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;林冲&quot;</span>);<br>        HeroNode node5 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;关胜&quot;</span>);<br><br>        root.setLeft(node2);<br>        root.setRight(node3);<br>        node3.setRight(node4);<br>        node3.setLeft(node5);<br>        binaryTree.setRoot(root);<br><br>        System.out.println(<span class="hljs-string">&quot;前序遍历&quot;</span>);<br>        binaryTree.preOrder();  <span class="hljs-comment">// 1,2,3,5,4</span><br><br><br>        System.out.println(<span class="hljs-string">&quot;中序遍历&quot;</span>);<br>        binaryTree.infixOrder();    <span class="hljs-comment">// 2,1,5,3,4</span><br><br>        System.out.println(<span class="hljs-string">&quot;后序遍历&quot;</span>);<br>        binaryTree.postOrder();     <span class="hljs-comment">// 2,5,4,3,1</span><br><br><span class="hljs-comment">/*        // 前序遍历查找</span><br><span class="hljs-comment">        // 比较次数4</span><br><span class="hljs-comment">        HeroNode resNode = binaryTree.preOrderSearch(5);</span><br><span class="hljs-comment">        if (resNode != null)&#123;</span><br><span class="hljs-comment">            System.out.printf(&quot;该结点信息为：id = %d name = %s&quot;,resNode.getId(),resNode.getName());</span><br><span class="hljs-comment">        &#125; else &#123;</span><br><span class="hljs-comment">            System.out.println(&quot;结点不存在&quot;);</span><br><span class="hljs-comment">        &#125;*/</span><br><br><span class="hljs-comment">/*        // 中序遍历查找</span><br><span class="hljs-comment">        // 比较次数3</span><br><span class="hljs-comment">        HeroNode resNode = binaryTree.infixOrderSearch(5);</span><br><span class="hljs-comment">        if (resNode != null)&#123;</span><br><span class="hljs-comment">            System.out.printf(&quot;该结点信息为：id = %d name = %s&quot;,resNode.getId(),resNode.getName());</span><br><span class="hljs-comment">        &#125; else &#123;</span><br><span class="hljs-comment">            System.out.println(&quot;结点不存在&quot;);</span><br><span class="hljs-comment">        &#125;*/</span><br><br>        <span class="hljs-comment">// 后序遍历查找</span><br>        <span class="hljs-comment">// 比较次数2</span><br>        HeroNode resNode = binaryTree.postOrderSearch(<span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">if</span> (resNode != <span class="hljs-keyword">null</span>)&#123;<br>            System.out.printf(<span class="hljs-string">&quot;该结点信息为：id = %d name = %s&quot;</span>,resNode.getId(),resNode.getName());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;结点不存在&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 创建二叉树</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinaryTree</span></span>&#123;<br>    <span class="hljs-keyword">private</span> HeroNode root;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRoot</span><span class="hljs-params">(HeroNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.root = root;<br>    &#125;<br><br>    <span class="hljs-comment">// 前序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.root != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.root.preOrder();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;二叉树为空，无法遍历&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 中序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">infixOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.root != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.root.infixOrder();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;二叉树为空，无法遍历&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 后序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.root != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.root.postOrder();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;二叉树为空，无法遍历&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 前序遍历查找</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode <span class="hljs-title">preOrderSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span></span>&#123;<br>        <span class="hljs-comment">// 判断当前根节点是否为空</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.root != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 不为空，调用前序遍历查找，返回结点</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.root.preOrderSearch(no);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 如果根结点为空，返回null</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 中序遍历查找</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode <span class="hljs-title">infixOrderSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no )</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.root != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.root.infixOrderSearch(no);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 后序遍历查找</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode <span class="hljs-title">postOrderSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.root != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.root.postOrderSearch(no);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 创建英雄结点</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeroNode</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> HeroNode left;  <span class="hljs-comment">// 默认为空</span><br>    <span class="hljs-keyword">private</span> HeroNode right; <span class="hljs-comment">// 默认为空</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HeroNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode <span class="hljs-title">getLeft</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLeft</span><span class="hljs-params">(HeroNode left)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.left = left;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode <span class="hljs-title">getRight</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRight</span><span class="hljs-params">(HeroNode right)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroNode&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 前序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 先输入当前节点</span><br>        System.out.println(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-comment">// 左边</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.left.preOrder();<br>        &#125;<br>        <span class="hljs-comment">// 右边</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.right.preOrder();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 中序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">infixOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 左边</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.left.infixOrder();<br>        &#125;<br>        <span class="hljs-comment">// 当前</span><br>        System.out.println(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-comment">// 右边</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.right.infixOrder();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 后序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 左边</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.left.postOrder();<br>        &#125;<br>        <span class="hljs-comment">// 右边</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.right.postOrder();<br>        &#125;<br>        System.out.println(<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 前序查找</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode <span class="hljs-title">preOrderSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no )</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;进入前序查找~&quot;</span>);<br>        <span class="hljs-comment">// 先判断当前结点是否相等</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.id == no)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>        &#125;<br>        <span class="hljs-comment">// 判断左边是否为空</span><br>        HeroNode resNode = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>)&#123;     <span class="hljs-comment">// 不为空，则进行左边前序查找</span><br>            resNode = <span class="hljs-keyword">this</span>.left.preOrderSearch(no);<br>        &#125;<br>        <span class="hljs-comment">// 如果不为空，则说明左子树已经找到了，返回当前结点</span><br>        <span class="hljs-keyword">if</span> (resNode != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> resNode;<br>        &#125;<br>        <span class="hljs-comment">// 如果没找到，进行右边前序查找</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>)&#123;<br>            resNode = <span class="hljs-keyword">this</span>.right.preOrderSearch(no);<br>        &#125;<br>        <span class="hljs-keyword">return</span> resNode;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 中序查找</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode <span class="hljs-title">infixOrderSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span></span>&#123;<br>        HeroNode resNode = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">// 先判断左子树是否为空</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 如果不为空，进行左子树的中序遍历</span><br>            resNode = <span class="hljs-keyword">this</span>.left.infixOrderSearch(no);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (resNode != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 说明左子树已经找到，返回</span><br>            <span class="hljs-keyword">return</span> resNode;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;进入中序查找~&quot;</span>);<br>        <span class="hljs-comment">// 判断当前结点是否相等</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.id == no)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>        &#125;<br>        <span class="hljs-comment">// 判断右子树是否为空</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>)&#123;<br>            resNode = <span class="hljs-keyword">this</span>.right.infixOrderSearch(no);<br>        &#125;<br>        <span class="hljs-keyword">return</span> resNode;<br>    &#125;<br><br>    <span class="hljs-comment">// 后序查找</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode <span class="hljs-title">postOrderSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span></span>&#123;<br>        HeroNode resNode = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">// 判断左子树是否为空</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 左子树进行后序查找</span><br>            resNode = <span class="hljs-keyword">this</span>.left.postOrderSearch(no);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (resNode != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 如果不为空，说明左子树已经找到，返回结点</span><br>            <span class="hljs-keyword">return</span> resNode;<br>        &#125;<br>        <span class="hljs-comment">// 判断右子树是否为空</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 不为空，则向右子树进行后序查找，返回结点</span><br>            resNode = <span class="hljs-keyword">this</span>.right.postOrderSearch(no);<br>        &#125;<br>        <span class="hljs-comment">// 判断返回的结点是否为空</span><br>        <span class="hljs-keyword">if</span> (resNode != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> resNode;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;进入后序查找&quot;</span>);<br>        <span class="hljs-comment">// 判断当前结点的id是否与传入的id相等</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.id == no)&#123;<br>            <span class="hljs-comment">// 相等则返回当前结点</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>        &#125;<br>        <span class="hljs-comment">// 不管有没有找到，返回结点，有找到就返回结点，没有就返回的是null</span><br>        <span class="hljs-keyword">return</span> resNode;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li>
</ol>
<h3 id="10-1-7-二叉树-删除节点"><a href="#10-1-7-二叉树-删除节点" class="headerlink" title="10.1.7 二叉树-删除节点"></a>10.1.7 二叉树-删除节点</h3><p>要求</p>
<ol>
<li>如果删除的节点是叶子节点，则删除该节点</li>
<li>如果删除的节点是非叶子节点，则删除该子树.</li>
<li>测试，删除掉 5号叶子节点 和 3号子树.</li>
<li>思路分析</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211208162253051.png" alt="image-20211208162253051"></p>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在HeroNode类添加删除方法</span><br> <span class="hljs-comment">// 删除结点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span></span>&#123;<br>        <span class="hljs-comment">// 如果当前结点的左结点不为空，并且就是要删除的结点，则置空，返回结束递归</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.left.id == no)&#123;<br>            <span class="hljs-keyword">this</span>.left = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 如果当前节点的右结点不为空，并且就是要删除的结点，则置空，返回结束递归</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.right.id == no)&#123;<br>            <span class="hljs-keyword">this</span>.right = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 上面两步都没有扎到，则左递归删除</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.left.delNode(no);<br>        &#125;<br>        <span class="hljs-comment">// 向右递归删除</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.right.delNode(no);<br>        &#125;<br><br>    &#125;<br><br><span class="hljs-comment">// 在BinaryTree类中添加删除方法</span><br><br><span class="hljs-comment">// 删除结点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span></span>&#123;<br>        <span class="hljs-comment">// 如果当前的root不为空，</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.root != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 判断是否是需要删除的</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.root.getId() == no)&#123;<br>                <span class="hljs-keyword">this</span>.root = <span class="hljs-keyword">null</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 否则，从root开始递归删除</span><br>                root.delNode(no);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;空树，无法删除~&quot;</span>);<br>        &#125;<br>    &#125;<br><br><br><span class="hljs-comment">// 在主方法测试</span><br><br>        <span class="hljs-comment">// 测试删除</span><br>        System.out.println(<span class="hljs-string">&quot;删除前，前序遍历&quot;</span>);     <span class="hljs-comment">// 1,2,3,5,4</span><br>        binaryTree.preOrder();<br>        <span class="hljs-comment">//binaryTree.delNode(5);</span><br>        binaryTree.delNode(<span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">&quot;删除后，前序遍历&quot;</span>);     <span class="hljs-comment">// 1,2,3,4</span><br>        binaryTree.preOrder();<br></code></pre></td></tr></table></figure>



<h3 id="10-1-8-思考题-课后练习"><a href="#10-1-8-思考题-课后练习" class="headerlink" title="10.1.8 思考题(课后练习)"></a>10.1.8 思考题(课后练习)</h3><ol>
<li>如果要删除的节点是非叶子节点，现在我们不希望将该非叶子节点为根节点的子树删除，需要指定规则, 假如规定如下:</li>
<li>如果该非叶子节点A只有一个子节点B，则子节点B替代节点A</li>
<li>如果该非叶子节点A有左子节点B和右子节点C，则让左子节点B替代节点A。</li>
<li>请大家思考，如何完成该删除功能, 老师给出提示.(课后练习)</li>
<li>后面在讲解 二叉排序树时，在给大家讲解具体的删除方法</li>
</ol>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在HeroNode类添加按照规则删除的方法</span><br><span class="hljs-comment">// 指定规则删除</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">      如果要删除的节点是非叶子节点，现在我们不希望将该非叶子节点为根节点的子树删除，需要指定规则, 假如规定如下:</span><br><span class="hljs-comment">      如果该非叶子节点A只有一个子节点B，则子节点B替代节点A</span><br><span class="hljs-comment">      如果该非叶子节点A有左子节点B和右子节点C，则让左子节点B替代节点A。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delByRule</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span></span>&#123;<br>        <span class="hljs-comment">// 临时变量，方便保存需要删除的结点的下一个节点</span><br>        HeroNode temp = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">// 如果左结点不为空，并且为要删除的节点</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.left.id == no)&#123;<br>            <span class="hljs-comment">// 如果要删除的结点的左结点不为空，右结点为空，既是只有一个节点</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left.left != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.left.right == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">// 则将左结点替换要删除的节点的位置</span><br>                <span class="hljs-keyword">this</span>.left = <span class="hljs-keyword">this</span>.left.left;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.left.left == <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.left.right != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">// 如果要删除的结点的左结点为空，右结点不为空，则将要删除的右结点放到删除的位置</span><br>                <span class="hljs-keyword">this</span>.left = <span class="hljs-keyword">this</span>.left.right;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left.left != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.left.right != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">// 要删除的左右结点都不为空，则将要删除的结点的左结点替换要删除的结点，</span><br>                <span class="hljs-comment">// 并将要删除结点的右结点挂在新的结点上面</span><br>                temp = <span class="hljs-keyword">this</span>.left.right;<br>                <span class="hljs-keyword">this</span>.left = <span class="hljs-keyword">this</span>.left.left;<br>                <span class="hljs-keyword">this</span>.left.right = temp;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 要删除的左右结点都为空，则直接置空</span><br>                <span class="hljs-keyword">this</span>.left = <span class="hljs-keyword">null</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 如果当前结点的右结点不为空，并且为要删除的节点</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.right.id == no)&#123;<br>            <span class="hljs-comment">// 如果要删除的结点只有左结点</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right.left != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.right.right == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">this</span>.right = <span class="hljs-keyword">this</span>.right.left;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right.left == <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.right.right != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">// 只有右结点</span><br>                <span class="hljs-keyword">this</span>.right = <span class="hljs-keyword">this</span>.right.right;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right.left != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.right.right != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">// 有左右两个节点，将左结点作为新的节点</span><br>                temp = <span class="hljs-keyword">this</span>.right.right;<br>                <span class="hljs-keyword">this</span>.right = <span class="hljs-keyword">this</span>.right.left;<br>                <span class="hljs-keyword">this</span>.right.right = temp;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">this</span>.right = <span class="hljs-keyword">null</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 进行左递归删除</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.left.delByRule(no);<br>        &#125;<br>        <span class="hljs-comment">// 进行右递归删除</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.right.delByRule(no);<br>        &#125;<br><br>    &#125;<br><br><span class="hljs-comment">// 在BinaryTree类中添加按照规则的方法</span><br><span class="hljs-comment">// 按照规则删除，只限用在当前的规则下和例子下面，否则会有bug</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delByRule</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.root != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 如果要删除根节点，则将整棵树删除</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.root.getId() == no)&#123;<br>                <span class="hljs-keyword">this</span>.root = <span class="hljs-keyword">null</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 否则递归删除</span><br>                <span class="hljs-keyword">this</span>.root.delByRule(no);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;空树，无法删除~~~&quot;</span>);<br>        &#125;<br>    &#125;<br><br><span class="hljs-comment">// 在主方法测试</span><br></code></pre></td></tr></table></figure>



<h3 id="二叉树复盘代码"><a href="#二叉树复盘代码" class="headerlink" title="二叉树复盘代码"></a>二叉树复盘代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.binaryTree.practice;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinaryTreeReview</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        BinaryTree1 binaryTree = <span class="hljs-keyword">new</span> BinaryTree1();<br><br>        HeroNode1 node1 = <span class="hljs-keyword">new</span> HeroNode1(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;宋江&quot;</span>);<br>        HeroNode1 node2 = <span class="hljs-keyword">new</span> HeroNode1(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;吴用&quot;</span>);<br>        HeroNode1 node3 = <span class="hljs-keyword">new</span> HeroNode1(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;卢俊义&quot;</span>);<br>        HeroNode1 node4 = <span class="hljs-keyword">new</span> HeroNode1(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;林冲&quot;</span>);<br>        HeroNode1 node5 = <span class="hljs-keyword">new</span> HeroNode1(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;关胜&quot;</span>);<br><br>        binaryTree.setRoot(node1);<br>        node1.setLeft(node2);<br>        node1.setRight(node3);<br>        node3.setLeft(node5);<br>        node3.setRight(node4);<br><br>        <span class="hljs-comment">// 前序遍历</span><br>        System.out.println(<span class="hljs-string">&quot;前序遍历~~&quot;</span>);<br>        binaryTree.preOrder();<br><br>        <span class="hljs-comment">// 中序遍历</span><br>        System.out.println(<span class="hljs-string">&quot;中序遍历~~&quot;</span>);<br>        binaryTree.infixOrder();<br><br>        <span class="hljs-comment">// 后序遍历</span><br>        System.out.println(<span class="hljs-string">&quot;后序遍历&quot;</span>);<br>        binaryTree.postOrder();<br><br><br>        HeroNode1 resNode = binaryTree.postOrderSearch(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (resNode != <span class="hljs-keyword">null</span>)&#123;<br>            System.out.printf(<span class="hljs-string">&quot;结果为：id = %d name = %s&quot;</span>,resNode.getId(),resNode.getName());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;没有找到结果&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;==================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;删除前，前序遍历&quot;</span>);<br>        binaryTree.preOrder();<br>        binaryTree.delNode(<span class="hljs-number">5</span>);<br>        System.out.println(<span class="hljs-string">&quot;删除后，前序遍历&quot;</span>);<br>        binaryTree.preOrder();<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 创建树</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinaryTree1</span></span>&#123;<br>    <span class="hljs-keyword">private</span> HeroNode1 root;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRoot</span><span class="hljs-params">(HeroNode1 root)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.root = root;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.root != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 如果只有一个节点，判断是否要删除的</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.root.getId() == no)&#123;<br>                <span class="hljs-keyword">this</span>.root = <span class="hljs-keyword">null</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 如果root不是要删除的，则递归删除</span><br>                <span class="hljs-keyword">this</span>.root.delNode(no);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;树为空，无法删除~~&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 前序遍历查找，有则返回结点，无则返回null</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode1 <span class="hljs-title">preOrderSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.root != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.root.preOrderSearch(no);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 中序遍历查找</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode1 <span class="hljs-title">infixOrderSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.root != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.root.infixOrderSearch(no);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 后序遍历查找</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode1 <span class="hljs-title">postOrderSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.root != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.root.postOrderSearch(no);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">// 前序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 如果根结点不为空</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.root != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.root.preOrder();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;树为空，无法遍历~~&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 中序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">infixOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.root != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.root.infixOrder();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;树为空，无法遍历~~&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 后序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.root != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.root.postOrder();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;树为空，无法遍历~~&quot;</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-comment">// 先创建结点</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeroNode1</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> HeroNode1 left;<br>    <span class="hljs-keyword">private</span> HeroNode1 right;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HeroNode1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode1 <span class="hljs-title">getLeft</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLeft</span><span class="hljs-params">(HeroNode1 left)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.left = left;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode1 <span class="hljs-title">getRight</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRight</span><span class="hljs-params">(HeroNode1 right)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroNode1&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除：如果是结点，直接删除，如果是子树，将整颗树删除</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span></span>&#123;<br>        <span class="hljs-comment">// 先判断左结点不为空，并且等于要删除的，则直接删除</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.left.id == no)&#123;<br>            <span class="hljs-keyword">this</span>.left = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 判断右结点不为空，并且等于要删除的，直接删除，返回</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.right.id == no)&#123;<br>            <span class="hljs-keyword">this</span>.right = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 向左边递归删除</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.left.delNode(no);<br>        &#125;<br>        <span class="hljs-comment">// 向右边递归删除</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.right.delNode(no);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 前序遍历查找</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode1 <span class="hljs-title">preOrderSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span></span>&#123;<br>        <span class="hljs-comment">// 判断当前的</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.id == no)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>        &#125;<br>        <span class="hljs-comment">// 判断左结点是否为空</span><br>       HeroNode1 resNode = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>)&#123;<br>            resNode = <span class="hljs-keyword">this</span>.left.preOrderSearch(no);<br>        &#125;<br>        <span class="hljs-comment">// 判断左递归返回的值是否为空</span><br>        <span class="hljs-keyword">if</span> (resNode != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> resNode;<br>        &#125;<br>        <span class="hljs-comment">// 右递归</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>)&#123;<br>            resNode = <span class="hljs-keyword">this</span>.right.preOrderSearch(no);<br>        &#125;<br>        <span class="hljs-keyword">return</span> resNode;<br>    &#125;<br><br>    <span class="hljs-comment">// 中序遍历查找</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode1 <span class="hljs-title">infixOrderSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span></span>&#123;<br>        HeroNode1 resNode = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">// 先判断左结点，不为空，则进行左递归查找</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>)&#123;<br>            resNode = <span class="hljs-keyword">this</span>.left.infixOrderSearch(no);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (resNode != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> resNode;<br>        &#125;<br>        <span class="hljs-comment">// 当前</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.id == no)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>        &#125;<br>        <span class="hljs-comment">// 判断右结点，不为空，则向右递归查找</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>)&#123;<br>            resNode = <span class="hljs-keyword">this</span>.right.infixOrderSearch(no);<br>        &#125;<br>        <span class="hljs-keyword">return</span> resNode;<br>    &#125;<br><br>    <span class="hljs-comment">// 后序遍历查找</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode1 <span class="hljs-title">postOrderSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span></span>&#123;<br>        <span class="hljs-comment">// 接收递归的返回值</span><br>        HeroNode1 resNode = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">// 左结点不为空，向左递归进行后序查找</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>)&#123;<br>            resNode = <span class="hljs-keyword">this</span>.left.postOrderSearch(no);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (resNode != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> resNode;<br>        &#125;<br>        <span class="hljs-comment">// 右结点不为空，则向右递归进行后序查找</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>)&#123;<br>            resNode = <span class="hljs-keyword">this</span>.right.postOrderSearch(no);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.id == no)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> resNode;<br>    &#125;<br><br>    <span class="hljs-comment">// 前序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 先输出当前结点</span><br>        System.out.println(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-comment">// 左递归</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.left.preOrder();<br>        &#125;<br>        <span class="hljs-comment">// 右递归</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.right.preOrder();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 中序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">infixOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 左递归</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.left.infixOrder();<br>        &#125;<br>        <span class="hljs-comment">// 输出当前结点</span><br>        System.out.println(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-comment">// 右递归</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.right.infixOrder();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 后序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 左递归</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.left.postOrder();<br>        &#125;<br>        <span class="hljs-comment">// 右递归</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.right.postOrder();<br>        &#125;<br>        System.out.println(<span class="hljs-keyword">this</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>





<h2 id="10-2-顺序存储二叉树"><a href="#10-2-顺序存储二叉树" class="headerlink" title="10.2 顺序存储二叉树"></a>10.2 顺序存储二叉树</h2><h3 id="10-2-1-顺序存储二叉树的概念"><a href="#10-2-1-顺序存储二叉树的概念" class="headerlink" title="10.2.1 顺序存储二叉树的概念"></a>10.2.1 顺序存储二叉树的概念</h3><p>基本说明</p>
<p>从数据存储来看，数组存储方式和树的存储方式可以相互转换，即数组可以转换成树，树也可以转换成数组，看右面的示意图。</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211208212636640.png" alt="image-20211208212636640"></p>
<p>要求:</p>
<ol>
<li>右图的二叉树的结点，要求以数组的方式来存放 arr : [1, 2, 3, 4, 5, 6, 6]</li>
<li>要求在遍历数组 arr时，仍然可以以<strong>前序遍历</strong>，<strong>中序遍历</strong>和<strong>后序遍历</strong>的方式完成结点的遍历</li>
</ol>
<p>顺序存储二叉树的<strong>特点</strong>:</p>
<ol>
<li>顺序二叉树通常只考虑完全二叉树</li>
<li>第n个元素的左子节点为 2 * n + 1 </li>
<li>第n个元素的右子节点为 2 * n + 2</li>
<li>第n个元素的父节点为 (n-1) / 2</li>
<li>n : 表示二叉树中的第几个元素(按0开始编号<br> 如图所示)</li>
</ol>
<h3 id="10-2-2-顺序存储二叉树遍历"><a href="#10-2-2-顺序存储二叉树遍历" class="headerlink" title="10.2.2 顺序存储二叉树遍历"></a>10.2.2 顺序存储二叉树遍历</h3><p>需求: 给你一个数组 {1,2,3,4,5,6,7}，要求以二叉树前序遍历的方式进行遍历。 前序遍历的结果应当为 1,2,4,5,3,6,7</p>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tree;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrBinaryTreeDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;;<br>        ArrBinaryTree arrBinaryTree = <span class="hljs-keyword">new</span> ArrBinaryTree(arr);<br>        System.out.println(<span class="hljs-string">&quot;顺序存储二叉树，前序遍历~~&quot;</span>);<br>        arrBinaryTree.preOrder();      <span class="hljs-comment">// 1,2,4,5,3,6,7</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 编写一个ArrBinaryTree类，实现顺序存储二叉树</span><br><span class="hljs-comment">// 第n个结点的左子结点：2*n + 1</span><br><span class="hljs-comment">// 第n个结点的右子结点：2*n + 2</span><br><span class="hljs-comment">// 第n个结点的父节点为：(n - 1) / 2</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrBinaryTree</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] arr;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrBinaryTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.arr = arr;<br>    &#125;<br>    <span class="hljs-comment">// 重载preOrder</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.preOrder(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 顺序存储二叉树，前序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (arr == <span class="hljs-keyword">null</span> || arr.length == <span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;数组为空，无法前序遍历&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 先输出当前的结点</span><br>        System.out.println(arr[index]);<br>        <span class="hljs-comment">// 向左递归</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * index + <span class="hljs-number">1</span> &lt; arr.length)&#123;<br>            preOrder(<span class="hljs-number">2</span> * index + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">// 向右递归</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * index + <span class="hljs-number">2</span> &lt; arr.length)&#123;<br>            preOrder(<span class="hljs-number">2</span> * index + <span class="hljs-number">2</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h4 id="课后练习："><a href="#课后练习：" class="headerlink" title="课后练习："></a>课后练习：</h4><p>请同学们完成对数组以二叉树中序，后序遍历方式的代码。</p>
<p><strong>完整代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tree;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrBinaryTreeDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;;<br>        ArrBinaryTree arrBinaryTree = <span class="hljs-keyword">new</span> ArrBinaryTree(arr);<br>        System.out.println(<span class="hljs-string">&quot;顺序存储二叉树，前序遍历~~&quot;</span>);<br>        arrBinaryTree.preOrder();      <span class="hljs-comment">// 1,2,4,5,3,6,7</span><br><br>        System.out.println(<span class="hljs-string">&quot;顺序存储二叉树，中序遍历~~&quot;</span>);<br>        arrBinaryTree.infixOrder(<span class="hljs-number">0</span>);        <span class="hljs-comment">// 4,2,5,1,6,3,7</span><br><br>        System.out.println(<span class="hljs-string">&quot;顺序存储二叉树，后续遍历~~&quot;</span>);<br>        arrBinaryTree.postOrder(<span class="hljs-number">0</span>);         <span class="hljs-comment">// 4,5,2,6,7,3,1</span><br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 编写一个ArrBinaryTree类，实现顺序存储二叉树</span><br><span class="hljs-comment">// 第n个结点的左子结点：2*n + 1</span><br><span class="hljs-comment">// 第n个结点的右子结点：2*n + 2</span><br><span class="hljs-comment">// 第n个结点的父节点为：(n - 1) / 2</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrBinaryTree</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] arr;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrBinaryTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.arr = arr;<br>    &#125;<br>    <span class="hljs-comment">// 重载preOrder</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.preOrder(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 顺序存储二叉树，前序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (arr == <span class="hljs-keyword">null</span> || arr.length == <span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;数组为空，无法前序遍历&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 先输出当前的结点</span><br>        System.out.println(arr[index]);<br>        <span class="hljs-comment">// 向左递归</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * index + <span class="hljs-number">1</span> &lt; arr.length)&#123;<br>            preOrder(<span class="hljs-number">2</span> * index + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">// 向右递归</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * index + <span class="hljs-number">2</span> &lt; arr.length)&#123;<br>            preOrder(<span class="hljs-number">2</span> * index + <span class="hljs-number">2</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 顺序存储二叉树，中序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">infixOrder</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (arr == <span class="hljs-keyword">null</span> || arr.length == <span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;二叉树为空，无法中序遍历&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 先向左边递归</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * index + <span class="hljs-number">1</span> &lt; arr.length)&#123;<br>            infixOrder(<span class="hljs-number">2</span> * index + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">// 输入当前结点</span><br>        System.out.println(arr[index]);<br><br>        <span class="hljs-comment">// 向右边递归</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * index + <span class="hljs-number">2</span> &lt; arr.length)&#123;<br>            infixOrder(<span class="hljs-number">2</span> * index + <span class="hljs-number">2</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 顺序存储二叉树，后序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postOrder</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (arr == <span class="hljs-keyword">null</span> || arr.length == <span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;二叉树为空，无法进行后序遍历&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 向左递归</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * index + <span class="hljs-number">1</span> &lt; arr.length)&#123;<br>            postOrder(<span class="hljs-number">2</span> * index + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">// 向右递归</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * index + <span class="hljs-number">2</span> &lt; arr.length)&#123;<br>            postOrder(<span class="hljs-number">2</span> * index + <span class="hljs-number">2</span>);<br>        &#125;<br>        <span class="hljs-comment">// 输出当前结点</span><br>        System.out.println(arr[index]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="10-2-3-顺序存储二叉树应用实例"><a href="#10-2-3-顺序存储二叉树应用实例" class="headerlink" title="10.2.3 顺序存储二叉树应用实例"></a>10.2.3 顺序存储二叉树应用实例</h3><p>八大排序算法中的堆排序，就会使用到顺序存储二叉树， 关于堆排序，我们放在&lt;&lt;树结构实际应用&gt;&gt; 章节讲解 </p>
<h2 id="10-3-线索化二叉树"><a href="#10-3-线索化二叉树" class="headerlink" title="10.3 线索化二叉树"></a>10.3 线索化二叉树</h2><h3 id="10-3-1-先看一个问题"><a href="#10-3-1-先看一个问题" class="headerlink" title="10.3.1 先看一个问题"></a>10.3.1 先看一个问题</h3><p>将数列 {1, 3, 6, 8, 10, 14  } 构建成一颗二叉树.  n+1=7</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211209222324611.png" alt="image-20211209222324611"></p>
<p>问题分析: </p>
<ol>
<li>当我们对上面的二叉树进行中序遍历时，数列为 {8, 3, 10, 1, 6, 14 }</li>
<li>但是 6, 8, 10, 14 这几个节点的 左右指针，并没有完全的利用上.</li>
<li>如果我们希望充分的利用 各个节点的左右指针， 让各个节点可以指向自己的前后节点,怎么办?</li>
<li>解决方案-线索二叉树</li>
</ol>
<h3 id="10-3-2-线索二叉树基本介绍"><a href="#10-3-2-线索二叉树基本介绍" class="headerlink" title="10.3.2 线索二叉树基本介绍"></a>10.3.2 线索二叉树基本介绍</h3><ol>
<li><p>n个结点的二叉链表中含有n+1  【公式 2n-(n-1)=n+1】 个空指针域。利用二叉链表中的空指针域，存放指向该结点在某种遍历次序下的前驱和后继结点的指针（这种附加的指针称为”线索”）</p>
</li>
<li><p>这种加上了线索的二叉链表称为线索链表，相应的二叉树称为线索二叉树(Threaded BinaryTree)。根据线索性质的不同，线索二叉树可分为前序线索二叉树、中序线索二叉树和后序线索二叉树三种</p>
</li>
<li><p>一个结点的前一个结点，称为前驱结点</p>
</li>
<li><p>一个结点的后一个结点，称为后继结点</p>
</li>
</ol>
<h3 id="10-3-3-线索二叉树应用案例"><a href="#10-3-3-线索二叉树应用案例" class="headerlink" title="10.3.3 线索二叉树应用案例"></a>10.3.3 线索二叉树应用案例</h3><p>应用案例说明：将下面的二叉树，进行中序线索二叉树。中序遍历的数列为 {8, 3, 10, 1, 14, 6}</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211209222511722.png" alt="image-20211209222511722"></p>
<p><strong>思路分析:</strong>  中序遍历的结果：{8, 3, 10, 1, 14, 6}</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211209222552345.png" alt="image-20211209222552345"></p>
<p>说明: 当线索化二叉树后，Node节点的 属性 left和right，有如下情况:</p>
<ol>
<li>left 指向的是左子树，也可能是指向的前驱节点. 比如 ① 节点 left 指向的左子树, 而 ⑩ 节点的 left 指向的就是前驱节点.</li>
<li>right指向的是右子树，也可能是指向后继节点，比如 ① 节点right 指向的是右子树，而⑩ 节点的right 指向的是后继节点.</li>
</ol>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tree.threadedbinarytree;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadedBinaryTreeDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建结点</span><br>        HeroNode root = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;tom&quot;</span>);<br>        HeroNode node2 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;jack&quot;</span>);<br>        HeroNode node3 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">6</span>, <span class="hljs-string">&quot;smith&quot;</span>);<br>        HeroNode node4 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;milan&quot;</span>);<br>        HeroNode node5 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;dim&quot;</span>);<br>        HeroNode node6 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">14</span>, <span class="hljs-string">&quot;mary&quot;</span>);<br>        <span class="hljs-comment">// 构建二叉树</span><br>        root.setLeft(node2);<br>        root.setRight(node3);<br>        node2.setLeft(node4);<br>        node2.setRight(node5);<br>        node3.setLeft(node6);<br><br>        ThreadedBinaryTree threadedBinaryTree = <span class="hljs-keyword">new</span> ThreadedBinaryTree();<br>        threadedBinaryTree.setRoot(root);<br>        <span class="hljs-comment">// 线索化</span><br>        threadedBinaryTree.threadedNode();<br><br>        <span class="hljs-comment">// 以10号结点测试</span><br>        HeroNode node5Left = node5.getLeft();<br>        HeroNode node5Right = node5.getRight();<br>        System.out.println(<span class="hljs-string">&quot;10 号的前驱结点 = &quot;</span> + node5Left);<br>        System.out.println(<span class="hljs-string">&quot;10 号的后继节点为 =  &quot;</span>+ node5Right);<br><br>        <span class="hljs-comment">// 测试遍历线索化二叉树</span><br>        threadedBinaryTree.threadedList();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 创建二叉树</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadedBinaryTree</span></span>&#123;<br>    <span class="hljs-keyword">private</span> HeroNode root;<br><br>    <span class="hljs-comment">// 前驱结点</span><br>    <span class="hljs-keyword">private</span> HeroNode pre = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRoot</span><span class="hljs-params">(HeroNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.root = root;<br>    &#125;<br><br>    <span class="hljs-comment">// 重载threadedNode</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">threadedNode</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.threadedNode(root);<br>    &#125;<br>    <span class="hljs-comment">// 线索化二叉树中序遍历</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> node 就是当前需要线索化的结点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">threadedNode</span><span class="hljs-params">(HeroNode node)</span></span>&#123;<br>        <span class="hljs-comment">// 如果当前结点为空，直接返回</span><br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 先线索化左子树</span><br>        threadedNode(node.getLeft());<br><br>        <span class="hljs-comment">// 输出当前结点</span><br>        <span class="hljs-comment">// 处理前驱结点</span><br>        <span class="hljs-keyword">if</span> (node.getLeft() == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 如果当前结点的左结点为空，则指向前驱结点</span><br>            node.setLeft(pre);<br>            <span class="hljs-comment">// 设置当前节点的类型,1：前驱结点</span><br>            node.setLeftType(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">// 处理后继节点，node下移一位后再处理后继节点</span><br>        <span class="hljs-keyword">if</span> (pre != <span class="hljs-keyword">null</span> &amp;&amp; pre.getRight() == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 设置后继节点</span><br>            pre.setRight(node);<br>            <span class="hljs-comment">// 设置类型，后继节点</span><br>            pre.setRightType(<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// !!!每处理一个节点，让当前节点是下一个结点的前驱结点</span><br>        pre = node;<br><br>        <span class="hljs-comment">// 再线索化右子树</span><br>        threadedNode(node.getRight());<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 创建英雄结点</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeroNode</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> HeroNode left;  <span class="hljs-comment">// 默认为空</span><br>    <span class="hljs-keyword">private</span> HeroNode right; <span class="hljs-comment">// 默认为空</span><br><br>    <span class="hljs-comment">// leftType == 0表示是左子树，1表示是前驱结点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> leftType;<br>    <span class="hljs-comment">// rightType == 0表示是右子树，1表示是后继节点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> rightType;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLeftType</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> leftType;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLeftType</span><span class="hljs-params">(<span class="hljs-keyword">int</span> leftType)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.leftType = leftType;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getRightType</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> rightType;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRightType</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rightType)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.rightType = rightType;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HeroNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode <span class="hljs-title">getLeft</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLeft</span><span class="hljs-params">(HeroNode left)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.left = left;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode <span class="hljs-title">getRight</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRight</span><span class="hljs-params">(HeroNode right)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroNode&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="10-3-4-遍历线索化二叉树"><a href="#10-3-4-遍历线索化二叉树" class="headerlink" title="10.3.4 遍历线索化二叉树"></a>10.3.4 遍历线索化二叉树</h3><ol>
<li>说明：对前面的中序线索化的二叉树， 进行遍历</li>
<li>分析：因为线索化后，各个结点指向有变化，因此原来的遍历方式不能使用，这时需要使用新的方式遍历线索化二叉树，各个节点可以通过线型方式遍历，因此无需使用递归方式，这样也提高了遍历的效率。 遍历的次序应当和中序遍历保持一致。</li>
<li>代码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tree.threadedbinarytree;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadedBinaryTreeDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建结点</span><br>        HeroNode root = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;tom&quot;</span>);<br>        HeroNode node2 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;jack&quot;</span>);<br>        HeroNode node3 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">6</span>, <span class="hljs-string">&quot;smith&quot;</span>);<br>        HeroNode node4 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;milan&quot;</span>);<br>        HeroNode node5 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;dim&quot;</span>);<br>        HeroNode node6 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">14</span>, <span class="hljs-string">&quot;mary&quot;</span>);<br>        <span class="hljs-comment">// 构建二叉树</span><br>        root.setLeft(node2);<br>        root.setRight(node3);<br>        node2.setLeft(node4);<br>        node2.setRight(node5);<br>        node3.setLeft(node6);<br><br>        ThreadedBinaryTree threadedBinaryTree = <span class="hljs-keyword">new</span> ThreadedBinaryTree();<br>        threadedBinaryTree.setRoot(root);<br>        <span class="hljs-comment">// 线索化</span><br>        threadedBinaryTree.threadedNode();<br><br>        <span class="hljs-comment">// 测试中序遍历线索化二叉树</span><br>        threadedBinaryTree.threadedList();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 创建二叉树</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadedBinaryTree</span></span>&#123;<br>    <span class="hljs-keyword">private</span> HeroNode root;<br><br>    <span class="hljs-comment">// 前驱结点</span><br>    <span class="hljs-keyword">private</span> HeroNode pre = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRoot</span><span class="hljs-params">(HeroNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.root = root;<br>    &#125;<br><br>    <span class="hljs-comment">// 遍历线索化二叉树</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">threadedList</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 定义一个指针，辅助遍历</span><br>        HeroNode node = root;<br>        <span class="hljs-comment">// 如果当前的node不为空，一直遍历</span><br>        <span class="hljs-keyword">while</span> (node != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 中序遍历，先左子树</span><br>            <span class="hljs-comment">// 也就是找到leftType == 1(前驱结点)的时候退出循环，将其输出</span><br>            <span class="hljs-keyword">while</span> (node.getLeftType() == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-comment">// leftType等于0时，一直找</span><br>                node = node.getLeft();<br>            &#125;<br>            <span class="hljs-comment">// 打印当前结点</span><br>            System.out.println(node);<br><br>            <span class="hljs-comment">// 如果当前的结点的指针指的是后继结点，就一直输出</span><br>            <span class="hljs-keyword">while</span> (node.getRightType() == <span class="hljs-number">1</span>)&#123;<br>                node = node.getRight();<br>                System.out.println(node);<br>            &#125;<br>            <span class="hljs-comment">// 替换遍历这个结点</span><br>            node = node.getRight();<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 创建英雄结点</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeroNode</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> HeroNode left;  <span class="hljs-comment">// 默认为空</span><br>    <span class="hljs-keyword">private</span> HeroNode right; <span class="hljs-comment">// 默认为空</span><br><br>    <span class="hljs-comment">// leftType == 0表示是左子树，1表示是前驱结点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> leftType;<br>    <span class="hljs-comment">// rightType == 0表示是右子树，1表示是后继节点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> rightType;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLeftType</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> leftType;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLeftType</span><span class="hljs-params">(<span class="hljs-keyword">int</span> leftType)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.leftType = leftType;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getRightType</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> rightType;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRightType</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rightType)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.rightType = rightType;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HeroNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode <span class="hljs-title">getLeft</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLeft</span><span class="hljs-params">(HeroNode left)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.left = left;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode <span class="hljs-title">getRight</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRight</span><span class="hljs-params">(HeroNode right)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroNode&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="10-3-5-线索二叉树应用案例"><a href="#10-3-5-线索二叉树应用案例" class="headerlink" title="10.3.5 线索二叉树应用案例"></a>10.3.5 线索二叉树应用案例</h3><p>课后作业:<br>我这里讲解了中序线索化二叉树，前序线索化二叉树和后序线索化二叉树的分析思路类似，同学们作为课后作业完成.</p>
<p>后序遍历线索化二叉树不会</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tree.threadedbinarytree;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadedBinaryTreeDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建结点</span><br>        HeroNode root = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;tom&quot;</span>);<br>        HeroNode node2 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;jack&quot;</span>);<br>        HeroNode node3 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">6</span>, <span class="hljs-string">&quot;smith&quot;</span>);<br>        HeroNode node4 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;milan&quot;</span>);<br>        HeroNode node5 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;dim&quot;</span>);<br>        HeroNode node6 = <span class="hljs-keyword">new</span> HeroNode(<span class="hljs-number">14</span>, <span class="hljs-string">&quot;mary&quot;</span>);<br>        <span class="hljs-comment">// 构建二叉树</span><br>        root.setLeft(node2);<br>        root.setRight(node3);<br>        node2.setLeft(node4);<br>        node2.setRight(node5);<br>        node3.setLeft(node6);<br><br>        ThreadedBinaryTree threadedBinaryTree = <span class="hljs-keyword">new</span> ThreadedBinaryTree();<br>        threadedBinaryTree.setRoot(root);<br>        <span class="hljs-comment">// 中序线索化</span><br>        <span class="hljs-comment">//threadedBinaryTree.threadedInfixNode();</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">        // 以10号结点测试中序线索化</span><br><span class="hljs-comment">        HeroNode node5Left = node5.getLeft();</span><br><span class="hljs-comment">        System.out.println(&quot;10号的中序线索化前驱结点 = &quot; + node5Left);*/</span><br><br>        <span class="hljs-comment">// 测试中序遍历线索化二叉树</span><br>        <span class="hljs-comment">//threadedBinaryTree.threadedList();</span><br><br>        <span class="hljs-comment">// 测试前序线索化二叉树</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">        threadedBinaryTree.threadedPreNode(root);</span><br><span class="hljs-comment">        HeroNode node5LeftPre = node5.getLeft();</span><br><span class="hljs-comment">        System.out.println(&quot;10号前序线索化前驱结点 = &quot; + node5LeftPre);</span><br><span class="hljs-comment">        // 前序遍历二叉树</span><br><span class="hljs-comment">        threadedBinaryTree.threadedPreList();</span><br><span class="hljs-comment">*/</span><br><br>        <span class="hljs-comment">// 测试后序线索化二叉树</span><br>        threadedBinaryTree.threadedPostNode(root);<br>        HeroNode node5RightPost = node5.getRight();<br>        System.out.println(<span class="hljs-string">&quot;后序线索化10号的后继结点 = &quot;</span> + node5RightPost);<br>        <span class="hljs-comment">// 后序遍历线索化二叉树</span><br>        threadedBinaryTree.threadedPostList();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 创建二叉树</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadedBinaryTree</span></span>&#123;<br>    <span class="hljs-keyword">private</span> HeroNode root;<br><br>    <span class="hljs-comment">// 前驱结点</span><br>    <span class="hljs-keyword">private</span> HeroNode pre = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRoot</span><span class="hljs-params">(HeroNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.root = root;<br>    &#125;<br><br>    <span class="hljs-comment">// 后序遍历线索化二叉树</span><br>   <br><br>    <span class="hljs-comment">// 后序线索化二叉树</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">threadedPostNode</span><span class="hljs-params">(HeroNode node)</span></span>&#123;<br><br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 先递归线索化左子树</span><br>        threadedPostNode(node.getLeft());<br>        <span class="hljs-comment">// 右子树</span><br>        threadedPostNode(node.getRight());<br>        <span class="hljs-comment">// 再处理当前的</span><br>        <span class="hljs-comment">// 前驱结点</span><br>        <span class="hljs-keyword">if</span> (node.getLeft() == <span class="hljs-keyword">null</span>)&#123;<br>            node.setLeft(pre);<br>            node.setLeftType(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">// 后继结点</span><br>        <span class="hljs-keyword">if</span> (pre != <span class="hljs-keyword">null</span> &amp;&amp; pre.getRight() == <span class="hljs-keyword">null</span>)&#123;<br>            pre.setRight(node);<br>            pre.setRightType(<span class="hljs-number">1</span>);<br>        &#125;<br>        pre = node;<br>    &#125;<br><br>    <span class="hljs-comment">// 前序遍历线索化二叉树</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">threadedPreList</span><span class="hljs-params">()</span></span>&#123;<br>        HeroNode node = root;<br>        <span class="hljs-keyword">while</span> (node != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 先输出当前</span><br>            System.out.println(node);<br>            <span class="hljs-comment">// 处理左子树</span><br>            <span class="hljs-keyword">while</span> (node.getLeftType() == <span class="hljs-number">0</span>)&#123;<br>                node = node.getLeft();<br>                System.out.println(node);<br><br>            &#125;<br>            <span class="hljs-comment">// 处理右子树</span><br>            <span class="hljs-keyword">while</span> (node.getRightType() == <span class="hljs-number">1</span>)&#123;<br>                node = node.getRight();<br>                System.out.println(node);<br>            &#125;<br><br>            node = node.getRight();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 前序线索化二叉树</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> node 当前要线索化的结点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">threadedPreNode</span><span class="hljs-params">(HeroNode node)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 处理当前的</span><br>        <span class="hljs-comment">// 前驱结点</span><br>        <span class="hljs-keyword">if</span> (node.getLeft() == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 设置前驱结点</span><br>            node.setLeft(pre);<br>            <span class="hljs-comment">// 更改结点类型</span><br>            node.setLeftType(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">// 处理后继结点</span><br>        <span class="hljs-keyword">if</span> (pre != <span class="hljs-keyword">null</span> &amp;&amp; pre.getRight() == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 设置后继结点</span><br>            pre.setRight(node);<br>            <span class="hljs-comment">// 设置类型</span><br>            pre.setRightType(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">// 每处理完一个，就让当前结点是下一个结点的前驱结点</span><br>        pre = node;<br><br>        <span class="hljs-comment">// 前序递归左子树，先判断是否是左子树再进行递归</span><br>        <span class="hljs-keyword">if</span> (node.getLeftType() == <span class="hljs-number">0</span>)&#123;<br>            threadedPreNode(node.getLeft());<br>        &#125;<br><br>        <span class="hljs-comment">// 前序递归右子树</span><br>        <span class="hljs-keyword">if</span> (node.getRightType() == <span class="hljs-number">0</span>)&#123;<br>            threadedPreNode(node.getRight());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 中序遍历线索化二叉树</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">threadedList</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 定义一个指针，辅助遍历</span><br>        HeroNode node = root;<br>        <span class="hljs-comment">// 如果当前的node不为空，一直遍历</span><br>        <span class="hljs-keyword">while</span> (node != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 中序遍历，先左子树</span><br>            <span class="hljs-comment">// 也就是找到leftType == 1(前驱结点)的时候退出循环，将其输出</span><br>            <span class="hljs-keyword">while</span> (node.getLeftType() == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-comment">// leftType等于0时，一直找</span><br>                node = node.getLeft();<br>            &#125;<br>            <span class="hljs-comment">// 打印当前结点</span><br>            System.out.println(node);<br><br>            <span class="hljs-comment">// 如果当前的结点的指针指的是后继结点，就一直输出</span><br>            <span class="hljs-keyword">while</span> (node.getRightType() == <span class="hljs-number">1</span>)&#123;<br>                node = node.getRight();<br>                System.out.println(node);<br>            &#125;<br>            <span class="hljs-comment">// 替换遍历这个结点</span><br>            node = node.getRight();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 重载threadedInfixNode</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">threadedInfixNode</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.threadedInfixNode(root);<br>    &#125;<br><br><br>    <span class="hljs-comment">// 中序线索二叉树</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> node 就是当前需要线索化的结点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">threadedInfixNode</span><span class="hljs-params">(HeroNode node)</span></span>&#123;<br>        <span class="hljs-comment">// 如果当前结点为空，直接返回</span><br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 先线索化左子树</span><br>        threadedInfixNode(node.getLeft());<br><br>        <span class="hljs-comment">// 输出当前结点</span><br>        <span class="hljs-comment">// 处理前驱结点</span><br>        <span class="hljs-keyword">if</span> (node.getLeft() == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 如果当前结点的左结点为空，则指向前驱结点</span><br>            node.setLeft(pre);<br>            <span class="hljs-comment">// 设置当前节点的类型,1：前驱结点</span><br>            node.setLeftType(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">// 处理后继节点，node下移一位后再处理后继节点</span><br>        <span class="hljs-keyword">if</span> (pre != <span class="hljs-keyword">null</span> &amp;&amp; pre.getRight() == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 设置后继节点</span><br>            pre.setRight(node);<br>            <span class="hljs-comment">// 设置类型，后继节点</span><br>            pre.setRightType(<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// !!!每处理一个节点，让当前节点是下一个结点的前驱结点</span><br>        pre = node;<br><br>        <span class="hljs-comment">// 再线索化右子树</span><br>        threadedInfixNode(node.getRight());<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 创建英雄结点</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeroNode</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> HeroNode left;  <span class="hljs-comment">// 默认为空</span><br>    <span class="hljs-keyword">private</span> HeroNode right; <span class="hljs-comment">// 默认为空</span><br><br>    <span class="hljs-comment">// leftType == 0表示是左子树，1表示是前驱结点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> leftType;<br>    <span class="hljs-comment">// rightType == 0表示是右子树，1表示是后继节点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> rightType;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLeftType</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> leftType;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLeftType</span><span class="hljs-params">(<span class="hljs-keyword">int</span> leftType)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.leftType = leftType;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getRightType</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> rightType;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRightType</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rightType)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.rightType = rightType;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HeroNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode <span class="hljs-title">getLeft</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLeft</span><span class="hljs-params">(HeroNode left)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.left = left;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroNode <span class="hljs-title">getRight</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRight</span><span class="hljs-params">(HeroNode right)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroNode&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="第11章-树结构实际应用"><a href="#第11章-树结构实际应用" class="headerlink" title="第11章 树结构实际应用"></a>第11章 树结构实际应用</h1><h2 id="11-1-堆排序"><a href="#11-1-堆排序" class="headerlink" title="11.1 堆排序"></a>11.1 堆排序</h2><h3 id="11-1-1-堆排序基本介绍"><a href="#11-1-1-堆排序基本介绍" class="headerlink" title="11.1.1 堆排序基本介绍"></a>11.1.1 堆排序基本介绍</h3><ol>
<li>堆排序是利用堆这种数据结构而设计的一种排序算法，堆排序是一种选择排序，它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。</li>
<li>堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆, 注意 : 没有要求结点的左孩子的值和右孩子的值的大小关系。</li>
<li>每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆</li>
<li>大顶堆举例说明</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211210202023265.png" alt="image-20211210202023265"></p>
<ol start="5">
<li> 小顶堆举例说明</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211210202059287.png" alt="image-20211210202059287"></p>
<ol start="6">
<li>一般升序采用大顶堆，降序采用小顶堆 </li>
</ol>
<h3 id="11-1-2-堆排序基本思想"><a href="#11-1-2-堆排序基本思想" class="headerlink" title="11.1.2 堆排序基本思想"></a>11.1.2 堆排序基本思想</h3><ol>
<li>堆排序的基本思想是：<br>将待排序序列构造成一个大顶堆</li>
<li>此时，整个序列的最大值就是堆顶的根节点。</li>
<li>将其与末尾元素进行交换，此时末尾就为最大值。</li>
<li>然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了。</li>
</ol>
<p>可以看到在构建大顶堆的过程中，元素的个数逐渐减少，最后就得到一个有序序列了.</p>
<h3 id="11-1-3-堆排序步骤图解说明"><a href="#11-1-3-堆排序步骤图解说明" class="headerlink" title="11.1.3 堆排序步骤图解说明"></a>11.1.3 堆排序步骤图解说明</h3><p>要求：给你一个数组 {4,6,8,5,9} , 要求使用堆排序法，将数组升序排序。</p>
<p><strong>步骤一 构造初始堆。将给定无序序列构造成一个大顶堆（一般升序采用大顶堆，降序采用小顶堆)。</strong></p>
<ol>
<li>.假设给定无序序列结构如下</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211211120032217.png" alt="image-20211211120032217"></p>
<ol start="2">
<li>.此时我们从最后一个非叶子结点开始（叶结点自然不用调整，第一个非叶子结点 arr.length/2-1=5/2-1=1，也就是下面的6结点），从左至右，从下至上进行调整。</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211211120043666.png" alt="image-20211211120043666"></p>
<ol start="3">
<li>.找到第二个非叶节点4，由于[4,9,8]中9元素最大，4和9交换。</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211211120051781.png" alt="image-20211211120051781"></p>
<ol start="4">
<li>这时，交换导致了子根[4,5,6]结构混乱，继续调整，[4,5,6]中6最大，交换4和6。</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211211120136657.png" alt="image-20211211120136657"></p>
<p>此时，我们就将一个无序序列构造成了一个大顶堆。</p>
<p><strong>步骤二 将堆顶元素与末尾元素进行交换，使末尾元素最大。然后继续调整堆，再将堆顶元素与末尾元素交换，得到第二大元素。如此反复进行交换、重建、交换。</strong></p>
<ol>
<li>.将堆顶元素9和末尾元素4进行交换</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211211120148685.png" alt="image-20211211120148685"></p>
<ol start="2">
<li>.重新调整结构，使其继续满足堆定义</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211211120158571.png" alt="image-20211211120158571"></p>
<ol start="3">
<li>.再将堆顶元素8与末尾元素5进行交换，得到第二大元素8.</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211211120207009.png" alt="image-20211211120207009"></p>
<ol start="4">
<li>后续过程，继续进行调整，交换，如此反复进行，最终使得整个序列有序</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211211120215701.png" alt="image-20211211120215701"></p>
<p><strong>再简单总结下堆排序的基本思路：</strong></p>
<p>​        <strong>1).将无序序列构建成一个堆，根据升序降序需求选择大顶堆或小顶堆;</strong></p>
<p>　　<strong>2).将堆顶元素与末尾元素交换，将最大元素”沉”到数组末端;</strong></p>
<p>　　<strong>3).重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整+交换步骤，直到整个序列有序。</strong></p>
<h3 id="11-1-4-堆排序代码实现"><a href="#11-1-4-堆排序代码实现" class="headerlink" title="11.1.4 堆排序代码实现"></a>11.1.4 堆排序代码实现</h3><p>要求：给你一个数组 {4,6,8,5,9} , 要求使用堆排序法，将数组升序排序。</p>
<p>代码实现：看老师演示: </p>
<p>说明：</p>
<ol>
<li>堆排序不是很好理解，老师通过Debug 帮助大家理解堆排序</li>
<li>堆排序的速度非常快，在我的机器上 8百万数据 3 秒左右。O(nlogn) </li>
<li>代码实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tree;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeapSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//int[] arr = &#123;4,6,8,5,9,-1,195,359,-9000&#125;;</span><br>        <span class="hljs-keyword">int</span> [] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">8000000</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8000000</span>; i++)&#123;<br>            arr[i] = (<span class="hljs-keyword">int</span>) (Math.random()*<span class="hljs-number">80000</span>);       <span class="hljs-comment">// [0,80000)的随机数字</span><br>        &#125;<br><br>        Date date1 = <span class="hljs-keyword">new</span> Date();<br>        SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        String date1Str = simpleDateFormat.format(date1);<br>        System.out.println(<span class="hljs-string">&quot;开始排序前时间：&quot;</span>+date1Str);<br><br>        heapSort(arr);<br><br>        Date date2 = <span class="hljs-keyword">new</span> Date();<br>        String date2Str = simpleDateFormat.format(date2);<br>        System.out.println(<span class="hljs-string">&quot;开始排序后时间：&quot;</span>+date2Str);    <span class="hljs-comment">// 约2秒*/</span><br><br>        <span class="hljs-comment">//System.out.println(Arrays.toString(arr));</span><br><br>    &#125;<br><br>    <span class="hljs-comment">// 堆排序</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">heapSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[])</span></span>&#123;<br>        <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//System.out.println(&quot;堆排序！！&quot;);</span><br><span class="hljs-comment">/*        adjustHeap(arr,1,arr.length);</span><br><span class="hljs-comment">        System.out.println(&quot;第一次：&quot; + Arrays.toString(arr));  // 4,9,8,5,6</span><br><span class="hljs-comment">        adjustHeap(arr,0,arr.length);</span><br><span class="hljs-comment">        System.out.println(&quot;第二次：&quot; + Arrays.toString(arr));  // 9,6,8,5,4*/</span><br><br>        <span class="hljs-comment">// 将无序序列构建成一个堆，根据升序降序需求选择大顶堆或小顶堆;</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = arr.length /<span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i-- )&#123;<br>            adjustHeap(arr,i,arr.length);<br>        &#125;<br>        <span class="hljs-comment">//System.out.println(&quot;数组：&quot; + Arrays.toString(arr));</span><br><br>        <span class="hljs-comment">// 将堆顶元素与末尾元素交换，将最大元素&quot;沉&quot;到数组末端;</span><br>        <span class="hljs-comment">// 重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整+交换步骤，直到整个序列有序。</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = arr.length - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br>            temp = arr[j];<br>            arr[j] = arr[<span class="hljs-number">0</span>];<br>            arr[<span class="hljs-number">0</span>] = temp;<br>            adjustHeap(arr,<span class="hljs-number">0</span>,j);<br>        &#125;<br>        <span class="hljs-comment">//System.out.println(Arrays.toString(arr));</span><br>    &#125;<br><br>    <span class="hljs-comment">// 构建一个大顶堆</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr       需要构建大顶堆的数组（二叉树）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> i         表示非叶子结点在数组中的索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> length    表示对多少个元素继续调整，length是逐渐减少的</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">adjustHeap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> length)</span></span>&#123;<br>        <span class="hljs-comment">// 先保存当前的元素，临时变量</span><br>        <span class="hljs-keyword">int</span> temp = arr[i];<br>        <span class="hljs-comment">// int k = 2 * i + 1 这个就是i结点的左子结点</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>; k &lt; length; k = <span class="hljs-number">2</span> * k + <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">// 比较左右结点的值的大小</span><br>            <span class="hljs-keyword">if</span> (k + <span class="hljs-number">1</span> &lt; length &amp;&amp; arr[k] &lt; arr[k+<span class="hljs-number">1</span>])&#123;<br>                <span class="hljs-comment">// 如果右结点的大，让k指向右结点</span><br>                k++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (arr[k] &gt; temp)&#123;<br>                <span class="hljs-comment">// 如果arr[k] &gt; 父节点的temp值，则将arr[k]的值放到父节点</span><br>                arr[i] = arr[k];<br>                i = k;  <span class="hljs-comment">// 让i指向k</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 如果arr[k] 小于temp，则直接break</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 当for循环结束之后，我们已经将以i为父结点的最大值放在了顶堆上面（局部），</span><br>        arr[i] = temp;  <span class="hljs-comment">// 将temp的值放到调整后的位置</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="堆排序复盘代码"><a href="#堆排序复盘代码" class="headerlink" title="堆排序复盘代码"></a>堆排序复盘代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tree.practice;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestHeapSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> [] arr = &#123;<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span>&#125;;<br>        heapSort(arr);<br>        System.out.println(<span class="hljs-string">&quot;堆排序后的数组：&quot;</span> + Arrays.toString(arr));<br>    &#125;<br><br>    <span class="hljs-comment">// 堆排序</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">heapSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[])</span></span>&#123;<br>        <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 将无序序列构建成一个堆，按照规则构建成大顶堆或者小顶堆</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = arr.length / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>            adjustHeap(arr,i,arr.length);<br>        &#125;<br>        <span class="hljs-comment">// 将大的数据放在数组最后</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = arr.length - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br>            <span class="hljs-comment">// 交换</span><br>            temp = arr[j];<br>            arr[j] = arr[<span class="hljs-number">0</span>];<br>            arr[<span class="hljs-number">0</span>] = temp;<br>            <span class="hljs-comment">// 将剩下的数据，继续构建大顶堆，完成排序，i的下标从0开始</span><br>            adjustHeap(arr,<span class="hljs-number">0</span>,j);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 构建大顶堆</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr       需要构建大顶堆的数组（二叉树）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> i         第一个非叶子结点的索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> length    数组的长度，逐渐减少</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">adjustHeap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> []arr,<span class="hljs-keyword">int</span> i ,<span class="hljs-keyword">int</span> length)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> temp = arr[i];<br>        <span class="hljs-comment">// 先找到i结点左右结点</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>; k &lt; length; k = <span class="hljs-number">2</span> * k + <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">// 比较左右结点的大小</span><br>            <span class="hljs-keyword">if</span> (k + <span class="hljs-number">1</span> &lt; length &amp;&amp; arr[k] &lt; arr[k+<span class="hljs-number">1</span>])&#123;<br>                <span class="hljs-comment">// 将指针定位到较大的右结点</span><br>                k++;<br>            &#125;<br>            <span class="hljs-comment">// 比较arr[k]与temp的大小</span><br>            <span class="hljs-keyword">if</span> (arr[k] &gt; temp)&#123;<br>                <span class="hljs-comment">// 将k为索引的值放到父结点上</span><br>                arr[i] = arr[k];<br>                <span class="hljs-comment">// 将i指向k</span><br>                i = k;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 如果arr[k] &lt; temp，直接break</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 结束for循环后，将temp归位,这时的i已经指向k的位置</span><br>        arr[i] = temp;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>





<h2 id="11-2-赫夫曼树"><a href="#11-2-赫夫曼树" class="headerlink" title="11.2 赫夫曼树"></a>11.2 赫夫曼树</h2><h3 id="11-2-1-基本介绍"><a href="#11-2-1-基本介绍" class="headerlink" title="11.2.1 基本介绍"></a>11.2.1 基本介绍</h3><ol>
<li><p>给定n个权值作为n个叶子结点，构造一棵二叉树，若该树的带权路径长度(wpl)达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman Tree), 还有的书翻译为霍夫曼树。</p>
</li>
<li><p>赫夫曼树是带权路径长度最短的树，权值较大的结点离根较近。</p>
</li>
</ol>
<h3 id="11-2-2-赫夫曼树几个重要概念和举例说明"><a href="#11-2-2-赫夫曼树几个重要概念和举例说明" class="headerlink" title="11.2.2 赫夫曼树几个重要概念和举例说明"></a>11.2.2 赫夫曼树几个重要概念和举例说明</h3><ol>
<li>路径和路径长度：在一棵树中，从一个结点往下可以达到的孩子或孙子结点之间的通路，称为路径。通路中分支的数目称为路径长度。若规定根结点的层数为1，则从根结点到第L层结点的路径长度为L-1</li>
<li>结点的权及带权路径长度：若将树中结点赋给一个有着某种含义的数值，则这个数值称为该结点的权。结点的带权路径长度为：从根结点到该结点之间的路径长度与该结点的权的乘积</li>
<li><strong>树的带权路径长度：</strong>树的带权路径长度规定为所有<strong>叶子结点</strong>的带权路径长度之和，记为WPL(weighted path length) ,权值越大的结点离根结点越近的二叉树才是最优二叉树。</li>
<li><strong>WPL</strong>最小的就是赫夫曼树</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211211120539293.png" alt="image-20211211120539293"></p>
<h3 id="11-2-3-赫夫曼树创建思路图解"><a href="#11-2-3-赫夫曼树创建思路图解" class="headerlink" title="11.2.3 赫夫曼树创建思路图解"></a>11.2.3 赫夫曼树创建思路图解</h3><p>给你一个数列 {13, 7, 8, 3, 29, 6, 1}，要求转成一颗赫夫曼树.</p>
<p>思路分析(示意图)：</p>
<p>{13, 7, 8, 3, 29, 6, 1}  </p>
<p>构成赫夫曼树的步骤：</p>
<ol>
<li>从小到大进行排序, 将每一个数据，每个数据都是一个节点 ， 每个节点可以看成是一颗最简单的二叉树</li>
<li>取出根节点权值最小的两颗二叉树 </li>
<li>组成一颗新的二叉树, 该新的二叉树的根节点的权值是前面两颗二叉树根节点权值的和  </li>
<li>再将这颗新的二叉树，以根节点的权值大小 再次排序， 不断重复  1-2-3-4 的步骤，直到数列中，所有的数据都被处理，就得到一颗赫夫曼树</li>
<li>图解</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211211120725316.png" alt="image-20211211120725316"></p>
<h3 id="11-2-4-赫夫曼树的代码实现"><a href="#11-2-4-赫夫曼树的代码实现" class="headerlink" title="11.2.4 赫夫曼树的代码实现"></a>11.2.4 赫夫曼树的代码实现</h3><p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.huffmantree;<br><br><span class="hljs-keyword">import</span> com.sun.istack.internal.NotNull;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HuffmanTree</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">13</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>, <span class="hljs-number">29</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>&#125;;<br>        Node root = createHuffmanTree(arr);<br>        preOrder(root);<br>    &#125;<br><br>    <span class="hljs-comment">// 前序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(Node root)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>)&#123;<br>            root.preOrder();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;树为空，不能遍历&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 创建赫夫曼树</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Node <span class="hljs-title">createHuffmanTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[])</span></span>&#123;<br>        <span class="hljs-comment">// 为了操作方便，将arr中的每一个元素放到node中，将node放到ArrList集合中</span><br>        ArrayList&lt;Node&gt; nodes = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> node : arr) &#123;<br>            nodes.add(<span class="hljs-keyword">new</span> Node(node));<br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (nodes.size() &gt; <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">// 排序</span><br>            Collections.sort(nodes);<br>            <span class="hljs-comment">//System.out.println(nodes);</span><br><br>            <span class="hljs-comment">// 将最小的两个值，构建成一颗二叉树</span><br>            Node leftNode = nodes.get(<span class="hljs-number">0</span>);<br>            Node rightNode = nodes.get(<span class="hljs-number">1</span>);<br>            Node parent = <span class="hljs-keyword">new</span> Node(leftNode.value + rightNode.value);<br>            parent.left = leftNode;<br>            parent.right = rightNode;<br><br>            <span class="hljs-comment">// 将原来在数组的结点删除，并加入父结点</span><br>            nodes.remove(leftNode);<br>            nodes.remove(rightNode);<br>            nodes.add(parent);<br><br>            <span class="hljs-comment">//System.out.println(nodes);</span><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> nodes.get(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-comment">// 创建结点</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Node</span>&gt;</span>&#123;<br><br>    <span class="hljs-keyword">int</span> value;      <span class="hljs-comment">// 权值</span><br>    Node left;      <span class="hljs-comment">// 左结点</span><br>    Node right;     <span class="hljs-comment">// 右结点</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-comment">// 前序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.left.preOrder();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.right.preOrder();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;value=&quot;</span> + value +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Node o)</span> </span>&#123;<br>        <span class="hljs-comment">// 从小到大排序</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.value - o.value;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="11-3赫夫曼编码"><a href="#11-3赫夫曼编码" class="headerlink" title="11.3赫夫曼编码"></a>11.3赫夫曼编码</h2><h3 id="11-3-1-基本介绍"><a href="#11-3-1-基本介绍" class="headerlink" title="11.3.1 基本介绍"></a>11.3.1 基本介绍</h3><ol>
<li>赫夫曼编码也翻译为    哈夫曼编码(Huffman Coding)，又称霍夫曼编码，是一种编码方式, 属于一种程序算法</li>
<li>赫夫曼编码是赫哈夫曼树在电讯通信中的经典的应用之一。</li>
<li>赫夫曼编码广泛地用于数据文件压缩。其压缩率通常在20%～90%之间</li>
<li>赫夫曼码是可变字长编码(VLC)的一种。Huffman于1952年提出一种编码方法，称之为最佳编码</li>
</ol>
<h3 id="11-3-2-原理剖析"><a href="#11-3-2-原理剖析" class="headerlink" title="11.3.2 原理剖析"></a>11.3.2 原理剖析</h3><ul>
<li>通信领域中信息的处理方式1-定长编码</li>
</ul>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211211162735895.png" alt="image-20211211162735895"></p>
<ul>
<li>通信领域中信息的处理方式2-变长编码</li>
</ul>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211211162800442.png" alt="image-20211211162800442"></p>
<ul>
<li>通信领域中信息的处理方式3-赫夫曼编码</li>
</ul>
<p>传输的 字符串 </p>
<ol>
<li><p>i like like like java do you like a java  </p>
</li>
<li><p>d:1 y:1 u:1 j:2 v:2 o:2 l:4 k:4 e:4 i:5 a:5  :9 // 各个字符对应的个数</p>
</li>
<li><p>按照上面字符出现的次数构建一颗赫夫曼树, 次数作为权值 </p>
</li>
</ol>
<p>步骤：</p>
<p>构成赫夫曼树的步骤：</p>
<ol>
<li><p>从小到大进行排序, 将每一个数据，每个数据都是一个节点 ， 每个节点可以看成是一颗最简单的二叉树</p>
</li>
<li><p>取出根节点权值最小的两颗二叉树 </p>
</li>
<li><p>组成一颗新的二叉树, 该新的二叉树的根节点的权值是前面两颗二叉树根节点权值的和 </p>
</li>
<li><p>再将这颗新的二叉树，以根节点的权值大小 再次排序， 不断重复 1-2-3-4 的步骤，直到数列中，所有的数据都被处理，就得到一颗赫夫曼树</p>
</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211211162911824.png" alt="image-20211211162911824"></p>
<ol start="4">
<li>根据赫夫曼树，给各个字符,规定编码 (前缀编码)， 向左的路径为0 向右的路径为1 ， 编码如下:</li>
</ol>
<p>o: 1000  u: 10010 d: 100110 y: 100111 i: 101</p>
<p>a : 110   k: 1110  e: 1111    j: 0000    v: 0001</p>
<p>l: 001     : 01</p>
<ol start="5">
<li>按照上面的赫夫曼编码，我们的”i like like like java do you like a java”  字符串对应的编码为 (注意这里我们使用的无损压缩)</li>
</ol>
<p>101010010111101111010011011110111101001101111011110100001100001110011001111000011001111000100100100110111101111011100100001100001110 通过赫夫曼编码处理 长度为 133</p>
<p>6） 长度为 ： 133 </p>
<p>说明:</p>
<p>原来长度是 359 , 压缩了 (359-133) / 359 = 62.9%</p>
<p>此编码满足前缀编码, 即字符的编码都不能是其他字符编码的前缀。不会造成匹配的多义性</p>
<p>赫夫曼编码是无损处理方案</p>
<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>注意, 这个赫夫曼树根据排序方法不同，也可能不太一样，<strong>这样对应的赫夫曼编码也不完全一样</strong>，但是wpl 是一样的，都是最小的, 比如: 如果我们让每次生成的新的二叉树总是排在权值相同的二叉树的最后一个，则生成的二叉树为:</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211211163053930.png" alt="image-20211211163053930"></p>
<h3 id="11-3-3-最佳实践-数据压缩-创建赫夫曼树"><a href="#11-3-3-最佳实践-数据压缩-创建赫夫曼树" class="headerlink" title="11.3.3 最佳实践-数据压缩(创建赫夫曼树)"></a>11.3.3 最佳实践-数据压缩(创建赫夫曼树)</h3><p>将给出的一段文本，比如 “i like like like java do you like a java” ， 根据前面的讲的赫夫曼编码原理，对其进行数据压缩处理 ，形式如 “1010100110111101111010011011110111101001101111011110100001100001110011001111000011001111000100100100110111101111011100100001100001110<br>“ </p>
<p>步骤1：根据赫夫曼编码压缩数据的原理，需要创建 “i like like like java do you like a java” 对应的赫夫曼树.</p>
<p>思路：前面已经分析过了，而且我们已然讲过了构建赫夫曼树的具体实现。<br>代码实现：看老师演示:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建赫夫曼树</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Node <span class="hljs-title">createHuffmanTree</span><span class="hljs-params">(List&lt;Node&gt; nodes)</span></span>&#123;<br>        <span class="hljs-keyword">while</span> (nodes.size() &gt; <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">// 将传进来的集合排序，从小到大</span><br>            Collections.sort(nodes);<br>            <span class="hljs-comment">// 取出最小和次小的两个数组成一颗二叉树</span><br>            Node leftNode = nodes.get(<span class="hljs-number">0</span>);<br>            Node rightNode = nodes.get(<span class="hljs-number">1</span>);<br>            Node parent = <span class="hljs-keyword">new</span> Node(<span class="hljs-keyword">null</span>,leftNode.weight + rightNode.weight);<br><br>            parent.left = leftNode;<br>            parent.right = rightNode;<br><br>            <span class="hljs-comment">// 将已经处理好的结点从集合中去掉</span><br>            nodes.remove(leftNode);<br>            nodes.remove(rightNode);<br>            <span class="hljs-comment">// 将新构成的父结点加入到nodes集合中</span><br>            nodes.add(parent);<br>        &#125;<br>        <span class="hljs-comment">// 重复上面的步骤，最后将剩下的父结点返回</span><br>        <span class="hljs-keyword">return</span> nodes.get(<span class="hljs-number">0</span>);<br>    &#125;<br></code></pre></td></tr></table></figure>



<h3 id="11-3-4-生成赫夫曼编码和赫夫曼编码后的数据"><a href="#11-3-4-生成赫夫曼编码和赫夫曼编码后的数据" class="headerlink" title="11.3.4 生成赫夫曼编码和赫夫曼编码后的数据"></a>11.3.4 生成赫夫曼编码和赫夫曼编码后的数据</h3><p>我们已经生成了 赫夫曼树, 下面我们继续完成任务<br>生成赫夫曼树对应的赫夫曼编码  , 如下表:=01 a=100 d=11000 u=11001 e=1110 v=11011 i=101 y=11010 j=0010 k=1111 l=000 o=0011<br>使用赫夫曼编码来生成赫夫曼编码数据 ,即按照上面的赫夫曼编码，将”i like like like java do you like a java”   字符串生成对应的编码数据, 形式如下.1010100010111111110010001011111111001000101111111100100101001101110001110000011011101000111100101000101111111100110001001010011011100<br>思路：前面已经分析过了，而且我们讲过了生成赫夫曼编码的具体实现。<br>代码实现：看老师演示:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 编写一个方法，将字符串对应的byte[] 数组，根据赫夫曼编码，返回一个经过赫夫曼编码压缩的一个byte[]</span><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> bytes         字符串数组对应的bytes数组</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> huffmanCodes   赫夫曼编码</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span>              返回以经过赫夫曼编译压缩的byte数组</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] zip (<span class="hljs-keyword">byte</span>[] bytes, Map&lt;Byte,String&gt; huffmanCodes)&#123;<br>       <span class="hljs-comment">// 传进来的byte[]数组转成赫夫曼编码对应的字符串</span><br>       StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">byte</span> b : bytes) &#123;<br>           stringBuilder.append(huffmanCodes.get(b));<br>       &#125;<br>       <span class="hljs-comment">// 10101000101111111100100010111111110010001011111111001001010....</span><br>       <span class="hljs-comment">// System.out.println(stringBuilder);</span><br><br>       <span class="hljs-comment">// 将赫夫曼编码对应的字符串，分成8位一个，统计分成了多少个len，根据len创建byte[]</span><br>       <span class="hljs-keyword">int</span> len;<br>       <span class="hljs-keyword">if</span> (stringBuilder.length() % <span class="hljs-number">8</span> == <span class="hljs-number">0</span>)&#123;<br>           len = stringBuilder.length() / <span class="hljs-number">8</span>;<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           len = stringBuilder.length() / <span class="hljs-number">8</span> + <span class="hljs-number">1</span>;<br>       &#125;<br>       <span class="hljs-keyword">byte</span>[] huffmanCodesBytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[len];<br><br>       <span class="hljs-comment">// 遍历生成的字符串数组，将数据加到huffmanCodesBytes中</span><br>       <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;  <span class="hljs-comment">// huffmanCodesBytes数组的下标</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; stringBuilder.length(); i += <span class="hljs-number">8</span>)&#123;<br>           String strByte;<br>           <span class="hljs-keyword">if</span> (i + <span class="hljs-number">8</span> &gt; stringBuilder.length())&#123;<br>               <span class="hljs-comment">// 如果超过了StringBuilder的长度，则将后面的字符串直接加入即可</span><br>               strByte = stringBuilder.substring(i);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-comment">// 如果没超过，则8位一个加入strByte中</span><br>               strByte = stringBuilder.substring(i, i + <span class="hljs-number">8</span>);<br>           &#125;<br><br>           <span class="hljs-comment">// 将strByte转成byte放到huffmanCodeBytes中</span><br>           huffmanCodesBytes[index] = (<span class="hljs-keyword">byte</span>) Integer.parseInt(strByte,<span class="hljs-number">2</span>);<br>           index++;<br><br>       &#125;<br><br><br>       <span class="hljs-keyword">return</span> huffmanCodesBytes;<br>   &#125;<br><br>   <span class="hljs-comment">// 生成赫夫曼树对应的赫夫曼编码</span><br>   <span class="hljs-comment">// 将赫夫曼编码存放在map中</span><br>   <span class="hljs-keyword">static</span> Map&lt;Byte,String&gt; huffmanCodes = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>   <span class="hljs-comment">// 生成的赫夫曼编码表示，需要去拼接路径</span><br>   <span class="hljs-keyword">static</span> StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br><br>   <span class="hljs-comment">// 为了调用方便，重载getCodes，</span><br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Byte,String&gt; <span class="hljs-title">getCodes</span><span class="hljs-params">(Node root)</span></span>&#123;<br>       <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>)&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>       &#125;<br>       <span class="hljs-comment">// 处理左子树</span><br>       getCodes(root.left,<span class="hljs-string">&quot;0&quot;</span>,stringBuilder);<br>       <span class="hljs-comment">// 处理右子树</span><br>       getCodes(root.right,<span class="hljs-string">&quot;1&quot;</span>,stringBuilder);<br>       <span class="hljs-keyword">return</span> huffmanCodes;<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 功能，将传入的node结点的所有叶子结点的赫夫曼编码得到，并放在huffmanCodes中</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> node 传入的结点</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> code 路径：0表示左子结点，1表示右子结点</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> stringBuilder 用于拼接路径</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getCodes</span><span class="hljs-params">(Node node,String code,StringBuilder stringBuilder)</span></span>&#123;<br>       StringBuilder stringBuilder2 = <span class="hljs-keyword">new</span> StringBuilder(stringBuilder);<br>       <span class="hljs-comment">// 将得到的code加入到StringBuilder2中</span><br>       stringBuilder2.append(code);<br><br>       <span class="hljs-keyword">if</span> (node != <span class="hljs-keyword">null</span>)&#123;  <span class="hljs-comment">// 如果node == null不处理</span><br>           <span class="hljs-comment">// 判断是否是非叶子结点</span><br>           <span class="hljs-keyword">if</span> (node.data == <span class="hljs-keyword">null</span>)&#123;<br>               <span class="hljs-comment">// 说明不是非叶子结点，</span><br>               <span class="hljs-comment">// 向左递归</span><br>               getCodes(node.left, <span class="hljs-string">&quot;0&quot;</span>, stringBuilder2);<br><br>               <span class="hljs-comment">// 向右递归</span><br>               getCodes(node.right, <span class="hljs-string">&quot;1&quot;</span>, stringBuilder2);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-comment">// 说明是一个叶子结点</span><br>               <span class="hljs-comment">// 表示已经找到某个叶子结点的最后</span><br>               huffmanCodes.put(node.data,stringBuilder2.toString());<br>           &#125;<br>       &#125;<br>   &#125;<br><br></code></pre></td></tr></table></figure>



<h3 id="11-3-5-使用赫夫曼编码解码"><a href="#11-3-5-使用赫夫曼编码解码" class="headerlink" title="11.3.5 使用赫夫曼编码解码"></a>11.3.5 使用赫夫曼编码解码</h3><p>使用赫夫曼编码来解码数据，具体要求是</p>
<p>前面我们得到了赫夫曼编码和对应的编码byte[] , 即:[-88, -65, -56, -65, -56, -65, -55, 77, -57, 6, -24, -14, -117, -4, -60, -90, 28]</p>
<p>现在要求使用赫夫曼编码， 进行解码，又重新得到原来的字符串”i like like like java do you like a java”</p>
<p>思路：解码过程，就是编码的一个逆向操作。</p>
<p>代码实现：看老师演示:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 解码：</span><br><span class="hljs-comment">    * 1.将传进来的已经经过赫夫曼编码表处理过的byte字节数组转成对应的二进制</span><br><span class="hljs-comment">    * 2.把原来的赫夫曼编码表反转，如，原来：a -&gt; 97 反转后：97 -&gt; a</span><br><span class="hljs-comment">    * 3.根据反转后的赫夫曼编码，遍历生成的二进制字符串，进行解码</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> huffmanCodes 赫夫曼编码表 map</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> huffmanBytes 经过赫夫曼编码表处理过的字节数组</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span>  返回的是原来字符串对应的数组</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] decode(Map&lt;Byte,String&gt; huffmanCodes, <span class="hljs-keyword">byte</span>[] huffmanBytes)&#123;<br>       <span class="hljs-comment">// 先获得huffmanBytes对应的二进制</span><br>       StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br>       <span class="hljs-comment">// 将bytes数组转为二进制字符串</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; huffmanBytes.length; i++) &#123;<br>           <span class="hljs-comment">// 先拿到huffmanBytes的数据</span><br>           <span class="hljs-keyword">byte</span> b = huffmanBytes[i];<br>           <span class="hljs-comment">// 设置一个flag，是否已经到达数组最后，如果已经是最后一个，设为true</span><br>           <span class="hljs-keyword">boolean</span> flag = (i == (huffmanBytes.length - <span class="hljs-number">1</span>));<br>           <span class="hljs-comment">// 将遍历得到的b，转换成对应的二进制，并加入到stringBuilder中</span><br>           stringBuilder.append(byteToBitString(!flag,b));<br>       &#125;<br>       <span class="hljs-comment">// 10101000101111111100100010111111...</span><br>        <span class="hljs-comment">// System.out.println(&quot;stringBuilder = &quot; + stringBuilder);</span><br><br><br>       <span class="hljs-comment">// 根据赫夫曼编码进行解码</span><br>       <span class="hljs-comment">// 把赫夫曼编码表反转，a -&gt; 97 , 97 -&gt; a</span><br>       Map&lt;String, Byte&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>       <span class="hljs-keyword">for</span> (Map.Entry&lt;Byte, String&gt; entry : huffmanCodes.entrySet()) &#123;<br>           map.put(entry.getValue(),entry.getKey());<br>       &#125;<br><br>       <span class="hljs-comment">// System.out.println(&quot;map = &quot; + map);</span><br><br>       <span class="hljs-comment">// 遍历stringBuilder，拿到原来的字符</span><br>       <span class="hljs-comment">// 创建集合，存放byte</span><br>       List&lt;Byte&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; stringBuilder.length();) &#123;<br>           <span class="hljs-keyword">int</span> count = <span class="hljs-number">1</span>;           <span class="hljs-comment">// 小计数器，截取到哪里</span><br>           <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;     <span class="hljs-comment">// 循环结束条件</span><br>           Byte b = <span class="hljs-keyword">null</span>;           <span class="hljs-comment">// 定义一个byte来接收遍历出来 的byte字节</span><br>           <span class="hljs-comment">// 如果flag = true 的时候，还没有找到</span><br>           <span class="hljs-keyword">while</span> (flag)&#123;<br>               <span class="hljs-comment">// 递增的取出key 如第一次1，第二次10，第三次101...</span><br>               String key = stringBuilder.substring(i, i+count); <span class="hljs-comment">// i 不动，count移动</span><br>               <span class="hljs-comment">// 从取出的key中，和赫夫曼编码表map对比，看看是否匹配</span><br>               b = map.get(key);<br>               <span class="hljs-comment">// 判断b是否为空，如果为空，则不匹配，继续查找</span><br>               <span class="hljs-keyword">if</span> (b == <span class="hljs-keyword">null</span>)&#123;<br>                   count++;<br>               &#125; <span class="hljs-keyword">else</span> &#123;<br>                   <span class="hljs-comment">// 如果匹配了，直接退出循环</span><br>                   flag = <span class="hljs-keyword">false</span>;<br>               &#125;<br>           &#125;<br>           <span class="hljs-comment">// 将字节b加入到list集合中</span><br>           list.add(b);<br>           <span class="hljs-comment">// 将i指向新的位置count上</span><br>           i += count;<br>       &#125;<br>       <span class="hljs-comment">// for循环结束后，已经得到了原来的字符串i like like like java do you like a java 的list集合</span><br>       <span class="hljs-comment">// 将list集合的数据放到byte[]，并返回</span><br>       <span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[list.size()];<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; b.length; i++) &#123;<br>           b[i] = list.get(i);<br>       &#125;<br><br>       <span class="hljs-keyword">return</span> b;<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 将一个byte转成一个二进制字符串</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> flag 标识是是否需要补高位，如果是true，则需要补高位，否则不用，是针对最后一个</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> b    传入的byte</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span>     是该 b对应的二进制字符串（注意是反码返回）</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">byteToBitString</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> flag, <span class="hljs-keyword">byte</span> b)</span></span>&#123;<br>       <span class="hljs-comment">// 将b转成int类型，方便利用Integer类转成对应的二进制</span><br>       <span class="hljs-keyword">int</span> temp = b;<br>       <span class="hljs-comment">// 如果是正数，还要在高位补位</span><br>       <span class="hljs-keyword">if</span> (flag)&#123;<br>           <span class="hljs-comment">// 如果为true，则需要补位</span><br>           temp |= <span class="hljs-number">256</span>;    <span class="hljs-comment">// 按位与，只有都为0的时候为0，只要有1出现都为1 ，1 0000 0000 | 0000 00001 = 1 0000 0001</span><br>       &#125;<br><br>       String str = Integer.toBinaryString(temp);  <span class="hljs-comment">// 返回的是对应二进制的补码</span><br>       <span class="hljs-comment">// 如果高位补位了，截取后面8为返回</span><br>       <span class="hljs-keyword">if</span> (flag)&#123;<br>           <span class="hljs-keyword">return</span> str.substring(str.length() - <span class="hljs-number">8</span>); <span class="hljs-comment">// 截取后面的8为</span><br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-comment">// 否则直接返回</span><br>           <span class="hljs-keyword">return</span> str;<br>       &#125;<br><br>   &#125;<br><br></code></pre></td></tr></table></figure>



<h3 id="11-3-6-最佳实践-文件压缩"><a href="#11-3-6-最佳实践-文件压缩" class="headerlink" title="11.3.6 最佳实践-文件压缩"></a>11.3.6 最佳实践-文件压缩</h3><p>我们学习了通过赫夫曼编码对一个字符串进行编码和解码, 下面我们来完成对文件的压缩和解压， 具体要求：给你一个图片文件，要求对其进行无损压缩, 看看压缩效果如何。<br>思路：读取文件-&gt; 得到赫夫曼编码表 -&gt; 完成压缩</p>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 编写方法，将以文件进行压缩</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> srcFile 需要压缩的文件路径</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> dstFile 压缩后的文件存放路径</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">zipFile</span><span class="hljs-params">(String srcFile,String dstFile)</span></span>&#123;<br>    <span class="hljs-comment">// 创建一个输入流</span><br>    FileInputStream is = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-comment">// 输出流</span><br>    FileOutputStream os = <span class="hljs-keyword">null</span>;<br>    ObjectOutputStream oos = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 创建输出流</span><br>        is = <span class="hljs-keyword">new</span> FileInputStream(srcFile);<br>        <span class="hljs-comment">// 创建一个和原文件大小一样的byte数组</span><br>        <span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[is.available()];<br>        <span class="hljs-comment">// 读取文件</span><br>        is.read(b);<br>        <span class="hljs-comment">// 直接对源文件压缩</span><br>        <span class="hljs-keyword">byte</span>[] huffmanBytes = huffmanZip(b);<br>        <span class="hljs-comment">// 创建输出流，存放压缩文件</span><br>        os = <span class="hljs-keyword">new</span> FileOutputStream(dstFile);<br>        <span class="hljs-comment">// 创建ObjectOutputStream，方便后面的解压</span><br>        oos = <span class="hljs-keyword">new</span> ObjectOutputStream(os);<br>        <span class="hljs-comment">// 将压缩好的huffmanBytes放入oos中</span><br>        oos.writeObject(huffmanBytes);<br>        <span class="hljs-comment">// 顺便把赫夫曼编码表也放进去，否则无法解码</span><br>        oos.writeObject(huffmanCodes);<br><br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        System.out.println(e.getMessage());<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            os.close();<br>            oos.close();<br>            is.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.out.println(e.getMessage());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="11-3-7-最佳实践-文件解压-文件恢复"><a href="#11-3-7-最佳实践-文件解压-文件恢复" class="headerlink" title="11.3.7 最佳实践-文件解压(文件恢复)"></a>11.3.7 最佳实践-文件解压(文件恢复)</h3><p>具体要求：将前面压缩的文件，重新恢复成原来的文件。<br>思路：读取压缩文件(数据和赫夫曼编码表)-&gt; 完成解压(文件恢复)</p>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 编写一个方法，完成对文件的解压</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> zipFile 准备解压的文件</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> dstFile 将文件解压到哪个路径</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unZip</span><span class="hljs-params">(String zipFile, String dstFile)</span></span>&#123;<br>       <span class="hljs-comment">// 定义文件输入流</span><br>       InputStream is = <span class="hljs-keyword">null</span>;<br>       <span class="hljs-comment">// 定义一个对象输入流</span><br>       ObjectInputStream ois = <span class="hljs-keyword">null</span>;<br>       OutputStream os = <span class="hljs-keyword">null</span>;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-comment">// 创建文件输入流</span><br>           is = <span class="hljs-keyword">new</span> FileInputStream(zipFile);<br>           <span class="hljs-comment">// 创建一个和is关联的对象输入流</span><br>           ois = <span class="hljs-keyword">new</span> ObjectInputStream(is);<br>           <span class="hljs-comment">// 读取huffmanBytes数组</span><br>           <span class="hljs-keyword">byte</span>[] huffmanBytes = (<span class="hljs-keyword">byte</span>[]) ois.readObject();<br>           <span class="hljs-comment">// 读取赫夫曼编码表</span><br>           Map&lt;Byte,String&gt; huffmanCodes = (Map&lt;Byte, String&gt;) ois.readObject();<br>           <span class="hljs-comment">// 解码</span><br>           <span class="hljs-keyword">byte</span>[] bytes = decode(huffmanCodes, huffmanBytes);<br>           <span class="hljs-comment">// 将bytes数组写入目标文件</span><br>           os = <span class="hljs-keyword">new</span> FileOutputStream(dstFile);<br>           os.write(bytes);<br>       &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>           System.out.println(e.getMessage());<br>       &#125; <span class="hljs-keyword">finally</span> &#123;<br>           <span class="hljs-keyword">try</span> &#123;<br>               os.close();<br>               ois.close();<br>               is.close();<br>           &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>               System.out.println(e.getMessage());<br>           &#125;<br><br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>



<h3 id="11-3-8-完整代码"><a href="#11-3-8-完整代码" class="headerlink" title="11.3.8 完整代码"></a>11.3.8 完整代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.huffmancode;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HuffmanCode</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>       <span class="hljs-comment">/* String srcFile = &quot;E:\\11\\src.bmp&quot;;</span><br><span class="hljs-comment">        String dstFile = &quot;E:\\11\\dst.zip&quot;;</span><br><span class="hljs-comment">        zipFile(srcFile,dstFile);</span><br><span class="hljs-comment">        System.out.println(&quot;压缩成功~~&quot;);*/</span><br><br>       unZip(<span class="hljs-string">&quot;E:\\11\\dst.zip&quot;</span>,<span class="hljs-string">&quot;E:\\11\\src1111.bmp&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;解压成功~&quot;</span>);<br><br>        <span class="hljs-comment">/*String content = &quot;i like like like java do you like a java&quot;;</span><br><span class="hljs-comment">        byte[] contentBytes = content.getBytes();</span><br><span class="hljs-comment">        System.out.println(contentBytes.length);    // 40</span><br><span class="hljs-comment">        byte[] huffmanCodeBytes = huffmanZip(contentBytes);</span><br><span class="hljs-comment">        System.out.println(&quot;huffmanCodeBytes = &quot; + Arrays.toString(huffmanCodeBytes));</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        String str = byteToBitString(false,(byte) 1);</span><br><span class="hljs-comment">        System.out.println(str);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        byte[] sourceBytes = decode(huffmanCodes, huffmanCodeBytes);</span><br><span class="hljs-comment">        System.out.println(&quot;原来的字符串为：&quot; + new String(sourceBytes));*/</span><br><br><br>       <span class="hljs-comment">/* // 获取nodes集合</span><br><span class="hljs-comment">        List&lt;Node&gt; nodes = getNodes(contentBytes);</span><br><span class="hljs-comment">        System.out.println(nodes);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 测试创建的赫夫曼树</span><br><span class="hljs-comment">        System.out.println(&quot;赫夫曼树&quot;);</span><br><span class="hljs-comment">        Node huffmanTreeRoot = createHuffmanTree(nodes);</span><br><span class="hljs-comment">        System.out.println(&quot;前序遍历&quot;);</span><br><span class="hljs-comment">        huffmanTreeRoot.preOrder();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        getCodes(huffmanTreeRoot);</span><br><span class="hljs-comment">        System.out.println(&quot;生成的赫夫曼编码 = &quot; + huffmanCodes);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        byte[] huffmanCodeBytes = zip(contentBytes, huffmanCodes);</span><br><span class="hljs-comment">        System.out.println(&quot;huffmanCodeBytes = &quot; + Arrays.toString(huffmanCodeBytes));*/</span><br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 编写一个方法，完成对文件的解压</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> zipFile 准备解压的文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dstFile 将文件解压到哪个路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unZip</span><span class="hljs-params">(String zipFile, String dstFile)</span></span>&#123;<br>        <span class="hljs-comment">// 定义文件输入流</span><br>        InputStream is = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">// 定义一个对象输入流</span><br>        ObjectInputStream ois = <span class="hljs-keyword">null</span>;<br>        OutputStream os = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建文件输入流</span><br>            is = <span class="hljs-keyword">new</span> FileInputStream(zipFile);<br>            <span class="hljs-comment">// 创建一个和is关联的对象输入流</span><br>            ois = <span class="hljs-keyword">new</span> ObjectInputStream(is);<br>            <span class="hljs-comment">// 读取huffmanBytes数组</span><br>            <span class="hljs-keyword">byte</span>[] huffmanBytes = (<span class="hljs-keyword">byte</span>[]) ois.readObject();<br>            <span class="hljs-comment">// 读取赫夫曼编码表</span><br>            Map&lt;Byte,String&gt; huffmanCodes = (Map&lt;Byte, String&gt;) ois.readObject();<br>            <span class="hljs-comment">// 解码</span><br>            <span class="hljs-keyword">byte</span>[] bytes = decode(huffmanCodes, huffmanBytes);<br>            <span class="hljs-comment">// 将bytes数组写入目标文件</span><br>            os = <span class="hljs-keyword">new</span> FileOutputStream(dstFile);<br>            os.write(bytes);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(e.getMessage());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                os.close();<br>                ois.close();<br>                is.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                System.out.println(e.getMessage());<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 编写方法，将以文件进行压缩</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> srcFile 需要压缩的文件路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dstFile 压缩后的文件存放路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">zipFile</span><span class="hljs-params">(String srcFile,String dstFile)</span></span>&#123;<br>        <span class="hljs-comment">// 创建一个输入流</span><br>        FileInputStream is = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">// 输出流</span><br>        FileOutputStream os = <span class="hljs-keyword">null</span>;<br>        ObjectOutputStream oos = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建输出流</span><br>            is = <span class="hljs-keyword">new</span> FileInputStream(srcFile);<br>            <span class="hljs-comment">// 创建一个和原文件大小一样的byte数组</span><br>            <span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[is.available()];<br>            <span class="hljs-comment">// 读取文件</span><br>            is.read(b);<br>            <span class="hljs-comment">// 直接对源文件压缩</span><br>            <span class="hljs-keyword">byte</span>[] huffmanBytes = huffmanZip(b);<br>            <span class="hljs-comment">// 创建输出流，存放压缩文件</span><br>            os = <span class="hljs-keyword">new</span> FileOutputStream(dstFile);<br>            <span class="hljs-comment">// 创建ObjectOutputStream，方便后面的解压</span><br>            oos = <span class="hljs-keyword">new</span> ObjectOutputStream(os);<br>            <span class="hljs-comment">// 将压缩好的huffmanBytes放入oos中</span><br>            oos.writeObject(huffmanBytes);<br>            <span class="hljs-comment">// 顺便把赫夫曼编码表也放进去，否则无法解码</span><br>            oos.writeObject(huffmanCodes);<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.out.println(e.getMessage());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                os.close();<br>                oos.close();<br>                is.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                System.out.println(e.getMessage());<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解码：</span><br><span class="hljs-comment">     * 1.将传进来的已经经过赫夫曼编码表处理过的byte字节数组转成对应的二进制</span><br><span class="hljs-comment">     * 2.把原来的赫夫曼编码表反转，如，原来：a -&gt; 97 反转后：97 -&gt; a</span><br><span class="hljs-comment">     * 3.根据反转后的赫夫曼编码，遍历生成的二进制字符串，进行解码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> huffmanCodes 赫夫曼编码表 map</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> huffmanBytes 经过赫夫曼编码表处理过的字节数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  返回的是原来字符串对应的数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] decode(Map&lt;Byte,String&gt; huffmanCodes, <span class="hljs-keyword">byte</span>[] huffmanBytes)&#123;<br>        <span class="hljs-comment">// 先获得huffmanBytes对应的二进制</span><br>        StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-comment">// 将bytes数组转为二进制字符串</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; huffmanBytes.length; i++) &#123;<br>            <span class="hljs-comment">// 先拿到huffmanBytes的数据</span><br>            <span class="hljs-keyword">byte</span> b = huffmanBytes[i];<br>            <span class="hljs-comment">// 设置一个flag，是否已经到达数组最后，如果已经是最后一个，设为true</span><br>            <span class="hljs-keyword">boolean</span> flag = (i == (huffmanBytes.length - <span class="hljs-number">1</span>));<br>            <span class="hljs-comment">// 将遍历得到的b，转换成对应的二进制，并加入到stringBuilder中</span><br>            stringBuilder.append(byteToBitString(!flag,b));<br>        &#125;<br>        <span class="hljs-comment">// 10101000101111111100100010111111...</span><br>         <span class="hljs-comment">// System.out.println(&quot;stringBuilder = &quot; + stringBuilder);</span><br><br><br>        <span class="hljs-comment">// 根据赫夫曼编码进行解码</span><br>        <span class="hljs-comment">// 把赫夫曼编码表反转，a -&gt; 97 , 97 -&gt; a</span><br>        Map&lt;String, Byte&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Byte, String&gt; entry : huffmanCodes.entrySet()) &#123;<br>            map.put(entry.getValue(),entry.getKey());<br>        &#125;<br><br>        <span class="hljs-comment">// System.out.println(&quot;map = &quot; + map);</span><br><br>        <span class="hljs-comment">// 遍历stringBuilder，拿到原来的字符</span><br>        <span class="hljs-comment">// 创建集合，存放byte</span><br>        List&lt;Byte&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; stringBuilder.length();) &#123;<br>            <span class="hljs-keyword">int</span> count = <span class="hljs-number">1</span>;           <span class="hljs-comment">// 小计数器，截取到哪里</span><br>            <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;     <span class="hljs-comment">// 循环结束条件</span><br>            Byte b = <span class="hljs-keyword">null</span>;           <span class="hljs-comment">// 定义一个byte来接收遍历出来 的byte字节</span><br>            <span class="hljs-comment">// 如果flag = true 的时候，还没有找到</span><br>            <span class="hljs-keyword">while</span> (flag)&#123;<br>                <span class="hljs-comment">// 递增的取出key 如第一次1，第二次10，第三次101...</span><br>                String key = stringBuilder.substring(i, i+count); <span class="hljs-comment">// i 不动，count移动</span><br>                <span class="hljs-comment">// 从取出的key中，和赫夫曼编码表map对比，看看是否匹配</span><br>                b = map.get(key);<br>                <span class="hljs-comment">// 判断b是否为空，如果为空，则不匹配，继续查找</span><br>                <span class="hljs-keyword">if</span> (b == <span class="hljs-keyword">null</span>)&#123;<br>                    count++;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 如果匹配了，直接退出循环</span><br>                    flag = <span class="hljs-keyword">false</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 将字节b加入到list集合中</span><br>            list.add(b);<br>            <span class="hljs-comment">// 将i指向新的位置count上</span><br>            i += count;<br>        &#125;<br>        <span class="hljs-comment">// for循环结束后，已经得到了原来的字符串i like like like java do you like a java 的list集合</span><br>        <span class="hljs-comment">// 将list集合的数据放到byte[]，并返回</span><br>        <span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[list.size()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; b.length; i++) &#123;<br>            b[i] = list.get(i);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将一个byte转成一个二进制字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> flag 标识是是否需要补高位，如果是true，则需要补高位，否则不用，是针对最后一个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> b    传入的byte</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>     是该 b对应的二进制字符串（注意是反码返回）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">byteToBitString</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> flag, <span class="hljs-keyword">byte</span> b)</span></span>&#123;<br>        <span class="hljs-comment">// 将b转成int类型，方便利用Integer类转成对应的二进制</span><br>        <span class="hljs-keyword">int</span> temp = b;<br>        <span class="hljs-comment">// 如果是正数，还要在高位补位</span><br>        <span class="hljs-keyword">if</span> (flag)&#123;<br>            <span class="hljs-comment">// 如果为true，则需要补位</span><br>            temp |= <span class="hljs-number">256</span>;    <span class="hljs-comment">// 按位与，只有都为0的时候为0，只要有1出现都为1 ，1 0000 0000 | 0000 00001 = 1 0000 0001</span><br>        &#125;<br><br>        String str = Integer.toBinaryString(temp);  <span class="hljs-comment">// 返回的是对应二进制的补码</span><br>        <span class="hljs-comment">// 如果高位补位了，截取后面8为返回</span><br>        <span class="hljs-keyword">if</span> (flag)&#123;<br>            <span class="hljs-keyword">return</span> str.substring(str.length() - <span class="hljs-number">8</span>); <span class="hljs-comment">// 截取后面的8为</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 否则直接返回</span><br>            <span class="hljs-keyword">return</span> str;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 将前面的步骤封装起来</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] huffmanZip(<span class="hljs-keyword">byte</span>[] bytes)&#123;<br>        <span class="hljs-comment">// 获取nodes集合</span><br>        List&lt;Node&gt; nodes = getNodes(bytes);<br>        <span class="hljs-comment">// 创建赫夫曼树</span><br>        Node huffmanTreeRoot = createHuffmanTree(nodes);<br>        <span class="hljs-comment">// 对应的赫夫曼编码</span><br>        Map&lt;Byte, String&gt; huffmanCodes = getCodes(huffmanTreeRoot);<br>        <span class="hljs-comment">// 根据赫夫曼编码，压缩得到压缩后的赫夫曼编码字节数组</span><br>        <span class="hljs-keyword">byte</span>[] huffmanCodeBytes = zip(bytes, huffmanCodes);<br><br>        <span class="hljs-keyword">return</span> huffmanCodeBytes;<br>    &#125;<br><br>    <span class="hljs-comment">// 编写一个方法，将字符串对应的byte[] 数组，根据赫夫曼编码，返回一个经过赫夫曼编码压缩的一个byte[]</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bytes         字符串数组对应的bytes数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> huffmanCodes   赫夫曼编码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>              返回以经过赫夫曼编译压缩的byte数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] zip (<span class="hljs-keyword">byte</span>[] bytes, Map&lt;Byte,String&gt; huffmanCodes)&#123;<br>        <span class="hljs-comment">// 传进来的byte[]数组转成赫夫曼编码对应的字符串</span><br>        StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">byte</span> b : bytes) &#123;<br>            stringBuilder.append(huffmanCodes.get(b));<br>        &#125;<br>        <span class="hljs-comment">// 10101000101111111100100010111111110010001011111111001001010....</span><br>        <span class="hljs-comment">// System.out.println(stringBuilder);</span><br><br>        <span class="hljs-comment">// 将赫夫曼编码对应的字符串，分成8位一个，统计分成了多少个len，根据len创建byte[]</span><br>        <span class="hljs-keyword">int</span> len;<br>        <span class="hljs-keyword">if</span> (stringBuilder.length() % <span class="hljs-number">8</span> == <span class="hljs-number">0</span>)&#123;<br>            len = stringBuilder.length() / <span class="hljs-number">8</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            len = stringBuilder.length() / <span class="hljs-number">8</span> + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">byte</span>[] huffmanCodesBytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[len];<br><br>        <span class="hljs-comment">// 遍历生成的字符串数组，将数据加到huffmanCodesBytes中</span><br>        <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;  <span class="hljs-comment">// huffmanCodesBytes数组的下标</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; stringBuilder.length(); i += <span class="hljs-number">8</span>)&#123;<br>            String strByte;<br>            <span class="hljs-keyword">if</span> (i + <span class="hljs-number">8</span> &gt; stringBuilder.length())&#123;<br>                <span class="hljs-comment">// 如果超过了StringBuilder的长度，则将后面的字符串直接加入即可</span><br>                strByte = stringBuilder.substring(i);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 如果没超过，则8位一个加入strByte中</span><br>                strByte = stringBuilder.substring(i, i + <span class="hljs-number">8</span>);<br>            &#125;<br><br>            <span class="hljs-comment">// 将strByte转成byte放到huffmanCodeBytes中</span><br>            huffmanCodesBytes[index] = (<span class="hljs-keyword">byte</span>) Integer.parseInt(strByte,<span class="hljs-number">2</span>);<br>            index++;<br><br>        &#125;<br><br><br>        <span class="hljs-keyword">return</span> huffmanCodesBytes;<br>    &#125;<br><br>    <span class="hljs-comment">// 生成赫夫曼树对应的赫夫曼编码</span><br>    <span class="hljs-comment">// 将赫夫曼编码存放在map中</span><br>    <span class="hljs-keyword">static</span> Map&lt;Byte,String&gt; huffmanCodes = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-comment">// 生成的赫夫曼编码表示，需要去拼接路径</span><br>    <span class="hljs-keyword">static</span> StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br><br>    <span class="hljs-comment">// 为了调用方便，重载getCodes，</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Byte,String&gt; <span class="hljs-title">getCodes</span><span class="hljs-params">(Node root)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-comment">// 处理左子树</span><br>        getCodes(root.left,<span class="hljs-string">&quot;0&quot;</span>,stringBuilder);<br>        <span class="hljs-comment">// 处理右子树</span><br>        getCodes(root.right,<span class="hljs-string">&quot;1&quot;</span>,stringBuilder);<br>        <span class="hljs-keyword">return</span> huffmanCodes;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能，将传入的node结点的所有叶子结点的赫夫曼编码得到，并放在huffmanCodes中</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> node 传入的结点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code 路径：0表示左子结点，1表示右子结点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stringBuilder 用于拼接路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getCodes</span><span class="hljs-params">(Node node,String code,StringBuilder stringBuilder)</span></span>&#123;<br>        StringBuilder stringBuilder2 = <span class="hljs-keyword">new</span> StringBuilder(stringBuilder);<br>        <span class="hljs-comment">// 将得到的code加入到StringBuilder2中</span><br>        stringBuilder2.append(code);<br><br>        <span class="hljs-keyword">if</span> (node != <span class="hljs-keyword">null</span>)&#123;  <span class="hljs-comment">// 如果node == null不处理</span><br>            <span class="hljs-comment">// 判断是否是非叶子结点</span><br>            <span class="hljs-keyword">if</span> (node.data == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">// 说明不是非叶子结点，</span><br>                <span class="hljs-comment">// 向左递归</span><br>                getCodes(node.left, <span class="hljs-string">&quot;0&quot;</span>, stringBuilder2);<br><br>                <span class="hljs-comment">// 向右递归</span><br>                getCodes(node.right, <span class="hljs-string">&quot;1&quot;</span>, stringBuilder2);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 说明是一个叶子结点</span><br>                <span class="hljs-comment">// 表示已经找到某个叶子结点的最后</span><br>                huffmanCodes.put(node.data,stringBuilder2.toString());<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 前序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(Node root)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>)&#123;<br>            root.preOrder();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;树为空，不能遍历~~~&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 将数组的每一个数据都放在node中，并将node加入到ArrayList</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;Node&gt; <span class="hljs-title">getNodes</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] bytes)</span></span>&#123;<br>        <span class="hljs-comment">// 创建ArrayList</span><br>        ArrayList&lt;Node&gt; nodes = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-comment">// 存储每个byte出现的次数</span><br>        Map&lt;Byte, Integer&gt; counts = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-comment">// 遍历bytes，统计每一个byte出现的次数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">byte</span> b : bytes) &#123;<br>            Integer count = counts.get(b);<br>            <span class="hljs-comment">// 如果次数等于0</span><br>            <span class="hljs-keyword">if</span> (count == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">// 则将其加到map中，并设置次数为1</span><br>                counts.put(b,<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 如果已经存在了，则加一</span><br>                counts.put(b, count + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 处理完上面这个for循环后，就已经得到了各个字符出现的次数了</span><br>        <span class="hljs-comment">// 接下来就将node加入到ArrayList集合中</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Byte, Integer&gt; entry : counts.entrySet()) &#123;<br>            nodes.add(<span class="hljs-keyword">new</span> Node(entry.getKey(),entry.getValue()));<br>        &#125;<br>        <span class="hljs-comment">// 最后将集合返回</span><br>        <span class="hljs-keyword">return</span> nodes;<br>    &#125;<br><br>    <span class="hljs-comment">// 创建赫夫曼树</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Node <span class="hljs-title">createHuffmanTree</span><span class="hljs-params">(List&lt;Node&gt; nodes)</span></span>&#123;<br>        <span class="hljs-keyword">while</span> (nodes.size() &gt; <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">// 将传进来的集合排序，从小到大</span><br>            Collections.sort(nodes);<br>            <span class="hljs-comment">// 取出最小和次小的两个数组成一颗二叉树</span><br>            Node leftNode = nodes.get(<span class="hljs-number">0</span>);<br>            Node rightNode = nodes.get(<span class="hljs-number">1</span>);<br>            Node parent = <span class="hljs-keyword">new</span> Node(<span class="hljs-keyword">null</span>,leftNode.weight + rightNode.weight);<br><br>            parent.left = leftNode;<br>            parent.right = rightNode;<br><br>            <span class="hljs-comment">// 将已经处理好的结点从集合中去掉</span><br>            nodes.remove(leftNode);<br>            nodes.remove(rightNode);<br>            <span class="hljs-comment">// 将新构成的父结点加入到nodes集合中</span><br>            nodes.add(parent);<br>        &#125;<br>        <span class="hljs-comment">// 重复上面的步骤，最后将剩下的父结点返回</span><br>        <span class="hljs-keyword">return</span> nodes.get(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-comment">// 创建结点Node</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Node</span>&gt;</span>&#123;<br><br>    Byte data;      <span class="hljs-comment">// 存放数据（字符）本身</span><br>    <span class="hljs-keyword">int</span> weight;     <span class="hljs-comment">// 权值，表示字符出现的次数</span><br>    Node left;<br>    Node right;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Byte data, <span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.data = data;<br>        <span class="hljs-keyword">this</span>.weight = weight;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;data=&quot;</span> + data +<br>                <span class="hljs-string">&quot;, weight=&quot;</span> + weight +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 前序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.left.preOrder();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.right.preOrder();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Node o)</span> </span>&#123;<br>        <span class="hljs-comment">// 从小到大排序</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.weight - o.weight;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="11-3-9赫夫曼编码压缩文件注意事项"><a href="#11-3-9赫夫曼编码压缩文件注意事项" class="headerlink" title="11.3.9赫夫曼编码压缩文件注意事项"></a>11.3.9赫夫曼编码压缩文件注意事项</h3><ol>
<li>如果文件本身就是经过压缩处理的，那么使用赫夫曼编码再压缩效率不会有明显变化, 比如视频,ppt 等等文件  [举例压一个 .ppt]</li>
<li>赫夫曼编码是按字节来处理的，因此可以处理所有的文件(二进制文件、文本文件) [举例压一个.xml文件]</li>
<li>如果一个文件中的内容，重复的数据不多，压缩效果也不会很明显。</li>
</ol>
<h2 id="11-4-二叉排序树"><a href="#11-4-二叉排序树" class="headerlink" title="11.4 二叉排序树"></a>11.4 二叉排序树</h2><h3 id="11-4-1-先看一个需求"><a href="#11-4-1-先看一个需求" class="headerlink" title="11.4.1 先看一个需求"></a>11.4.1 先看一个需求</h3><p>给你一个数列 (7, 3, 10, 12, 5, 1, 9)，要求能够高效的完成对数据的查询和添加。</p>
<h3 id="11-4-2-解决方案分析"><a href="#11-4-2-解决方案分析" class="headerlink" title="11.4.2 解决方案分析"></a>11.4.2 解决方案分析</h3><ol>
<li>使用数组</li>
</ol>
<ul>
<li>数组未排序， 优点：直接在数组尾添加，速度快。 缺点：查找速度慢. [示意图]</li>
<li>数组排序，优点：可以使用二分查找，查找速度快，缺点：为了保证数组有序，在添加新数据时，找到插入位置后，后面的数据需整体移动，速度慢。[示意图]</li>
</ul>
<ol start="2">
<li><p>使用链式存储-链表不管链表是否有序，查找速度都慢，添加数据速度比数组快，不需要数据整体移动。[示意图]</p>
</li>
<li><p>使用二叉排序树</p>
</li>
</ol>
<h3 id="11-4-3-二叉排序树介绍"><a href="#11-4-3-二叉排序树介绍" class="headerlink" title="11.4.3 二叉排序树介绍"></a>11.4.3 二叉排序树介绍</h3><p>二叉排序树：BST: (Binary Sort(Search) Tree), 对于二叉排序树的任何一个非叶子节点，要求左子节点的值比当前节点的值小，右子节点</p>
<p>的值比当前节点的值大。</p>
<p>特别说明：如果有相同的值，可以将该节点放在左子节点或右子节点</p>
<p>比如针对前面的数据 (7, 3, 10, 12, 5, 1, 9) ，对应的二叉排序树为：</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211213141237024.png" alt="image-20211213141237024"></p>
<h3 id="11-4-4-二叉排序树创建和遍历"><a href="#11-4-4-二叉排序树创建和遍历" class="headerlink" title="11.4.4 二叉排序树创建和遍历"></a>11.4.4 二叉排序树创建和遍历</h3><p>一个数组创建成对应的二叉排序树，并使用中序遍历二叉排序树，比如: 数组为 Array(7, 3, 10, 12, 5, 1, 9) ， 创建成对应的二叉排序树为 :</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211213141330319.png" alt="image-20211213141330319"></p>
<h3 id="11-4-5-二叉排序树的删除"><a href="#11-4-5-二叉排序树的删除" class="headerlink" title="11.4.5 二叉排序树的删除"></a>11.4.5 二叉排序树的删除</h3><p>二叉排序树的删除情况比较复杂，有下面三种情况需要考虑</p>
<ol>
<li>删除叶子节点 (比如：2, 5, 9, 12)</li>
<li>删除只有一颗子树的节点 (比如：1)</li>
<li>删除有两颗子树的节点. (比如：7, 3，10 )</li>
<li>操作的思路分析</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211213141438911.png" alt="image-20211213141438911"></p>
<figure class="highlight coq"><table><tr><td class="code"><pre><code class="hljs coq">对删除的结点的各种情况思路分析：<br><br>第一种情况:<br>删除叶子节点 (比如：<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">12</span>)<br>思路<br>(<span class="hljs-number">1</span>) 需求先去找到要删除的结点  targetNode<br>(<span class="hljs-number">2</span>)  找到targetNode 的 父结点 parent <br>(<span class="hljs-number">3</span>)  确定 targetNode 是 parent的左子结点 还是右子结点<br>(<span class="hljs-number">4</span>)  根据前面的情况来对应删除<br>左子结点 parent.<span class="hljs-built_in">left</span> = null<br>右子结点 parent.<span class="hljs-built_in">right</span> = null;<br><br>第二种情况: 删除只有一颗子树的节点 比如 <span class="hljs-number">1</span><br>思路<br>(<span class="hljs-number">1</span>) 需求先去找到要删除的结点  targetNode<br>(<span class="hljs-number">2</span>)  找到targetNode 的 父结点 parent <br>(<span class="hljs-number">3</span>) 确定targetNode 的子结点是左子结点还是右子结点<br>(<span class="hljs-number">4</span>) targetNode 是 parent 的左子结点还是右子结点<br>(<span class="hljs-number">5</span>) 如果targetNode 有左子结点<br><span class="hljs-number">5.</span> <span class="hljs-number">1</span> 如果 targetNode 是 parent 的左子结点<br>parent.<span class="hljs-built_in">left</span> = targetNode.<span class="hljs-built_in">left</span>;<br><span class="hljs-number">5.2</span>  如果 targetNode 是 parent 的右子结点<br>parent.<span class="hljs-built_in">right</span> = targetNode.<span class="hljs-built_in">left</span>;<br>(<span class="hljs-number">6</span>) 如果targetNode 有右子结点<br><span class="hljs-number">6.1</span> 如果 targetNode 是 parent 的左子结点<br>parent.<span class="hljs-built_in">left</span> = targetNode.<span class="hljs-built_in">right</span>;<br><span class="hljs-number">6.2</span> 如果 targetNode 是 parent 的右子结点<br>parent.<span class="hljs-built_in">right</span> = targetNode.<span class="hljs-built_in">right</span><br><br>情况三 ： 删除有两颗子树的节点. (比如：<span class="hljs-number">7</span>, <span class="hljs-number">3</span>，<span class="hljs-number">10</span> )<br>思路<br>(<span class="hljs-number">1</span>) 需求先去找到要删除的结点  targetNode<br>(<span class="hljs-number">2</span>)  找到targetNode 的 父结点 parent <br>(<span class="hljs-number">3</span>)  从targetNode 的右子树找到最小的结点<br>(<span class="hljs-number">4</span>) 用一个临时变量，将 最小结点的值保存 temp = <span class="hljs-number">11</span><br>(<span class="hljs-number">5</span>)  删除该最小结点<br>(<span class="hljs-number">6</span>)  targetNode.value = temp<br><br></code></pre></td></tr></table></figure>



<h3 id="11-4-6-二叉排序树删除结点的代码实现"><a href="#11-4-6-二叉排序树删除结点的代码实现" class="headerlink" title="11.4.6 二叉排序树删除结点的代码实现"></a>11.4.6 二叉排序树删除结点的代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.binarysorttree;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinarySortTreeDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>&#125;;<br>        BinarySortTree binarySortTree = <span class="hljs-keyword">new</span> BinarySortTree();<br>        <span class="hljs-comment">// 循环添加结点到二叉排序树</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            binarySortTree.add(<span class="hljs-keyword">new</span> Node(arr[i]));<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;二叉排序树中序遍历&quot;</span>);<br>        binarySortTree.infixOrder();    <span class="hljs-comment">// 1, 3, 5, 7, 9, 10, 12</span><br><br>        <span class="hljs-comment">// 测试删除</span><br>        binarySortTree.delNode(<span class="hljs-number">7</span>);<br>        binarySortTree.delNode(<span class="hljs-number">3</span>);<br>        binarySortTree.delNode(<span class="hljs-number">10</span>);<br>        binarySortTree.delNode(<span class="hljs-number">12</span>);<br>        binarySortTree.delNode(<span class="hljs-number">5</span>);<br>        binarySortTree.delNode(<span class="hljs-number">1</span>);<br>        binarySortTree.delNode(<span class="hljs-number">9</span>);<br>        binarySortTree.delNode(<span class="hljs-number">2</span>);<br>        System.out.println(<span class="hljs-string">&quot;删除后：&quot;</span>);<br>        binarySortTree.infixOrder();<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 创建树</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinarySortTree</span></span>&#123;<br>    <span class="hljs-keyword">private</span> Node root;<br><br>    <span class="hljs-comment">// 添加</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Node node)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>)&#123;<br>            root = node;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            root.add(node);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 中序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">infixOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>)&#123;<br>            root.infixOrder();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;树为空，不能遍历~~&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 查找要删除的结点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">search</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> root.search(value);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 查找要删除的结点的父结点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">searchParent</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> root.searchParent(value);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1.返回以node为根结点的二叉排序树的最小结点的值</span><br><span class="hljs-comment">     * 2.删除node为根结点的二叉排序树的最小结点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> node  传入的node（可以当做是根结点）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回node为根结点的二叉排序树的最小值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">delRightTreeMin</span><span class="hljs-params">(Node node)</span></span>&#123;<br>        Node target = node;<br>        <span class="hljs-comment">// 当target的左结点不为空时，继续向左找</span><br>        <span class="hljs-keyword">while</span> (target.left != <span class="hljs-keyword">null</span>)&#123;<br>            target = target.left;<br>        &#125;<br>        <span class="hljs-comment">// 退出循环后，已经找到最小结点</span><br>        <span class="hljs-comment">// 根据最小结点的值，删除结点</span><br>        delNode(target.value);<br>        <span class="hljs-comment">// 返回最小值</span><br>        <span class="hljs-keyword">return</span> target.value;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除结点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span></span>&#123;<br>        <span class="hljs-comment">// 如果根结点为空，直接返回</span><br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 1.找到需要删除的结点</span><br>            Node targetNode = search(value);<br>            <span class="hljs-comment">// 判断找到的结点是否存在</span><br>            <span class="hljs-keyword">if</span> (targetNode == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">// 判断是否只有根结点</span><br>            <span class="hljs-keyword">if</span> (root.left == <span class="hljs-keyword">null</span> &amp;&amp; root.right == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">// 说明只有根结点</span><br>                root = <span class="hljs-keyword">null</span>;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">// 找到父结点</span><br>            Node parent = searchParent(value);<br><br>            <span class="hljs-comment">// 如果要删除的结点是叶子结点</span><br>            <span class="hljs-keyword">if</span> (targetNode.left == <span class="hljs-keyword">null</span> &amp;&amp; targetNode.right == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">// 判断是父结点的左右结点</span><br>                <span class="hljs-comment">// 如果是左结点</span><br>                <span class="hljs-keyword">if</span> (parent.left != <span class="hljs-keyword">null</span> &amp;&amp; parent.left.value == value)&#123;<br>                    parent.left = <span class="hljs-keyword">null</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (parent.right != <span class="hljs-keyword">null</span> &amp;&amp; parent.right.value == value)&#123;<br>                    <span class="hljs-comment">// 如果是右子结点</span><br>                    parent.right = <span class="hljs-keyword">null</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (targetNode.left != <span class="hljs-keyword">null</span> &amp;&amp; targetNode.right != <span class="hljs-keyword">null</span>)&#123;   <span class="hljs-comment">// 如果要删除的结点有两颗子树的结点</span><br>                <span class="hljs-comment">// 从targetNode的右子树查找最小的值</span><br>                <span class="hljs-keyword">int</span> minValue = delRightTreeMin(targetNode.right);<br>                <span class="hljs-comment">// 将最小的值赋值给当前的targetNode</span><br>                targetNode.value = minValue;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 如果要删除的结点只有一颗子树</span><br>                <span class="hljs-comment">// 如果要删除的结点有左结点</span><br>                <span class="hljs-keyword">if</span> (targetNode.left != <span class="hljs-keyword">null</span>)&#123;<br>                    <span class="hljs-comment">// 如果不判断parent是否为空，当二叉排序树只有根结点和一颗子树的时候会抛出空指针异常</span><br>                    <span class="hljs-keyword">if</span> (parent != <span class="hljs-keyword">null</span>)&#123;<br>                        <span class="hljs-comment">// 如果targetNode是parent的左结点</span><br>                        <span class="hljs-keyword">if</span> (parent.left.value == value)&#123;<br>                            parent.left = targetNode.left;<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-comment">// 如果targetNode是parent的右结点</span><br>                            parent.right = targetNode.left;<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-comment">// 如果parent为空了，直接让targetNode的左子结点指向root即可</span><br>                        root = targetNode.left;<br>                    &#125;<br><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (parent != <span class="hljs-keyword">null</span>)&#123;<br>                        <span class="hljs-comment">// 如果要删除的结点有右结点</span><br>                        <span class="hljs-comment">// 判断targetNode是parent的左右结点，如果是左</span><br>                        <span class="hljs-keyword">if</span> (parent.left.value == value)&#123;<br>                            parent.left = targetNode.right;<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-comment">// 如果targetNode是parent的右结点</span><br>                            parent.right = targetNode.right;<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        root = targetNode.right;<br>                    &#125;<br><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 创建结点</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span></span>&#123;<br>    <span class="hljs-keyword">int</span> value;<br>    Node left;<br>    Node right;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;value=&quot;</span> + value +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查找要删除的结点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 需要删除的结点的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果找到就返回当前结点，如果没有，则返回null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span></span>&#123;<br>        <span class="hljs-comment">// 如果找到了，直接返回</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.value == value)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-keyword">this</span>.value)&#123;     <span class="hljs-comment">// 如果要查找的结点小于当前结点的值</span><br>            <span class="hljs-comment">// 判断左子结点是否为空</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br>            <span class="hljs-comment">// 不为空的话，向左递归查找</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.left.search(value);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 如果要查找的结点不小于当前的结点的值</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.right == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br>            <span class="hljs-comment">// 向右递归查找</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.right.search(value);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查找要删除结点的父结点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 要查找的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果找到就返回父结点，没有就返回null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">searchParent</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.left.value == value) ||<br>                (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.right.value == value))&#123;<br>            <span class="hljs-comment">// 满足上述条件后，当前的结点就是父结点</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 如果要查找的值小于当前的值，并且左子结点不为空</span><br>            <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-keyword">this</span>.value &amp;&amp; <span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">// 向左递归查找</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.left.searchParent(value);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &gt;= <span class="hljs-keyword">this</span>.value &amp;&amp; <span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">// 向右递归查找</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.right.searchParent(value);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 没有父结点</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 添加</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Node node)</span></span>&#123;<br>        <span class="hljs-comment">// 如果结点为空，直接返回</span><br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.value &gt; node.value)&#123;<br>            <span class="hljs-comment">// 如果插入的值比当前的要小，判断左子结点是否为空</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">// 如果左子结点为空，直接插入</span><br>                <span class="hljs-keyword">this</span>.left = node;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 如果左子结点不为空，向左递归添加</span><br>                <span class="hljs-keyword">this</span>.left.add(node);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 如果要插入的值，大于等于当前的值</span><br>            <span class="hljs-comment">// 判断右子结点是否为空</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">// 为空，直接插入</span><br>                <span class="hljs-keyword">this</span>.right = node;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 不为空，向右递归添加</span><br>                <span class="hljs-keyword">this</span>.right.add(node);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 中序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">infixOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.left.infixOrder();<br>        &#125;<br>        System.out.println(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.right.infixOrder();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>



<h3 id="11-4-7-课后练习"><a href="#11-4-7-课后练习" class="headerlink" title="11.4.7 课后练习"></a>11.4.7 课后练习</h3><p>如果我们从左子树找到最大的结点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// BinarySortTree 类中添加下面方法</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1.查找以node为结点的左子树的最大值</span><br><span class="hljs-comment">     * 2.删除最大值的结点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> node 传进来的结点（可以说是根结点）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回以node为结点的最大值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">delLeftTreeMax</span><span class="hljs-params">(Node1 node)</span></span>&#123;<br>        Node1 target = node;<br>        <span class="hljs-comment">// 二叉排序树的最大值在右子树</span><br>        <span class="hljs-keyword">while</span> (target.right != <span class="hljs-keyword">null</span>)&#123;<br>            target = target.right;<br>        &#125;<br>        delNode(target.value);<br>        <span class="hljs-comment">// 返回最大值</span><br>        <span class="hljs-keyword">return</span> target.value;<br>    &#125;<br></code></pre></td></tr></table></figure>

<p>在delNode方法中，修改下列代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (targetNode.left != <span class="hljs-keyword">null</span> &amp;&amp; targetNode.right != <span class="hljs-keyword">null</span>)&#123; <span class="hljs-comment">// 如果要删除的结点有两颗子树</span><br>                <span class="hljs-comment">// 采用右子树最小值</span><br>                <span class="hljs-comment">/*int minValue = delRightTreeMin(targetNode.right);</span><br><span class="hljs-comment">                targetNode.value = minValue;*/</span><br>                <span class="hljs-comment">// 采用左子树最大值</span><br>                <span class="hljs-keyword">int</span> maxValue = delLeftTreeMax(targetNode.left);<br>                targetNode.value = maxValue;<br>            &#125;<br></code></pre></td></tr></table></figure>



<h2 id="11-5-平衡二叉树-AVL树"><a href="#11-5-平衡二叉树-AVL树" class="headerlink" title="11.5 平衡二叉树(AVL树)"></a>11.5 平衡二叉树(AVL树)</h2><h3 id="11-5-1-看一个案例-说明二叉排序树可能的问题"><a href="#11-5-1-看一个案例-说明二叉排序树可能的问题" class="headerlink" title="11.5.1 看一个案例(说明二叉排序树可能的问题)"></a>11.5.1 看一个案例(说明二叉排序树可能的问题)</h3><p>给你一个数列{1,2,3,4,5,6}，要求创建一颗二叉排序树(BST), 并分析问题所在.</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211214204537332.png" alt="image-20211214204537332"></p>
<p>左边BST 存在的问题分析:</p>
<ol>
<li>左子树全部为空，从形式上看，更像一个单链表.</li>
<li>插入速度没有影响</li>
<li>查询速度明显降低(因为需要依次比较), 不能发挥BST的优势，因为每次还需要比较左子树，其查询速度比单链表还慢</li>
<li>解决方案-平衡二叉树(AVL)</li>
</ol>
<h3 id="11-5-2-基本介绍"><a href="#11-5-2-基本介绍" class="headerlink" title="11.5.2 基本介绍"></a>11.5.2 基本介绍</h3><ol>
<li>平衡二叉树也叫平衡二叉搜索树（Self-balancing binary search tree）又被称为AVL树， 可以保证查询效率较高。</li>
<li>具有以下特点：它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。平衡二叉树的常</li>
<li>用实现方法有红黑树、AVL、替罪羊树、Treap、伸展树等。</li>
</ol>
<p>举例说明, 看看下面哪些AVL树, 为什么?</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211214204626492.png" alt="image-20211214204626492"></p>
<h3 id="11-5-3-应用案例-单旋转-左旋转"><a href="#11-5-3-应用案例-单旋转-左旋转" class="headerlink" title="11.5.3 应用案例-单旋转(左旋转)"></a>11.5.3 应用案例-单旋转(左旋转)</h3><ol>
<li><p>要求: 给你一个数列，创建出对应的平衡二叉树.数列 {4,3,6,5,7,8}</p>
</li>
<li><p>思路分析(示意图)</p>
</li>
<li><p>代码实现 </p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 左旋转，</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">leftRotate</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 1.以根结点的值创建新的结点</span><br>        Node newNode = <span class="hljs-keyword">new</span> Node(value);<br>        <span class="hljs-comment">// 2.新结点的左子结点为当前结点的左子树</span><br>        newNode.left = left;<br>        <span class="hljs-comment">// 3.新结点的右子树为当前结点的右子树的左子树</span><br>        newNode.right = right.left;<br>        <span class="hljs-comment">// 4.将当前结点的值该为当前结点的右子树的值</span><br>        value = right.value;<br>        <span class="hljs-comment">// 5.当前结点的右子树指向当前结点的右子树的右子树</span><br>        right = right.right;<br>        <span class="hljs-comment">// 6.当前结点的左子树指向新的结点</span><br>        left = newNode;<br>    &#125;<br></code></pre></td></tr></table></figure>



<h3 id="11-5-4-应用案例-单旋转-右旋转"><a href="#11-5-4-应用案例-单旋转-右旋转" class="headerlink" title="11.5.4 应用案例-单旋转(右旋转)"></a>11.5.4 应用案例-单旋转(右旋转)</h3><ol>
<li><p>要求: 给你一个数列，创建出对应的平衡二叉树.数列 {10,12, 8, 9, 7, 6}</p>
</li>
<li><p>思路分析(示意图)</p>
</li>
<li><p>代码实现 </p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 右旋转</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rightRotate</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 1.以当前根结点的值创建新结点的值</span><br>        Node newNode = <span class="hljs-keyword">new</span> Node(value);<br>        <span class="hljs-comment">// 2.新结点的右子树为当前结点的右子结点</span><br>        newNode.right = right;<br>        <span class="hljs-comment">// 3.新结点的左子树为当前结点的左子树的右子树</span><br>        newNode.left = left.right;<br>        <span class="hljs-comment">// 4.将当前结点的值改为当前结点的左子树的值</span><br>        value = left.value;<br>        <span class="hljs-comment">// 5.当前结点的左子树指向当前结点的左子树的左子树</span><br>        left = left.left;<br>        <span class="hljs-comment">// 6.当前结点的右子树指向新的结点</span><br>        right = newNode;<br>    &#125;<br></code></pre></td></tr></table></figure>



<h3 id="11-5-6-应用案例-双旋转"><a href="#11-5-6-应用案例-双旋转" class="headerlink" title="11.5.6 应用案例-双旋转"></a>11.5.6 应用案例-双旋转</h3><p>前面的两个数列，进行单旋转(即一次旋转)就可以将非平衡二叉树转成平衡二叉树,但是在某些情况下，单旋转不能完成平衡二叉树的转换。比如数列</p>
<p>int[] arr = { 10, 11, 7, 6, 8, 9 };  运行原来的代码可以看到，并没有转成 AVL树.</p>
<p>int[] arr = {2,1,6,5,7,3}; // 运行原来的代码可以看到，并没有转成 AVL树</p>
<p>1)问题分析</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211214204920044.png" alt="image-20211214204920044"></p>
<p>2)解决思路分析</p>
<ol>
<li>当符合右旋转时</li>
<li>如果当前结点的左子结点的右子树高度大于当前结点的左子结点的左子树高度</li>
<li>先对当前结点的左子结点左旋转</li>
<li>再对当前结点做右旋转</li>
</ol>
<p>如果符合左旋转也是同理，将上述步骤中的左右调换即可！</p>
<p>3)代码实现(完整代码)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.avl;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AVLTreeDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//int[] arr = &#123;4,3,6,5,7,8&#125;;</span><br>        <span class="hljs-comment">//int[] arr = &#123;10,12, 8, 9, 7, 6&#125;;</span><br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span> &#125;;<br>        AVLTree avlTree = <span class="hljs-keyword">new</span> AVLTree();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            avlTree.add(<span class="hljs-keyword">new</span> Node(arr[i]));<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;中序遍历&quot;</span>);<br>        avlTree.infixOrder();<br><br>        System.out.println(<span class="hljs-string">&quot;平衡处理后&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;当前树的高度&quot;</span>+avlTree.getRoot().height());<br>        System.out.println(<span class="hljs-string">&quot;当前左子树的高度&quot;</span>+avlTree.getRoot().leftHeight());<br>        System.out.println(<span class="hljs-string">&quot;当前右子树的高度&quot;</span>+avlTree.getRoot().rightHeight());<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">// 创建AVLTree</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AVLTree</span></span>&#123;<br>    <span class="hljs-keyword">private</span> Node root;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">getRoot</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br><br>    <span class="hljs-comment">// 添加</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Node node)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>)&#123;<br>            root = node;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            root.add(node);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 中序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">infixOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>)&#123;<br>            root.infixOrder();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;树为空，不能遍历~~&quot;</span>);<br>        &#125;<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-comment">// 创建结点</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span></span>&#123;<br><br>    <span class="hljs-keyword">int</span> value;<br>    Node left;<br>    Node right;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;value=&quot;</span> + value +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回左子树的高度</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">leftHeight</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (left == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left.height();<br>    &#125;<br><br>    <span class="hljs-comment">// 返回右子树的高度</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rightHeight</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (right == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> right.height();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回以当前结点为根结点的树的高度</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">height</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> Math.max(left == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span> : left.height(),right == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span> : right.height()) + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 左旋转，</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">leftRotate</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 1.以根结点的值创建新的结点</span><br>        Node newNode = <span class="hljs-keyword">new</span> Node(value);<br>        <span class="hljs-comment">// 2.新结点的左子结点为当前结点的左子树</span><br>        newNode.left = left;<br>        <span class="hljs-comment">// 3.新结点的右子树为当前结点的右子树的左子树</span><br>        newNode.right = right.left;<br>        <span class="hljs-comment">// 4.将当前结点的值该为当前结点的右子树的值</span><br>        value = right.value;<br>        <span class="hljs-comment">// 5.当前结点的右子树指向当前结点的右子树的右子树</span><br>        right = right.right;<br>        <span class="hljs-comment">// 6.当前结点的左子树指向新的结点</span><br>        left = newNode;<br>    &#125;<br><br>    <span class="hljs-comment">// 右旋转</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rightRotate</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 1.以当前根结点的值创建新结点的值</span><br>        Node newNode = <span class="hljs-keyword">new</span> Node(value);<br>        <span class="hljs-comment">// 2.新结点的右子树为当前结点的右子结点</span><br>        newNode.right = right;<br>        <span class="hljs-comment">// 3.新结点的左子树为当前结点的左子树的右子树</span><br>        newNode.left = left.right;<br>        <span class="hljs-comment">// 4.将当前结点的值改为当前结点的左子树的值</span><br>        value = left.value;<br>        <span class="hljs-comment">// 5.当前结点的左子树指向当前结点的左子树的左子树</span><br>        left = left.left;<br>        <span class="hljs-comment">// 6.当前结点的右子树指向新的结点</span><br>        right = newNode;<br>    &#125;<br>    <br><br>    <span class="hljs-comment">// 添加</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Node node)</span></span>&#123;<br>        <span class="hljs-comment">// 如果结点为空，直接返回</span><br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.value &gt; node.value)&#123;<br>            <span class="hljs-comment">// 如果插入的值比当前的要小，判断左子结点是否为空</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">// 如果左子结点为空，直接插入</span><br>                <span class="hljs-keyword">this</span>.left = node;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 如果左子结点不为空，向左递归添加</span><br>                <span class="hljs-keyword">this</span>.left.add(node);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 如果要插入的值，大于等于当前的值</span><br>            <span class="hljs-comment">// 判断右子结点是否为空</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">// 为空，直接插入</span><br>                <span class="hljs-keyword">this</span>.right = node;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 不为空，向右递归添加</span><br>                <span class="hljs-keyword">this</span>.right.add(node);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 当添加完一个结点后，如果(右子树的高度 - 左子树的高度) &gt; 1，则左旋转</span><br>        <span class="hljs-keyword">if</span> (rightHeight() - leftHeight() &gt; <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">// 如果当前结点的右子结点的左子树高度大于当前结点的右子结点的右子树</span><br>            <span class="hljs-keyword">if</span> (right != <span class="hljs-keyword">null</span> &amp;&amp; right.leftHeight() &gt; right.rightHeight())&#123;<br>                <span class="hljs-comment">// 先将当前结点的右子结点做右旋转，</span><br>                right.rightRotate();<br>                <span class="hljs-comment">// 再对当前结点做左旋转</span><br>                leftRotate();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 左旋转</span><br>                leftRotate();<br>            &#125;<br>            <span class="hljs-comment">// 如果处理符合上述条件，处理完后，必须return，否则会出问题</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 当添加完一个结点后，如果(左子树的高度 - 右子树的高度) &gt; 1 则右旋转</span><br>        <span class="hljs-keyword">if</span> (leftHeight() - rightHeight() &gt; <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">// 如果当前结点的左子结点的右子树高度大于当前结点的左子结点的左子树</span><br>            <span class="hljs-keyword">if</span> (left != <span class="hljs-keyword">null</span> &amp;&amp; left.rightHeight() &gt; left.leftHeight())&#123;<br>                <span class="hljs-comment">// 先将当前结点的左子结点做左旋转</span><br>                left.leftRotate();<br>                <span class="hljs-comment">// 再对当前结点做右旋转</span><br>                rightRotate();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 否则，直接右旋转</span><br>                rightRotate();<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 中序遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">infixOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.left != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.left.infixOrder();<br>        &#125;<br>        System.out.println(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.right != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">this</span>.right.infixOrder();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="第12章-多路查找树"><a href="#第12章-多路查找树" class="headerlink" title="第12章 多路查找树"></a>第12章 多路查找树</h1><h2 id="12-1-二叉树与B树"><a href="#12-1-二叉树与B树" class="headerlink" title="12.1 二叉树与B树"></a>12.1 二叉树与B树</h2><h3 id="12-1-1-二叉树的问题分析"><a href="#12-1-1-二叉树的问题分析" class="headerlink" title="12.1.1 二叉树的问题分析"></a>12.1.1 二叉树的问题分析</h3><p>二叉树的操作效率较高，但是也存在问题, 请看下面的二叉树</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211214232208810.png" alt="image-20211214232208810"></p>
<ol>
<li>二叉树需要加载到内存的，如果二叉树的节点少，没有什么问题，但是如果二叉树的节点很多(比如1亿)， 就存在如下问题:</li>
<li>问题1：在构建二叉树时，需要多次进行i/o操作(海量数据存在数据库或文件中)，节点海量，构建二叉树时，速度有影响</li>
<li>问题2：节点海量，也会造成二叉树的高度很大，会降低操作速度.</li>
</ol>
<h3 id="12-1-2-多叉树"><a href="#12-1-2-多叉树" class="headerlink" title="12.1.2 多叉树"></a>12.1.2 多叉树</h3><ol>
<li>在二叉树中，每个节点有数据项，最多有两个子节点。如果允许每个节点可以<strong>有更多的数据项和更多的子节点</strong>，就是<strong>多叉树</strong>（multiway tree）</li>
<li>后面我们讲解的2-3树，2-3-4树就是多叉树，多叉树通过重新组织节点，<strong>减少树的高度</strong>，能对<strong>二叉树进行优化</strong>。</li>
<li>举例说明(下面2-3树就是一颗多叉树)</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211214232349970.png" alt="image-20211214232349970"></p>
<h3 id="12-1-3-B树的基本介绍"><a href="#12-1-3-B树的基本介绍" class="headerlink" title="12.1.3 B树的基本介绍"></a>12.1.3 B树的基本介绍</h3><p>B树通过重新组织节点，降低树的高度，并且减少i/o读写次数来提升效率。</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211214232513376.png" alt="image-20211214232513376"></p>
<ol>
<li>如图B树通过重新组织节点， 降低了树的高度.</li>
<li>文件系统及数据库系统的设计者利用了磁盘预读原理，将一个节点的大小设为等于一个页(页得大小通常为4k)，这样每个节点只需要一次</li>
<li>I/O就可以完全载入</li>
<li>将树的度M设置为1024，在600亿个元素中最多只需要4次I/O操作就可以读取到想要的元素, B树(B+)广泛应用于文件存储系统以及数据库系统中</li>
</ol>
<h2 id="12-2-2-3树"><a href="#12-2-2-3树" class="headerlink" title="12.2  2-3树"></a>12.2  2-3树</h2><h3 id="12-2-1-2-3树基本介绍"><a href="#12-2-1-2-3树基本介绍" class="headerlink" title="12.2.1   2-3树基本介绍"></a>12.2.1   2-3树基本介绍</h3><p>2-3树是最简单的B树结构, 具有如下特点:</p>
<ol>
<li>2-3树的所有叶子节点都在同一层.(只要是B树都满足这个条件)</li>
<li>有两个子节点的节点叫二节点，二节点要么没有子节点，要么有两个子节点.</li>
<li>有三个子节点的节点叫三节点，三节点要么没有子节点，要么有三个子节点.<br>2-3树是由二节点和三节点构成的树。</li>
</ol>
<h3 id="12-2-2-2-3树应用案例"><a href="#12-2-2-2-3树应用案例" class="headerlink" title="12.2.2   2-3树应用案例"></a>12.2.2   2-3树应用案例</h3><p>将数列{16, 24, 12, 32, 14, 26, 34, 10, 8, 28, 38, 20} 构建成2-3树，并保证数据插入的大小顺序。(演示一下构建2-3树的过程.)</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211214232726871.png" alt="image-20211214232726871"></p>
<p>插入规则:</p>
<ol>
<li>2-3树的所有叶子节点都在同一层.(只要是B树都满足这个条件)</li>
<li>有两个子节点的节点叫二节点，二节点要么没有子节点，要么有两个子节点.</li>
<li>有三个子节点的节点叫三节点，三节点要么没有子节点，要么有三个子节点</li>
<li>当按照规则插入一个数到某个节点时，不能满足上面三个要求，就需要拆，先向上拆，如果上层满，则拆本层，拆后仍然需要满足上面3个条件。 </li>
<li>对于三节点的子树的值大小仍然遵守(BST 二叉排序树)的规则</li>
</ol>
<h3 id="12-2-3-其它说明"><a href="#12-2-3-其它说明" class="headerlink" title="12.2.3 其它说明"></a>12.2.3 其它说明</h3><p>除了23树，还有234树等，概念和23树类似，也是一种B树。 如图:</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211214232853510.png" alt="image-20211214232853510"></p>
<h2 id="12-3-B树、B-树和B-树"><a href="#12-3-B树、B-树和B-树" class="headerlink" title="12.3 B树、B+树和B*树"></a>12.3 B树、B+树和B*树</h2><h3 id="12-3-1-B树的介绍"><a href="#12-3-1-B树的介绍" class="headerlink" title="12.3.1 B树的介绍"></a>12.3.1 B树的介绍</h3><p> B-tree树即B树，B即Balanced，平衡的意思。有人把B-tree翻译成B-树，容易让人产生误解。会以为B-树是一种树，而B树又是另一种树。实际上，B-tree就是指的B树。</p>
<p>前面已经介绍了2-3树和2-3-4树，他们就是B树(英语：B-tree 也写成B-树)，这里我们再做一个说明，我们在学习Mysql时，经常听到说某种类型的索引是基于B树或者B+树的，如图:</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211214233007433.png" alt="image-20211214233007433"></p>
<p>B树的说明:</p>
<ol>
<li>B树的阶：节点的最多子节点个数。比如2-3树的阶是3，2-3-4树的阶是4</li>
<li>B-树的搜索，从根结点开始，对结点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字所属范围的儿子结点；重复，直到所对应的儿子指针为空，或已经是叶子结点</li>
<li>关键字集合分布在整颗树中, 即叶子节点和非叶子节点都存放数据.</li>
<li>搜索有可能在非叶子结点结束</li>
<li>其搜索性能等价于在关键字全集内做一次二分查找</li>
</ol>
<h3 id="12-3-2-B-树的介绍"><a href="#12-3-2-B-树的介绍" class="headerlink" title="12.3.2 B+树的介绍"></a>12.3.2 B+树的介绍</h3><p>B+树是B树的变体，也是一种多路搜索树。</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211214233134042.png" alt="image-20211214233134042"></p>
<p>B+树的说明:</p>
<ol>
<li>B+树的搜索与B树也基本相同，区别是B+树只有达到叶子结点才命中（B树可以在非叶子结点命中），其性能也等价于在关键字全集做一次二分查找</li>
<li><strong>所有关键字都出现在叶子结点的链表中</strong>（即数据只能在叶子节点【也叫稠密索引】），且链表中的关键字(数据)恰好是有序的。<br>不可能在非叶子结点命中</li>
<li>非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层</li>
<li>更适合文件索引系统</li>
<li>B树和B+树各有自己的应用场景，不能说B+树完全比B树好，反之亦然.</li>
</ol>
<h3 id="12-3-3-B-树的介绍"><a href="#12-3-3-B-树的介绍" class="headerlink" title="12.3.3 B*树的介绍"></a>12.3.3 B*树的介绍</h3><p>B*树是B+树的变体，在B+树的非根和非叶子结点再增加指向兄弟的指针。</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211214233257519.png" alt="image-20211214233257519"></p>
<p>B*树的说明:</p>
<ol>
<li>B*树定义了非叶子结点关键字个数至少为(2/3)M，即块的最低使用率为2/3，而B+树的块的最低使用率为B+树的1/2。</li>
<li><em>从第1个特点我们可以看出，B</em>树分配新结点的概率比B+树要低，空间使用率更高</li>
</ol>
<h1 id="第13章-图"><a href="#第13章-图" class="headerlink" title="第13章 图"></a>第13章 图</h1><h2 id="13-1-图基本介绍"><a href="#13-1-图基本介绍" class="headerlink" title="13.1  图基本介绍"></a>13.1  图基本介绍</h2><h3 id="13-1-1-为什么要有图"><a href="#13-1-1-为什么要有图" class="headerlink" title="13.1.1 为什么要有图"></a>13.1.1 为什么要有图</h3><ol>
<li>前面我们学了线性表和树</li>
<li>线性表局限于一个直接前驱和一个直接后继的关系</li>
<li>树也只能有一个直接前驱也就是父节点</li>
<li>当我们需要表示多对多的关系时， 这里我们就用到了图</li>
</ol>
<h3 id="13-1-2-图的举例说明"><a href="#13-1-2-图的举例说明" class="headerlink" title="13.1.2 图的举例说明"></a>13.1.2 图的举例说明</h3><p>图是一种数据结构，其中结点可以具有零个或多个相邻元素。两个结点之间的连接称为边。 结点也可以称为顶点。如图：</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211215101132184.png" alt="image-20211215101132184"></p>
<h3 id="13-1-3-图的常用概念"><a href="#13-1-3-图的常用概念" class="headerlink" title="13.1.3 图的常用概念"></a>13.1.3 图的常用概念</h3><ol>
<li>顶点(vertex)</li>
<li>边(edge)</li>
<li>路径</li>
<li>无向图(右图)</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211215101221856.png" alt="image-20211215101221856"></p>
<ol start="5">
<li><p>有向图</p>
</li>
<li><p>带权图</p>
</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211215101250926.png" alt="image-20211215101250926"></p>
<h2 id="13-2-图的表示方式"><a href="#13-2-图的表示方式" class="headerlink" title="13.2 图的表示方式"></a>13.2 图的表示方式</h2><p>图的表示方式有两种：二维数组表示（邻接矩阵）；链表表示（邻接表）。</p>
<h3 id="13-2-1邻接矩阵"><a href="#13-2-1邻接矩阵" class="headerlink" title="13.2.1邻接矩阵"></a>13.2.1邻接矩阵</h3><p>邻接矩阵是表示图形中顶点之间相邻关系的矩阵，对于n个顶点的图而言，矩阵是的row和col表示的是1….n个点。</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211215101348176.png" alt="image-20211215101348176"></p>
<h3 id="13-2-2-邻接表"><a href="#13-2-2-邻接表" class="headerlink" title="13.2.2 邻接表"></a>13.2.2 邻接表</h3><ol>
<li>邻接矩阵需要为每个顶点都分配n个边的空间，其实有很多边都是不存在,会造成空间的一定损失.</li>
<li>邻接表的实现只关心存在的边，不关心不存在的边。因此没有空间浪费，邻接表由数组+链表组成</li>
<li>举例说明</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211215101435922.png" alt="image-20211215101435922"></p>
<h2 id="13-3-图的快速入门案例"><a href="#13-3-图的快速入门案例" class="headerlink" title="13.3 图的快速入门案例"></a>13.3 图的快速入门案例</h2><ol>
<li>要求: 代码实现如下图结构.</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211215193623810.png" alt="image-20211215193623810"></p>
<ol start="2">
<li><p>思路分析 (1) 存储顶点String 使用 ArrayList (2) 保存矩阵 int[][] edges </p>
</li>
<li><p>代码实现</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 核心代码</span><br><br>	<span class="hljs-comment">// 插入顶点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertVertex</span><span class="hljs-params">(String vertex)</span></span>&#123;<br>        vertexList.add(vertex);<br>    &#125;<br><br>    <span class="hljs-comment">// 添加边</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> v1 表示点的下标从第几个开始，A-&gt;0,B-&gt;1...</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> v2 第二个顶点的下标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> weight 有连线，表示1，没有则为0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertEdges</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v1, <span class="hljs-keyword">int</span> v2, <span class="hljs-keyword">int</span> weight)</span></span>&#123;<br>        <span class="hljs-comment">// 无向图</span><br>        edges[v1][v2] = weight;<br>        edges[v2][v1] = weight;<br>        numOfEdges++;<br>    &#125;<br></code></pre></td></tr></table></figure>



<h2 id="13-4-图的深度优先遍历介绍"><a href="#13-4-图的深度优先遍历介绍" class="headerlink" title="13.4 图的深度优先遍历介绍"></a>13.4 图的深度优先遍历介绍</h2><h3 id="13-4-1-图遍历介绍"><a href="#13-4-1-图遍历介绍" class="headerlink" title="13.4.1 图遍历介绍"></a>13.4.1 图遍历介绍</h3><p>所谓图的遍历，即是对结点的访问。一个图有那么多个结点，如何遍历这些结点，需要特定策略，一般有两种访问策略: (1)深度优先遍历 (2)广度优先遍历</p>
<h3 id="13-4-2-深度优先遍历基本思想"><a href="#13-4-2-深度优先遍历基本思想" class="headerlink" title="13.4.2 深度优先遍历基本思想"></a>13.4.2 深度优先遍历基本思想</h3><p>图的深度优先搜索(Depth First Search) 。</p>
<ol>
<li>深度优先遍历，从初始访问结点出发，初始访问结点可能有多个邻接结点，深度优先遍历的策略就是首先访问第一个邻接结点，然后再以这个被访问的邻接结点作为初始结点，访问它的第一个邻接结点， 可以这样理解：每次都在访问完当前结点后首先访问当前结点的第一个邻接结点。</li>
<li>我们可以看到，这样的访问策略是优先往纵向挖掘深入，而不是对一个结点的所有邻接结点进行横向访问。</li>
<li>显然，深度优先搜索是一个递归的过程</li>
</ol>
<h3 id="13-4-3-深度优先遍历算法步骤"><a href="#13-4-3-深度优先遍历算法步骤" class="headerlink" title="13.4.3 深度优先遍历算法步骤"></a>13.4.3 深度优先遍历算法步骤</h3><ol>
<li>访问初始结点v，并标记结点v为已访问。</li>
<li>查找结点v的第一个邻接结点w。</li>
<li>若w存在，则继续执行4，如果w不存在，则回到第1步，将从v的下一个结点继续。</li>
<li>若w未被访问，对w进行深度优先遍历递归（即把w当做另一个v，然后进行步骤123）。</li>
<li>查找结点v的w邻接结点的下一个邻接结点，转到步骤3。</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211215194001409.png" alt="image-20211215194001409"></p>
<h3 id="13-4-4-深度优先算法的代码实现"><a href="#13-4-4-深度优先算法的代码实现" class="headerlink" title="13.4.4 深度优先算法的代码实现"></a>13.4.4 深度优先算法的代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 深度优先遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span>[] isVisited, <span class="hljs-keyword">int</span> i)</span></span>&#123;<br>        <span class="hljs-comment">// 首先访问初始结点，输出</span><br>        System.out.print(getValueByIndex(i) + <span class="hljs-string">&quot;-&gt;&quot;</span>);<br>        <span class="hljs-comment">// 将结点设置为已经访问</span><br>        isVisited[i] = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-comment">// 获取v的第一个邻接结点w</span><br>        <span class="hljs-keyword">int</span> w = getFirstNeighbor(i);<br>        <span class="hljs-keyword">while</span> ( w != -<span class="hljs-number">1</span>)&#123;   <span class="hljs-comment">// 说明w存在</span><br>            <span class="hljs-keyword">if</span> (!isVisited[w])&#123;<br>                <span class="hljs-comment">// 说明w存在但没被访问过，以w为另外一个v，继续执行深度优先遍历</span><br>                dfs(isVisited, w);<br>            &#125;<br>            <span class="hljs-comment">// 如果已经被访问过了，则访问w的下一个邻接结点</span><br>            w = getNextNeighbor(i,w);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 对dfs重载，遍历我们所有的结点，并进行dfs</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">()</span></span>&#123;<br>        isVisited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[vertexList.size()];<br>        <span class="hljs-comment">// 遍历所有结点，进行dfs[回溯]</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; getNumOfVertex(); i++)&#123;<br>            <span class="hljs-keyword">if</span> (!isVisited[i])&#123;<br>                <span class="hljs-comment">// 如果没有被访问过，进行dfs</span><br>                dfs(isVisited,i);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>



<h2 id="13-5-图的广度优先遍历"><a href="#13-5-图的广度优先遍历" class="headerlink" title="13.5 图的广度优先遍历"></a>13.5 图的广度优先遍历</h2><h3 id="13-5-1-广度优先遍历基本思想"><a href="#13-5-1-广度优先遍历基本思想" class="headerlink" title="13.5.1 广度优先遍历基本思想"></a>13.5.1 广度优先遍历基本思想</h3><ol>
<li>图的广度优先搜索(Broad First Search) 。</li>
<li>类似于一个分层搜索的过程，广度优先遍历需要使用一个队列以保持访问过的结点的顺序，以便按这个顺序来访问这些结点的邻接结点</li>
</ol>
<h3 id="13-5-2-广度优先遍历算法步骤"><a href="#13-5-2-广度优先遍历算法步骤" class="headerlink" title="13.5.2 广度优先遍历算法步骤"></a>13.5.2 广度优先遍历算法步骤</h3><ol>
<li><p>访问初始结点v并标记结点v为已访问。</p>
</li>
<li><p>结点v入队列</p>
</li>
<li><p>当队列非空时，继续执行，否则算法结束。</p>
</li>
<li><p>出队列，取得队头结点u。</p>
</li>
<li><p>查找结点u的第一个邻接结点w。</p>
</li>
<li><p>若结点u的邻接结点w不存在，则转到步骤3；否则循环执行以下三个步骤：</p>
<p>6.1 若结点w尚未被访问，则访问结点w并标记为已访问。<br>6.2 结点w入队列<br>6.3 查找结点u的继w邻接结点后的下一个邻接结点w，转到步骤6。</p>
</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211215194329765.png" alt="image-20211215194329765"></p>
<h2 id="13-6-广度优先遍历代码实现"><a href="#13-6-广度优先遍历代码实现" class="headerlink" title="13.6 广度优先遍历代码实现"></a>13.6 广度优先遍历代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 广度优先遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span>[] isVisited, <span class="hljs-keyword">int</span> i)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> u;  <span class="hljs-comment">// 头结点的下标</span><br>        <span class="hljs-keyword">int</span> w;  <span class="hljs-comment">// u的第一个邻接结点</span><br>        <span class="hljs-comment">// 队列，保持访问的结点的顺序</span><br>        LinkedList queue = <span class="hljs-keyword">new</span> LinkedList();<br>        <span class="hljs-comment">// 访问当前结点</span><br>        System.out.print(getValueByIndex(i) + <span class="hljs-string">&quot;=&gt;&quot;</span>);<br>        <span class="hljs-comment">// 设置为已经访问</span><br>        isVisited[i] = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-comment">// 将i入队列</span><br>        queue.addLast(i);<br>        <span class="hljs-comment">// 当队列为非空时，继续执行</span><br>        <span class="hljs-keyword">while</span> (!queue.isEmpty())&#123;<br>            <span class="hljs-comment">// u结点出队列</span><br>            u = (<span class="hljs-keyword">int</span>) queue.removeFirst();<br>            <span class="hljs-comment">// 获取下一个邻接结点</span><br>            w = getFirstNeighbor(i);<br>            <span class="hljs-comment">// 如果w存在</span><br>            <span class="hljs-keyword">while</span> (w != -<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-comment">// 判断是否被访问过</span><br>                <span class="hljs-keyword">if</span> (!isVisited[w])&#123;<br>                    <span class="hljs-comment">// 如果没有被访问过，则输出</span><br>                    System.out.print(getValueByIndex(w) + <span class="hljs-string">&quot;=&gt;&quot;</span>);<br>                    <span class="hljs-comment">// 设置已经访问</span><br>                    isVisited[w] = <span class="hljs-keyword">true</span>;<br>                    <span class="hljs-comment">// 结点w入队列</span><br>                    queue.addLast(w);<br>                &#125;<br>                <span class="hljs-comment">// 访问邻接结点后的一个邻接结点</span><br>                w = getNextNeighbor(u,w);<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 遍历所有结点，并且bfs</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;<br>        isVisited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[vertexList.size()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; getNumOfVertex(); i++)&#123;<br>            <span class="hljs-keyword">if</span> (!isVisited[i])&#123;<br>                bfs(isVisited,i);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>



<h2 id="13-7-图的完整代码"><a href="#13-7-图的完整代码" class="headerlink" title="13.7 图的完整代码"></a>13.7 图的完整代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.graph;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Graph</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> ArrayList&lt;String&gt; vertexList;   <span class="hljs-comment">// 存储顶点集合</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[][] edges;                  <span class="hljs-comment">// 存储图的邻接矩阵</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> numOfEdges;                 <span class="hljs-comment">// 边的数目</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span>[] isVisited;            <span class="hljs-comment">// 标志是否被访问过</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">8</span>;  <span class="hljs-comment">// 结点个数</span><br>        String Vertexs[] = &#123;<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;8&quot;</span>&#125;;   <span class="hljs-comment">// 创建结点</span><br><br>        <span class="hljs-comment">// 创建图</span><br>        Graph graph = <span class="hljs-keyword">new</span> Graph(n);<br>        <span class="hljs-comment">// 添加顶点</span><br>        <span class="hljs-keyword">for</span> (String vertex : Vertexs) &#123;<br>            graph.insertVertex(vertex);<br>        &#125;<br><br>        <span class="hljs-comment">// 添加边</span><br>        <span class="hljs-comment">// A-B,A-C,B-C,B-D,B-E</span><br>        <span class="hljs-comment">/*graph.insertEdges(0,1,1);</span><br><span class="hljs-comment">        graph.insertEdges(0,2,1);</span><br><span class="hljs-comment">        graph.insertEdges(1,2,1);</span><br><span class="hljs-comment">        graph.insertEdges(1,3,1);</span><br><span class="hljs-comment">        graph.insertEdges(1,4,1);*/</span><br><br>        graph.insertEdges(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        graph.insertEdges(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<br>        graph.insertEdges(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>);<br>        graph.insertEdges(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>);<br>        graph.insertEdges(<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>);<br>        graph.insertEdges(<span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>);<br>        graph.insertEdges(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>);<br>        graph.insertEdges(<span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>);<br>        graph.insertEdges(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>);<br><br><br>        <span class="hljs-comment">// 显示图</span><br>        graph.showGraph();<br><br>        <span class="hljs-comment">// 测试深度优先遍历</span><br>        System.out.println(<span class="hljs-string">&quot;深度优先遍历&quot;</span>);<br>        graph.dfs();<br>        System.out.println();<br>        System.out.println(<span class="hljs-string">&quot;广度优先遍历&quot;</span>);<br>        graph.bfs();<br>    &#125;<br><br>    <span class="hljs-comment">// 构造器，n为结点个数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Graph</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        vertexList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(n);    <span class="hljs-comment">// 初始化顶点</span><br>        edges = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n][n];              <span class="hljs-comment">// 初始化图的邻接矩阵</span><br>        numOfEdges = <span class="hljs-number">0</span>;                     <span class="hljs-comment">// 边的数目，默认为0</span><br>        isVisited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[n];         <span class="hljs-comment">// 表示是否被访问过</span><br>    &#125;<br><br>    <span class="hljs-comment">// 获取v的第一个邻接结点的下标w</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果存在则返回对应的下标，如果不存在，则返回-1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getFirstNeighbor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; vertexList.size(); j++)&#123;<br>            <span class="hljs-comment">// 如果edges[index][j] &gt; 0，说明存在，返回下标</span><br>            <span class="hljs-keyword">if</span> (edges[index][j] &gt; <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span> j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回v的w邻接结点的下一个结点的下标</span><br>    <span class="hljs-comment">// 根据前一个邻接结点的下标来获取下一个邻接结点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getNextNeighbor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v1, <span class="hljs-keyword">int</span> v2)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = v2 + <span class="hljs-number">1</span>; j &lt; vertexList.size(); j++)&#123;<br>            <span class="hljs-keyword">if</span> (edges[v1][j] &gt; <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-comment">// 说明存在</span><br>                <span class="hljs-keyword">return</span> j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 深度优先遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span>[] isVisited, <span class="hljs-keyword">int</span> i)</span></span>&#123;<br>        <span class="hljs-comment">// 首先访问初始结点，输出</span><br>        System.out.print(getValueByIndex(i) + <span class="hljs-string">&quot;-&gt;&quot;</span>);<br>        <span class="hljs-comment">// 将结点设置为已经访问</span><br>        isVisited[i] = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-comment">// 获取v的第一个邻接结点w</span><br>        <span class="hljs-keyword">int</span> w = getFirstNeighbor(i);<br>        <span class="hljs-keyword">while</span> ( w != -<span class="hljs-number">1</span>)&#123;   <span class="hljs-comment">// 说明w存在</span><br>            <span class="hljs-keyword">if</span> (!isVisited[w])&#123;<br>                <span class="hljs-comment">// 说明w存在但没被访问过，以w为另外一个v，继续执行深度优先遍历</span><br>                dfs(isVisited, w);<br>            &#125;<br>            <span class="hljs-comment">// 如果已经被访问过了，则访问w的下一个邻接结点</span><br>            w = getNextNeighbor(i,w);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 对dfs重载，遍历我们所有的结点，并进行dfs</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">()</span></span>&#123;<br>        isVisited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[vertexList.size()];<br>        <span class="hljs-comment">// 遍历所有结点，进行dfs[回溯]</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; getNumOfVertex(); i++)&#123;<br>            <span class="hljs-keyword">if</span> (!isVisited[i])&#123;<br>                <span class="hljs-comment">// 如果没有被访问过，进行dfs</span><br>                dfs(isVisited,i);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 广度优先遍历</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span>[] isVisited, <span class="hljs-keyword">int</span> i)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> u;  <span class="hljs-comment">// 头结点的下标</span><br>        <span class="hljs-keyword">int</span> w;  <span class="hljs-comment">// u的第一个邻接结点</span><br>        <span class="hljs-comment">// 队列，保持访问的结点的顺序</span><br>        LinkedList queue = <span class="hljs-keyword">new</span> LinkedList();<br>        <span class="hljs-comment">// 访问当前结点</span><br>        System.out.print(getValueByIndex(i) + <span class="hljs-string">&quot;=&gt;&quot;</span>);<br>        <span class="hljs-comment">// 设置为已经访问</span><br>        isVisited[i] = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-comment">// 将i入队列</span><br>        queue.addLast(i);<br>        <span class="hljs-comment">// 当队列为非空时，继续执行</span><br>        <span class="hljs-keyword">while</span> (!queue.isEmpty())&#123;<br>            <span class="hljs-comment">// u结点出队列</span><br>            u = (<span class="hljs-keyword">int</span>) queue.removeFirst();<br>            <span class="hljs-comment">// 获取下一个邻接结点</span><br>            w = getFirstNeighbor(i);<br>            <span class="hljs-comment">// 如果w存在</span><br>            <span class="hljs-keyword">while</span> (w != -<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-comment">// 判断是否被访问过</span><br>                <span class="hljs-keyword">if</span> (!isVisited[w])&#123;<br>                    <span class="hljs-comment">// 如果没有被访问过，则输出</span><br>                    System.out.print(getValueByIndex(w) + <span class="hljs-string">&quot;=&gt;&quot;</span>);<br>                    <span class="hljs-comment">// 设置已经访问</span><br>                    isVisited[w] = <span class="hljs-keyword">true</span>;<br>                    <span class="hljs-comment">// 结点w入队列</span><br>                    queue.addLast(w);<br>                &#125;<br>                <span class="hljs-comment">// 访问邻接结点后的一个邻接结点</span><br>                w = getNextNeighbor(u,w);<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">// 遍历所有结点，并且bfs</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;<br>        isVisited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[vertexList.size()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; getNumOfVertex(); i++)&#123;<br>            <span class="hljs-keyword">if</span> (!isVisited[i])&#123;<br>                bfs(isVisited,i);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 图中常用的方法</span><br>    <span class="hljs-comment">// 返回结点个数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getNumOfVertex</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> vertexList.size();<br>    &#125;<br>    <span class="hljs-comment">// 返回边的数量</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getNumOfEdges</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> numOfEdges;<br>    &#125;<br>    <span class="hljs-comment">// 返回结点i对应的数据，如0-&gt;A,1-&gt;B...</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getValueByIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> vertexList.get(i);<br>    &#125;<br>    <span class="hljs-comment">// 返回v1和v2对应的权值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getWeight</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v1, <span class="hljs-keyword">int</span> v2)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> edges[v1][v2];<br>    &#125;<br>    <span class="hljs-comment">// 显示图</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showGraph</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] link : edges) &#123;<br>            System.out.println(Arrays.toString(link));<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 插入顶点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertVertex</span><span class="hljs-params">(String vertex)</span></span>&#123;<br>        vertexList.add(vertex);<br>    &#125;<br><br>    <span class="hljs-comment">// 添加边</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> v1 表示点的下标从第几个开始，A-&gt;0,B-&gt;1...</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> v2 第二个顶点的下标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> weight 有连线，表示1，没有则为0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertEdges</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v1, <span class="hljs-keyword">int</span> v2, <span class="hljs-keyword">int</span> weight)</span></span>&#123;<br>        <span class="hljs-comment">// 无向图</span><br>        edges[v1][v2] = weight;<br>        edges[v2][v1] = weight;<br>        numOfEdges++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="13-8-图的深度优先VS-广度优先"><a href="#13-8-图的深度优先VS-广度优先" class="headerlink" title="13.8 图的深度优先VS 广度优先"></a>13.8 图的深度优先VS 广度优先</h2><p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211215194659193.png" alt="image-20211215194659193"></p>
<h1 id="第14章-程序员常用10种算法"><a href="#第14章-程序员常用10种算法" class="headerlink" title="第14章 程序员常用10种算法"></a>第14章 程序员常用10种算法</h1><h2 id="14-1-二分查找算法-非递归"><a href="#14-1-二分查找算法-非递归" class="headerlink" title="14.1 二分查找算法(非递归)"></a>14.1 二分查找算法(非递归)</h2><h3 id="14-1-1-二分查找算法-非递归-介绍"><a href="#14-1-1-二分查找算法-非递归-介绍" class="headerlink" title="14.1.1 二分查找算法(非递归)介绍"></a>14.1.1 二分查找算法(非递归)介绍</h3><ol>
<li>前面我们讲过了二分查找算法，是使用递归的方式，下面我们讲解二分查找算法的非递归方式</li>
<li>二分查找法只适用于从有序的数列中进行查找(比如数字和字母等)，将数列排序后再进行查找</li>
<li>二分查找法的运行时间为对数时间O(㏒₂n) ，即查找到需要的目标位置最多只需要㏒₂n步，假设从[0,99]的队列(100个数，即n=100)中寻到目标数30，则需要查找步数为㏒₂100 , 即最多需要查找7次( 2^6 &lt; 100 &lt; 2^7)</li>
</ol>
<h3 id="14-1-2-二分查找算法-非递归-代码实现"><a href="#14-1-2-二分查找算法-非递归-代码实现" class="headerlink" title="14.1.2 二分查找算法(非递归)代码实现"></a>14.1.2 二分查找算法(非递归)代码实现</h3><ol>
<li><p>数组 {1,3, 8, 10, 11, 67, 100}, 编程实现二分查找， 要求使用非递归的方式完成.</p>
</li>
<li><p>思路分析：</p>
</li>
<li><p>代码实现：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.binarysearchnorecuision;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinarySearchNoRecursion</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">67</span>, <span class="hljs-number">100</span>&#125;;<br>        <span class="hljs-keyword">int</span> index = binarySearch(arr, <span class="hljs-number">80</span>);<br>        System.out.println(<span class="hljs-string">&quot;index = &quot;</span> + index);<br>    &#125;<br><br>    <span class="hljs-comment">// 二分查找，非递归</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr 要查找的数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> target 要查找的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 找到就返回下标，否则-1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> target)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;                    <span class="hljs-comment">// 初始化左边</span><br>        <span class="hljs-keyword">int</span> right = arr.length - <span class="hljs-number">1</span>;     <span class="hljs-comment">// 初始化右边</span><br>        <span class="hljs-keyword">while</span> (left &lt;= right)&#123;          <span class="hljs-comment">// 条件成立，一直循环</span><br>            <span class="hljs-keyword">int</span> mid = (left + right) / <span class="hljs-number">2</span>;   <span class="hljs-comment">// 初始化mid</span><br>            <span class="hljs-comment">//判断arr[mid]与target的值</span><br>            <span class="hljs-keyword">if</span> (arr[mid] == target)&#123;<br>                <span class="hljs-comment">// 说明已经找到了</span><br>                <span class="hljs-keyword">return</span> mid;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[mid] &gt; target)&#123;<br>                <span class="hljs-comment">// 向左边查找</span><br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 向右边查找</span><br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 如果没有找到，就返回-1</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="14-2-分治算法"><a href="#14-2-分治算法" class="headerlink" title="14.2 分治算法"></a>14.2 分治算法</h2><h3 id="14-2-1-分治算法介绍"><a href="#14-2-1-分治算法介绍" class="headerlink" title="14.2.1 分治算法介绍"></a>14.2.1 分治算法介绍</h3><ol>
<li>分治法是一种很重要的算法。字面上的解释是“分而治之”，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题……直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。这个技巧是很多高效算法的基础，如排序算法(快速排序，归并排序)，傅立叶变换(快速傅立叶变换)……</li>
<li>分治算法可以求解的一些经典问题</li>
</ol>
<ul>
<li>二分搜索</li>
<li>大整数乘法</li>
<li>棋盘覆盖</li>
<li>合并排序</li>
<li>快速排序</li>
<li>线性时间选择</li>
<li>最接近点对问题</li>
<li>循环赛日程表</li>
<li>汉诺塔</li>
</ul>
<h3 id="14-2-2-分治算法的基本步骤"><a href="#14-2-2-分治算法的基本步骤" class="headerlink" title="14.2.2 分治算法的基本步骤"></a>14.2.2 分治算法的基本步骤</h3><p>分治法在每一层递归上都有三个步骤：</p>
<ol>
<li>分解：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题</li>
<li>解决：若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题</li>
<li>合并：将各个子问题的解合并为原问题的解。</li>
</ol>
<h3 id="14-2-3-分治-Divide-and-Conquer-P-算法设计模式如下："><a href="#14-2-3-分治-Divide-and-Conquer-P-算法设计模式如下：" class="headerlink" title="14.2.3 分治(Divide-and-Conquer(P))算法设计模式如下："></a>14.2.3 分治(Divide-and-Conquer(P))算法设计模式如下：</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span> <span class="hljs-pattern-match">|<span class="hljs-constructor">P</span>|≤n0</span><br><span class="hljs-pattern-match">   <span class="hljs-keyword">then</span> return(<span class="hljs-constructor">ADHOC(P)</span>)</span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>将<span class="hljs-constructor">P</span>分解为较小的子问题 <span class="hljs-constructor">P1</span> ,<span class="hljs-constructor">P2</span> ,…,<span class="hljs-constructor">Pk</span></span><br><span class="hljs-pattern-match"><span class="hljs-keyword">for</span> i←1 <span class="hljs-keyword">to</span> k</span><br><span class="hljs-pattern-match"><span class="hljs-keyword">do</span> yi ← <span class="hljs-constructor">Divide</span>-<span class="hljs-keyword">and</span>-<span class="hljs-constructor">Conquer(Pi)</span>   递归解决<span class="hljs-constructor">Pi</span></span><br><span class="hljs-pattern-match"><span class="hljs-constructor">T</span> ← <span class="hljs-constructor">MERGE(<span class="hljs-params">y1</span>,<span class="hljs-params">y2</span>,…,<span class="hljs-params">yk</span>)</span>   合并子问题</span><br><span class="hljs-pattern-match">return(<span class="hljs-constructor">T</span>)</span><br></code></pre></td></tr></table></figure>

<p>其中|P|表示问题P的规模；n0为一阈值，表示当问题P的规模不超过n0时，问题已容易直接解出，不必再继续分解。ADHOC(P)是该分治法中的基本子算法，用于直接解小规模的问题P。因此，当P的规模不超过n0时直接用算法ADHOC(P)求解。算法MERGE(y1,y2,…,yk)是该分治法中的合并子算法，用于将P的子问题P1 ,P2 ,…,Pk的相应的解y1,y2,…,yk合并为P的解。</p>
<h3 id="14-2-4-分治算法最佳实践-汉诺塔"><a href="#14-2-4-分治算法最佳实践-汉诺塔" class="headerlink" title="14.2.4 分治算法最佳实践-汉诺塔"></a>14.2.4 分治算法最佳实践-汉诺塔</h3><p>汉诺塔的传说</p>
<p>汉诺塔：汉诺塔（又称河内塔）问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根<a href="https://baike.baidu.com/item/%E9%87%91%E5%88%9A%E7%9F%B3/80698">金刚石</a>柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</p>
<p>假如每秒钟一次，共需多长时间呢？移完这些金片需要5845.54亿年以上，太阳系的预期寿命据说也就是数百亿年。真的过了5845.54亿年，地球上的一切生命，连同梵塔、庙宇等，都早已经灰飞烟灭。</p>
<p>汉诺塔游戏的<strong>演示</strong>和<strong>思路分析</strong>:  </p>
<p>1)如果是有一个盘， A-&gt;C</p>
<p>如果我们有 n &gt;= 2 情况，我们总是可以看做是两个盘 1.最下边的盘 2. 上面的盘</p>
<p>1)先把 最上面的盘 A-&gt;B</p>
<p>2)把最下边的盘 A-&gt;C</p>
<p>3)把B塔的所有盘 从 B-&gt;C  </p>
<p>代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.dac;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HanoiTower</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        hanoiTower(<span class="hljs-number">5</span> , <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 汉诺塔的移动方法</span><br>    <span class="hljs-comment">// 使用分治算法</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> num 汉诺塔的数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a a柱</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> b b柱</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> c c柱</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hanoiTower</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num, <span class="hljs-keyword">char</span> a ,<span class="hljs-keyword">char</span> b, <span class="hljs-keyword">char</span> c)</span></span>&#123;<br>        <span class="hljs-comment">// 如果只有一个盘</span><br>        <span class="hljs-keyword">if</span> (num == <span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;第1个盘从&quot;</span> +a+ <span class="hljs-string">&quot;-&gt;&quot;</span> +c);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 如果有多个盘，可以看成上面到倒数第二块为一个盘，最下面一块为一盘，</span><br>            <span class="hljs-comment">// 1.将最上面所有的盘 A-&gt;B，中间借助c</span><br>            hanoiTower(num - <span class="hljs-number">1</span>,a,c,b);<br>            <span class="hljs-comment">// 2.接着将最后一块移动到c，A-&gt;C </span><br>            System.out.println(<span class="hljs-string">&quot;第&quot;</span> +num+ <span class="hljs-string">&quot;个盘从&quot;</span> +a+ <span class="hljs-string">&quot;-&gt;&quot;</span> +c);<br>            <span class="hljs-comment">// 3,将b柱的所有盘移动到c柱,中间借助a</span><br>            hanoiTower(num - <span class="hljs-number">1</span>,b,a,c);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="14-3-动态规划算法"><a href="#14-3-动态规划算法" class="headerlink" title="14.3 动态规划算法"></a>14.3 动态规划算法</h2><h3 id="14-3-1-应用场景-背包问题"><a href="#14-3-1-应用场景-背包问题" class="headerlink" title="14.3.1 应用场景-背包问题"></a>14.3.1 应用场景-背包问题</h3><p>背包问题：有一个背包，容量为4磅 ， 现有如下物品</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211216175909680.png" alt="image-20211216175909680"></p>
<ol>
<li>要求达到的目标为装入的背包的总价值最大，并且重量不超出</li>
<li>要求装入的物品不能重复</li>
</ol>
<h3 id="14-3-2-动态规划算法介绍"><a href="#14-3-2-动态规划算法介绍" class="headerlink" title="14.3.2 动态规划算法介绍"></a>14.3.2 动态规划算法介绍</h3><ol>
<li>动态规划(Dynamic Programming)算法的核心思想是：将大问题划分为小问题进行解决，从而一步步获取最优解的处理算法</li>
<li>动态规划算法与分治算法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。</li>
<li>与分治法不同的是，适合于用动态规划求解的问题，经分解得到子问题往往不是互相独立的。 ( 即下一个子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步的求解 )</li>
<li>动态规划可以通过填表的方式来逐步推进，得到最优解。</li>
</ol>
<h3 id="14-3-3-动态规划算法最佳实践-背包问题"><a href="#14-3-3-动态规划算法最佳实践-背包问题" class="headerlink" title="14.3.3 动态规划算法最佳实践-背包问题"></a>14.3.3 动态规划算法最佳实践-背包问题</h3><ol>
<li>要求达到的目标为装入的背包的总价值最大，并且重量不超出</li>
<li>要求装入的物品不能重复</li>
<li>思路分析和图解</li>
<li>背包问题主要是指一个给定容量的背包、若干具有一定价值和重量的物品，如何选择物品放入背包使物品的价值最大。其中又分01背包和完全背包(完全背包指的是：每种物品都有无限件可用)</li>
<li>这里的问题属于01背包，即每个物品最多放一个。而无限背包可以转化为01背包。</li>
<li>算法的主要思想，利用动态规划来解决。每次遍历到的第i个物品，根据w[i]和v[i]来确定是否需要将该物品放入背包中。即对于给定的n个物品，设v[i]、w[i]分别为第i个物品的价值和重量，C为背包的容量。再令v[i][j]表示在前i个物品中能够装入容量为j的背包中的最大价值。则我们有下面的结果：</li>
</ol>
<figure class="highlight inform7"><table><tr><td class="code"><pre><code class="hljs inform7">(1)  v<span class="hljs-comment">[i]</span><span class="hljs-comment">[0]</span>=v<span class="hljs-comment">[0]</span><span class="hljs-comment">[j]</span>=0; //表示 填入表 第一行和第一列是0<br>(2) 当w<span class="hljs-comment">[i]</span>&gt; j 时：v<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span>=v<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j]</span>   // 当准备加入新增的商品的容量大于 当前背包的容量时，就直接使用上一个单元格的装入策略<br>(3) 当j&gt;=w<span class="hljs-comment">[i]</span>时： v<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span>=max&#123;v<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j]</span>, v<span class="hljs-comment">[i]</span>+v<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j-w<span class="hljs-comment">[i]</span>]</span>&#125;  <br>// 当 准备加入的新增的商品的容量小于等于当前背包的容量,<br>// 装入的方式:<br>v<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j]</span>： 就是上一个单元格的装入的最大值<br>v<span class="hljs-comment">[i]</span> : 表示当前商品的价值 <br>v<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j-w<span class="hljs-comment">[i]</span>]</span> ： 装入i-1商品，到剩余空间j-w<span class="hljs-comment">[i]</span>的最大值<br>当j&gt;=w<span class="hljs-comment">[i]</span>时： v<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span>=max&#123;v<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j]</span>, v<span class="hljs-comment">[i]</span>+v<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j-w<span class="hljs-comment">[i]</span>]</span>&#125; : <br><br></code></pre></td></tr></table></figure>

<ol start="7">
<li>图解</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211216180552767.png" alt="image-20211216180552767"></p>
<h3 id="14-3-4-动态规划算法最佳实践-背包问题代码实现"><a href="#14-3-4-动态规划算法最佳实践-背包问题代码实现" class="headerlink" title="14.3.4 动态规划算法最佳实践-背包问题代码实现"></a>14.3.4 动态规划算法最佳实践-背包问题代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.dynamic;<br><br><span class="hljs-comment">// 动态规划算法解决背包问题</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KnapsackProblem</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] w = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>&#125;;              <span class="hljs-comment">// 商品的重量</span><br>        <span class="hljs-keyword">int</span>[] val = &#123;<span class="hljs-number">1500</span>,<span class="hljs-number">3000</span>,<span class="hljs-number">2000</span>&#125;;   <span class="hljs-comment">// 商品的价值</span><br>        <span class="hljs-keyword">int</span> m = <span class="hljs-number">4</span>;                      <span class="hljs-comment">// 背包的容量</span><br>        <span class="hljs-keyword">int</span> n = val.length;             <span class="hljs-comment">// 商品的个数</span><br><br>        <span class="hljs-comment">// v[i][j]，这个表示在前i个商品中，能够装入容量为j的背包的最大价值</span><br>        <span class="hljs-keyword">int</span>[][] v = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n + <span class="hljs-number">1</span>][m + <span class="hljs-number">1</span>];<br>        <span class="hljs-comment">// 为了记录放入的商品是哪个，这里定义一个二维数组存放路径</span><br>        <span class="hljs-keyword">int</span>[][] path = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n + <span class="hljs-number">1</span>][m + <span class="hljs-number">1</span>];<br><br>        <span class="hljs-comment">// 初始化第一行和第一列</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; v[<span class="hljs-number">0</span>].length; i++)&#123;<br>            v[<span class="hljs-number">0</span>][i] = <span class="hljs-number">0</span>;    <span class="hljs-comment">// 第一行都为0</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; v.length; i++)&#123;<br>            v[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;    <span class="hljs-comment">// 第一列都为0</span><br>        &#125;<br>        <span class="hljs-comment">// 开始填充</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; v.length; i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; v[<span class="hljs-number">0</span>].length; j++)&#123;<br>                <span class="hljs-comment">// 如果商品的重量大于背包的容量</span><br>                <span class="hljs-comment">// w[i - 1]:i是从1开始的，而商品是要从下标为0开始，所以减一</span><br>                <span class="hljs-keyword">if</span> (w[i - <span class="hljs-number">1</span>] &gt; j)&#123;<br>                    <span class="hljs-comment">// 直接将上一个单元格的填充策略填入当前的单元格</span><br>                    v[i][j] = v[i - <span class="hljs-number">1</span>][j];<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 如果j &gt;= w[i - 1],这里的val[i - 1]，和上面的w[i - 1]一样，从下标为0的第一商品开始</span><br>                    <span class="hljs-comment">// v[i][j] = Math.max(v[i - 1][j], val[i - 1] + v[i - 1][j - w[i - 1]]);</span><br>                    <span class="hljs-comment">// 为了清楚具体的商品，这里对代码改造，新增一个二维数组记录商品</span><br>                    <span class="hljs-keyword">if</span> (v[i - <span class="hljs-number">1</span>][j] &lt; val[i - <span class="hljs-number">1</span>] + v[i - <span class="hljs-number">1</span>][j - w[i - <span class="hljs-number">1</span>]])&#123;<br>                        v[i][j] = val[i - <span class="hljs-number">1</span>] + v[i - <span class="hljs-number">1</span>][j - w[i - <span class="hljs-number">1</span>]];<br>                        <span class="hljs-comment">// 记录最后一个的商品，不是最后一个不用记录</span><br>                        path[i][j] = <span class="hljs-number">1</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        v[i][j] = v[i - <span class="hljs-number">1</span>][j];<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 输出二维数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; v.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; v[<span class="hljs-number">0</span>].length; j++) &#123;<br>                System.out.print(v[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>        <span class="hljs-comment">// 输出商品</span><br><span class="hljs-comment">/*        for (int i = 0; i &lt; path.length; i++)&#123;</span><br><span class="hljs-comment">            for (int j = 0; j &lt; path[0].length; j++)&#123;</span><br><span class="hljs-comment">                // 只需要打印最后的商品</span><br><span class="hljs-comment">                if (path[i][j] == 1)&#123;</span><br><span class="hljs-comment">                    System.out.printf(&quot;第%d个商品\n&quot;,i);</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;*/</span><br>        <span class="hljs-comment">// 改造输出商品，从最后开始向前遍历</span><br>        <span class="hljs-keyword">int</span> i = path.length - <span class="hljs-number">1</span>;        <span class="hljs-comment">// 行</span><br>        <span class="hljs-keyword">int</span> j = path[<span class="hljs-number">0</span>].length - <span class="hljs-number">1</span>;     <span class="hljs-comment">// 列</span><br>        <span class="hljs-keyword">while</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; j &gt; <span class="hljs-number">0</span>)&#123;     <span class="hljs-comment">// 符合这个条件一直循环</span><br>            <span class="hljs-keyword">if</span> (path[i][j] == <span class="hljs-number">1</span>)&#123;<br>                System.out.printf(<span class="hljs-string">&quot;第%d个商品\n&quot;</span>,i);<br>                <span class="hljs-comment">// 输出完一个后，j需要减去当前的重量</span><br>                j -= w[i - <span class="hljs-number">1</span>];<br>            &#125;<br>            i--;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="14-4-KMP算法"><a href="#14-4-KMP算法" class="headerlink" title="14.4 KMP算法"></a>14.4 KMP算法</h2><h3 id="14-4-1-应用场景-字符串匹配问题"><a href="#14-4-1-应用场景-字符串匹配问题" class="headerlink" title="14.4.1 应用场景-字符串匹配问题"></a>14.4.1 应用场景-字符串匹配问题</h3><p>字符串匹配问题：</p>
<ol>
<li>有一个字符串 str1= “”硅硅谷 尚硅谷你尚硅 尚硅谷你尚硅谷你尚硅你好””，和一个子串 str2=”尚硅谷你尚硅你”</li>
<li>现在要判断 str1 是否含有 str2, 如果存在，就返回第一次出现的位置, 如果没有，则返回-1</li>
</ol>
<h3 id="14-4-2-暴力匹配算法"><a href="#14-4-2-暴力匹配算法" class="headerlink" title="14.4.2 暴力匹配算法"></a>14.4.2 暴力匹配算法</h3><p>如果用暴力匹配的思路，并假设现在str1匹配到 i 位置，子串str2匹配到 j 位置，则有:</p>
<ol>
<li>如果当前字符匹配成功（即**str1[i] == str2[j]），则i++，j++**，继续匹配下一个字符</li>
<li>如果失配（即**str1[i]! = str2[j]<strong>），令</strong>i = i - (j - 1)**，j = 0。相当于每次匹配失败时，i 回溯，j 被置为0。</li>
<li>用暴力方法解决的话就会有大量的回溯，每次只移动一位，若是不匹配，移动到下一位接着判断，浪费了大量的时间。(不可行!)</li>
<li>暴力匹配算法实现.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.kmp;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ViolenceMatch</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String str1 = <span class="hljs-string">&quot;硅硅谷 尚硅谷你尚硅 尚硅谷你尚硅谷你尚硅你好&quot;</span>;<br>        String str2 = <span class="hljs-string">&quot;尚硅谷你尚硅你~&quot;</span>;<br>        <span class="hljs-keyword">int</span> index = violenceMatch(str1, str2);<br>        System.out.println(<span class="hljs-string">&quot;index = &quot;</span> + index);<br><br>    &#125;<br><br>    <span class="hljs-comment">// 暴力匹配</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">violenceMatch</span><span class="hljs-params">(String str1, String str2)</span></span>&#123;<br>        <span class="hljs-keyword">char</span>[] s1 = str1.toCharArray();<br>        <span class="hljs-keyword">char</span>[] s2 = str2.toCharArray();<br><br>        <span class="hljs-keyword">int</span> s1Len = s1.length;  <span class="hljs-comment">// s1的长度</span><br>        <span class="hljs-keyword">int</span> s2Len = s2.length;  <span class="hljs-comment">// s2的长度</span><br><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 指向s1的指针</span><br>        <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 指向s2的指针</span><br>        <span class="hljs-keyword">while</span> (i &lt; s1Len &amp;&amp; j &lt; s2Len)&#123;     <span class="hljs-comment">// 防止越界</span><br>            <span class="hljs-comment">// 开始比较</span><br>            <span class="hljs-keyword">if</span> (s1[i] == s2[j])&#123;<br>                <span class="hljs-comment">// 说明成功</span><br>                i++;<br>                j++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 如果不成功，i回到第一个匹配成功的后一个，也就是i - (j - 1)个，j置0,(i - j + 1)</span><br>                i = i - (j - <span class="hljs-number">1</span>);<br>                j = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 退出循环的时候判断是否已经找到</span><br>        <span class="hljs-keyword">if</span> (j == s2Len)&#123;    <span class="hljs-comment">// 当j匹配到最后的时候说明已经找到</span><br>            <span class="hljs-comment">// 返回下标，第一个字符的下标</span><br>            <span class="hljs-keyword">return</span> i - j;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 否则返回-1</span><br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>



<h3 id="14-4-3-KMP算法介绍"><a href="#14-4-3-KMP算法介绍" class="headerlink" title="14.4.3 KMP算法介绍"></a>14.4.3 KMP算法介绍</h3><ol>
<li>KMP是一个解决模式串在文本串是否出现过，如果出现过，最早出现的位置的经典算法</li>
<li>Knuth-Morris-Pratt 字符串查找算法，简称为 “KMP算法”，常用于在一个文本串S内查找一个模式串P 的出现位置，这个算法由Donald Knuth、Vaughan Pratt、James H. Morris三人于1977年联合发表，故取这3人的姓氏命名此算法.</li>
<li>KMP方法算法就利用之前判断过信息，通过一个next数组，保存模式串中前后最长公共子序列的长度，每次回溯时，通过next数组找到，前面匹配过的位置，省去了大量的计算时间</li>
<li>参考资料：<a href="https://www.cnblogs.com/ZuoAndFutureGirl/p/9028287.html">https://www.cnblogs.com/ZuoAndFutureGirl/p/9028287.html</a> </li>
</ol>
<h3 id="14-4-4-KMP算法最佳应用-字符串匹配问题"><a href="#14-4-4-KMP算法最佳应用-字符串匹配问题" class="headerlink" title="14.4.4 KMP算法最佳应用-字符串匹配问题"></a>14.4.4 KMP算法最佳应用-字符串匹配问题</h3><p>字符串匹配问题：</p>
<ol>
<li>有一个字符串 str1= “BBC ABCDAB ABCDABCDABDE”，和一个子串 str2=”ABCDABD”</li>
<li>现在要判断 str1 是否含有 str2, 如果存在，就返回第一次出现的位置, 如果没有，则返回-1</li>
<li>要求：使用KMP算法完成判断，不能使用简单的暴力匹配算法.</li>
</ol>
<p>思路分析图解</p>
<p>举例来说，有一个字符串 Str1 = “BBC ABCDAB ABCDABCDABDE”，判断，里面是否包含另一个字符串 Str2 = “ABCDABD”？</p>
<p>1.首先，用Str1的第一个字符和Str2的第一个字符去比较，不符合，关键词向后移动一位 </p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/clip_image002.jpg" alt="img"> </p>
<p>\2.  重复第一步，还是不符合，再后移 </p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/clip_image004.jpg" alt="img"></p>
<p>\3.  一直重复，直到Str1有一个字符与Str2的第一个字符符合为止</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/clip_image006.jpg" alt="img"></p>
<p>\4.  接着比较字符串和搜索词的下一个字符，还是符合。 </p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/clip_image008.jpg" alt="img"></p>
<p>5.遇到Str1有一个字符与Str2对应的字符不符合。</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/clip_image010.jpg" alt="img"> </p>
<p>6.这时候，想到的是继续遍历Str1的下一个字符，重复第1步。(其实是很不明智的，因为此时BCD已经比较过了，没有必要再做重复的工作，一个基本事实是，当空格与D不匹配时，你其实知道前面六个字符是”ABCDAB”。KMP 算法的想法是，设法利用这个已知信息，不要把”搜索位置”移回已经比较过的位置，继续把它向后移，这样就提高了效率。) </p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/clip_image012.jpg" alt="img"> </p>
<p>7.怎么做到把刚刚重复的步骤省略掉？可以对Str2计算出一张《部分匹配表》，这张表的产生在后面介绍 </p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/clip_image014.jpg" alt="img"></p>
<p>8.已知空格与D不匹配时，前面六个字符”ABCDAB”是匹配的。查表可知，最后一个匹配字符B对应的”部分匹配值”为2，因此按照下面的公式算出向后移动的位数： </p>
<p>移动位数 = 已匹配的字符数 - 对应的部分匹配值</p>
<p>因为 6 - 2 等于4，所以将搜索词向后移动 4 位。 </p>
<p>9.因为空格与Ｃ不匹配，搜索词还要继续往后移。这时，已匹配的字符数为2（”AB”），对应的”部分匹配值”为0。所以，移动位数 = 2 - 0，结果为 2，于是将搜索词向后移 2 位。 </p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/clip_image016.jpg" alt="img"> </p>
<p>10.因为空格与A不匹配，继续后移一位。 </p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/clip_image018.jpg" alt="img"></p>
<p>11.逐位比较，直到发现C与D不匹配。于是，移动位数 = 6 - 2，继续将搜索词向后移动 4 位。 </p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/clip_image020.jpg" alt="img"> </p>
<p>12.逐位比较，直到搜索词的最后一位，发现完全匹配，于是搜索完成。如果还要继续搜索（即找出全部匹配），移动位数 = 7 - 0，再将搜索词向后移动 7 位，这里就不再重复了。 </p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/clip_image022.jpg" alt="img"> </p>
<p>13.介绍《部分匹配表》怎么产生的 </p>
<p>先介绍前缀，后缀是什么 </p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/clip_image024.jpg" alt="img"></p>
<p>“部分匹配值”就是”前缀”和”后缀”的最长的共有元素的长度。以”ABCDABD”为例， </p>
<p>－”A”的前缀和后缀都为空集，共有元素的长度为0；</p>
<p>－”AB”的前缀为[A]，后缀为[B]，共有元素的长度为0；</p>
<p>－”ABC”的前缀为[A, AB]，后缀为[BC, C]，共有元素的长度0； </p>
<p>－”ABCD”的前缀为[A, AB, ABC]，后缀为[BCD, CD, D]，共有元素的长度为0； </p>
<p>－”ABCDA”的前缀为[A, AB, ABC, ABCD]，后缀为[BCDA, CDA, DA, A]，共有元素为”A”，长度为1； </p>
<p>－”ABCDAB”的前缀为[A, AB, ABC, ABCD, ABCDA]，后缀为[BCDAB, CDAB, DAB, AB, B]，共有元素为”AB”，长度为2； </p>
<p>－”ABCDABD”的前缀为[A, AB, ABC, ABCD, ABCDA, ABCDAB]，后缀为[BCDABD, CDABD, DABD, ABD, BD, D]，共有元素的长度为0。</p>
<p>14.”部分匹配”的实质是，有时候，字符串头部和尾部会有重复。比如，”ABCDAB”之中有两个”AB”，那么它的”部分匹配值”就是2（”AB”的长度）。搜索词移动的时候，第一个”AB”向后移动 4 位（字符串长度-部分匹配值），就可以来到第二个”AB”的位置。 </p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/clip_image026.jpg" alt="img"> </p>
<p>到此KMP算法思想分析完毕!</p>
<p><strong>代码实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.kmp;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KMPAlgorithm</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String str1 = <span class="hljs-string">&quot;ASFDFABCAcAGDFDAABCAcABGD&quot;</span>;<br>        <span class="hljs-comment">//String dest = &quot;ABCAcABG&quot;;</span><br>        String dest = <span class="hljs-string">&quot;AGDFDAAB&quot;</span>;<br><br>        <span class="hljs-keyword">int</span>[] next = kmpNext(dest);<br>        System.out.println(<span class="hljs-string">&quot;next = &quot;</span> + Arrays.toString(next));<br><br>        <span class="hljs-keyword">int</span> index = kmpSearch(next, str1, dest);<br>        System.out.println(<span class="hljs-string">&quot;index = &quot;</span> + index);<br><br>    &#125;<br><br>    <span class="hljs-comment">// KMP 算法</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> next 模式串的next数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> str1 源字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> str2 要匹配的子串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 找到返回下标，否则返回-1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">kmpSearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] next, String str1, String str2)</span></span>&#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; str1.length(); i++)&#123;<br><br>            <span class="hljs-comment">// 如果不相等，j = next[j - 1]</span><br>            <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; str1.charAt(i) != str2.charAt(j))&#123;<br>                j = next[j - <span class="hljs-number">1</span>];<br>            &#125;<br><br>            <span class="hljs-comment">// 如果相等</span><br>            <span class="hljs-keyword">if</span> (str1.charAt(i) == str2.charAt(j))&#123;<br>                j++;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (j == str2.length())&#123;<br>                <span class="hljs-comment">// 如果找到了就返回下标</span><br>                <span class="hljs-keyword">return</span> i - j + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取next[]数组</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] kmpNext(String dest)&#123;<br>        <span class="hljs-keyword">int</span>[] next = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[dest.length()];<br>        next[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;    <span class="hljs-comment">// 如果长度为1，则部分匹配值为0</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>,j = <span class="hljs-number">0</span>; i &lt; dest.length(); i++)&#123;<br><br>            <span class="hljs-comment">// 如果两个字符串不相等,让j移动 next[j - 1]</span><br>            <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; dest.charAt(j) != dest.charAt(i))&#123;<br>                j = next[j - <span class="hljs-number">1</span>];<br>            &#125;<br><br>            <span class="hljs-comment">// 如果两个字符相等</span><br>            <span class="hljs-keyword">if</span> (dest.charAt(j) == dest.charAt(i))&#123;<br>                j++;<br>            &#125;<br>            <span class="hljs-comment">// 将j的值赋给next[i]</span><br>            next[i] = j;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> next;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>





<h3 id="14-4-5-自己理解的KMP算法"><a href="#14-4-5-自己理解的KMP算法" class="headerlink" title="14.4.5 自己理解的KMP算法"></a>14.4.5 自己理解的KMP算法</h3><h4 id="KMP的next数组分析"><a href="#KMP的next数组分析" class="headerlink" title="KMP的next数组分析"></a>KMP的next数组分析</h4><p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/KMP%E7%9A%84next%E6%95%B0%E7%BB%84%E5%88%86%E6%9E%90.png" alt="KMP的next数组分析"></p>
<h4 id="KMP算法原理分析："><a href="#KMP算法原理分析：" class="headerlink" title="KMP算法原理分析："></a>KMP算法原理分析：</h4><p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/KMP%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E5%9B%BE%E8%A7%A3-1639733459184.png" alt="KMP算法原理图解"></p>
<h2 id="14-5-贪心算法"><a href="#14-5-贪心算法" class="headerlink" title="14.5 贪心算法"></a>14.5 贪心算法</h2><h3 id="14-5-1-应用场景-集合覆盖问题"><a href="#14-5-1-应用场景-集合覆盖问题" class="headerlink" title="14.5.1 应用场景-集合覆盖问题"></a>14.5.1 应用场景-集合覆盖问题</h3><p>假设存在下面需要付费的广播台，以及广播台信号可以覆盖的地区。 如何选择最少的广播台，让所有的地区都可以接收到信号</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211218135359592.png" alt="image-20211218135359592"></p>
<h3 id="14-5-2-贪心算法介绍"><a href="#14-5-2-贪心算法介绍" class="headerlink" title="14.5.2 贪心算法介绍"></a>14.5.2 贪心算法介绍</h3><ol>
<li><p>贪婪算法(贪心算法)是指在对问题进行求解时，在每一步选择中都采取最好或者最优(即最有利)的选择，从而希望能够导致结果是最好或者最优的算法</p>
</li>
<li><p>贪婪算法所得到的结果不一定是最优的结果(有时候会是最优解)，但是都是相对近似(接近)最优解的结果</p>
</li>
</ol>
<h3 id="14-5-3-贪心算法最佳应用-集合覆盖"><a href="#14-5-3-贪心算法最佳应用-集合覆盖" class="headerlink" title="14.5.3 贪心算法最佳应用-集合覆盖"></a>14.5.3 贪心算法最佳应用-集合覆盖</h3><ol>
<li>假设存在如下表的需要付费的广播台，以及广播台信号可以覆盖的地区。 如何选择最少的广播台，让所有的地区都可以接收到信号</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211218135500075.png" alt="image-20211218135500075"></p>
<ol start="2">
<li>思路分析: </li>
</ol>
<p>如何找出覆盖所有地区的广播台的集合呢，使用穷举法实现,列出每个可能的广播台的集合，这被称为幂集。假设总的有n个广播台，则广播台的组合总共有2ⁿ -1 个,假设每秒可以计算10个子集， 如图:</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211218135538853.png" alt="image-20211218135538853"></p>
<p>使用贪婪算法，效率高:</p>
<ol>
<li>目前并没有算法可以快速计算得到准备的值， 使用贪婪算法，则可以得到非常接近的解，并且效率高。选择策略上，因为需要覆盖全部地区的最小集合:</li>
<li>遍历所有的广播电台, 找到一个覆盖了最多未覆盖的地区的电台(此电台可能包含一些已覆盖的地区，但没有关系） </li>
<li>将这个电台加入到一个集合中(比如ArrayList), 想办法把该电台覆盖的地区在下次比较时去掉。</li>
<li>重复第1步直到覆盖了全部的地区</li>
</ol>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.greedy;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GreedyAlgorithm</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建广播HashMap</span><br>        HashMap&lt;String, HashSet&lt;String&gt;&gt; broadcasts = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>        HashSet&lt;String&gt; hashSet1 = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        hashSet1.add(<span class="hljs-string">&quot;北京&quot;</span>);<br>        hashSet1.add(<span class="hljs-string">&quot;上海&quot;</span>);<br>        hashSet1.add(<span class="hljs-string">&quot;天津&quot;</span>);<br><br>        HashSet&lt;String&gt; hashSet2 = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        hashSet2.add(<span class="hljs-string">&quot;广州&quot;</span>);<br>        hashSet2.add(<span class="hljs-string">&quot;北京&quot;</span>);<br>        hashSet2.add(<span class="hljs-string">&quot;深圳&quot;</span>);<br><br>        HashSet&lt;String&gt; hashSet3 = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        hashSet3.add(<span class="hljs-string">&quot;成都&quot;</span>);<br>        hashSet3.add(<span class="hljs-string">&quot;上海&quot;</span>);<br>        hashSet3.add(<span class="hljs-string">&quot;杭州&quot;</span>);<br><br>        HashSet&lt;String&gt; hashSet4 = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        hashSet4.add(<span class="hljs-string">&quot;上海&quot;</span>);<br>        hashSet4.add(<span class="hljs-string">&quot;天津&quot;</span>);<br><br>        HashSet&lt;String&gt; hashSet5 = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        hashSet5.add(<span class="hljs-string">&quot;杭州&quot;</span>);<br>        hashSet5.add(<span class="hljs-string">&quot;大连&quot;</span>);<br><br>        broadcasts.put(<span class="hljs-string">&quot;K1&quot;</span>,hashSet1);<br>        broadcasts.put(<span class="hljs-string">&quot;K2&quot;</span>,hashSet2);<br>        broadcasts.put(<span class="hljs-string">&quot;K3&quot;</span>,hashSet3);<br>        broadcasts.put(<span class="hljs-string">&quot;K4&quot;</span>,hashSet4);<br>        broadcasts.put(<span class="hljs-string">&quot;K5&quot;</span>,hashSet5);<br><br>        <span class="hljs-comment">// 创建一个HashSet表示能覆盖的所有地区</span><br>        HashSet&lt;String&gt; allAreas = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        allAreas.add(<span class="hljs-string">&quot;北京&quot;</span>);<br>        allAreas.add(<span class="hljs-string">&quot;上海&quot;</span>);<br>        allAreas.add(<span class="hljs-string">&quot;天津&quot;</span>);<br>        allAreas.add(<span class="hljs-string">&quot;广州&quot;</span>);<br>        allAreas.add(<span class="hljs-string">&quot;深圳&quot;</span>);<br>        allAreas.add(<span class="hljs-string">&quot;成都&quot;</span>);<br>        allAreas.add(<span class="hljs-string">&quot;杭州&quot;</span>);<br>        allAreas.add(<span class="hljs-string">&quot;大连&quot;</span>);<br><br>        <span class="hljs-comment">// 定义一个ArrayList存放广播台</span><br>        ArrayList&lt;String&gt; selects = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-comment">// 定义一个临时变量，存放覆盖所有地区allAreas和当前覆盖地区的交集</span><br>        HashSet&lt;String&gt; tempSet = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br><br>        <span class="hljs-comment">// 定义一个maxKey，指向能覆盖最大地区的电台的key</span><br>        String maxKey = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-comment">// 遍历</span><br>        <span class="hljs-keyword">while</span> (allAreas.size() != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">// 每次进行while都要将maxKey置空</span><br>            maxKey = <span class="hljs-keyword">null</span>;<br><br>            <span class="hljs-comment">// 遍历broadcast.keySet拿到所有的key</span><br>            <span class="hljs-keyword">for</span> (String key : broadcasts.keySet()) &#123;<br><br>                <span class="hljs-comment">// 每次进行for都要将tempSet置空</span><br>                tempSet.clear();<br><br>                <span class="hljs-comment">// 将key所对应的覆盖地区加入到tempSet中</span><br>                HashSet&lt;String&gt; areas = broadcasts.get(key);<br>                tempSet.addAll(areas);<br>                <span class="hljs-comment">// 求tempSet和allAreas的交集，并赋给tempSet</span><br>                tempSet.retainAll(allAreas);<br><br>                <span class="hljs-comment">// 判断当前tempSet指向的key是否是覆盖最多地区的，如果是，将maxKey指向当前的key</span><br>                <span class="hljs-comment">// tempSet.size() &gt; broadcasts.get(maxKey).size()：当前key指向的电台覆盖地区比maxKey的还要多</span><br>                <span class="hljs-keyword">if</span> (tempSet.size() &gt; <span class="hljs-number">0</span>  &amp;&amp; (maxKey == <span class="hljs-keyword">null</span> || tempSet.size() &gt; broadcasts.get(maxKey).size()))&#123;<br>                    maxKey = key;<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-comment">// 先判断maxKey是否空，不为空，再将maxKey加入selects</span><br>            <span class="hljs-keyword">if</span> (maxKey != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">// 将maxKey所指的电台加入selects中</span><br>                selects.add(maxKey);<br>                <span class="hljs-comment">// 将maxKey所覆盖的地区从allAreas中去掉</span><br>                allAreas.removeAll(broadcasts.get(maxKey));<br>            &#125;<br><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;得到的电台为：&quot;</span> + selects);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="14-5-4-贪心算法注意事项和细节"><a href="#14-5-4-贪心算法注意事项和细节" class="headerlink" title="14.5.4 贪心算法注意事项和细节"></a>14.5.4 贪心算法注意事项和细节</h3><ol>
<li>贪婪算法所得到的结果不一定是最优的结果(有时候会是最优解)，但是都是相对近似(接近)最优解的结果</li>
<li>比如上题的算法选出的是K1, K2, K3, K5，符合覆盖了全部的地区</li>
<li>但是我们发现 K2, K3,K4,K5 也可以覆盖全部地区，如果K2 的使用成本低于K1,那么我们上题的 K1, K2, K3, K5 虽然是满足条件，但是并不是最优的.</li>
</ol>
<h2 id="14-6-普里姆算法"><a href="#14-6-普里姆算法" class="headerlink" title="14.6 普里姆算法"></a>14.6 普里姆算法</h2><h3 id="14-6-1-应用场景-修路问题"><a href="#14-6-1-应用场景-修路问题" class="headerlink" title="14.6.1 应用场景-修路问题"></a>14.6.1 应用场景-修路问题</h3><p>看一个应用场景和问题：</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211218193642457.png" alt="image-20211218193642457"></p>
<ol>
<li>有胜利乡有7个村庄(A, B, C, D, E, F, G) ，现在需要修路把7个村庄连通</li>
<li>各个村庄的距离用边线表示(权) ，比如 A – B 距离 5公里</li>
<li>问：如何修路保证各个村庄都能连通，并且总的修建公路总里程最短?</li>
</ol>
<p>思路: 将10条边，连接即可，但是总的里程数不是最小.<br>正确的思路，就是尽可能的选择少的路线，并且每条路线最小，保证总里程数最少. </p>
<h3 id="14-6-2-最小生成树"><a href="#14-6-2-最小生成树" class="headerlink" title="14.6.2 最小生成树"></a>14.6.2 最小生成树</h3><p>修路问题本质就是就是最小生成树问题， 先介绍一下最小生成树(Minimum Cost Spanning Tree)，简称MST。</p>
<ol>
<li>给定一个带权的无向连通图,如何选取一棵生成树,使树上所有边上权的总和为最小,这叫最小生成树<br>N个顶点，一定有N-1条边</li>
<li>包含全部顶点</li>
<li>N-1条边都在图中</li>
<li>举例说明(如图:)</li>
<li>求最小生成树的算法主要是普里姆算法和克鲁斯卡尔算法</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211218193809266.png" alt="image-20211218193809266"></p>
<h3 id="14-6-3-普里姆算法介绍"><a href="#14-6-3-普里姆算法介绍" class="headerlink" title="14.6.3 普里姆算法介绍"></a>14.6.3 普里姆算法介绍</h3><p>普利姆(Prim)算法求最小生成树，也就是在包含n个顶点的连通图中，找出只有(n-1)条边包含所有n个顶点的连通子图，也就是所谓的极小连通子图</p>
<p>普利姆的算法如下:</p>
<ol>
<li>设G=(V,E)是连通网，T=(U,D)是最小生成树，V,U是顶点集合，E,D是边的集合 </li>
<li>若从顶点u开始构造最小生成树，则从集合V中取出顶点u放入集合U中，标记顶点v的visited[u]=1</li>
<li>若集合U中顶点ui与集合V-U中的顶点vj之间存在边，则寻找这些边中权值最小的边，但不能构成回路，将顶点vj加入集合U中，将边（ui,vj）加入集合D中，标记visited[vj]=1</li>
<li>重复步骤②，直到U与V相等，即所有顶点都被标记为访问过，此时D中有n-1条边</li>
<li>提示: 单独看步骤很难理解，我们通过代码来讲解，比较好理解.</li>
<li>图解</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211218193918120.png" alt="image-20211218193918120"></p>
<h3 id="14-6-4-普里姆算法最佳实践-修路问题"><a href="#14-6-4-普里姆算法最佳实践-修路问题" class="headerlink" title="14.6.4 普里姆算法最佳实践(修路问题)"></a>14.6.4 普里姆算法最佳实践(修路问题)</h3><p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211218194017208.png" alt="image-20211218194017208"></p>
<ol>
<li>胜利乡有7个村庄(A, B, C, D, E, F, G) ，现在需要修路把7个村庄连通</li>
<li>各个村庄的距离用边线表示(权) ，比如 A – B 距离 5公里</li>
<li>问：如何修路保证各个村庄都能连通，并且总的修建公路总里程最短?</li>
<li>看老师思路分析+代码演示: </li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.prim;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrimAlgorithm</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">char</span>[] data = &#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>&#125;;<br>        <span class="hljs-keyword">int</span> verxs = data.length;<br>        <span class="hljs-keyword">int</span>[][] weight = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][]&#123;<br>                &#123;<span class="hljs-number">10000</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">2</span>&#125;,<br>                &#123;<span class="hljs-number">5</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">3</span>&#125;,<br>                &#123;<span class="hljs-number">7</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>&#125;,<br>                &#123;<span class="hljs-number">10000</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10000</span>&#125;,<br>                &#123;<span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>&#125;,<br>                &#123;<span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">6</span>&#125;,<br>                &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10000</span>&#125;<br>        &#125;;<br>        <span class="hljs-comment">// 创建一个图对象</span><br>        MGraph graph = <span class="hljs-keyword">new</span> MGraph(verxs);<br>        <span class="hljs-comment">// 创建MinTree对象</span><br>        MinTree minTree = <span class="hljs-keyword">new</span> MinTree();<br>        minTree.createGraph(graph,verxs,data,weight);<br><br>        <span class="hljs-comment">// 显示图</span><br>        minTree.showGraph(graph);<br><br>        <span class="hljs-comment">// 测试普里姆算法</span><br>        minTree.prim(graph,<span class="hljs-number">0</span> );<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 创建最小生成树</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MinTree</span></span>&#123;<br><br>    <span class="hljs-comment">// 创建邻接矩阵</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> graph 图对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> verxs 图的结点个数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 图的数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> weight 图的邻接矩阵</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createGraph</span><span class="hljs-params">(MGraph graph, <span class="hljs-keyword">int</span> verxs, <span class="hljs-keyword">char</span>[] data, <span class="hljs-keyword">int</span>[][] weight)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> i, j;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; verxs; i++)&#123;        <span class="hljs-comment">// 顶点</span><br>            graph.data[i] = data[i];<br>            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; verxs; j++)&#123;<br>                graph.weight[i][j] = weight[i][j];<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 显示图的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showGraph</span><span class="hljs-params">(MGraph graph)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] link : graph.weight) &#123;<br>            System.out.println(Arrays.toString(link));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 普利姆算法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> graph 需要生成最小成树的图</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> v 表示从图的第几个顶点开始</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">prim</span><span class="hljs-params">(MGraph graph,<span class="hljs-keyword">int</span> v)</span></span>&#123;<br>        <span class="hljs-comment">// 表示已经访问过的顶点</span><br>        <span class="hljs-keyword">int</span>[] visited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[graph.verxs];<br><br>        <span class="hljs-comment">// 设置当前v为已经访问</span><br>        visited[v] = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">// 定义两个辅助变量，记录两个结点的下标</span><br>        <span class="hljs-keyword">int</span> h1 = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> h2 = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> minWeight = <span class="hljs-number">10000</span>;      <span class="hljs-comment">// 表示两边之间的权值，会被小的替换</span><br><br>        <span class="hljs-comment">// 开始遍历边，因为有graph.verxs顶点，普利姆算法结束后，有graph.verxs - 1边</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt; graph.verxs; k++)&#123;<br>            <span class="hljs-comment">// 这个是确定每一次生成的子图，和哪个结点的距离最近</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; graph.verxs; i++)&#123;      <span class="hljs-comment">// 遍历已经访问过的结点</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; graph.verxs; j++)&#123;  <span class="hljs-comment">// 遍历还没访问过的结点</span><br>                    <span class="hljs-keyword">if</span> (visited[i] == <span class="hljs-number">1</span> &amp;&amp; visited[j] == <span class="hljs-number">0</span> &amp;&amp; graph.weight[i][j] &lt; minWeight)&#123;<br>                        <span class="hljs-comment">// 将当前小的边换成minWeight</span><br>                        minWeight = graph.weight[i][j];<br>                        <span class="hljs-comment">// 记录当前两个结点的下标</span><br>                        h1 = i;<br>                        h2 = j;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 退出循环时，已经找到一条边了</span><br>            System.out.println(<span class="hljs-string">&quot;&lt;&quot;</span> + graph.data[h1] + <span class="hljs-string">&quot;,&quot;</span> + graph.data[h2] + <span class="hljs-string">&quot;&gt; 权值：&quot;</span> + graph.weight[h1][h2]);<br>            <span class="hljs-comment">// 将h2的结点标记为已经访问过</span><br>            visited[h2] = <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 将minWeight的值重置为10000，表示不通</span><br>            minWeight = <span class="hljs-number">10000</span>;<br><br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MGraph</span></span>&#123;<br><br>    <span class="hljs-keyword">int</span> verxs;      <span class="hljs-comment">// 表示图的结点个数</span><br>    <span class="hljs-keyword">char</span>[] data;    <span class="hljs-comment">// 表示图的存放的数据</span><br>    <span class="hljs-keyword">int</span>[][] weight; <span class="hljs-comment">// 表示图的边，邻接矩阵</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MGraph</span><span class="hljs-params">(<span class="hljs-keyword">int</span> verxs)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.verxs = verxs;<br>        data = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[verxs];<br>        weight = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[verxs][verxs];<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="14-7-克鲁斯卡尔算法"><a href="#14-7-克鲁斯卡尔算法" class="headerlink" title="14.7 克鲁斯卡尔算法"></a>14.7 克鲁斯卡尔算法</h2><h3 id="14-7-1-应用场景-公交站问题"><a href="#14-7-1-应用场景-公交站问题" class="headerlink" title="14.7.1 应用场景-公交站问题"></a>14.7.1 应用场景-公交站问题</h3><p>看一个应用场景和问题：</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211218232807846.png" alt="image-20211218232807846"></p>
<ol>
<li>某城市新增7个站点(A, B, C, D, E, F, G) ，现在需要修路把7个站点连通</li>
<li>各个站点的距离用边线表示(权) ，比如 A – B 距离 12公里</li>
<li>问：如何修路保证各个站点都能连通，并且总的修建公路总里程最短? </li>
</ol>
<h3 id="14-7-2-克鲁斯卡尔算法介绍"><a href="#14-7-2-克鲁斯卡尔算法介绍" class="headerlink" title="14.7.2 克鲁斯卡尔算法介绍"></a>14.7.2 克鲁斯卡尔算法介绍</h3><ol>
<li>克鲁斯卡尔(Kruskal)算法，是用来求加权连通图的最小生成树的算法。</li>
<li>基本思想：按照权值从小到大的顺序选择n-1条边，并保证这n-1条边不构成回路</li>
<li>具体做法：首先构造一个只含n个顶点的森林，然后依权值从小到大从连通网中选择边加入到森林中，并使森林中不产生回路，直至森林变成一棵树为止</li>
</ol>
<h3 id="14-7-3-克鲁斯卡尔算法图解说明"><a href="#14-7-3-克鲁斯卡尔算法图解说明" class="headerlink" title="14.7.3 克鲁斯卡尔算法图解说明"></a>14.7.3 克鲁斯卡尔算法图解说明</h3><p>以城市公交站问题来图解说明 克鲁斯卡尔算法的原理和步骤：</p>
<p>在含有n个顶点的连通图中选择n-1条边，构成一棵极小连通子图，并使该连通子图中n-1条边上权值之和达到最小，则称其为连通网的最小生成树。<br> <img src="file:///C:\Users\a\AppData\Local\Temp\msohtmlclip1\01\clip_image002.jpg" alt="img"><a href="https://github.com/wangkuiwu/datastructs_and_algorithm/blob/master/pictures/graph/kruskal/01.jpg?raw=true"><img src="file:///C:\Users\a\AppData\Local\Temp\msohtmlclip1\01\clip_image003.gif" alt="说明: IMG_256"></a></p>
<p>例如，对于如上图G4所示的连通网可以有多棵权值总和不相同的生成树。</p>
<p><img src="file:///C:\Users\a\AppData\Local\Temp\msohtmlclip1\01\clip_image005.jpg" alt="img"></p>
<h4 id="克鲁斯卡尔算法图解"><a href="#克鲁斯卡尔算法图解" class="headerlink" title="克鲁斯卡尔算法图解"></a><strong>克鲁斯卡尔算法图解</strong></h4><p>以上图G4为例，来对克鲁斯卡尔进行演示(假设，用数组R保存最小生成树结果)。</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/clip_image007.jpg" alt="说明: 03"></p>
<p>第1步：将边&lt;E,F&gt;加入R中。<br>   边&lt;E,F&gt;的权值最小，因此将它加入到最小生成树结果R中。<br> 第2步：将边&lt;C,D&gt;加入R中。<br>   上一步操作之后，边&lt;C,D&gt;的权值最小，因此将它加入到最小生成树结果R中。<br> 第3步：将边&lt;D,E&gt;加入R中。<br>   上一步操作之后，边&lt;D,E&gt;的权值最小，因此将它加入到最小生成树结果R中。<br> 第4步：将边&lt;B,F&gt;加入R中。<br>   上一步操作之后，边&lt;C,E&gt;的权值最小，但&lt;C,E&gt;会和已有的边构成回路；因此，跳过边&lt;C,E&gt;。同理，跳过边&lt;C,F&gt;。将边&lt;B,F&gt;加入到最小生成树结果R中。<br> 第5步：将边&lt;E,G&gt;加入R中。<br>   上一步操作之后，边&lt;E,G&gt;的权值最小，因此将它加入到最小生成树结果R中。<br> 第6步：将边&lt;A,B&gt;加入R中。<br>   上一步操作之后，边&lt;F,G&gt;的权值最小，但&lt;F,G&gt;会和已有的边构成回路；因此，跳过边&lt;F,G&gt;。同理，跳过边&lt;B,C&gt;。将边&lt;A,B&gt;加入到最小生成树结果R中。</p>
<p>此时，最小生成树构造完成！它包括的边依次是：&lt;E,F&gt; &lt;C,D&gt; &lt;D,E&gt; &lt;B,F&gt; &lt;E,G&gt; &lt;A,B&gt;。</p>
<h4 id="克鲁斯卡尔算法分析"><a href="#克鲁斯卡尔算法分析" class="headerlink" title="克鲁斯卡尔算法分析"></a><strong>克鲁斯卡尔算法分析</strong></h4><p>根据前面介绍的克鲁斯卡尔算法的基本思想和做法，我们能够了解到，克鲁斯卡尔算法重点需要解决的以下两个问题：<br> <strong>问题一</strong> 对图的所有边按照权值大小进行排序。<br> <strong>问题二</strong> 将边添加到最小生成树中时，怎么样判断是否形成了回路。</p>
<p>问题一很好解决，采用排序算法进行排序即可。</p>
<p>问题二，处理方式是：记录顶点在”最小生成树”中的终点，顶点的终点是”在最小生成树中与它连通的最大顶点”。然后每次需要将一条边添加到最小生存树时，判断该边的两个顶点的终点是否重合，重合的话则会构成回路。</p>
<h4 id="如何判断是否构成回路-举例说明-如图"><a href="#如何判断是否构成回路-举例说明-如图" class="headerlink" title="如何判断是否构成回路-举例说明(如图)"></a><strong>如何判断是否构成回路-举例说明(如图)</strong></h4><p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/clip_image009.jpg" alt="img"></p>
<p>在将&lt;E,F&gt; &lt;C,D&gt; &lt;D,E&gt;加入到最小生成树R中之后，这几条边的顶点就都有了终点：</p>
<p><strong>(01)</strong> C的终点是F。<br> <strong>(02)</strong> D的终点是F。<br> <strong>(03)</strong> E的终点是F。<br> <strong>(04)</strong> F的终点是F。</p>
<p>关于终点的说明：</p>
<ol>
<li><p>就是将所有顶点按照从小到大的顺序排列好之后；某个顶点的终点就是”与它连通的最大顶点”。 </p>
</li>
<li><p>因此，接下来，虽然&lt;C,E&gt;是权值最小的边。但是C和E的终点都是F，即它们的终点相同，因此，将&lt;C,E&gt;加入最小生成树的话，会形成回路。这就是判断回路的方式。也就是说，我们加入的边的两个顶点不能都指向同一个终点，否则将构成回路。【后面有代码说明】</p>
</li>
</ol>
<h3 id="14-7-4-克鲁斯卡尔最佳实践-公交站问题"><a href="#14-7-4-克鲁斯卡尔最佳实践-公交站问题" class="headerlink" title="14.7.4 克鲁斯卡尔最佳实践-公交站问题"></a>14.7.4 克鲁斯卡尔最佳实践-公交站问题</h3><p>看一个公交站问题：</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211218233333980.png" alt="image-20211218233333980"></p>
<ol>
<li>有北京有新增7个站点(A, B, C, D, E, F, G) ，现在需要修路把7个站点连通</li>
<li>各个站点的距离用边线表示(权) ，比如 A – B 距离 12公里</li>
<li>问：如何修路保证各个站点都能连通，并且总的修建公路总里程最短? </li>
<li>代码实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.kruskal;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KruskalCase</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> edgeNum;    <span class="hljs-comment">// 边的个数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">char</span>[] vertexs; <span class="hljs-comment">// 顶点数组</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[][] matrix; <span class="hljs-comment">// 邻接矩阵</span><br><br>    <span class="hljs-comment">// 定义一个Integer的最大值，表示两点不连通</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> INF =Integer.MAX_VALUE;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-keyword">char</span>[] vertexs = &#123;<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;G&#x27;</span>&#125;;<br>        <span class="hljs-keyword">int</span>[][] matrix = &#123;<br>                &#123;<span class="hljs-number">0</span>,<span class="hljs-number">12</span>,INF,INF,INF,<span class="hljs-number">16</span>,<span class="hljs-number">14</span>&#125;,<br>                &#123;<span class="hljs-number">12</span>,<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,INF,INF,<span class="hljs-number">7</span>,INF&#125;,<br>                &#123;INF,<span class="hljs-number">10</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,INF&#125;,<br>                &#123;INF,INF,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,INF,INF&#125;,<br>                &#123;INF,INF,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>&#125;,<br>                &#123;<span class="hljs-number">16</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,INF,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">9</span>&#125;,<br>                &#123;<span class="hljs-number">14</span>,INF,INF,INF,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>&#125;<br>        &#125;;<br>        KruskalCase kruskalCase = <span class="hljs-keyword">new</span> KruskalCase(vertexs, matrix);<br>        <span class="hljs-comment">// 输出</span><br>        kruskalCase.printf();<br><br>        <span class="hljs-comment">/*EData[] edges = kruskalCase.getEdges();</span><br><span class="hljs-comment">        System.out.println(&quot;排序前：&quot;);</span><br><span class="hljs-comment">        System.out.println(Arrays.toString(edges));</span><br><span class="hljs-comment">        kruskalCase.sortEdges(edges);</span><br><span class="hljs-comment">        System.out.println(&quot;排序后&quot;);</span><br><span class="hljs-comment">        System.out.println(Arrays.toString(edges));*/</span><br><br>        kruskalCase.kruskal();<br><br>    &#125;<br><br>    <span class="hljs-comment">// 构造器</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">KruskalCase</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] vertexs, <span class="hljs-keyword">int</span>[][] matrix)</span></span>&#123;<br>        <span class="hljs-comment">// 初始化边和顶点</span><br>        <span class="hljs-keyword">int</span> vlen = vertexs.length;<br><br>        <span class="hljs-keyword">this</span>.vertexs = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[vlen];<br>        <span class="hljs-comment">// 初始化顶点，复制的方式</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; vertexs.length; i++)&#123;<br>            <span class="hljs-keyword">this</span>.vertexs[i] = vertexs[i];<br>        &#125;<br><br>        <span class="hljs-comment">// 初始化边</span><br>        <span class="hljs-keyword">this</span>.matrix = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[vlen][vlen];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; matrix.length; i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; matrix.length; j++)&#123;<br>                <span class="hljs-keyword">this</span>.matrix[i][j] = matrix[i][j];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 统计边的条数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; vlen; i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; vlen; j++) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.matrix[i][j] != INF)&#123;<br>                    edgeNum++;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 克鲁斯卡尔算法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 表示最后结果数组的索引</span><br>        <span class="hljs-keyword">int</span>[] ends = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[edgeNum];  <span class="hljs-comment">// 用于保存“已有最小生成树”中的每一个顶点再最小生成树中的终点</span><br>        <span class="hljs-comment">// 创建数组，保存最后的最小生成树</span><br>        EData[] rets = <span class="hljs-keyword">new</span> EData[edgeNum];<br><br>        <span class="hljs-comment">// 获取图中所有的边的集合</span><br>        EData[] edges = getEdges();<br>        System.out.println(<span class="hljs-string">&quot;图中的集合= &quot;</span> + Arrays.toString(edges) + <span class="hljs-string">&quot;共&quot;</span> + edges.length);<br><br>        <span class="hljs-comment">// 按照边的大小进行排序，从小到大</span><br>        sortEdges(edges);<br><br>        <span class="hljs-comment">// 遍历edges数组，将边添加到最小生成树中时，判断是准备加入的边是否形成了回路，如果没有，就加入rets，否则不能加入</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; edgeNum; i++)&#123;<br>            <span class="hljs-comment">// 获取第i条边的始点</span><br>            <span class="hljs-keyword">int</span> p1 = getPosition(edges[i].start);<br>            <span class="hljs-comment">// 获取第i条边的终点</span><br>            <span class="hljs-keyword">int</span> p2 = getPosition(edges[i].end);<br><br>            <span class="hljs-comment">// 获取p1的终点</span><br>            <span class="hljs-keyword">int</span> m = getEnd(ends, p1);<br>            <span class="hljs-comment">// 获取p2的终点</span><br>            <span class="hljs-keyword">int</span> n = getEnd(ends, p2);<br>            <span class="hljs-keyword">if</span> (m != n)&#123;<br>                <span class="hljs-comment">// 说明不存在回路</span><br>                <span class="hljs-comment">// 先将终点的下标放进ends数组中</span><br>                ends[m] = n;<br>                <span class="hljs-comment">// 将新的边加入到rets数组</span><br>                rets[index++] = edges[i];<br>            &#125;<br><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;最小生成树为：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; index; i++)&#123;<br>            System.out.println(rets[i]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 打印邻接矩阵</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printf</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;邻接矩阵为：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; vertexs.length; i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;vertexs.length; j++)&#123;<br>                System.out.printf(<span class="hljs-string">&quot;%12d&quot;</span>,matrix[i][j]);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 对边进行排序：冒泡排序</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sortEdges</span><span class="hljs-params">(EData[] eDatas)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; eDatas.length - <span class="hljs-number">1</span>; i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; eDatas.length - <span class="hljs-number">1</span> - i; j++)&#123;<br>                <span class="hljs-keyword">if</span> (eDatas[j].weight &gt; eDatas[j + <span class="hljs-number">1</span>].weight)&#123;<br>                    EData temp = eDatas[j];<br>                    eDatas[j] = eDatas[j + <span class="hljs-number">1</span>];<br>                    eDatas[j + <span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取顶点的值对应的下标</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：获取顶点的值对应的下标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ch 传进来的值，如&#x27;A&#x27;,&#x27;B&#x27;...</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回对应的下标，否则返回-1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPosition</span><span class="hljs-params">(<span class="hljs-keyword">char</span> ch)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;vertexs.length; i++)&#123;<br>            <span class="hljs-comment">// 说明找到了</span><br>            <span class="hljs-keyword">if</span> (vertexs[i] == ch)&#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取图中的边，放到EData[]数组中，方便后面的遍历</span><br>    <span class="hljs-keyword">private</span> EData[] getEdges()&#123;<br>        <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>        EData[]  eDatas = <span class="hljs-keyword">new</span> EData[edgeNum];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; vertexs.length; i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; vertexs.length; j++)&#123;<br>                <span class="hljs-keyword">if</span> (matrix[i][j] != INF)&#123;<br>                    eDatas[index++] = <span class="hljs-keyword">new</span> EData(vertexs[i],vertexs[j],matrix[i][j]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> eDatas;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：获取下标为i的顶点的终点，用于后面判断两个顶点的终点是否相同</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ends  数组就是记录各个顶点对应的终点是哪一个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> i     表示传入的顶点对应的下标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回的就是下标为i的这个顶点对应的终点的下标</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getEnd</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] ends, <span class="hljs-keyword">int</span> i)</span></span>&#123;<br>        <span class="hljs-comment">// ends[i] != 0, 表示的是，顶点下标为i的顶点，它有终点，并且终点的下标就是ends[i]的值</span><br>        <span class="hljs-comment">// ends[i] 数组里面的i表示的是起始顶点的下标，终点的下标为数组的值，即下标为i对应的数组的值</span><br>        <span class="hljs-keyword">while</span> (ends[i] != <span class="hljs-number">0</span>)&#123;   <span class="hljs-comment">// 说明有终点</span><br>            <span class="hljs-comment">// 将终点的下标返回给i</span><br>            i = ends[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 创建一个EData类，他的对象实例表示的就是一条边</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EData</span></span>&#123;<br><br>    <span class="hljs-keyword">char</span> start;     <span class="hljs-comment">// 边的一个点</span><br>    <span class="hljs-keyword">char</span> end;       <span class="hljs-comment">// 边的另一个点</span><br>    <span class="hljs-keyword">int</span> weight;     <span class="hljs-comment">// 边的权值</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">EData</span><span class="hljs-params">(<span class="hljs-keyword">char</span> start,<span class="hljs-keyword">char</span> end, <span class="hljs-keyword">int</span> weight)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.start = start;<br>        <span class="hljs-keyword">this</span>.end = end;<br>        <span class="hljs-keyword">this</span>.weight = weight;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;EData&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;&quot;</span> + start +<br>                <span class="hljs-string">&quot;, &quot;</span> + end +<br>                <span class="hljs-string">&quot;&gt; = &quot;</span> + weight +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="14-8-迪杰斯特拉算法"><a href="#14-8-迪杰斯特拉算法" class="headerlink" title="14.8 迪杰斯特拉算法"></a>14.8 迪杰斯特拉算法</h2><h3 id="14-8-1-应用场景-最短路径问题"><a href="#14-8-1-应用场景-最短路径问题" class="headerlink" title="14.8.1 应用场景-最短路径问题"></a>14.8.1 应用场景-最短路径问题</h3><p>看一个应用场景和问题：</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211219191601864.png" alt="image-20211219191601864"></p>
<ol>
<li>战争时期，胜利乡有7个村庄(A, B, C, D, E, F, G) ，现在有六个邮差，从G点出发，需要分别把邮件分别送到 A, B, C , D, E, F 六个村庄</li>
<li>各个村庄的距离用边线表示(权) ，比如 A – B 距离 5公里</li>
<li>问：如何计算出G村庄到 其它各个村庄的最短距离? </li>
<li>如果从其它点出发到各个点的最短距离又是多少?</li>
</ol>
<h3 id="14-8-2-迪杰斯特拉-Dijkstra-算法介绍"><a href="#14-8-2-迪杰斯特拉-Dijkstra-算法介绍" class="headerlink" title="14.8.2 迪杰斯特拉(Dijkstra)算法介绍"></a>14.8.2 迪杰斯特拉(Dijkstra)算法介绍</h3><p>迪杰斯特拉(Dijkstra)算法是典型最短路径算法，用于计算一个结点到其他结点的最短路径。 它的主要特点是以起始点为中心向外层层扩展(广度优先搜索思想)，直到扩展到终点为止。</p>
<h3 id="14-8-3-迪杰斯特拉-Dijkstra-算法过程"><a href="#14-8-3-迪杰斯特拉-Dijkstra-算法过程" class="headerlink" title="14.8.3 迪杰斯特拉(Dijkstra)算法过程"></a>14.8.3 迪杰斯特拉(Dijkstra)算法过程</h3><ol>
<li>设置出发顶点为v，顶点集合V{v1,v2,vi…}，v到V中各顶点的距离构成距离集合Dis，Dis{d1,d2,di…}，Dis集合记录着v到图中各顶点的距离(到自身可以看作0，v到vi距离对应为di)</li>
<li>从Dis中选择值最小的di并移出Dis集合，同时移出V集合中对应的顶点vi，此时的v到vi即为最短路径</li>
<li>更新Dis集合，更新规则为：比较v到V集合中顶点的距离值，与v通过vi到V集合中顶点的距离值，保留值较小的一个(同时也应该更新顶点的前驱节点为vi，表明是通过vi到达的)</li>
<li>重复执行两步骤，直到最短路径顶点为目标顶点即可结束</li>
</ol>
<h3 id="14-8-4-迪杰斯特拉-Dijkstra-算法最佳应用-最短路径"><a href="#14-8-4-迪杰斯特拉-Dijkstra-算法最佳应用-最短路径" class="headerlink" title="14.8.4 迪杰斯特拉(Dijkstra)算法最佳应用-最短路径"></a>14.8.4 迪杰斯特拉(Dijkstra)算法最佳应用-最短路径</h3><p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211219191748909.png" alt="image-20211219191748909"></p>
<ol>
<li>战争时期，胜利乡有7个村庄(A, B, C, D, E, F, G) ，现在有六个邮差，从G点出发，需要分别把邮件分别送到 A, B, C , D, E, F 六个村庄</li>
<li>各个村庄的距离用边线表示(权) ，比如 A – B 距离 5公里</li>
<li>问：如何计算出G村庄到 其它各个村庄的最短距离? </li>
<li>如果从其它点出发到各个点的最短距离又是多少?</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211219191902640.png" alt="image-20211219191902640"></p>
<p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.dijkstra;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DijkstraAlgorithm</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">char</span>[] vertex = &#123;<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;G&#x27;</span>&#125;;<br>        <span class="hljs-keyword">int</span>[][] matrix = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[vertex.length][vertex.length];<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">65535</span>;<br>        matrix[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;N,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,N,N,N,<span class="hljs-number">2</span>&#125;;<br>        matrix[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">5</span>,N,N,<span class="hljs-number">9</span>,N,N,<span class="hljs-number">3</span>&#125;;<br>        matrix[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">7</span>,N,N,N,<span class="hljs-number">8</span>,N,N&#125;;<br>        matrix[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;N,<span class="hljs-number">9</span>,N,N,N,<span class="hljs-number">4</span>,N&#125;;<br>        matrix[<span class="hljs-number">4</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;N,N,<span class="hljs-number">8</span>,N,N,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>&#125;;<br>        matrix[<span class="hljs-number">5</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;N,N,N,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,N,<span class="hljs-number">6</span>&#125;;<br>        matrix[<span class="hljs-number">6</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,N,N,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,N&#125;;<br><br>        <span class="hljs-comment">// 创建图</span><br>        Graph graph = <span class="hljs-keyword">new</span> Graph(vertex,matrix);<br>        graph.showGraph();<br><br>        <span class="hljs-comment">// 测试dsj</span><br>        graph.dsj(<span class="hljs-number">6</span>);<br>        graph.showDijkstra();<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 创建图类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Graph</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">char</span>[] vertex;  <span class="hljs-comment">// 顶点数组</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[][] matrix; <span class="hljs-comment">// 邻接矩阵</span><br>    <span class="hljs-keyword">private</span> VisitedVertex vv;   <span class="hljs-comment">// 表示已经访问过的顶点</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Graph</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] vertex, <span class="hljs-keyword">int</span>[][] matrix)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.vertex = vertex;<br>        <span class="hljs-keyword">this</span>.matrix = matrix;<br>    &#125;<br><br>    <span class="hljs-comment">// 显示结果</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showDijkstra</span><span class="hljs-params">()</span></span>&#123;<br>        vv.show();<br>    &#125;<br><br>    <span class="hljs-comment">// 显示图</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showGraph</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] link : matrix)&#123;<br>            System.out.println(Arrays.toString(link));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 迪杰斯特拉算法</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 表示出发顶点出发的下标</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dsj</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br>        vv = <span class="hljs-keyword">new</span> VisitedVertex(vertex.length, index);<br>        update(index);  <span class="hljs-comment">// 更新index顶点到周围顶点的距离和前驱结点</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; vertex.length; j++)&#123;<br>            index = vv.updateArr(); <span class="hljs-comment">// 选择并返回新的访问顶点</span><br>            update(index);          <span class="hljs-comment">// 更新index顶点到周围顶点的距离和前驱顶点</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 更新index下标顶点到周围顶点的距离和周围顶点的前驱顶点</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 遍历邻接矩阵的matrix[index]这一行</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; matrix[index].length; j++)&#123;<br>            <span class="hljs-comment">// len表示从当前顶点到index的距离+index顶点到j顶点的距离</span><br>            len = vv.getDis(index) + matrix[index][j];<br>            <span class="hljs-comment">// 如果j顶点没有被访问过，并且len小于出发顶点到j顶点的距离，就需要更新</span><br>            <span class="hljs-keyword">if</span> (!vv.in(j) &amp;&amp; len &lt; vv.getDis(j))&#123;<br>                vv.updatePre(j,index);      <span class="hljs-comment">// 更新j顶点的前驱为index顶点</span><br>                vv.updateDis(j,len);        <span class="hljs-comment">// 更新出发顶点到 j顶点的距离</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VisitedVertex</span></span>&#123;<br>    <span class="hljs-comment">// 记录各个顶点是否访问过 1表示访问过，0未访问过，会动态更新</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] already_arr;<br>    <span class="hljs-comment">// 每个下标对应的值为前一个顶点下标</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] pre_visited;<br>    <span class="hljs-comment">// 记录出发顶点到其他所有顶点的距离，比如G为出发顶点，就会记录出G到其他顶点的距离</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] dis;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> length 表示顶点的个数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 出发顶点对应的下标，G为6</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">VisitedVertex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> length, <span class="hljs-keyword">int</span> index)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.already_arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[length];<br>        <span class="hljs-keyword">this</span>.pre_visited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[length];<br>        <span class="hljs-keyword">this</span>.dis = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[length];<br>        <span class="hljs-comment">// 初始化dis</span><br>        Arrays.fill(dis,<span class="hljs-number">65535</span>);<br>        already_arr[index] = <span class="hljs-number">1</span>;     <span class="hljs-comment">// 设置出发顶点为已经访问过</span><br>        dis[index] = <span class="hljs-number">0</span>;             <span class="hljs-comment">// 设置出发顶点的访问距离为0</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断顶点是否被访问过</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果访问过就返回true，否则返回false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">in</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> already_arr[index] == <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新出发顶点到index的顶点距离</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> len</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateDis</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, <span class="hljs-keyword">int</span> len)</span></span>&#123;<br>        dis[index] = len;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新pre这个顶点的前驱顶点为index顶点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pre</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updatePre</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pre, <span class="hljs-keyword">int</span> index)</span></span>&#123;<br>        pre_visited[pre] = index;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回出发顶点到index顶点的距离</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getDis</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> dis[index];<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 继续选择并返回新的访问顶点，比如这里的G完后，就是A点作为新的访问顶点（注意不是出发顶点）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateArr</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> min = <span class="hljs-number">65535</span>,index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; already_arr.length; i++)&#123;<br>            <span class="hljs-keyword">if</span> (already_arr[i] == <span class="hljs-number">0</span> &amp;&amp; dis[i] &lt; min)&#123;<br>                min = dis[i];<br>                index = i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 更新index顶点被访问过</span><br>        already_arr[index] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br><br>    <span class="hljs-comment">// 显示最后的结果</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=============&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : already_arr) &#123;<br>            System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : pre_visited) &#123;<br>            System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : dis) &#123;<br>            System.out.print(i+ <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br><br>        System.out.println();<br>        <span class="hljs-comment">// 为了方便查看，再做处理</span><br>        <span class="hljs-keyword">char</span>[] vertex = &#123;<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;G&#x27;</span>&#125;;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : dis) &#123;<br>            <span class="hljs-keyword">if</span> (i != <span class="hljs-number">65535</span>)&#123;<br>                System.out.print(vertex[count] + <span class="hljs-string">&quot;(&quot;</span>+i+<span class="hljs-string">&quot;)&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.print(<span class="hljs-string">&quot;N&quot;</span>);<br>            &#125;<br>            count++;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="14-9-弗洛伊德算法"><a href="#14-9-弗洛伊德算法" class="headerlink" title="14.9 弗洛伊德算法"></a>14.9 弗洛伊德算法</h2><h3 id="14-9-1-弗洛伊德-Floyd-算法介绍"><a href="#14-9-1-弗洛伊德-Floyd-算法介绍" class="headerlink" title="14.9.1 弗洛伊德(Floyd)算法介绍"></a>14.9.1 弗洛伊德(Floyd)算法介绍</h3><ol>
<li>和Dijkstra算法一样，弗洛伊德(Floyd)算法也是一种用于寻找给定的加权图中顶点间最短路径的算法。该算法名称以创始人之一、1978年图灵奖获得者、斯坦福大学计算机科学系教授罗伯特·弗洛伊德命名</li>
<li>弗洛伊德算法(Floyd)计算图中各个顶点之间的最短路径</li>
<li>迪杰斯特拉算法用于计算图中某一个顶点到其他顶点的最短路径。</li>
<li>弗洛伊德算法 VS 迪杰斯特拉算法：迪杰斯特拉算法通过选定的被访问顶点，求出从出发访问顶点到其他顶点的最短路径；弗洛伊德算法中每一个顶点都是出发访问点，所以需要将每一个顶点看做被访问顶点，求出从每一个顶点到其他顶点的最短路径。</li>
</ol>
<h3 id="14-9-2-弗洛伊德-Floyd-算法图解分析"><a href="#14-9-2-弗洛伊德-Floyd-算法图解分析" class="headerlink" title="14.9.2 弗洛伊德(Floyd)算法图解分析"></a>14.9.2 弗洛伊德(Floyd)算法图解分析</h3><ol>
<li>设置顶点vi到顶点vk的最短路径已知为Lik，顶点vk到vj的最短路径已知为Lkj，顶点vi到vj的路径为Lij，则vi到vj的最短路径为：min((Lik+Lkj),Lij)，vk的取值为图中所有顶点，则可获得vi到vj的最短路径</li>
<li>至于vi到vk的最短路径Lik或者vk到vj的最短路径Lkj，是以同样的方式获得</li>
<li>弗洛伊德(Floyd)算法图解分析-举例说明</li>
</ol>
<h4 id="示例：求最短路径为例说明"><a href="#示例：求最短路径为例说明" class="headerlink" title="示例：求最短路径为例说明"></a>示例：求最短路径为例说明</h4><p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/clip_image002-1639920735199.jpg" alt="img"></p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/clip_image004-1639920738023.jpg" alt="img"></p>
<p>第一轮循环中，以A(下标为：0)作为中间顶点，距离表和前驱关系更新为：</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/clip_image006-1639920740217.jpg" alt="img"></p>
<p>分析如下：</p>
<ol>
<li><p>以A顶点作为中间顶点是，B-&gt;A-&gt;C的距离由N-&gt;9，同理C到B；C-&gt;A-&gt;G的距离由N-&gt;12，同理G到C</p>
</li>
<li><p>更换中间顶点，循环执行操作，直到所有顶点都作为中间顶点更新后，计算结束</p>
</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211219213400375.png" alt="image-20211219213400375"></p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211219213411251.png" alt="image-20211219213411251"></p>
<h3 id="14-9-3-弗洛伊德-Floyd-算法最佳应用-最短路径"><a href="#14-9-3-弗洛伊德-Floyd-算法最佳应用-最短路径" class="headerlink" title="14.9.3 弗洛伊德(Floyd)算法最佳应用-最短路径"></a>14.9.3 弗洛伊德(Floyd)算法最佳应用-最短路径</h3><p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211219213253709.png" alt="image-20211219213253709"></p>
<ol>
<li>胜利乡有7个村庄(A, B, C, D, E, F, G)</li>
<li>各个村庄的距离用边线表示(权) ，比如 A – B 距离 5公里</li>
<li>问：如何计算出各村庄到 其它各村庄的最短距离? </li>
<li>代码实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.floyd;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FloydAlgorithm</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">char</span>[] vertex = &#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>&#125;;<br>        <span class="hljs-comment">// 创建邻接矩阵</span><br>        <span class="hljs-keyword">int</span>[][] matrix = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[vertex.length][vertex.length];<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">65535</span>;<br>        matrix[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, N, N, N, <span class="hljs-number">2</span>&#125;;<br>        matrix[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, N, <span class="hljs-number">9</span>, N, N, <span class="hljs-number">3</span>&#125;;<br>        matrix[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">7</span>, N, <span class="hljs-number">0</span>, N, <span class="hljs-number">8</span>, N, N&#125;;<br>        matrix[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;N, <span class="hljs-number">9</span>, N, <span class="hljs-number">0</span>, N, <span class="hljs-number">4</span>, N&#125;;<br>        matrix[<span class="hljs-number">4</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;N, N, <span class="hljs-number">8</span>, N, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>&#125;;<br>        matrix[<span class="hljs-number">5</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;N, N, N, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>&#125;;<br>        matrix[<span class="hljs-number">6</span>] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, N, N, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>&#125;;<br><br>        Graph graph = <span class="hljs-keyword">new</span> Graph(vertex.length, matrix, vertex);<br><br>        graph.floyd();<br>        graph.show();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">// 创建图</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Graph</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">char</span>[] vertex;  <span class="hljs-comment">// 存放顶点的数据</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[][] dis;    <span class="hljs-comment">// 保存各个顶点出发到其他顶点的距离，最后的结果也保存在该数组中</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[][] pre;    <span class="hljs-comment">// 保存到达目标顶点的前驱顶点</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> length 大小</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> matrix 邻接矩阵</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> vertex 顶点数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Graph</span><span class="hljs-params">(<span class="hljs-keyword">int</span> length, <span class="hljs-keyword">int</span>[][] matrix, <span class="hljs-keyword">char</span>[] vertex)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.vertex = vertex;<br>        <span class="hljs-keyword">this</span>.dis = matrix;<br>        <span class="hljs-keyword">this</span>.pre = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[length][length];<br>        <span class="hljs-comment">// 对pre数组初始化，注意存放的是前驱结点</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++)&#123;<br>            Arrays.fill(pre[i],i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 显示</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br><br>        <span class="hljs-comment">// 为了方便阅读，这里对代码进行改进</span><br>        <span class="hljs-keyword">char</span>[] vertex = &#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; vertex.length; k++)&#123;<br>            <span class="hljs-comment">// 输出pre</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; vertex.length; i++)&#123;<br>                System.out.print(vertex[pre[k][i]] + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br><br>            System.out.println();<br>            <span class="hljs-comment">// 输出dis</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; vertex.length; i++)&#123;<br>                System.out.print(<span class="hljs-string">&quot;(&quot;</span>+vertex[k]+<span class="hljs-string">&quot;到&quot;</span>+vertex[i]+<span class="hljs-string">&quot;的最短路劲是&quot;</span>+dis[k][i] + <span class="hljs-string">&quot;) &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 弗洛伊德算法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">floyd</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;    <span class="hljs-comment">// 用于保存距离</span><br>        <span class="hljs-comment">// 中间顶点[&#x27;A&#x27;,&#x27;B&#x27;...]</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; dis.length; k++)&#123;<br>            <span class="hljs-comment">// 开始顶点</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; dis.length; i++)&#123;<br>                <span class="hljs-comment">// 结束顶点</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; dis.length; j++)&#123;<br>                    len = dis[i][k] + dis[k][j];    <span class="hljs-comment">// 从i到k的距离，加上从k到i的距离</span><br>                    <span class="hljs-keyword">if</span> (len &lt; dis[i][j])&#123;<br>                        <span class="hljs-comment">// 更换小的距离</span><br>                        len = dis[i][j];<br>                        <span class="hljs-comment">// 更新前驱顶点</span><br>                        pre[i][j] = pre[k][j];<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="14-10-马踏棋盘算法"><a href="#14-10-马踏棋盘算法" class="headerlink" title="14.10 马踏棋盘算法"></a>14.10 马踏棋盘算法</h2><h3 id="14-10-1-马踏棋盘算法介绍和游戏演示"><a href="#14-10-1-马踏棋盘算法介绍和游戏演示" class="headerlink" title="14.10.1 马踏棋盘算法介绍和游戏演示"></a>14.10.1 马踏棋盘算法介绍和游戏演示</h3><ol>
<li><p>马踏棋盘算法也被称为骑士周游问题</p>
</li>
<li><p>将马随机放在国际象棋的8×8棋盘Board[0～7][0～7]的某个方格中，马按走棋规则(马走日字)进行移动。要求每个方格只进入一次，走遍</p>
<p>棋盘上全部64个方格</p>
</li>
<li><p>游戏演示: <a href="http://www.4399.com/flash/146267_2.htm">http://www.4399.com/flash/146267_2.htm</a> </p>
</li>
</ol>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211220011142307.png" alt="image-20211220011142307"></p>
<h3 id="14-10-2-马踏棋盘游戏代码实现"><a href="#14-10-2-马踏棋盘游戏代码实现" class="headerlink" title="14.10.2 马踏棋盘游戏代码实现"></a>14.10.2 马踏棋盘游戏代码实现</h3><ol>
<li><p>马踏棋盘问题(骑士周游问题)实际上是图的深度优先搜索(DFS)的应用。</p>
</li>
<li><p>如果使用回溯（就是深度优先搜索）来解决，假如马儿踏了53个点，如图：走到了第53个，坐标（1,0），发现已经走到尽头，没办法，那就只能回退了，查看其他的路径，就在棋盘上不停的回溯…… ，思路分析+代码实现</p>
</li>
<li><p>分析第一种方式的问题，并使用贪心算法（greedyalgorithm）进行优化。解决马踏棋盘问题.<br>使用前面的游戏来验证算法是否正确。</p>
</li>
</ol>
<p>对第一种实现方式的思路图解</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211220011331019.png" alt="image-20211220011331019"></p>
<p>分析第一种存在的问题，并使用贪心算法进行优化，解决马踏棋盘问题</p>
<p><img src="/myBlog/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/image-20211220011417216.png" alt="image-20211220011417216"></p>
<p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.horse;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HorseChessboard</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> X;   <span class="hljs-comment">// 表示列</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> Y;   <span class="hljs-comment">// 表示行</span><br>    <span class="hljs-comment">// 创建一个数组，标记棋盘的各个位置是否被访问过</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> visited[];<br>    <span class="hljs-comment">// 使用一个属性，标记是否棋盘的所有位置都被访问</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> finished;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;骑士周游算法开始运行~~&quot;</span>);<br>        <span class="hljs-comment">// 测试骑士周游算法是否正确</span><br>        X = <span class="hljs-number">8</span>;<br>        Y = <span class="hljs-number">8</span>;<br>        <span class="hljs-keyword">int</span> row = <span class="hljs-number">1</span>;    <span class="hljs-comment">// 马儿初始位置的行，从1开始编号</span><br>        <span class="hljs-keyword">int</span> column = <span class="hljs-number">1</span>; <span class="hljs-comment">// 马儿初始位置的列，从1开始编号</span><br>        <span class="hljs-keyword">int</span>[][] chessboard = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[X][Y];<br>        visited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[X * Y];   <span class="hljs-comment">// 初始化都是false</span><br>        <span class="hljs-comment">// 测试一下耗时</span><br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        traversalChessboard(chessboard,row - <span class="hljs-number">1</span>,column - <span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;共耗时：&quot;</span> + (end - start) + <span class="hljs-string">&quot;毫秒&quot;</span>);<br><br>        <span class="hljs-comment">// 输出棋盘的情况</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] rows : chessboard)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> step : rows)&#123;<br>                System.out.print(step + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 完成马踏棋盘问题的算法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> chessboard 棋盘</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> row 马儿当前的行，从0开始</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> column 马儿当前的列，从0开始</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> step 是第几步，初始位置为1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">traversalChessboard</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] chessboard, <span class="hljs-keyword">int</span> row, <span class="hljs-keyword">int</span> column, <span class="hljs-keyword">int</span> step)</span></span>&#123;<br>        <span class="hljs-comment">// 走第一步</span><br>        chessboard[row][column] = step;<br>        visited[row * X + column] = <span class="hljs-keyword">true</span>;   <span class="hljs-comment">// 标记为已经访问过</span><br>        <span class="hljs-comment">// 获取当前位置的下一个位置的集合</span><br>        ArrayList&lt;Point&gt; ps = next(<span class="hljs-keyword">new</span> Point(column, row));<br>        <span class="hljs-comment">// 对ps排序</span><br>        sort(ps);<br>        <span class="hljs-comment">// 遍历ps</span><br>        <span class="hljs-keyword">while</span> (!ps.isEmpty())&#123;<br>            <span class="hljs-comment">// 取出下一个可以走的地方</span><br>            Point p = ps.remove(<span class="hljs-number">0</span>);<br>            <span class="hljs-comment">// 判断是否已经被访问过</span><br>            <span class="hljs-keyword">if</span> (!visited[p.y * X + p.x])&#123;<br>                <span class="hljs-comment">// 说明还没被访问过</span><br>                traversalChessboard(chessboard, p.y, p.x, step + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 判断马儿是否完成了任务，使用step和应该走的步数比较</span><br>        <span class="hljs-comment">// 如果没有达到要求，则表示没有完成任务，将整个棋盘置0</span><br>        <span class="hljs-keyword">if</span> (step &lt; X * Y &amp;&amp; !finished)&#123;<br>            chessboard[row][column] = <span class="hljs-number">0</span>;<br>            visited[row * X + column] = <span class="hljs-keyword">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            finished = <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：根据当前位置（Point对象），计算马儿还能走哪些位置（Point），并放入到集合ArrayList中，最多8个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> curPoint</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ArrayList&lt;Point&gt; <span class="hljs-title">next</span><span class="hljs-params">(Point curPoint)</span></span>&#123;<br>        <span class="hljs-comment">// 创建一个ArrayList</span><br>        ArrayList&lt;Point&gt; ps = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-comment">// 创建一个Point</span><br>        Point p1 = <span class="hljs-keyword">new</span> Point();<br>        <span class="hljs-comment">// 表示马儿可以走5这个位置</span><br>        <span class="hljs-keyword">if</span> ((p1.x = curPoint.x - <span class="hljs-number">2</span>) &gt;= <span class="hljs-number">0</span> &amp;&amp; (p1.y = curPoint.y - <span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0</span>)&#123;<br>            ps.add(<span class="hljs-keyword">new</span> Point(p1));<br>        &#125;<br>        <span class="hljs-comment">// 表示马儿可以走6这个位置</span><br>        <span class="hljs-keyword">if</span> ((p1.x = curPoint.x - <span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0</span> &amp;&amp; (p1.y = curPoint.y - <span class="hljs-number">2</span>) &gt;= <span class="hljs-number">0</span>)&#123;<br>            ps.add(<span class="hljs-keyword">new</span> Point(p1));<br>        &#125;<br>        <span class="hljs-comment">// 表示马儿可以走7这个位置</span><br>        <span class="hljs-keyword">if</span> ((p1.x = curPoint.x + <span class="hljs-number">1</span>) &lt; X  &amp;&amp; (p1.y = curPoint.y - <span class="hljs-number">2</span>) &gt;= <span class="hljs-number">0</span>)&#123;<br>            ps.add(<span class="hljs-keyword">new</span> Point(p1));<br>        &#125;<br>        <span class="hljs-comment">// 表示马儿可以走0这个位置</span><br>        <span class="hljs-keyword">if</span> ((p1.x = curPoint.x + <span class="hljs-number">2</span>) &lt; X  &amp;&amp; (p1.y = curPoint.y - <span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0</span>)&#123;<br>            ps.add(<span class="hljs-keyword">new</span> Point(p1));<br>        &#125;<br>        <span class="hljs-comment">// 表示马儿可以走1这个位置</span><br>        <span class="hljs-keyword">if</span> ((p1.x = curPoint.x + <span class="hljs-number">2</span>) &lt; X  &amp;&amp; (p1.y = curPoint.y + <span class="hljs-number">1</span>) &lt; Y)&#123;<br>            ps.add(<span class="hljs-keyword">new</span> Point(p1));<br>        &#125;<br>        <span class="hljs-comment">// 表示马儿可以走2这个位置</span><br>        <span class="hljs-keyword">if</span> ((p1.x = curPoint.x + <span class="hljs-number">1</span>) &lt; X  &amp;&amp; (p1.y = curPoint.y + <span class="hljs-number">2</span>) &lt; Y)&#123;<br>            ps.add(<span class="hljs-keyword">new</span> Point(p1));<br>        &#125;<br>        <span class="hljs-comment">// 表示马儿可以走3这个位置</span><br>        <span class="hljs-keyword">if</span> ((p1.x = curPoint.x - <span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0</span>  &amp;&amp; (p1.y = curPoint.y + <span class="hljs-number">2</span>) &lt; Y)&#123;<br>            ps.add(<span class="hljs-keyword">new</span> Point(p1));<br>        &#125;<br>        <span class="hljs-comment">// 表示马儿可以走4这个位置</span><br>        <span class="hljs-keyword">if</span> ((p1.x = curPoint.x - <span class="hljs-number">2</span>) &gt;= <span class="hljs-number">0</span>  &amp;&amp; (p1.y = curPoint.y + <span class="hljs-number">1</span>) &lt; Y)&#123;<br>            ps.add(<span class="hljs-keyword">new</span> Point(p1));<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ps;<br><br>    &#125;<br>    <span class="hljs-comment">// 根据当前这一步的所有的下一步的选择位置，进行非递减排序，减少回溯的次数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(ArrayList&lt;Point&gt; ps)</span></span>&#123;<br>        ps.sort(<span class="hljs-keyword">new</span> Comparator&lt;Point&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Point o1, Point o2)</span> </span>&#123;<br>                <span class="hljs-comment">// 获取o1的下一步到所有位置的个数</span><br>                <span class="hljs-keyword">int</span> count1 = next(o1).size();<br>                <span class="hljs-comment">// 获取o2的下一步到所有位置的个数</span><br>                <span class="hljs-keyword">int</span> count2 = next(o2).size();<br>                <span class="hljs-keyword">if</span> (count1 &lt; count2)&#123;<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (count1 == count2) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
